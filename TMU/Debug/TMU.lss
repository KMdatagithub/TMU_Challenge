
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000136a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000136a  000013fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000292  00800066  00800066  00001404  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000283e  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bba  00000000  00000000  00003f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a3e  00000000  00000000  00004b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000828  00000000  00000000  00005540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bdb  00000000  00000000  00005d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002434  00000000  00000000  00006943  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00008d77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 a9 04 	jmp	0x952	; 0x952 <__vector_4>
      14:	0c 94 80 04 	jmp	0x900	; 0x900 <__vector_5>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__vector_7>
      20:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__vector_8>
      24:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__vector_9>
      28:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__vector_10>
      2c:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__vector_11>
      30:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__vector_12>
      34:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__vector_13>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__vector_15>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      54:	b7 02       	muls	r27, r23
      56:	de 02       	muls	r29, r30
      58:	bc 02       	muls	r27, r28
      5a:	c2 02       	muls	r28, r18
      5c:	c7 02       	muls	r28, r23
      5e:	cd 02       	muls	r28, r29
      60:	d3 02       	muls	r29, r19
      62:	d8 02       	muls	r29, r24
      64:	28 03       	fmul	r18, r16
      66:	61 03       	mulsu	r22, r17
      68:	2f 03       	fmul	r18, r23
      6a:	38 03       	fmul	r19, r16
      6c:	3f 03       	fmul	r19, r23
      6e:	48 03       	fmul	r20, r16
      70:	51 03       	mulsu	r21, r17
      72:	58 03       	fmul	r21, r16
      74:	aa 03       	fmulsu	r18, r18
      76:	d3 03       	fmuls	r21, r19
      78:	af 03       	fmulsu	r18, r23
      7a:	b5 03       	fmuls	r19, r21
      7c:	bb 03       	fmulsu	r19, r19
      7e:	c1 03       	fmuls	r20, r17
      80:	c7 03       	fmuls	r20, r23
      82:	cd 03       	fmulsu	r20, r21

00000084 <__ctors_end>:
      84:	11 24       	eor	r1, r1
      86:	1f be       	out	0x3f, r1	; 63
      88:	cf e5       	ldi	r28, 0x5F	; 95
      8a:	d8 e0       	ldi	r29, 0x08	; 8
      8c:	de bf       	out	0x3e, r29	; 62
      8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
      90:	10 e0       	ldi	r17, 0x00	; 0
      92:	a0 e6       	ldi	r26, 0x60	; 96
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ea e6       	ldi	r30, 0x6A	; 106
      98:	f3 e1       	ldi	r31, 0x13	; 19
      9a:	02 c0       	rjmp	.+4      	; 0xa0 <__do_copy_data+0x10>
      9c:	05 90       	lpm	r0, Z+
      9e:	0d 92       	st	X+, r0
      a0:	a6 36       	cpi	r26, 0x66	; 102
      a2:	b1 07       	cpc	r27, r17
      a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0xc>

000000a6 <__do_clear_bss>:
      a6:	22 e0       	ldi	r18, 0x02	; 2
      a8:	a6 e6       	ldi	r26, 0x66	; 102
      aa:	b0 e0       	ldi	r27, 0x00	; 0
      ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
      ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
      b0:	a8 3f       	cpi	r26, 0xF8	; 248
      b2:	b2 07       	cpc	r27, r18
      b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
      b6:	0e 94 b9 00 	call	0x172	; 0x172 <main>
      ba:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <txnotify>:
 *==========================================================================*/

/* TX Completion Notification Routine */
void txnotify(enum_BcmStatus st)
{
	BCM_sending = FALSE ;
      c2:	10 92 66 00 	sts	0x0066, r1
	g_UART_TXindex = ZERO;
      c6:	10 92 67 00 	sts	0x0067, r1
	BCM_DeInit(&BCM1);
      ca:	86 ef       	ldi	r24, 0xF6	; 246
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	0e 94 b4 07 	call	0xf68	; 0xf68 <BCM_DeInit>
      d2:	08 95       	ret

000000d4 <ToggleLED1>:

/*==========================================================================*/

void ToggleLED1()
{
	DIO_Toggle(g_LED1.GPIO, g_LED1.pins);
      d4:	ed ee       	ldi	r30, 0xED	; 237
      d6:	f2 e0       	ldi	r31, 0x02	; 2
      d8:	61 81       	ldd	r22, Z+1	; 0x01
      da:	80 81       	ld	r24, Z
      dc:	0e 94 82 01 	call	0x304	; 0x304 <DIO_Toggle>
      e0:	08 95       	ret

000000e2 <ToggleLED2>:
}
void ToggleLED2()
{
	DIO_Toggle(g_LED2.GPIO, g_LED2.pins);
      e2:	ee ee       	ldi	r30, 0xEE	; 238
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	61 81       	ldd	r22, Z+1	; 0x01
      e8:	80 81       	ld	r24, Z
      ea:	0e 94 82 01 	call	0x304	; 0x304 <DIO_Toggle>
      ee:	08 95       	ret

000000f0 <ToggleLED3>:
}
void ToggleLED3()
{
	DIO_Toggle(g_LED3.GPIO, g_LED3.pins);
      f0:	e0 ef       	ldi	r30, 0xF0	; 240
      f2:	f2 e0       	ldi	r31, 0x02	; 2
      f4:	61 81       	ldd	r22, Z+1	; 0x01
      f6:	80 81       	ld	r24, Z
      f8:	0e 94 82 01 	call	0x304	; 0x304 <DIO_Toggle>
      fc:	08 95       	ret

000000fe <CPU_Sleep>:

/*==========================================================================*/

void CPU_Sleep(void)
{
	sleep_enable();
      fe:	85 b7       	in	r24, 0x35	; 53
     100:	80 68       	ori	r24, 0x80	; 128
     102:	85 bf       	out	0x35, r24	; 53
	sei();
     104:	78 94       	sei
	sleep_cpu();
     106:	88 95       	sleep
     108:	08 95       	ret

0000010a <Init_LEDs>:
{
	DIO_Toggle(g_LED3.GPIO, g_LED3.pins);
}
;
void Init_LEDs(void)
{
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
	g_LED1.GPIO = GPIOD;
     112:	ed ee       	ldi	r30, 0xED	; 237
     114:	f2 e0       	ldi	r31, 0x02	; 2
     116:	13 e0       	ldi	r17, 0x03	; 3
     118:	10 83       	st	Z, r17
	g_LED1.dir  = OUTPUT;
     11a:	0f ef       	ldi	r16, 0xFF	; 255
     11c:	02 83       	std	Z+2, r16	; 0x02
	g_LED1.pins = BIT4;
     11e:	80 e1       	ldi	r24, 0x10	; 16
     120:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED1);
     122:	cf 01       	movw	r24, r30
     124:	0e 94 09 01 	call	0x212	; 0x212 <DIO_init>
	g_LED2.GPIO = GPIOD;
     128:	ee ee       	ldi	r30, 0xEE	; 238
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	10 83       	st	Z, r17
	g_LED2.dir  = OUTPUT;
     12e:	02 83       	std	Z+2, r16	; 0x02
	g_LED2.pins = BIT5;
     130:	80 e2       	ldi	r24, 0x20	; 32
     132:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED2);
     134:	cf 01       	movw	r24, r30
     136:	0e 94 09 01 	call	0x212	; 0x212 <DIO_init>
	g_LED3.GPIO = GPIOD;
     13a:	c0 ef       	ldi	r28, 0xF0	; 240
     13c:	d2 e0       	ldi	r29, 0x02	; 2
     13e:	18 83       	st	Y, r17
	g_LED3.dir  = OUTPUT;
     140:	0a 83       	std	Y+2, r16	; 0x02
	g_LED3.pins = BIT6;
     142:	80 e4       	ldi	r24, 0x40	; 64
     144:	89 83       	std	Y+1, r24	; 0x01
	DIO_init(&g_LED3);
     146:	ce 01       	movw	r24, r28
     148:	0e 94 09 01 	call	0x212	; 0x212 <DIO_init>
	DIO_Write(g_LED3.GPIO, g_LED3.pins, HIGH);
     14c:	4f ef       	ldi	r20, 0xFF	; 255
     14e:	69 81       	ldd	r22, Y+1	; 0x01
     150:	88 81       	ld	r24, Y
     152:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_Write>
	Test_Pin.dir = OUTPUT;
     156:	e3 ef       	ldi	r30, 0xF3	; 243
     158:	f2 e0       	ldi	r31, 0x02	; 2
     15a:	02 83       	std	Z+2, r16	; 0x02
	Test_Pin.GPIO = GPIOD;
     15c:	10 83       	st	Z, r17
	Test_Pin.pins = BIT0;
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&Test_Pin);
     162:	cf 01       	movw	r24, r30
     164:	0e 94 09 01 	call	0x212	; 0x212 <DIO_init>
}
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	08 95       	ret

00000172 <main>:
/*==========================================================================*/

int main(void)
{
	/*-------------[ LEDs Initialization ]-------------*/
	Init_LEDs();
     172:	0e 94 85 00 	call	0x10a	; 0x10a <Init_LEDs>
		
	/*-------------[ TMU Initialization ]-------------*/
	TMU1.Tick_Time = 1;
     176:	e1 ef       	ldi	r30, 0xF1	; 241
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	c1 e0       	ldi	r28, 0x01	; 1
     17c:	c0 83       	st	Z, r28
	TMU1.Timer_ID = TIMER_CH0;
     17e:	11 82       	std	Z+1, r1	; 0x01
	TMU_Init(&TMU1);
     180:	cf 01       	movw	r24, r30
     182:	0e 94 16 08 	call	0x102c	; 0x102c <TMU_Init>
	
	/*----------[ Start 3 Different Consumers ]---------*/
	/*[[ TMU_Srart(Consumer_FunPtr, ConsumerID, Periodicity, Time_IN_ms); ]]*/
	TMU_Start(ToggleLED1, 100, PERIODIC, 100);
     186:	04 e6       	ldi	r16, 0x64	; 100
     188:	10 e0       	ldi	r17, 0x00	; 0
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	41 e0       	ldi	r20, 0x01	; 1
     190:	64 e6       	ldi	r22, 0x64	; 100
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	8a e6       	ldi	r24, 0x6A	; 106
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 7d 08 	call	0x10fa	; 0x10fa <TMU_Start>
	TMU_Start(ToggleLED2, 110, PERIODIC, 300);
     19c:	0c e2       	ldi	r16, 0x2C	; 44
     19e:	11 e0       	ldi	r17, 0x01	; 1
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	41 e0       	ldi	r20, 0x01	; 1
     1a6:	6e e6       	ldi	r22, 0x6E	; 110
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	81 e7       	ldi	r24, 0x71	; 113
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 7d 08 	call	0x10fa	; 0x10fa <TMU_Start>
	TMU_Start(ToggleLED3, 120, ONESHOT, 3000);
     1b2:	08 eb       	ldi	r16, 0xB8	; 184
     1b4:	1b e0       	ldi	r17, 0x0B	; 11
     1b6:	20 e0       	ldi	r18, 0x00	; 0
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	40 e0       	ldi	r20, 0x00	; 0
     1bc:	68 e7       	ldi	r22, 0x78	; 120
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	88 e7       	ldi	r24, 0x78	; 120
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <TMU_Start>
	
	/*-------------[ BCM Initialization ]-------------*/
	BCM1.BCM_CH_ID = 1;
     1c8:	e6 ef       	ldi	r30, 0xF6	; 246
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	c1 83       	std	Z+1, r28	; 0x01
	BCM1.Mode = BCM_Tx_Mode;
     1ce:	10 82       	st	Z, r1
	BCM1.Protocol = SPI_Protocol;
     1d0:	c2 83       	std	Z+2, r28	; 0x02
	BCM_Init(&BCM1);
     1d2:	cf 01       	movw	r24, r30
     1d4:	0e 94 22 07 	call	0xe44	; 0xe44 <BCM_Init>
	BCM_Send(txBuffer, TRANSMIT_MAX, &BCM1, txnotify);
     1d8:	21 e6       	ldi	r18, 0x61	; 97
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	46 ef       	ldi	r20, 0xF6	; 246
     1de:	50 e0       	ldi	r21, 0x00	; 0
     1e0:	64 ef       	ldi	r22, 0xF4	; 244
     1e2:	71 e0       	ldi	r23, 0x01	; 1
     1e4:	89 ef       	ldi	r24, 0xF9	; 249
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 bf 07 	call	0xf7e	; 0xf7e <BCM_Send>
	
	/*-------------[ SUPER LOOP ]-------------*/
	while (1)
	{
		DIO_Write(Test_Pin.GPIO, Test_Pin.pins, HIGH);
     1ec:	c3 ef       	ldi	r28, 0xF3	; 243
     1ee:	d2 e0       	ldi	r29, 0x02	; 2
     1f0:	4f ef       	ldi	r20, 0xFF	; 255
     1f2:	69 81       	ldd	r22, Y+1	; 0x01
     1f4:	88 81       	ld	r24, Y
     1f6:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_Write>
		BCM_Tx_Dispatcher();
     1fa:	0e 94 ae 06 	call	0xd5c	; 0xd5c <BCM_Tx_Dispatcher>
		TMU_Dispatcher();
     1fe:	0e 94 34 09 	call	0x1268	; 0x1268 <TMU_Dispatcher>
		DIO_Write(Test_Pin.GPIO, Test_Pin.pins, LOW);
     202:	40 e0       	ldi	r20, 0x00	; 0
     204:	69 81       	ldd	r22, Y+1	; 0x01
     206:	88 81       	ld	r24, Y
     208:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_Write>
		CPU_Sleep();
     20c:	0e 94 7f 00 	call	0xfe	; 0xfe <CPU_Sleep>
	}
     210:	ef cf       	rjmp	.-34     	; 0x1f0 <main+0x7e>

00000212 <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
     212:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
     214:	89 2b       	or	r24, r25
     216:	e9 f1       	breq	.+122    	; 0x292 <DIO_init+0x80>
	{
		switch(DIO_info->GPIO)
     218:	80 81       	ld	r24, Z
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	99 f0       	breq	.+38     	; 0x244 <DIO_init+0x32>
     21e:	28 f0       	brcs	.+10     	; 0x22a <DIO_init+0x18>
     220:	82 30       	cpi	r24, 0x02	; 2
     222:	e9 f0       	breq	.+58     	; 0x25e <DIO_init+0x4c>
     224:	83 30       	cpi	r24, 0x03	; 3
     226:	41 f1       	breq	.+80     	; 0x278 <DIO_init+0x66>
     228:	37 c0       	rjmp	.+110    	; 0x298 <DIO_init+0x86>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
     22a:	81 81       	ldd	r24, Z+1	; 0x01
     22c:	2a b3       	in	r18, 0x1a	; 26
     22e:	98 2f       	mov	r25, r24
     230:	90 95       	com	r25
     232:	29 23       	and	r18, r25
     234:	92 81       	ldd	r25, Z+2	; 0x02
     236:	98 23       	and	r25, r24
     238:	82 2f       	mov	r24, r18
     23a:	89 2b       	or	r24, r25
     23c:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
			break;
     242:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
     244:	81 81       	ldd	r24, Z+1	; 0x01
     246:	27 b3       	in	r18, 0x17	; 23
     248:	98 2f       	mov	r25, r24
     24a:	90 95       	com	r25
     24c:	29 23       	and	r18, r25
     24e:	92 81       	ldd	r25, Z+2	; 0x02
     250:	98 23       	and	r25, r24
     252:	82 2f       	mov	r24, r18
     254:	89 2b       	or	r24, r25
     256:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
			break;
     25c:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
     25e:	81 81       	ldd	r24, Z+1	; 0x01
     260:	24 b3       	in	r18, 0x14	; 20
     262:	98 2f       	mov	r25, r24
     264:	90 95       	com	r25
     266:	29 23       	and	r18, r25
     268:	92 81       	ldd	r25, Z+2	; 0x02
     26a:	98 23       	and	r25, r24
     26c:	82 2f       	mov	r24, r18
     26e:	89 2b       	or	r24, r25
     270:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
			break;
     276:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
     278:	81 81       	ldd	r24, Z+1	; 0x01
     27a:	21 b3       	in	r18, 0x11	; 17
     27c:	98 2f       	mov	r25, r24
     27e:	90 95       	com	r25
     280:	29 23       	and	r18, r25
     282:	92 81       	ldd	r25, Z+2	; 0x02
     284:	98 23       	and	r25, r24
     286:	82 2f       	mov	r24, r18
     288:	89 2b       	or	r24, r25
     28a:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	90 e0       	ldi	r25, 0x00	; 0
			break;
     290:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
     29c:	08 95       	ret

0000029e <DIO_Write>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write(uint8_t GPIO, uint8_t pins, uint8_t value)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
     29e:	81 30       	cpi	r24, 0x01	; 1
     2a0:	81 f0       	breq	.+32     	; 0x2c2 <DIO_Write+0x24>
     2a2:	28 f0       	brcs	.+10     	; 0x2ae <DIO_Write+0x10>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	b9 f0       	breq	.+46     	; 0x2d6 <DIO_Write+0x38>
     2a8:	83 30       	cpi	r24, 0x03	; 3
     2aa:	f9 f0       	breq	.+62     	; 0x2ea <DIO_Write+0x4c>
     2ac:	28 c0       	rjmp	.+80     	; 0x2fe <DIO_Write+0x60>
	{
		case GPIOA :
		PORTA_DATA = (pins & value) | (~pins & PORTA_DATA);
     2ae:	8b b3       	in	r24, 0x1b	; 27
     2b0:	96 2f       	mov	r25, r22
     2b2:	90 95       	com	r25
     2b4:	89 23       	and	r24, r25
     2b6:	46 23       	and	r20, r22
     2b8:	48 2b       	or	r20, r24
     2ba:	4b bb       	out	0x1b, r20	; 27
		errorStatus = E_OK;
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
		break;
     2c0:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & value) | (~pins & PORTB_DATA);
     2c2:	88 b3       	in	r24, 0x18	; 24
     2c4:	96 2f       	mov	r25, r22
     2c6:	90 95       	com	r25
     2c8:	89 23       	and	r24, r25
     2ca:	46 23       	and	r20, r22
     2cc:	48 2b       	or	r20, r24
     2ce:	48 bb       	out	0x18, r20	; 24
		errorStatus = E_OK;
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
		break;
     2d4:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & value) | (~pins & PORTC_DATA);
     2d6:	85 b3       	in	r24, 0x15	; 21
     2d8:	96 2f       	mov	r25, r22
     2da:	90 95       	com	r25
     2dc:	89 23       	and	r24, r25
     2de:	46 23       	and	r20, r22
     2e0:	48 2b       	or	r20, r24
     2e2:	45 bb       	out	0x15, r20	; 21
		errorStatus = E_OK;
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
		break;
     2e8:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & value) | (~pins & PORTD_DATA);
     2ea:	82 b3       	in	r24, 0x12	; 18
     2ec:	96 2f       	mov	r25, r22
     2ee:	90 95       	com	r25
     2f0:	89 23       	and	r24, r25
     2f2:	46 23       	and	r20, r22
     2f4:	48 2b       	or	r20, r24
     2f6:	42 bb       	out	0x12, r20	; 18
		errorStatus = E_OK;
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	90 e0       	ldi	r25, 0x00	; 0
		break;
     2fc:	08 95       	ret
		default :
		errorStatus = E_NOK;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	return errorStatus;
}
     302:	08 95       	ret

00000304 <DIO_Toggle>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle(uint8_t GPIO, uint8_t pins)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
     304:	81 30       	cpi	r24, 0x01	; 1
     306:	91 f0       	breq	.+36     	; 0x32c <DIO_Toggle+0x28>
     308:	28 f0       	brcs	.+10     	; 0x314 <DIO_Toggle+0x10>
     30a:	82 30       	cpi	r24, 0x02	; 2
     30c:	d9 f0       	breq	.+54     	; 0x344 <DIO_Toggle+0x40>
     30e:	83 30       	cpi	r24, 0x03	; 3
     310:	29 f1       	breq	.+74     	; 0x35c <DIO_Toggle+0x58>
     312:	30 c0       	rjmp	.+96     	; 0x374 <DIO_Toggle+0x70>
	{
		case GPIOA :
		PORTA_DATA = (pins & (~PORTA_DATA)) | (~pins & PORTA_DATA);
     314:	8b b3       	in	r24, 0x1b	; 27
     316:	9b b3       	in	r25, 0x1b	; 27
     318:	26 2f       	mov	r18, r22
     31a:	20 95       	com	r18
     31c:	92 23       	and	r25, r18
     31e:	80 95       	com	r24
     320:	68 23       	and	r22, r24
     322:	69 2b       	or	r22, r25
     324:	6b bb       	out	0x1b, r22	; 27
		errorStatus = E_OK;
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	90 e0       	ldi	r25, 0x00	; 0
		break;
     32a:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & (~PORTB_DATA)) | (~pins & PORTB_DATA);
     32c:	88 b3       	in	r24, 0x18	; 24
     32e:	98 b3       	in	r25, 0x18	; 24
     330:	26 2f       	mov	r18, r22
     332:	20 95       	com	r18
     334:	92 23       	and	r25, r18
     336:	80 95       	com	r24
     338:	68 23       	and	r22, r24
     33a:	69 2b       	or	r22, r25
     33c:	68 bb       	out	0x18, r22	; 24
		errorStatus = E_OK;
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
		break;
     342:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & (~PORTC_DATA)) | (~pins & PORTC_DATA);
     344:	85 b3       	in	r24, 0x15	; 21
     346:	95 b3       	in	r25, 0x15	; 21
     348:	26 2f       	mov	r18, r22
     34a:	20 95       	com	r18
     34c:	92 23       	and	r25, r18
     34e:	80 95       	com	r24
     350:	68 23       	and	r22, r24
     352:	69 2b       	or	r22, r25
     354:	65 bb       	out	0x15, r22	; 21
		errorStatus = E_OK;
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
		break;
     35a:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & (~PORTD_DATA)) | (~pins & PORTD_DATA);
     35c:	82 b3       	in	r24, 0x12	; 18
     35e:	92 b3       	in	r25, 0x12	; 18
     360:	26 2f       	mov	r18, r22
     362:	20 95       	com	r18
     364:	92 23       	and	r25, r18
     366:	80 95       	com	r24
     368:	68 23       	and	r22, r24
     36a:	69 2b       	or	r22, r25
     36c:	62 bb       	out	0x12, r22	; 18
		errorStatus = E_OK;
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
		break;
     372:	08 95       	ret
		default :
		errorStatus = E_NOK;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	return errorStatus;
}
     378:	08 95       	ret

0000037a <_SPIInitMaster>:
#include "SPI__.h"

 void (*PTR_CALL_BACK)(void);
 volatile uint8_t g_u8_RxFlag = TRUE;

extern void _SPIInitMaster(SPI_cfg_s * a_SPI_cfg){
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	00 d0       	rcall	.+0      	; 0x380 <_SPIInitMaster+0x6>
     380:	00 d0       	rcall	.+0      	; 0x382 <_SPIInitMaster+0x8>
     382:	00 d0       	rcall	.+0      	; 0x384 <_SPIInitMaster+0xa>
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	fc 01       	movw	r30, r24
		DIO_Cfg_s SPI_output_pins ;
		
	
	
		/* clear status register */
		SPSR = ZERO ;
     38a:	1e b8       	out	0x0e, r1	; 14
		
		/* clear control mode */
		
		SPCR = ZERO ;
     38c:	1d b8       	out	0x0d, r1	; 13
		
		/* master or slave bit 4 */
		SPCR |= Master_SPI ; 
     38e:	6c 9a       	sbi	0x0d, 4	; 13
		
		/*set clock*/
		 
		SPCR|= a_SPI_cfg-> clockSPI ;
     390:	9d b1       	in	r25, 0x0d	; 13
     392:	80 81       	ld	r24, Z
     394:	89 2b       	or	r24, r25
     396:	8d b9       	out	0x0d, r24	; 13
		
		/* data order update */
		
		SPCR|= a_SPI_cfg-> dataorder ;
     398:	9d b1       	in	r25, 0x0d	; 13
     39a:	82 81       	ldd	r24, Z+2	; 0x02
     39c:	89 2b       	or	r24, r25
     39e:	8d b9       	out	0x0d, r24	; 13
		
		/* set phase bit2 and polarity bit3 */
		
		 SPCR |= a_SPI_cfg-> phasePolarityMode;
     3a0:	9d b1       	in	r25, 0x0d	; 13
     3a2:	81 81       	ldd	r24, Z+1	; 0x01
     3a4:	89 2b       	or	r24, r25
     3a6:	8d b9       	out	0x0d, r24	; 13
		
		/* set interrupt  */
		
		SPCR |= INTERRUPT_SPI ;
     3a8:	6f 9a       	sbi	0x0d, 7	; 13
		
		/*set interrupt call back function */
		
		PTR_CALL_BACK = a_SPI_cfg->ptr_call_back ;
     3aa:	83 81       	ldd	r24, Z+3	; 0x03
     3ac:	94 81       	ldd	r25, Z+4	; 0x04
     3ae:	90 93 f7 02 	sts	0x02F7, r25
     3b2:	80 93 f6 02 	sts	0x02F6, r24
	//SS   bit4 OUTPUT
	//MOSI bit5 OUTPUT
	//MISO bit6 INPUT
	//SCK  bit7 OUTPUT

	SPI_input_pins.GPIO = SPI_PORT ;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	89 83       	std	Y+1, r24	; 0x01
	SPI_input_pins.pins = MISO_PIN ;
     3ba:	90 e4       	ldi	r25, 0x40	; 64
     3bc:	9a 83       	std	Y+2, r25	; 0x02
	SPI_input_pins.dir = INPUT ;
     3be:	1b 82       	std	Y+3, r1	; 0x03
	
	SPI_output_pins.GPIO = SPI_PORT ;
     3c0:	8c 83       	std	Y+4, r24	; 0x04
	SPI_output_pins.pins =  SCK_PIN|MOSI_PIN|SS_PIN ;
     3c2:	80 eb       	ldi	r24, 0xB0	; 176
     3c4:	8d 83       	std	Y+5, r24	; 0x05
	SPI_output_pins.dir = OUTPUT ;
     3c6:	8f ef       	ldi	r24, 0xFF	; 255
     3c8:	8e 83       	std	Y+6, r24	; 0x06
	
	DIO_init(&SPI_output_pins);
     3ca:	ce 01       	movw	r24, r28
     3cc:	04 96       	adiw	r24, 0x04	; 4
     3ce:	0e 94 09 01 	call	0x212	; 0x212 <DIO_init>
	DIO_init(&SPI_input_pins);
     3d2:	ce 01       	movw	r24, r28
     3d4:	01 96       	adiw	r24, 0x01	; 1
     3d6:	0e 94 09 01 	call	0x212	; 0x212 <DIO_init>
	
		
	/// enable SPI bit 6
	
	sei();
     3da:	78 94       	sei
	SPCR |= Enable_SPI ;
     3dc:	6e 9a       	sbi	0x0d, 6	; 13
	
}
     3de:	26 96       	adiw	r28, 0x06	; 6
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	f8 94       	cli
     3e4:	de bf       	out	0x3e, r29	; 62
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	cd bf       	out	0x3d, r28	; 61
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <_SPIInitSlave>:

extern void _SPIInitSlave(SPI_cfg_s * a_SPI_cfg ){
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <_SPIInitSlave+0x6>
     3f6:	00 d0       	rcall	.+0      	; 0x3f8 <_SPIInitSlave+0x8>
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <_SPIInitSlave+0xa>
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	fc 01       	movw	r30, r24
	DIO_Cfg_s SPI_output_pins ;
			
			
	
	//// clear status register
	SPSR = ZERO ;
     400:	1e b8       	out	0x0e, r1	; 14
	
	/// clear control mode
	
	SPCR = ZERO ;
     402:	1d b8       	out	0x0d, r1	; 13
	
	
	// master or slave bit 4
	SPCR |= Slave_SPI ;
     404:	8d b1       	in	r24, 0x0d	; 13
     406:	8d b9       	out	0x0d, r24	; 13
	
	/// data order update
	
	SPCR|=a_SPI_cfg-> dataorder ;
     408:	9d b1       	in	r25, 0x0d	; 13
     40a:	82 81       	ldd	r24, Z+2	; 0x02
     40c:	89 2b       	or	r24, r25
     40e:	8d b9       	out	0x0d, r24	; 13
	
	//set clock
	
	SPCR |= a_SPI_cfg-> clockSPI ;
     410:	9d b1       	in	r25, 0x0d	; 13
     412:	80 81       	ld	r24, Z
     414:	89 2b       	or	r24, r25
     416:	8d b9       	out	0x0d, r24	; 13
	
	// set phase and polarity
	SPCR |=a_SPI_cfg -> phasePolarityMode ;
     418:	9d b1       	in	r25, 0x0d	; 13
     41a:	81 81       	ldd	r24, Z+1	; 0x01
     41c:	89 2b       	or	r24, r25
     41e:	8d b9       	out	0x0d, r24	; 13
	
	/* set interrupt  */
	SPCR |= INTERRUPT_SPI ;
     420:	6f 9a       	sbi	0x0d, 7	; 13
	
	/*set interrupt call back function */
		
	PTR_CALL_BACK = a_SPI_cfg->ptr_call_back ;
     422:	83 81       	ldd	r24, Z+3	; 0x03
     424:	94 81       	ldd	r25, Z+4	; 0x04
     426:	90 93 f7 02 	sts	0x02F7, r25
     42a:	80 93 f6 02 	sts	0x02F6, r24
	//SS   bit4 INPUT
	//MOSI bit5 INPUT
	//MISO bit6 OUTPUT
	//SCK  bit7 INPUT

	SPI_input_pins.GPIO = SPI_PORT ;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	89 83       	std	Y+1, r24	; 0x01
	SPI_input_pins.pins =  SCK_PIN|MOSI_PIN|SS_PIN ;
     432:	90 eb       	ldi	r25, 0xB0	; 176
     434:	9a 83       	std	Y+2, r25	; 0x02
	SPI_input_pins.dir = INPUT ;
     436:	1b 82       	std	Y+3, r1	; 0x03

	SPI_output_pins.GPIO = SPI_PORT ;
     438:	8c 83       	std	Y+4, r24	; 0x04
	SPI_output_pins.pins = MISO_PIN ;
     43a:	80 e4       	ldi	r24, 0x40	; 64
     43c:	8d 83       	std	Y+5, r24	; 0x05
	SPI_output_pins.dir = OUTPUT ;
     43e:	8f ef       	ldi	r24, 0xFF	; 255
     440:	8e 83       	std	Y+6, r24	; 0x06


	DIO_init(&SPI_output_pins);
     442:	ce 01       	movw	r24, r28
     444:	04 96       	adiw	r24, 0x04	; 4
     446:	0e 94 09 01 	call	0x212	; 0x212 <DIO_init>
	DIO_init(&SPI_input_pins);
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	0e 94 09 01 	call	0x212	; 0x212 <DIO_init>
	

	/// enable SPI bit 6
	sei();
     452:	78 94       	sei
	
	SPCR |= Enable_SPI ;
     454:	6e 9a       	sbi	0x0d, 6	; 13
	
		
	
}
     456:	26 96       	adiw	r28, 0x06	; 6
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	cd bf       	out	0x3d, r28	; 61
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <_SPISend>:
}

extern ERROR_STATUS _SPISend(uint8_t data)
{
	uint8_t state = E_NOK;	
	if(g_u8_RxFlag == TRUE)
     468:	90 91 60 00 	lds	r25, 0x0060
     46c:	91 30       	cpi	r25, 0x01	; 1
     46e:	29 f4       	brne	.+10     	; 0x47a <_SPISend+0x12>
	{
		SPDR = data;
     470:	8f b9       	out	0x0f, r24	; 15
		g_u8_RxFlag = FALSE;	
     472:	10 92 60 00 	sts	0x0060, r1
		state = E_OK;
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	01 c0       	rjmp	.+2      	; 0x47c <_SPISend+0x14>
	g_u8_RxFlag = FALSE ;
}

extern ERROR_STATUS _SPISend(uint8_t data)
{
	uint8_t state = E_NOK;	
     47a:	81 e0       	ldi	r24, 0x01	; 1
		SPDR = data;
		g_u8_RxFlag = FALSE;	
		state = E_OK;
	}
	return state;
}
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	08 95       	ret

00000480 <_SPIRead>:

extern ERROR_STATUS _SPIRead(uint8_t* data)
{
     480:	fc 01       	movw	r30, r24
	uint8_t state = E_NOK;
	if(g_u8_RxFlag == TRUE)
     482:	90 91 60 00 	lds	r25, 0x0060
     486:	91 30       	cpi	r25, 0x01	; 1
     488:	31 f4       	brne	.+12     	; 0x496 <_SPIRead+0x16>
	{
		*data = SPDR;
     48a:	8f b1       	in	r24, 0x0f	; 15
     48c:	80 83       	st	Z, r24
		g_u8_RxFlag = FALSE;
     48e:	10 92 60 00 	sts	0x0060, r1
		state = E_OK;
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	01 c0       	rjmp	.+2      	; 0x498 <_SPIRead+0x18>
	return state;
}

extern ERROR_STATUS _SPIRead(uint8_t* data)
{
	uint8_t state = E_NOK;
     496:	81 e0       	ldi	r24, 0x01	; 1
		*data = SPDR;
		g_u8_RxFlag = FALSE;
		state = E_OK;
	}
	return state;
}
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	08 95       	ret

0000049c <SPI_SetCBF>:


void SPI_SetCBF(FunPtr isr_ptr)
{
	PTR_CALL_BACK = isr_ptr;
     49c:	90 93 f7 02 	sts	0x02F7, r25
     4a0:	80 93 f6 02 	sts	0x02F6, r24
     4a4:	08 95       	ret

000004a6 <__vector_12>:
}

ISR(SPI_STC_vect)
{
     4a6:	1f 92       	push	r1
     4a8:	0f 92       	push	r0
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	0f 92       	push	r0
     4ae:	11 24       	eor	r1, r1
     4b0:	2f 93       	push	r18
     4b2:	3f 93       	push	r19
     4b4:	4f 93       	push	r20
     4b6:	5f 93       	push	r21
     4b8:	6f 93       	push	r22
     4ba:	7f 93       	push	r23
     4bc:	8f 93       	push	r24
     4be:	9f 93       	push	r25
     4c0:	af 93       	push	r26
     4c2:	bf 93       	push	r27
     4c4:	ef 93       	push	r30
     4c6:	ff 93       	push	r31
	g_u8_RxFlag = TRUE;
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	80 93 60 00 	sts	0x0060, r24
	PTR_CALL_BACK();
     4ce:	e0 91 f6 02 	lds	r30, 0x02F6
     4d2:	f0 91 f7 02 	lds	r31, 0x02F7
     4d6:	09 95       	icall
}
     4d8:	ff 91       	pop	r31
     4da:	ef 91       	pop	r30
     4dc:	bf 91       	pop	r27
     4de:	af 91       	pop	r26
     4e0:	9f 91       	pop	r25
     4e2:	8f 91       	pop	r24
     4e4:	7f 91       	pop	r23
     4e6:	6f 91       	pop	r22
     4e8:	5f 91       	pop	r21
     4ea:	4f 91       	pop	r20
     4ec:	3f 91       	pop	r19
     4ee:	2f 91       	pop	r18
     4f0:	0f 90       	pop	r0
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	0f 90       	pop	r0
     4f6:	1f 90       	pop	r1
     4f8:	18 95       	reti

000004fa <Timer_Init>:
 * Return: The error status of the function.			
 * Description: Initiates the module.
 * 							
 */
ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
     4fa:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
     4fc:	89 2b       	or	r24, r25
     4fe:	09 f4       	brne	.+2      	; 0x502 <Timer_Init+0x8>
     500:	5c c1       	rjmp	.+696    	; 0x7ba <Timer_Init+0x2c0>
	{
		// Check The Timer Channel Number & Init The Corresponding One
		switch(Timer_cfg->Timer_CH_NO)
     502:	80 81       	ld	r24, Z
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	09 f4       	brne	.+2      	; 0x50a <Timer_Init+0x10>
     508:	6f c0       	rjmp	.+222    	; 0x5e8 <Timer_Init+0xee>
     50a:	20 f0       	brcs	.+8      	; 0x514 <Timer_Init+0x1a>
     50c:	82 30       	cpi	r24, 0x02	; 2
     50e:	09 f4       	brne	.+2      	; 0x512 <Timer_Init+0x18>
     510:	f8 c0       	rjmp	.+496    	; 0x702 <Timer_Init+0x208>
     512:	56 c1       	rjmp	.+684    	; 0x7c0 <Timer_Init+0x2c6>
static ERROR_STATUS Timer0_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR0 =  Timer0_CMP_Mask;
     514:	88 e0       	ldi	r24, 0x08	; 8
     516:	83 bf       	out	0x33, r24	; 51
		OCR0  =  0x00;
     518:	1c be       	out	0x3c, r1	; 60
		TIMSK &= Timer0_Int_CLR_Mask;
     51a:	89 b7       	in	r24, 0x39	; 57
     51c:	8c 7f       	andi	r24, 0xFC	; 252
     51e:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	88 23       	and	r24, r24
     524:	19 f0       	breq	.+6      	; 0x52c <Timer_Init+0x32>
     526:	81 30       	cpi	r24, 0x01	; 1
     528:	21 f0       	breq	.+8      	; 0x532 <Timer_Init+0x38>
     52a:	0f c0       	rjmp	.+30     	; 0x54a <Timer_Init+0x50>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer0_Polling_Int_Mask;
     52c:	89 b7       	in	r24, 0x39	; 57
     52e:	89 bf       	out	0x39, r24	; 57
     530:	0c c0       	rjmp	.+24     	; 0x54a <Timer_Init+0x50>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer0_Interrupt_CMP_Int_Mask;
     532:	89 b7       	in	r24, 0x39	; 57
     534:	82 60       	ori	r24, 0x02	; 2
     536:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
     538:	8f b7       	in	r24, 0x3f	; 63
     53a:	80 68       	ori	r24, 0x80	; 128
     53c:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer0_CM = Timer_cfg->Timer_Cbk_ptr;
     53e:	84 81       	ldd	r24, Z+4	; 0x04
     540:	95 81       	ldd	r25, Z+5	; 0x05
     542:	90 93 71 00 	sts	0x0071, r25
     546:	80 93 70 00 	sts	0x0070, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
     54a:	81 81       	ldd	r24, Z+1	; 0x01
     54c:	81 30       	cpi	r24, 0x01	; 1
     54e:	d9 f1       	breq	.+118    	; 0x5c6 <Timer_Init+0xcc>
     550:	18 f0       	brcs	.+6      	; 0x558 <Timer_Init+0x5e>
     552:	82 30       	cpi	r24, 0x02	; 2
     554:	f1 f1       	breq	.+124    	; 0x5d2 <Timer_Init+0xd8>
     556:	43 c0       	rjmp	.+134    	; 0x5de <Timer_Init+0xe4>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
     558:	e3 81       	ldd	r30, Z+3	; 0x03
     55a:	8e 2f       	mov	r24, r30
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	88 30       	cpi	r24, 0x08	; 8
     560:	91 05       	cpc	r25, r1
     562:	60 f5       	brcc	.+88     	; 0x5bc <Timer_Init+0xc2>
     564:	fc 01       	movw	r30, r24
     566:	e6 5d       	subi	r30, 0xD6	; 214
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
     56e:	10 92 77 00 	sts	0x0077, r1
						errorStatus = E_OK;
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer0_Prescaler = TIMER0_PRESCALER_8;
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	80 93 77 00 	sts	0x0077, r24
						errorStatus = E_OK;
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
     584:	10 92 77 00 	sts	0x0077, r1
						errorStatus = E_NOK;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer0_Prescaler = TIMER0_PRESCALER_64;
     58e:	83 e0       	ldi	r24, 0x03	; 3
     590:	80 93 77 00 	sts	0x0077, r24
						errorStatus = E_OK;
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer0_Prescaler = TIMER0_PRESCALER_128;
     59a:	84 e0       	ldi	r24, 0x04	; 4
     59c:	80 93 77 00 	sts	0x0077, r24
						errorStatus = E_OK;
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
     5a6:	10 92 77 00 	sts	0x0077, r1
						errorStatus = E_NOK;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	08 95       	ret
						break;
					case TIMER_PRESCALER_1024 :
						Timer0_Prescaler = TIMER0_PRESCALER_1024;
     5b0:	85 e0       	ldi	r24, 0x05	; 5
     5b2:	80 93 77 00 	sts	0x0077, r24
						errorStatus = E_OK;
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	08 95       	ret
						break;
					default :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
     5bc:	10 92 77 00 	sts	0x0077, r1
						errorStatus = E_NOK;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	08 95       	ret
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_RISING;
     5c6:	87 e0       	ldi	r24, 0x07	; 7
     5c8:	80 93 77 00 	sts	0x0077, r24
				errorStatus = E_OK;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	08 95       	ret
				break;
			case COUNTER_DOWN_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_FALLING;
     5d2:	86 e0       	ldi	r24, 0x06	; 6
     5d4:	80 93 77 00 	sts	0x0077, r24
				errorStatus = E_OK;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	08 95       	ret
				break;
			default :
				Timer0_Prescaler = TIMER0_NO_CLOCK;
     5de:	10 92 77 00 	sts	0x0077, r1
				errorStatus = E_NOK;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	08 95       	ret
static ERROR_STATUS Timer1_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR1 = Timer1_CMP_Mask;
     5e8:	88 e0       	ldi	r24, 0x08	; 8
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	9f bd       	out	0x2f, r25	; 47
     5ee:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0x00;
     5f0:	1d bc       	out	0x2d, r1	; 45
     5f2:	1c bc       	out	0x2c, r1	; 44
		OCR1A = 0x00;
     5f4:	1b bc       	out	0x2b, r1	; 43
     5f6:	1a bc       	out	0x2a, r1	; 42
		TIMSK &= Timer1_Int_CLR_Mask;
     5f8:	89 b7       	in	r24, 0x39	; 57
     5fa:	83 7c       	andi	r24, 0xC3	; 195
     5fc:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
     5fe:	82 81       	ldd	r24, Z+2	; 0x02
     600:	88 23       	and	r24, r24
     602:	19 f0       	breq	.+6      	; 0x60a <Timer_Init+0x110>
     604:	81 30       	cpi	r24, 0x01	; 1
     606:	21 f0       	breq	.+8      	; 0x610 <Timer_Init+0x116>
     608:	0f c0       	rjmp	.+30     	; 0x628 <Timer_Init+0x12e>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer1_Polling_Int_Mask;
     60a:	89 b7       	in	r24, 0x39	; 57
     60c:	89 bf       	out	0x39, r24	; 57
     60e:	0c c0       	rjmp	.+24     	; 0x628 <Timer_Init+0x12e>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer1_OCA_Int_Mask;
     610:	89 b7       	in	r24, 0x39	; 57
     612:	80 61       	ori	r24, 0x10	; 16
     614:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
     616:	8f b7       	in	r24, 0x3f	; 63
     618:	80 68       	ori	r24, 0x80	; 128
     61a:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer1_CM = Timer_cfg->Timer_Cbk_ptr;
     61c:	84 81       	ldd	r24, Z+4	; 0x04
     61e:	95 81       	ldd	r25, Z+5	; 0x05
     620:	90 93 6d 00 	sts	0x006D, r25
     624:	80 93 6c 00 	sts	0x006C, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
     628:	81 81       	ldd	r24, Z+1	; 0x01
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	09 f4       	brne	.+2      	; 0x630 <Timer_Init+0x136>
     62e:	50 c0       	rjmp	.+160    	; 0x6d0 <Timer_Init+0x1d6>
     630:	20 f0       	brcs	.+8      	; 0x63a <Timer_Init+0x140>
     632:	82 30       	cpi	r24, 0x02	; 2
     634:	09 f4       	brne	.+2      	; 0x638 <Timer_Init+0x13e>
     636:	55 c0       	rjmp	.+170    	; 0x6e2 <Timer_Init+0x1e8>
     638:	5d c0       	rjmp	.+186    	; 0x6f4 <Timer_Init+0x1fa>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
     63a:	e3 81       	ldd	r30, Z+3	; 0x03
     63c:	8e 2f       	mov	r24, r30
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	88 30       	cpi	r24, 0x08	; 8
     642:	91 05       	cpc	r25, r1
     644:	f0 f5       	brcc	.+124    	; 0x6c2 <Timer_Init+0x1c8>
     646:	fc 01       	movw	r30, r24
     648:	ee 5c       	subi	r30, 0xCE	; 206
     64a:	ff 4f       	sbci	r31, 0xFF	; 255
     64c:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
     650:	10 92 76 00 	sts	0x0076, r1
     654:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_OK;
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer1_Prescaler = TIMER1_PRESCALER_8;
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	90 93 76 00 	sts	0x0076, r25
     666:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
     670:	10 92 76 00 	sts	0x0076, r1
     674:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_NOK;
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer1_Prescaler = TIMER1_PRESCALER_64;
     67e:	83 e0       	ldi	r24, 0x03	; 3
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	90 93 76 00 	sts	0x0076, r25
     686:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer1_Prescaler = TIMER1_PRESCALER_128;
     690:	84 e0       	ldi	r24, 0x04	; 4
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	90 93 76 00 	sts	0x0076, r25
     698:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
     6a2:	10 92 76 00 	sts	0x0076, r1
     6a6:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_NOK;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	08 95       	ret
						break;
					case TIMER_PRESCALER_1024 :
						Timer1_Prescaler = TIMER1_PRESCALER_1024;
     6b0:	85 e0       	ldi	r24, 0x05	; 5
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	90 93 76 00 	sts	0x0076, r25
     6b8:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	08 95       	ret
						break;
					default :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
     6c2:	10 92 76 00 	sts	0x0076, r1
     6c6:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_NOK;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	08 95       	ret
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_RISING;
     6d0:	87 e0       	ldi	r24, 0x07	; 7
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	90 93 76 00 	sts	0x0076, r25
     6d8:	80 93 75 00 	sts	0x0075, r24
				errorStatus = E_OK;
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	08 95       	ret
				break;
			case COUNTER_DOWN_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_FALLING;
     6e2:	86 e0       	ldi	r24, 0x06	; 6
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	90 93 76 00 	sts	0x0076, r25
     6ea:	80 93 75 00 	sts	0x0075, r24
				errorStatus = E_OK;
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	08 95       	ret
				break;
			default :
				Timer1_Prescaler = TIMER1_NO_CLOCK;
     6f4:	10 92 76 00 	sts	0x0076, r1
     6f8:	10 92 75 00 	sts	0x0075, r1
				errorStatus = E_NOK;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	08 95       	ret
static ERROR_STATUS Timer2_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR2 = Timer2_CMP_Mask;
     702:	88 e0       	ldi	r24, 0x08	; 8
     704:	85 bd       	out	0x25, r24	; 37
		TCNT2 = Timer2_TCNT_INIT_Mask;
     706:	14 bc       	out	0x24, r1	; 36
		TIMSK &= Timer1_Int_CLR_Mask;
     708:	89 b7       	in	r24, 0x39	; 57
     70a:	83 7c       	andi	r24, 0xC3	; 195
     70c:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
     70e:	82 81       	ldd	r24, Z+2	; 0x02
     710:	88 23       	and	r24, r24
     712:	19 f0       	breq	.+6      	; 0x71a <Timer_Init+0x220>
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	21 f0       	breq	.+8      	; 0x720 <Timer_Init+0x226>
     718:	0f c0       	rjmp	.+30     	; 0x738 <Timer_Init+0x23e>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer2_Polling_Int_Mask;
     71a:	89 b7       	in	r24, 0x39	; 57
     71c:	89 bf       	out	0x39, r24	; 57
     71e:	0c c0       	rjmp	.+24     	; 0x738 <Timer_Init+0x23e>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer2_Interrupt_CMP_Int_Mask;
     720:	89 b7       	in	r24, 0x39	; 57
     722:	80 68       	ori	r24, 0x80	; 128
     724:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
     726:	8f b7       	in	r24, 0x3f	; 63
     728:	80 68       	ori	r24, 0x80	; 128
     72a:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer2_CM = Timer_cfg->Timer_Cbk_ptr;
     72c:	84 81       	ldd	r24, Z+4	; 0x04
     72e:	95 81       	ldd	r25, Z+5	; 0x05
     730:	90 93 69 00 	sts	0x0069, r25
     734:	80 93 68 00 	sts	0x0068, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
     738:	81 81       	ldd	r24, Z+1	; 0x01
     73a:	81 11       	cpse	r24, r1
     73c:	39 c0       	rjmp	.+114    	; 0x7b0 <Timer_Init+0x2b6>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
     73e:	e3 81       	ldd	r30, Z+3	; 0x03
     740:	8e 2f       	mov	r24, r30
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	88 30       	cpi	r24, 0x08	; 8
     746:	91 05       	cpc	r25, r1
     748:	70 f5       	brcc	.+92     	; 0x7a6 <Timer_Init+0x2ac>
     74a:	fc 01       	movw	r30, r24
     74c:	e6 5c       	subi	r30, 0xC6	; 198
     74e:	ff 4f       	sbci	r31, 0xFF	; 255
     750:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
     754:	10 92 74 00 	sts	0x0074, r1
						errorStatus = E_OK;
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer2_Prescaler = TIMER2_PRESCALER_8;
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	80 93 74 00 	sts	0x0074, r24
						errorStatus = E_OK;
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer2_Prescaler = TIMER2_PRESCALER_32;
     76a:	83 e0       	ldi	r24, 0x03	; 3
     76c:	80 93 74 00 	sts	0x0074, r24
						errorStatus = E_OK;
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer2_Prescaler = TIMER2_PRESCALER_64;
     776:	84 e0       	ldi	r24, 0x04	; 4
     778:	80 93 74 00 	sts	0x0074, r24
						errorStatus = E_OK;
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer2_Prescaler = TIMER2_PRESCALER_128;
     782:	85 e0       	ldi	r24, 0x05	; 5
     784:	80 93 74 00 	sts	0x0074, r24
						errorStatus = E_OK;
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer2_Prescaler = TIMER2_PRESCALER_256;
     78e:	86 e0       	ldi	r24, 0x06	; 6
     790:	80 93 74 00 	sts	0x0074, r24
						errorStatus = E_OK;
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	08 95       	ret
						break;
						case TIMER_PRESCALER_1024 :
						Timer2_Prescaler = TIMER2_PRESCALER_1024;
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	80 93 74 00 	sts	0x0074, r24
						errorStatus = E_OK;
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	08 95       	ret
						break;
					default :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
     7a6:	10 92 74 00 	sts	0x0074, r1
						errorStatus = E_NOK;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	08 95       	ret
						break;
				}
				break;
			default :
				Timer2_Prescaler = TIMER2_NO_CLOCK;
     7b0:	10 92 74 00 	sts	0x0074, r1
				errorStatus = E_NOK;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	08 95       	ret
				break;
		}
	}
	else
	{
		errorStatus = E_NOK;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	08 95       	ret
				break;
			case TIMER_CH2 :
				errorStatus = Timer2_Init(Timer_cfg);
				break;
			default :
				errorStatus = E_NOK;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
     7c4:	08 95       	ret

000007c6 <Timer_Start>:
 */

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(Timer_CH_NO)
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	91 f0       	breq	.+36     	; 0x7ee <Timer_Start+0x28>
     7ca:	18 f0       	brcs	.+6      	; 0x7d2 <Timer_Start+0xc>
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	01 f1       	breq	.+64     	; 0x810 <Timer_Start+0x4a>
     7d0:	2d c0       	rjmp	.+90     	; 0x82c <Timer_Start+0x66>
	{
		case TIMER_CH0 :
			if(Timer_Count <= 255)
     7d2:	6f 3f       	cpi	r22, 0xFF	; 255
     7d4:	71 05       	cpc	r23, r1
     7d6:	09 f0       	breq	.+2      	; 0x7da <Timer_Start+0x14>
     7d8:	60 f5       	brcc	.+88     	; 0x832 <Timer_Start+0x6c>
			{
				TCNT0 = 0x00;
     7da:	12 be       	out	0x32, r1	; 50
				OCR0  = Timer_Count;
     7dc:	6c bf       	out	0x3c, r22	; 60
				TCCR0 |= Timer0_Prescaler;
     7de:	93 b7       	in	r25, 0x33	; 51
     7e0:	80 91 77 00 	lds	r24, 0x0077
     7e4:	89 2b       	or	r24, r25
     7e6:	83 bf       	out	0x33, r24	; 51
				errorStatus = E_OK;
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	08 95       	ret
			{
				errorStatus = E_NOK;
			}
			break;
		case TIMER_CH1 :
			TCNT1 = 0x0000;
     7ee:	1d bc       	out	0x2d, r1	; 45
     7f0:	1c bc       	out	0x2c, r1	; 44
			OCR1A = Timer_Count;
     7f2:	7b bd       	out	0x2b, r23	; 43
     7f4:	6a bd       	out	0x2a, r22	; 42
			TCCR1 |= Timer1_Prescaler;
     7f6:	2e b5       	in	r18, 0x2e	; 46
     7f8:	3f b5       	in	r19, 0x2f	; 47
     7fa:	80 91 75 00 	lds	r24, 0x0075
     7fe:	90 91 76 00 	lds	r25, 0x0076
     802:	82 2b       	or	r24, r18
     804:	93 2b       	or	r25, r19
     806:	9f bd       	out	0x2f, r25	; 47
     808:	8e bd       	out	0x2e, r24	; 46
			errorStatus = E_OK;
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	90 e0       	ldi	r25, 0x00	; 0
			break;
     80e:	08 95       	ret
		case TIMER_CH2 :
			if(Timer_Count <= 255)
     810:	6f 3f       	cpi	r22, 0xFF	; 255
     812:	71 05       	cpc	r23, r1
     814:	09 f0       	breq	.+2      	; 0x818 <Timer_Start+0x52>
     816:	80 f4       	brcc	.+32     	; 0x838 <Timer_Start+0x72>
			{
				TCNT2 = 0x00;
     818:	14 bc       	out	0x24, r1	; 36
				OCR2  = Timer_Count;
     81a:	63 bd       	out	0x23, r22	; 35
				TCCR2 |= Timer2_Prescaler;
     81c:	95 b5       	in	r25, 0x25	; 37
     81e:	80 91 74 00 	lds	r24, 0x0074
     822:	89 2b       	or	r24, r25
     824:	85 bd       	out	0x25, r24	; 37
				errorStatus = E_OK;
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	08 95       	ret
			{
				errorStatus = E_NOK;
			}
			break;
		default :
			errorStatus = E_NOK;
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	08 95       	ret
				TCCR0 |= Timer0_Prescaler;
				errorStatus = E_OK;
			}
			else
			{
				errorStatus = E_NOK;
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	08 95       	ret
				TCCR2 |= Timer2_Prescaler;
				errorStatus = E_OK;
			}
			else
			{
				errorStatus = E_NOK;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
		default :
			errorStatus = E_NOK;
			break;
	}
	return errorStatus;
}
     83c:	08 95       	ret

0000083e <TIMER0_SetCM>:
	Ptr_Timer0_OV = Ptr_ISR;
}

void TIMER0_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer0_CM = Ptr_ISR;
     83e:	90 93 71 00 	sts	0x0071, r25
     842:	80 93 70 00 	sts	0x0070, r24
     846:	08 95       	ret

00000848 <TIMER2_SetCM>:
	Ptr_Timer2_OV = Ptr_ISR;
}

void TIMER2_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer2_CM = Ptr_ISR;
     848:	90 93 69 00 	sts	0x0069, r25
     84c:	80 93 68 00 	sts	0x0068, r24
     850:	08 95       	ret

00000852 <TIMER1_SetCM>:
	Ptr_Timer1_OV = Ptr_ISR;
}

void TIMER1_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer1_CM = Ptr_ISR;
     852:	90 93 6d 00 	sts	0x006D, r25
     856:	80 93 6c 00 	sts	0x006C, r24
     85a:	08 95       	ret

0000085c <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
     85c:	1f 92       	push	r1
     85e:	0f 92       	push	r0
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	0f 92       	push	r0
     864:	11 24       	eor	r1, r1
     866:	2f 93       	push	r18
     868:	3f 93       	push	r19
     86a:	4f 93       	push	r20
     86c:	5f 93       	push	r21
     86e:	6f 93       	push	r22
     870:	7f 93       	push	r23
     872:	8f 93       	push	r24
     874:	9f 93       	push	r25
     876:	af 93       	push	r26
     878:	bf 93       	push	r27
     87a:	ef 93       	push	r30
     87c:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
     87e:	e0 91 72 00 	lds	r30, 0x0072
     882:	f0 91 73 00 	lds	r31, 0x0073
     886:	30 97       	sbiw	r30, 0x00	; 0
     888:	09 f0       	breq	.+2      	; 0x88c <__stack+0x2d>
	{
		Ptr_Timer0_OV();
     88a:	09 95       	icall
	}
}
     88c:	ff 91       	pop	r31
     88e:	ef 91       	pop	r30
     890:	bf 91       	pop	r27
     892:	af 91       	pop	r26
     894:	9f 91       	pop	r25
     896:	8f 91       	pop	r24
     898:	7f 91       	pop	r23
     89a:	6f 91       	pop	r22
     89c:	5f 91       	pop	r21
     89e:	4f 91       	pop	r20
     8a0:	3f 91       	pop	r19
     8a2:	2f 91       	pop	r18
     8a4:	0f 90       	pop	r0
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	0f 90       	pop	r0
     8aa:	1f 90       	pop	r1
     8ac:	18 95       	reti

000008ae <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	11 24       	eor	r1, r1
     8b8:	2f 93       	push	r18
     8ba:	3f 93       	push	r19
     8bc:	4f 93       	push	r20
     8be:	5f 93       	push	r21
     8c0:	6f 93       	push	r22
     8c2:	7f 93       	push	r23
     8c4:	8f 93       	push	r24
     8c6:	9f 93       	push	r25
     8c8:	af 93       	push	r26
     8ca:	bf 93       	push	r27
     8cc:	ef 93       	push	r30
     8ce:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
     8d0:	e0 91 70 00 	lds	r30, 0x0070
     8d4:	f0 91 71 00 	lds	r31, 0x0071
     8d8:	30 97       	sbiw	r30, 0x00	; 0
     8da:	09 f0       	breq	.+2      	; 0x8de <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
     8dc:	09 95       	icall
	}
}
     8de:	ff 91       	pop	r31
     8e0:	ef 91       	pop	r30
     8e2:	bf 91       	pop	r27
     8e4:	af 91       	pop	r26
     8e6:	9f 91       	pop	r25
     8e8:	8f 91       	pop	r24
     8ea:	7f 91       	pop	r23
     8ec:	6f 91       	pop	r22
     8ee:	5f 91       	pop	r21
     8f0:	4f 91       	pop	r20
     8f2:	3f 91       	pop	r19
     8f4:	2f 91       	pop	r18
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	0f 90       	pop	r0
     8fc:	1f 90       	pop	r1
     8fe:	18 95       	reti

00000900 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
     900:	1f 92       	push	r1
     902:	0f 92       	push	r0
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	0f 92       	push	r0
     908:	11 24       	eor	r1, r1
     90a:	2f 93       	push	r18
     90c:	3f 93       	push	r19
     90e:	4f 93       	push	r20
     910:	5f 93       	push	r21
     912:	6f 93       	push	r22
     914:	7f 93       	push	r23
     916:	8f 93       	push	r24
     918:	9f 93       	push	r25
     91a:	af 93       	push	r26
     91c:	bf 93       	push	r27
     91e:	ef 93       	push	r30
     920:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
     922:	e0 91 6a 00 	lds	r30, 0x006A
     926:	f0 91 6b 00 	lds	r31, 0x006B
     92a:	30 97       	sbiw	r30, 0x00	; 0
     92c:	09 f0       	breq	.+2      	; 0x930 <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
     92e:	09 95       	icall
	}
}
     930:	ff 91       	pop	r31
     932:	ef 91       	pop	r30
     934:	bf 91       	pop	r27
     936:	af 91       	pop	r26
     938:	9f 91       	pop	r25
     93a:	8f 91       	pop	r24
     93c:	7f 91       	pop	r23
     93e:	6f 91       	pop	r22
     940:	5f 91       	pop	r21
     942:	4f 91       	pop	r20
     944:	3f 91       	pop	r19
     946:	2f 91       	pop	r18
     948:	0f 90       	pop	r0
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	0f 90       	pop	r0
     94e:	1f 90       	pop	r1
     950:	18 95       	reti

00000952 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
     952:	1f 92       	push	r1
     954:	0f 92       	push	r0
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	0f 92       	push	r0
     95a:	11 24       	eor	r1, r1
     95c:	2f 93       	push	r18
     95e:	3f 93       	push	r19
     960:	4f 93       	push	r20
     962:	5f 93       	push	r21
     964:	6f 93       	push	r22
     966:	7f 93       	push	r23
     968:	8f 93       	push	r24
     96a:	9f 93       	push	r25
     96c:	af 93       	push	r26
     96e:	bf 93       	push	r27
     970:	ef 93       	push	r30
     972:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
     974:	e0 91 68 00 	lds	r30, 0x0068
     978:	f0 91 69 00 	lds	r31, 0x0069
     97c:	30 97       	sbiw	r30, 0x00	; 0
     97e:	09 f0       	breq	.+2      	; 0x982 <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
     980:	09 95       	icall
	}
}
     982:	ff 91       	pop	r31
     984:	ef 91       	pop	r30
     986:	bf 91       	pop	r27
     988:	af 91       	pop	r26
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	7f 91       	pop	r23
     990:	6f 91       	pop	r22
     992:	5f 91       	pop	r21
     994:	4f 91       	pop	r20
     996:	3f 91       	pop	r19
     998:	2f 91       	pop	r18
     99a:	0f 90       	pop	r0
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	0f 90       	pop	r0
     9a0:	1f 90       	pop	r1
     9a2:	18 95       	reti

000009a4 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     9a4:	1f 92       	push	r1
     9a6:	0f 92       	push	r0
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	0f 92       	push	r0
     9ac:	11 24       	eor	r1, r1
     9ae:	2f 93       	push	r18
     9b0:	3f 93       	push	r19
     9b2:	4f 93       	push	r20
     9b4:	5f 93       	push	r21
     9b6:	6f 93       	push	r22
     9b8:	7f 93       	push	r23
     9ba:	8f 93       	push	r24
     9bc:	9f 93       	push	r25
     9be:	af 93       	push	r26
     9c0:	bf 93       	push	r27
     9c2:	ef 93       	push	r30
     9c4:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
     9c6:	e0 91 6e 00 	lds	r30, 0x006E
     9ca:	f0 91 6f 00 	lds	r31, 0x006F
     9ce:	30 97       	sbiw	r30, 0x00	; 0
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <__vector_9+0x30>
	{
		Ptr_Timer1_OV();
     9d2:	09 95       	icall
	}
}
     9d4:	ff 91       	pop	r31
     9d6:	ef 91       	pop	r30
     9d8:	bf 91       	pop	r27
     9da:	af 91       	pop	r26
     9dc:	9f 91       	pop	r25
     9de:	8f 91       	pop	r24
     9e0:	7f 91       	pop	r23
     9e2:	6f 91       	pop	r22
     9e4:	5f 91       	pop	r21
     9e6:	4f 91       	pop	r20
     9e8:	3f 91       	pop	r19
     9ea:	2f 91       	pop	r18
     9ec:	0f 90       	pop	r0
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	0f 90       	pop	r0
     9f2:	1f 90       	pop	r1
     9f4:	18 95       	reti

000009f6 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     9f6:	1f 92       	push	r1
     9f8:	0f 92       	push	r0
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	0f 92       	push	r0
     9fe:	11 24       	eor	r1, r1
     a00:	2f 93       	push	r18
     a02:	3f 93       	push	r19
     a04:	4f 93       	push	r20
     a06:	5f 93       	push	r21
     a08:	6f 93       	push	r22
     a0a:	7f 93       	push	r23
     a0c:	8f 93       	push	r24
     a0e:	9f 93       	push	r25
     a10:	af 93       	push	r26
     a12:	bf 93       	push	r27
     a14:	ef 93       	push	r30
     a16:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
     a18:	e0 91 6c 00 	lds	r30, 0x006C
     a1c:	f0 91 6d 00 	lds	r31, 0x006D
     a20:	30 97       	sbiw	r30, 0x00	; 0
     a22:	09 f0       	breq	.+2      	; 0xa26 <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
     a24:	09 95       	icall
	}	
}
     a26:	ff 91       	pop	r31
     a28:	ef 91       	pop	r30
     a2a:	bf 91       	pop	r27
     a2c:	af 91       	pop	r26
     a2e:	9f 91       	pop	r25
     a30:	8f 91       	pop	r24
     a32:	7f 91       	pop	r23
     a34:	6f 91       	pop	r22
     a36:	5f 91       	pop	r21
     a38:	4f 91       	pop	r20
     a3a:	3f 91       	pop	r19
     a3c:	2f 91       	pop	r18
     a3e:	0f 90       	pop	r0
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	0f 90       	pop	r0
     a44:	1f 90       	pop	r1
     a46:	18 95       	reti

00000a48 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
     a6a:	e0 91 6c 00 	lds	r30, 0x006C
     a6e:	f0 91 6d 00 	lds	r31, 0x006D
     a72:	30 97       	sbiw	r30, 0x00	; 0
     a74:	09 f0       	breq	.+2      	; 0xa78 <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
     a76:	09 95       	icall
	}
}
     a78:	ff 91       	pop	r31
     a7a:	ef 91       	pop	r30
     a7c:	bf 91       	pop	r27
     a7e:	af 91       	pop	r26
     a80:	9f 91       	pop	r25
     a82:	8f 91       	pop	r24
     a84:	7f 91       	pop	r23
     a86:	6f 91       	pop	r22
     a88:	5f 91       	pop	r21
     a8a:	4f 91       	pop	r20
     a8c:	3f 91       	pop	r19
     a8e:	2f 91       	pop	r18
     a90:	0f 90       	pop	r0
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	0f 90       	pop	r0
     a96:	1f 90       	pop	r1
     a98:	18 95       	reti

00000a9a <UART_Init>:
FunPtr Ptr_UART_TX = NULL;
FunPtr Ptr_UART_RX = NULL;


void UART_Init(UART_cfg* uart_cfg)
{
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	ec 01       	movw	r28, r24
	uint8_t uart_control = 0x80;
	// Set The UART Baud Rate
	UBRRL = ((F_cpu/(16*uart_cfg->baudrate)) - 1);
     aa8:	8f 81       	ldd	r24, Y+7	; 0x07
     aaa:	98 85       	ldd	r25, Y+8	; 0x08
     aac:	a9 85       	ldd	r26, Y+9	; 0x09
     aae:	ba 85       	ldd	r27, Y+10	; 0x0a
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	aa 1f       	adc	r26, r26
     ab6:	bb 1f       	adc	r27, r27
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	aa 1f       	adc	r26, r26
     abe:	bb 1f       	adc	r27, r27
     ac0:	9c 01       	movw	r18, r24
     ac2:	ad 01       	movw	r20, r26
     ac4:	22 0f       	add	r18, r18
     ac6:	33 1f       	adc	r19, r19
     ac8:	44 1f       	adc	r20, r20
     aca:	55 1f       	adc	r21, r21
     acc:	22 0f       	add	r18, r18
     ace:	33 1f       	adc	r19, r19
     ad0:	44 1f       	adc	r20, r20
     ad2:	55 1f       	adc	r21, r21
     ad4:	0f 2e       	mov	r0, r31
     ad6:	c1 2c       	mov	r12, r1
     ad8:	f4 e2       	ldi	r31, 0x24	; 36
     ada:	df 2e       	mov	r13, r31
     adc:	f4 ef       	ldi	r31, 0xF4	; 244
     ade:	ef 2e       	mov	r14, r31
     ae0:	f1 2c       	mov	r15, r1
     ae2:	f0 2d       	mov	r31, r0
     ae4:	c7 01       	movw	r24, r14
     ae6:	b6 01       	movw	r22, r12
     ae8:	0e 94 8b 09 	call	0x1316	; 0x1316 <__udivmodsi4>
     aec:	21 50       	subi	r18, 0x01	; 1
     aee:	29 b9       	out	0x09, r18	; 9
	UBRRH = ((F_cpu/(16*uart_cfg->baudrate)) - 1)>>8;
     af0:	8f 81       	ldd	r24, Y+7	; 0x07
     af2:	98 85       	ldd	r25, Y+8	; 0x08
     af4:	a9 85       	ldd	r26, Y+9	; 0x09
     af6:	ba 85       	ldd	r27, Y+10	; 0x0a
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	aa 1f       	adc	r26, r26
     afe:	bb 1f       	adc	r27, r27
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	aa 1f       	adc	r26, r26
     b06:	bb 1f       	adc	r27, r27
     b08:	9c 01       	movw	r18, r24
     b0a:	ad 01       	movw	r20, r26
     b0c:	22 0f       	add	r18, r18
     b0e:	33 1f       	adc	r19, r19
     b10:	44 1f       	adc	r20, r20
     b12:	55 1f       	adc	r21, r21
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	44 1f       	adc	r20, r20
     b1a:	55 1f       	adc	r21, r21
     b1c:	c7 01       	movw	r24, r14
     b1e:	b6 01       	movw	r22, r12
     b20:	0e 94 8b 09 	call	0x1316	; 0x1316 <__udivmodsi4>
     b24:	da 01       	movw	r26, r20
     b26:	c9 01       	movw	r24, r18
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	a1 09       	sbc	r26, r1
     b2c:	b1 09       	sbc	r27, r1
     b2e:	89 2f       	mov	r24, r25
     b30:	9a 2f       	mov	r25, r26
     b32:	ab 2f       	mov	r26, r27
     b34:	bb 27       	eor	r27, r27
     b36:	80 bd       	out	0x20, r24	; 32
	// Set The UART Mode OF Operation
	UCSRB |= (uart_cfg->mode | uart_cfg->uartInterrupts);
     b38:	9a b1       	in	r25, 0x0a	; 10
     b3a:	88 81       	ld	r24, Y
     b3c:	89 2b       	or	r24, r25
     b3e:	9e 81       	ldd	r25, Y+6	; 0x06
     b40:	89 2b       	or	r24, r25
     b42:	8a b9       	out	0x0a, r24	; 10
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
	UCSRC |= uart_control;
     b44:	20 b5       	in	r18, 0x20	; 32
	// Set The UART Data Sampling Edge
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9d 81       	ldd	r25, Y+5	; 0x05
     b4a:	89 2b       	or	r24, r25
     b4c:	80 68       	ori	r24, 0x80	; 128
     b4e:	99 81       	ldd	r25, Y+1	; 0x01
     b50:	89 2b       	or	r24, r25
     b52:	9a 81       	ldd	r25, Y+2	; 0x02
     b54:	89 2b       	or	r24, r25
     b56:	9c 81       	ldd	r25, Y+4	; 0x04
     b58:	89 2b       	or	r24, r25
	UCSRC |= uart_control;
     b5a:	82 2b       	or	r24, r18
     b5c:	80 bd       	out	0x20, r24	; 32
	SREG  |= (0x80);
     b5e:	8f b7       	in	r24, 0x3f	; 63
     b60:	80 68       	ori	r24, 0x80	; 128
     b62:	8f bf       	out	0x3f, r24	; 63
}
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	08 95       	ret

00000b72 <UART_Read>:

uint8_t UART_Read(void)
{
	return UDR;
     b72:	8c b1       	in	r24, 0x0c	; 12
}
     b74:	08 95       	ret

00000b76 <UART_Write>:

void UART_Write(uint8_t data)
{
	// Wait For Empty Transmit Buffer
	while(!(UCSRA & (1<<5)));
     b76:	5d 9b       	sbis	0x0b, 5	; 11
     b78:	fe cf       	rjmp	.-4      	; 0xb76 <UART_Write>
	// Write The Data To The Buffer & Send!
	UDR = data;
     b7a:	8c b9       	out	0x0c, r24	; 12
     b7c:	08 95       	ret

00000b7e <UART_SetTX>:
/*-----------[ Timers Set CallBack Functions ]-----------*/
/*=======================================================*/

void UART_SetTX(FunPtr Ptr_ISR)
{
	Ptr_UART_TX = Ptr_ISR;
     b7e:	90 93 7b 00 	sts	0x007B, r25
     b82:	80 93 7a 00 	sts	0x007A, r24
     b86:	08 95       	ret

00000b88 <UART_SetRX>:
}

void UART_SetRX(FunPtr Ptr_ISR)
{
	Ptr_UART_RX = Ptr_ISR;
     b88:	90 93 79 00 	sts	0x0079, r25
     b8c:	80 93 78 00 	sts	0x0078, r24
     b90:	08 95       	ret

00000b92 <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
     b92:	1f 92       	push	r1
     b94:	0f 92       	push	r0
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	0f 92       	push	r0
     b9a:	11 24       	eor	r1, r1
     b9c:	2f 93       	push	r18
     b9e:	3f 93       	push	r19
     ba0:	4f 93       	push	r20
     ba2:	5f 93       	push	r21
     ba4:	6f 93       	push	r22
     ba6:	7f 93       	push	r23
     ba8:	8f 93       	push	r24
     baa:	9f 93       	push	r25
     bac:	af 93       	push	r26
     bae:	bf 93       	push	r27
     bb0:	ef 93       	push	r30
     bb2:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
     bb4:	e0 91 78 00 	lds	r30, 0x0078
     bb8:	f0 91 79 00 	lds	r31, 0x0079
     bbc:	30 97       	sbiw	r30, 0x00	; 0
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <__vector_13+0x30>
	{
		Ptr_UART_RX();
     bc0:	09 95       	icall
	}
}
     bc2:	ff 91       	pop	r31
     bc4:	ef 91       	pop	r30
     bc6:	bf 91       	pop	r27
     bc8:	af 91       	pop	r26
     bca:	9f 91       	pop	r25
     bcc:	8f 91       	pop	r24
     bce:	7f 91       	pop	r23
     bd0:	6f 91       	pop	r22
     bd2:	5f 91       	pop	r21
     bd4:	4f 91       	pop	r20
     bd6:	3f 91       	pop	r19
     bd8:	2f 91       	pop	r18
     bda:	0f 90       	pop	r0
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	0f 90       	pop	r0
     be0:	1f 90       	pop	r1
     be2:	18 95       	reti

00000be4 <__vector_15>:

ISR(USART_TXC_vect)
{
     be4:	1f 92       	push	r1
     be6:	0f 92       	push	r0
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	0f 92       	push	r0
     bec:	11 24       	eor	r1, r1
     bee:	2f 93       	push	r18
     bf0:	3f 93       	push	r19
     bf2:	4f 93       	push	r20
     bf4:	5f 93       	push	r21
     bf6:	6f 93       	push	r22
     bf8:	7f 93       	push	r23
     bfa:	8f 93       	push	r24
     bfc:	9f 93       	push	r25
     bfe:	af 93       	push	r26
     c00:	bf 93       	push	r27
     c02:	ef 93       	push	r30
     c04:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
     c06:	e0 91 7a 00 	lds	r30, 0x007A
     c0a:	f0 91 7b 00 	lds	r31, 0x007B
     c0e:	30 97       	sbiw	r30, 0x00	; 0
     c10:	09 f0       	breq	.+2      	; 0xc14 <__vector_15+0x30>
	{
		Ptr_UART_TX();
     c12:	09 95       	icall
	}
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	7f 91       	pop	r23
     c22:	6f 91       	pop	r22
     c24:	5f 91       	pop	r21
     c26:	4f 91       	pop	r20
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	0f 90       	pop	r0
     c32:	1f 90       	pop	r1
     c34:	18 95       	reti

00000c36 <BCM_Tx_ISR_cbf>:

/*------------[ BCM CallBacks]------------*/
/* BCM Transmit ISR Call-Back Function */

static void BCM_Tx_ISR_cbf(void)
{	if (g_BCM_EXcfg.FSM_State == SendingByte_State)
     c36:	80 91 84 00 	lds	r24, 0x0084
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	49 f4       	brne	.+18     	; 0xc50 <BCM_Tx_ISR_cbf+0x1a>
	{
		g_BCM_EXcfg.Count++;
     c3e:	e0 e8       	ldi	r30, 0x80	; 128
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	84 85       	ldd	r24, Z+12	; 0x0c
     c44:	95 85       	ldd	r25, Z+13	; 0x0d
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	95 87       	std	Z+13, r25	; 0x0d
     c4a:	84 87       	std	Z+12, r24	; 0x0c
		g_BCM_EXcfg.FSM_State = SendComplete_State;
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	84 83       	std	Z+4, r24	; 0x04
     c50:	08 95       	ret

00000c52 <BCM_Rx_ISR_cbf>:
	}
}

/* BCM Receive ISR Call-Back Function */
static void BCM_Rx_ISR_cbf(void)
{
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	1f 92       	push	r1
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
	uint8_t a_RX_Byte;
	switch(g_BCM_EXcfg.Protocol)
     c5c:	80 91 82 00 	lds	r24, 0x0082
     c60:	88 23       	and	r24, r24
     c62:	19 f0       	breq	.+6      	; 0xc6a <BCM_Rx_ISR_cbf+0x18>
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	29 f0       	breq	.+10     	; 0xc72 <BCM_Rx_ISR_cbf+0x20>
     c68:	08 c0       	rjmp	.+16     	; 0xc7a <BCM_Rx_ISR_cbf+0x28>
	{
		case UART_Protocol:
		{
			a_RX_Byte = UART_Read();
     c6a:	0e 94 b9 05 	call	0xb72	; 0xb72 <UART_Read>
     c6e:	89 83       	std	Y+1, r24	; 0x01
			break;
     c70:	04 c0       	rjmp	.+8      	; 0xc7a <BCM_Rx_ISR_cbf+0x28>
		}
		case SPI_Protocol:
		{
			_SPIRead(&a_RX_Byte);
     c72:	ce 01       	movw	r24, r28
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	0e 94 40 02 	call	0x480	; 0x480 <_SPIRead>
			break;
	}
	
	
	/* Read & Check The BCM Received ID */
	if(g_BCM_EXcfg.Count == 0)
     c7a:	80 91 8c 00 	lds	r24, 0x008C
     c7e:	90 91 8d 00 	lds	r25, 0x008D
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	a1 f4       	brne	.+40     	; 0xcae <BCM_Rx_ISR_cbf+0x5c>
	{
		g_Rx_ID = a_RX_Byte;
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	80 93 7f 00 	sts	0x007F, r24
	
		if(g_Rx_ID == BCM_ID)
     c8c:	80 91 7f 00 	lds	r24, 0x007F
     c90:	81 34       	cpi	r24, 0x41	; 65
     c92:	51 f4       	brne	.+20     	; 0xca8 <BCM_Rx_ISR_cbf+0x56>
		{
			
			g_ID_State = S_OK;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	80 93 7e 00 	sts	0x007E, r24
			g_BCM_EXcfg.Count++;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	90 93 8d 00 	sts	0x008D, r25
     ca2:	80 93 8c 00 	sts	0x008C, r24
     ca6:	56 c0       	rjmp	.+172    	; 0xd54 <BCM_Rx_ISR_cbf+0x102>
		}
		else
		{
			g_ID_State = S_NOK;
     ca8:	10 92 7e 00 	sts	0x007E, r1
     cac:	53 c0       	rjmp	.+166    	; 0xd54 <BCM_Rx_ISR_cbf+0x102>
	}
	/*-------------------[ ID IS CHECKED ]------------------*/
	/*------------------------------------------------------*/
	/*-------------------[ Save & CHECK MSG Len ]------------------*/
	/* Read & Check The BCM Received Data Length */
	else if(g_BCM_EXcfg.Count == 1)
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	91 05       	cpc	r25, r1
     cb2:	29 f5       	brne	.+74     	; 0xcfe <BCM_Rx_ISR_cbf+0xac>
	{
		if(a_RX_Byte > g_BCM_EXcfg.Buf_Len)
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	20 91 88 00 	lds	r18, 0x0088
     cbc:	30 91 89 00 	lds	r19, 0x0089
     cc0:	28 17       	cp	r18, r24
     cc2:	39 07       	cpc	r19, r25
     cc4:	78 f4       	brcc	.+30     	; 0xce4 <BCM_Rx_ISR_cbf+0x92>
		{
			g_LEN_State = S_NOK;
     cc6:	10 92 7d 00 	sts	0x007D, r1
			g_BCM_EXcfg.FSM_State = IDLE_State;
     cca:	e0 e8       	ldi	r30, 0x80	; 128
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	84 83       	std	Z+4, r24	; 0x04
			g_BCM_EXcfg.Count = ZERO;
     cd2:	15 86       	std	Z+13, r1	; 0x0d
     cd4:	14 86       	std	Z+12, r1	; 0x0c
			g_BCM_EXcfg.BCM_notify_cbf(g_LEN_State);
     cd6:	80 91 7d 00 	lds	r24, 0x007D
     cda:	06 84       	ldd	r0, Z+14	; 0x0e
     cdc:	f7 85       	ldd	r31, Z+15	; 0x0f
     cde:	e0 2d       	mov	r30, r0
     ce0:	09 95       	icall
     ce2:	38 c0       	rjmp	.+112    	; 0xd54 <BCM_Rx_ISR_cbf+0x102>
		}
		else
		{
			g_BCM_EXcfg.MSG_Len = a_RX_Byte;
     ce4:	e0 e8       	ldi	r30, 0x80	; 128
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	93 87       	std	Z+11, r25	; 0x0b
     cea:	82 87       	std	Z+10, r24	; 0x0a
			g_BCM_EXcfg.Count++;
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	95 87       	std	Z+13, r25	; 0x0d
     cf2:	84 87       	std	Z+12, r24	; 0x0c
			g_BCM_EXcfg.FSM_State = ReceivingByte_State;
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	84 83       	std	Z+4, r24	; 0x04
	ERROR_STATUS errorStatus = BCM_ERROR + E_OK;

	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_exBCM != NULL)
	{
		a_exBCM->Lock_State = Buffer_Locked;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	83 83       	std	Z+3, r24	; 0x03
     cfc:	2b c0       	rjmp	.+86     	; 0xd54 <BCM_Rx_ISR_cbf+0x102>
			g_BCM_EXcfg.Count++;
			g_BCM_EXcfg.FSM_State = ReceivingByte_State;
			BCM_Buffer_Lock(&g_BCM_EXcfg);
		}
	}
	else if(g_BCM_EXcfg.Count-2 < g_BCM_EXcfg.MSG_Len)
     cfe:	9c 01       	movw	r18, r24
     d00:	22 50       	subi	r18, 0x02	; 2
     d02:	31 09       	sbc	r19, r1
     d04:	40 91 8a 00 	lds	r20, 0x008A
     d08:	50 91 8b 00 	lds	r21, 0x008B
     d0c:	24 17       	cp	r18, r20
     d0e:	35 07       	cpc	r19, r21
     d10:	a8 f4       	brcc	.+42     	; 0xd3c <BCM_Rx_ISR_cbf+0xea>
	{
		g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2] = a_RX_Byte;
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	e0 e8       	ldi	r30, 0x80	; 128
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	46 81       	ldd	r20, Z+6	; 0x06
     d1a:	57 81       	ldd	r21, Z+7	; 0x07
     d1c:	da 01       	movw	r26, r20
     d1e:	a2 0f       	add	r26, r18
     d20:	b3 1f       	adc	r27, r19
     d22:	8c 93       	st	X, r24
		g_CS_Calculated += a_RX_Byte;
     d24:	90 91 7c 00 	lds	r25, 0x007C
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	89 0f       	add	r24, r25
     d2c:	80 93 7c 00 	sts	0x007C, r24
		g_BCM_EXcfg.Count++;
     d30:	84 85       	ldd	r24, Z+12	; 0x0c
     d32:	95 85       	ldd	r25, Z+13	; 0x0d
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	95 87       	std	Z+13, r25	; 0x0d
     d38:	84 87       	std	Z+12, r24	; 0x0c
     d3a:	0c c0       	rjmp	.+24     	; 0xd54 <BCM_Rx_ISR_cbf+0x102>
	}
	else if(g_BCM_EXcfg.Count-2 == g_BCM_EXcfg.MSG_Len)
     d3c:	24 17       	cp	r18, r20
     d3e:	35 07       	cpc	r19, r21
     d40:	49 f4       	brne	.+18     	; 0xd54 <BCM_Rx_ISR_cbf+0x102>
	{
		g_BCM_EXcfg.CheckSum = a_RX_Byte;
     d42:	e0 e8       	ldi	r30, 0x80	; 128
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	29 81       	ldd	r18, Y+1	; 0x01
     d48:	25 83       	std	Z+5, r18	; 0x05
		g_BCM_EXcfg.Count++;
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	95 87       	std	Z+13, r25	; 0x0d
     d4e:	84 87       	std	Z+12, r24	; 0x0c
		g_BCM_EXcfg.FSM_State = ReceiveComplete_State;
     d50:	85 e0       	ldi	r24, 0x05	; 5
     d52:	84 83       	std	Z+4, r24	; 0x04
	}
	else
	{	}
}
     d54:	0f 90       	pop	r0
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	08 95       	ret

00000d5c <BCM_Tx_Dispatcher>:
	}
}

/* TX Dispatcher */
void BCM_Tx_Dispatcher(void)
{	
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
	switch(g_BCM_EXcfg.FSM_State)
     d60:	80 91 84 00 	lds	r24, 0x0084
     d64:	83 30       	cpi	r24, 0x03	; 3
     d66:	09 f0       	breq	.+2      	; 0xd6a <BCM_Tx_Dispatcher+0xe>
     d68:	6a c0       	rjmp	.+212    	; 0xe3e <BCM_Tx_Dispatcher+0xe2>
		case IDLE_State :
			break;
		case SendingByte_State :
			break;
		case SendComplete_State :
		if(g_BCM_EXcfg.Count == 1)
     d6a:	80 91 8c 00 	lds	r24, 0x008C
     d6e:	90 91 8d 00 	lds	r25, 0x008D
     d72:	81 30       	cpi	r24, 0x01	; 1
     d74:	91 05       	cpc	r25, r1
     d76:	a1 f4       	brne	.+40     	; 0xda0 <BCM_Tx_Dispatcher+0x44>
		{
			switch(g_BCM_EXcfg.Protocol){
     d78:	80 91 82 00 	lds	r24, 0x0082
     d7c:	88 23       	and	r24, r24
     d7e:	19 f0       	breq	.+6      	; 0xd86 <BCM_Tx_Dispatcher+0x2a>
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	31 f0       	breq	.+12     	; 0xd90 <BCM_Tx_Dispatcher+0x34>
     d84:	09 c0       	rjmp	.+18     	; 0xd98 <BCM_Tx_Dispatcher+0x3c>
				case UART_Protocol :
				UART_Write(g_BCM_EXcfg.Buf_Len);
     d86:	80 91 88 00 	lds	r24, 0x0088
     d8a:	0e 94 bb 05 	call	0xb76	; 0xb76 <UART_Write>
				break;
     d8e:	04 c0       	rjmp	.+8      	; 0xd98 <BCM_Tx_Dispatcher+0x3c>
				case  SPI_Protocol :
				_SPISend(g_BCM_EXcfg.Buf_Len);
     d90:	80 91 88 00 	lds	r24, 0x0088
     d94:	0e 94 34 02 	call	0x468	; 0x468 <_SPISend>
				break;
			}
			g_BCM_EXcfg.FSM_State = SendingByte_State ;
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	80 93 84 00 	sts	0x0084, r24
     d9e:	4f c0       	rjmp	.+158    	; 0xe3e <BCM_Tx_Dispatcher+0xe2>
			
		}
		else if (g_BCM_EXcfg.Count <= g_BCM_EXcfg.Buf_Len+1)
     da0:	20 91 88 00 	lds	r18, 0x0088
     da4:	30 91 89 00 	lds	r19, 0x0089
     da8:	a9 01       	movw	r20, r18
     daa:	4f 5f       	subi	r20, 0xFF	; 255
     dac:	5f 4f       	sbci	r21, 0xFF	; 255
     dae:	48 17       	cp	r20, r24
     db0:	59 07       	cpc	r21, r25
     db2:	18 f1       	brcs	.+70     	; 0xdfa <BCM_Tx_Dispatcher+0x9e>
		{
			g_BCM_EXcfg.CheckSum +=g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2];
     db4:	a0 e8       	ldi	r26, 0x80	; 128
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	02 97       	sbiw	r24, 0x02	; 2
     dba:	16 96       	adiw	r26, 0x06	; 6
     dbc:	ed 91       	ld	r30, X+
     dbe:	fc 91       	ld	r31, X
     dc0:	17 97       	sbiw	r26, 0x07	; 7
     dc2:	e8 0f       	add	r30, r24
     dc4:	f9 1f       	adc	r31, r25
     dc6:	90 81       	ld	r25, Z
     dc8:	15 96       	adiw	r26, 0x05	; 5
     dca:	8c 91       	ld	r24, X
     dcc:	15 97       	sbiw	r26, 0x05	; 5
     dce:	89 0f       	add	r24, r25
     dd0:	15 96       	adiw	r26, 0x05	; 5
     dd2:	8c 93       	st	X, r24
     dd4:	15 97       	sbiw	r26, 0x05	; 5
			
			switch(g_BCM_EXcfg.Protocol){
     dd6:	12 96       	adiw	r26, 0x02	; 2
     dd8:	8c 91       	ld	r24, X
     dda:	88 23       	and	r24, r24
     ddc:	19 f0       	breq	.+6      	; 0xde4 <BCM_Tx_Dispatcher+0x88>
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	29 f0       	breq	.+10     	; 0xdec <BCM_Tx_Dispatcher+0x90>
     de2:	07 c0       	rjmp	.+14     	; 0xdf2 <BCM_Tx_Dispatcher+0x96>
				case UART_Protocol :
				UART_Write(g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2]);
     de4:	80 81       	ld	r24, Z
     de6:	0e 94 bb 05 	call	0xb76	; 0xb76 <UART_Write>
				break;
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <BCM_Tx_Dispatcher+0x96>
				case  SPI_Protocol :
				_SPISend(g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2]);	
     dec:	80 81       	ld	r24, Z
     dee:	0e 94 34 02 	call	0x468	; 0x468 <_SPISend>
				break;
			}
			g_BCM_EXcfg.FSM_State = SendingByte_State ;
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	80 93 84 00 	sts	0x0084, r24
     df8:	22 c0       	rjmp	.+68     	; 0xe3e <BCM_Tx_Dispatcher+0xe2>

			}else if (g_BCM_EXcfg.Count == g_BCM_EXcfg.Buf_Len+2){
     dfa:	2e 5f       	subi	r18, 0xFE	; 254
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
     dfe:	82 17       	cp	r24, r18
     e00:	93 07       	cpc	r25, r19
     e02:	a1 f4       	brne	.+40     	; 0xe2c <BCM_Tx_Dispatcher+0xd0>
			switch(g_BCM_EXcfg.Protocol){
     e04:	80 91 82 00 	lds	r24, 0x0082
     e08:	88 23       	and	r24, r24
     e0a:	19 f0       	breq	.+6      	; 0xe12 <BCM_Tx_Dispatcher+0xb6>
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	31 f0       	breq	.+12     	; 0xe1c <BCM_Tx_Dispatcher+0xc0>
     e10:	09 c0       	rjmp	.+18     	; 0xe24 <BCM_Tx_Dispatcher+0xc8>
				
				case UART_Protocol :
				UART_Write(g_BCM_EXcfg.CheckSum);
     e12:	80 91 85 00 	lds	r24, 0x0085
     e16:	0e 94 bb 05 	call	0xb76	; 0xb76 <UART_Write>
				break;
     e1a:	04 c0       	rjmp	.+8      	; 0xe24 <BCM_Tx_Dispatcher+0xc8>
				case  SPI_Protocol :
				_SPISend(g_BCM_EXcfg.CheckSum);
     e1c:	80 91 85 00 	lds	r24, 0x0085
     e20:	0e 94 34 02 	call	0x468	; 0x468 <_SPISend>
				break;
			}
			g_BCM_EXcfg.FSM_State = SendingByte_State ;
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	80 93 84 00 	sts	0x0084, r24
     e2a:	09 c0       	rjmp	.+18     	; 0xe3e <BCM_Tx_Dispatcher+0xe2>
	ERROR_STATUS errorStatus = BCM_ERROR + E_OK;

	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_exBCM != NULL)
	{
		a_exBCM->Lock_State = Buffer_Unlocked;
     e2c:	c0 e8       	ldi	r28, 0x80	; 128
     e2e:	d0 e0       	ldi	r29, 0x00	; 0
     e30:	1b 82       	std	Y+3, r1	; 0x03
			}
			g_BCM_EXcfg.FSM_State = SendingByte_State ;
			
			}else{
				BCM_TxUnlock(&g_BCM_EXcfg);
				g_BCM_EXcfg.BCM_notify_cbf(10);
     e32:	ee 85       	ldd	r30, Y+14	; 0x0e
     e34:	ff 85       	ldd	r31, Y+15	; 0x0f
     e36:	8a e0       	ldi	r24, 0x0A	; 10
     e38:	09 95       	icall
			g_BCM_EXcfg.FSM_State = IDLE_State ;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	8c 83       	std	Y+4, r24	; 0x04
		}
		break;
		case OFF_State :
		break;
	}	
}
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	08 95       	ret

00000e44 <BCM_Init>:
 * 							
 */


ERROR_STATUS BCM_Init(BCM_cfg_s* a_BCM)
{
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	60 97       	sbiw	r28, 0x10	; 16
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	UART_cfg  a_BCM_UART;
	SPI_cfg_s a_BCM_SPI; 
	
	if (g_BCM_EXcfg.FSM_State==IDLE_State)
     e58:	20 91 84 00 	lds	r18, 0x0084
     e5c:	21 30       	cpi	r18, 0x01	; 1
     e5e:	09 f4       	brne	.+2      	; 0xe62 <BCM_Init+0x1e>
     e60:	6f c0       	rjmp	.+222    	; 0xf40 <BCM_Init+0xfc>
		 return errorStatus ;
	}
	
	
	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_BCM != NULL)
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	09 f4       	brne	.+2      	; 0xe68 <BCM_Init+0x24>
     e66:	6f c0       	rjmp	.+222    	; 0xf46 <BCM_Init+0x102>
     e68:	dc 01       	movw	r26, r24
	{
		/*--------[ Add The BCM CFG To The Working List ]--------*/
		g_BCM_EXcfg.BCM_CH_ID = a_BCM->BCM_CH_ID;
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	8c 91       	ld	r24, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	e0 e8       	ldi	r30, 0x80	; 128
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	81 83       	std	Z+1, r24	; 0x01
		g_BCM_EXcfg.Mode      = a_BCM->Mode;
     e76:	9c 91       	ld	r25, X
     e78:	90 83       	st	Z, r25
		g_BCM_EXcfg.Protocol  = a_BCM->Protocol;
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	8c 91       	ld	r24, X
     e7e:	82 83       	std	Z+2, r24	; 0x02
		g_BCM_EXcfg.FSM_State = IDLE_State;
     e80:	21 e0       	ldi	r18, 0x01	; 1
     e82:	24 83       	std	Z+4, r18	; 0x04
		g_BCM_EXcfg.Count     = ZERO;
     e84:	15 86       	std	Z+13, r1	; 0x0d
     e86:	14 86       	std	Z+12, r1	; 0x0c
		g_BCM_EXcfg.CheckSum  = ZERO;
     e88:	15 82       	std	Z+5, r1	; 0x05
		g_BCM_EXcfg.Buf_Len   = ZERO;
     e8a:	11 86       	std	Z+9, r1	; 0x09
     e8c:	10 86       	std	Z+8, r1	; 0x08
		g_BCM_EXcfg.MSG_Len   = ZERO;
     e8e:	13 86       	std	Z+11, r1	; 0x0b
     e90:	12 86       	std	Z+10, r1	; 0x0a
		
		/*--------[ Check The BCM HW Communication Protocol ]--------*/
		switch(g_BCM_EXcfg.Protocol)
     e92:	88 23       	and	r24, r24
     e94:	19 f0       	breq	.+6      	; 0xe9c <BCM_Init+0x58>
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	61 f1       	breq	.+88     	; 0xef2 <BCM_Init+0xae>
     e9a:	58 c0       	rjmp	.+176    	; 0xf4c <BCM_Init+0x108>
		{
			/*----------------------[ UART CASE START ]---------------------*/
			case UART_Protocol:
			{
				a_BCM_UART.baudrate   = BCM_UART_BaudRate;
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	55 e2       	ldi	r21, 0x25	; 37
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	48 87       	std	Y+8, r20	; 0x08
     ea6:	59 87       	std	Y+9, r21	; 0x09
     ea8:	6a 87       	std	Y+10, r22	; 0x0a
     eaa:	7b 87       	std	Y+11, r23	; 0x0b
				a_BCM_UART.dataBits   = UART_Bits_8;
     eac:	86 e0       	ldi	r24, 0x06	; 6
     eae:	8a 83       	std	Y+2, r24	; 0x02
				a_BCM_UART.stopBits   = StopBits_1;
     eb0:	1d 82       	std	Y+5, r1	; 0x05
				a_BCM_UART.parity     = No_Parity;
     eb2:	1b 82       	std	Y+3, r1	; 0x03
				a_BCM_UART.sampleEdge = RisingEdg;
     eb4:	1e 82       	std	Y+6, r1	; 0x06
				a_BCM_UART.uartSync   = UART_Async;
     eb6:	1c 82       	std	Y+4, r1	; 0x04
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
     eb8:	99 23       	and	r25, r25
     eba:	19 f0       	breq	.+6      	; 0xec2 <BCM_Init+0x7e>
     ebc:	91 30       	cpi	r25, 0x01	; 1
     ebe:	51 f0       	breq	.+20     	; 0xed4 <BCM_Init+0x90>
     ec0:	11 c0       	rjmp	.+34     	; 0xee4 <BCM_Init+0xa0>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_UART.mode = UART_TX;
     ec2:	88 e0       	ldi	r24, 0x08	; 8
     ec4:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnTx;
     ec6:	80 e4       	ldi	r24, 0x40	; 64
     ec8:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						UART_SetTX(BCM_Tx_ISR_cbf);
     eca:	8b e1       	ldi	r24, 0x1B	; 27
     ecc:	96 e0       	ldi	r25, 0x06	; 6
     ece:	0e 94 bf 05 	call	0xb7e	; 0xb7e <UART_SetTX>
						break;
     ed2:	08 c0       	rjmp	.+16     	; 0xee4 <BCM_Init+0xa0>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_UART.mode = UART_RX;
     ed4:	80 e1       	ldi	r24, 0x10	; 16
     ed6:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnRx;
     ed8:	80 e8       	ldi	r24, 0x80	; 128
     eda:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						UART_SetRX(BCM_Rx_ISR_cbf);
     edc:	89 e2       	ldi	r24, 0x29	; 41
     ede:	96 e0       	ldi	r25, 0x06	; 6
     ee0:	0e 94 c4 05 	call	0xb88	; 0xb88 <UART_SetRX>
					}
					default:
						break;
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
     ee4:	ce 01       	movw	r24, r28
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_Init>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
     eec:	88 e5       	ldi	r24, 0x58	; 88
     eee:	92 e0       	ldi	r25, 0x02	; 2
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
				
				errorStatus = BCM_ERROR + E_OK;
				break;
     ef0:	32 c0       	rjmp	.+100    	; 0xf56 <BCM_Init+0x112>
			/*----------------------[ UART CASE END ]---------------------*/
			/*------------------------------------------------------------*/
			/*----------------------[ SPI CASE START ]--------------------*/
			case SPI_Protocol:
			{
				a_BCM_SPI.clockSPI = Fosc128;
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	8c 87       	std	Y+12, r24	; 0x0c
				a_BCM_SPI.dataorder = MSB;
     ef6:	1e 86       	std	Y+14, r1	; 0x0e
				a_BCM_SPI.phasePolarityMode = mode0;
     ef8:	1d 86       	std	Y+13, r1	; 0x0d
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
     efa:	99 23       	and	r25, r25
     efc:	19 f0       	breq	.+6      	; 0xf04 <BCM_Init+0xc0>
     efe:	91 30       	cpi	r25, 0x01	; 1
     f00:	81 f0       	breq	.+32     	; 0xf22 <BCM_Init+0xde>
     f02:	27 c0       	rjmp	.+78     	; 0xf52 <BCM_Init+0x10e>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_SPI.ptr_call_back = BCM_Tx_ISR_cbf;
     f04:	8b e1       	ldi	r24, 0x1B	; 27
     f06:	96 e0       	ldi	r25, 0x06	; 6
     f08:	98 8b       	std	Y+16, r25	; 0x10
     f0a:	8f 87       	std	Y+15, r24	; 0x0f
						_SPIInitMaster(&a_BCM_SPI);
     f0c:	ce 01       	movw	r24, r28
     f0e:	0c 96       	adiw	r24, 0x0c	; 12
     f10:	0e 94 bd 01 	call	0x37a	; 0x37a <_SPIInitMaster>
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Tx_ISR_cbf);
     f14:	8b e1       	ldi	r24, 0x1B	; 27
     f16:	96 e0       	ldi	r25, 0x06	; 6
     f18:	0e 94 4e 02 	call	0x49c	; 0x49c <SPI_SetCBF>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
     f1c:	88 e5       	ldi	r24, 0x58	; 88
     f1e:	92 e0       	ldi	r25, 0x02	; 2
					{
						a_BCM_SPI.ptr_call_back = BCM_Tx_ISR_cbf;
						_SPIInitMaster(&a_BCM_SPI);
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Tx_ISR_cbf);
						break;
     f20:	1a c0       	rjmp	.+52     	; 0xf56 <BCM_Init+0x112>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_SPI.ptr_call_back = BCM_Rx_ISR_cbf;
     f22:	89 e2       	ldi	r24, 0x29	; 41
     f24:	96 e0       	ldi	r25, 0x06	; 6
     f26:	98 8b       	std	Y+16, r25	; 0x10
     f28:	8f 87       	std	Y+15, r24	; 0x0f
						_SPIInitSlave(&a_BCM_SPI);
     f2a:	ce 01       	movw	r24, r28
     f2c:	0c 96       	adiw	r24, 0x0c	; 12
     f2e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_SPIInitSlave>
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Rx_ISR_cbf);
     f32:	89 e2       	ldi	r24, 0x29	; 41
     f34:	96 e0       	ldi	r25, 0x06	; 6
     f36:	0e 94 4e 02 	call	0x49c	; 0x49c <SPI_SetCBF>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
     f3a:	88 e5       	ldi	r24, 0x58	; 88
     f3c:	92 e0       	ldi	r25, 0x02	; 2
					{
						a_BCM_SPI.ptr_call_back = BCM_Rx_ISR_cbf;
						_SPIInitSlave(&a_BCM_SPI);
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Rx_ISR_cbf);
						break;
     f3e:	0b c0       	rjmp	.+22     	; 0xf56 <BCM_Init+0x112>
	SPI_cfg_s a_BCM_SPI; 
	
	if (g_BCM_EXcfg.FSM_State==IDLE_State)
	{
		 errorStatus =  BCM_ERROR + ALREADY_INIT ;
		 return errorStatus ;
     f40:	8b e5       	ldi	r24, 0x5B	; 91
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	08 c0       	rjmp	.+16     	; 0xf56 <BCM_Init+0x112>
	}
	/*-------------[ In Case Of BCM's Null Pointer ]-------------*/
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
     f46:	89 e5       	ldi	r24, 0x59	; 89
     f48:	92 e0       	ldi	r25, 0x02	; 2
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <BCM_Init+0x112>
				break;
			}
			/*----------------------[ SPI CASE END ]---------------------*/
			default:
				errorStatus = BCM_ERROR + INVALID_IN;
				return errorStatus;
     f4c:	8c e5       	ldi	r24, 0x5C	; 92
     f4e:	92 e0       	ldi	r25, 0x02	; 2
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <BCM_Init+0x112>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
     f52:	88 e5       	ldi	r24, 0x58	; 88
     f54:	92 e0       	ldi	r25, 0x02	; 2
}
     f56:	60 96       	adiw	r28, 0x10	; 16
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <BCM_DeInit>:

ERROR_STATUS BCM_DeInit(BCM_cfg_s* a_BCM)
{
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	
	if(a_BCM != NULL)
     f68:	89 2b       	or	r24, r25
     f6a:	31 f0       	breq	.+12     	; 0xf78 <BCM_DeInit+0x10>
	{	
		
		/*--------[ Search For That BCM CFG In The Working List ]--------*/
		if (g_BCM_EXcfg.FSM_State == IDLE_State)
     f6c:	80 91 84 00 	lds	r24, 0x0084
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	11 f4       	brne	.+4      	; 0xf78 <BCM_DeInit+0x10>
		{
			/*--------[ Set That BCM To OFF ]--------*/
			g_BCM_EXcfg.FSM_State = OFF_State;	
     f74:	10 92 84 00 	sts	0x0084, r1
	{
		return BCM_ERROR + NULL_PTR  ;
	}
	
	return errorStatus;
}
     f78:	89 e5       	ldi	r24, 0x59	; 89
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	08 95       	ret

00000f7e <BCM_Send>:
 * 							
 */


ERROR_STATUS BCM_Send(uint8_t* Buffer, uint16_t Buf_Len, BCM_cfg_s* My_BCM, Notify_FunPtr Notify_Ptr )
{
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
	ERROR_STATUS errorStatus = BCM_ERROR + E_OK;

	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(My_BCM != NULL && Buffer != NULL && Notify_Ptr != NULL)
     f82:	45 2b       	or	r20, r21
     f84:	61 f1       	breq	.+88     	; 0xfde <BCM_Send+0x60>
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	69 f1       	breq	.+90     	; 0xfe4 <BCM_Send+0x66>
     f8a:	21 15       	cp	r18, r1
     f8c:	31 05       	cpc	r19, r1
     f8e:	69 f1       	breq	.+90     	; 0xfea <BCM_Send+0x6c>
	{
		
		/* search for The corresponding BCM Struct ID */ 
		/* lock the buffer so user can't chance on it */
		if(g_BCM_EXcfg.Lock_State == Buffer_Unlocked)
     f90:	40 91 83 00 	lds	r20, 0x0083
     f94:	41 11       	cpse	r20, r1
     f96:	06 c0       	rjmp	.+12     	; 0xfa4 <BCM_Send+0x26>
	ERROR_STATUS errorStatus = BCM_ERROR + E_OK;

	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_exBCM != NULL)
	{
		a_exBCM->Lock_State = Buffer_Locked;
     f98:	41 e0       	ldi	r20, 0x01	; 1
     f9a:	40 93 83 00 	sts	0x0083, r20
 */


ERROR_STATUS BCM_Send(uint8_t* Buffer, uint16_t Buf_Len, BCM_cfg_s* My_BCM, Notify_FunPtr Notify_Ptr )
{
	ERROR_STATUS errorStatus = BCM_ERROR + E_OK;
     f9e:	d8 e5       	ldi	r29, 0x58	; 88
     fa0:	c2 e0       	ldi	r28, 0x02	; 2
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <BCM_Send+0x2a>
			BCM_Buffer_Lock(&g_BCM_EXcfg);
		}
		else
		{
			/* The Buffer IS Already Locked, Means It's Sending Now.. */
			errorStatus = BCM_ERROR + BUFFER_ALREADY_LOCKED;
     fa4:	d1 e6       	ldi	r29, 0x61	; 97
     fa6:	c2 e0       	ldi	r28, 0x02	; 2
		}
		
		/*set the buffer address, length, and notification function*/
		g_BCM_EXcfg.Buffer = Buffer;
     fa8:	e0 e8       	ldi	r30, 0x80	; 128
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	97 83       	std	Z+7, r25	; 0x07
     fae:	86 83       	std	Z+6, r24	; 0x06
		g_BCM_EXcfg.Buf_Len = Buf_Len;
     fb0:	71 87       	std	Z+9, r23	; 0x09
     fb2:	60 87       	std	Z+8, r22	; 0x08
		g_BCM_EXcfg.BCM_notify_cbf = Notify_Ptr;
     fb4:	37 87       	std	Z+15, r19	; 0x0f
     fb6:	26 87       	std	Z+14, r18	; 0x0e
		
		switch(g_BCM_EXcfg.Protocol)
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	88 23       	and	r24, r24
     fbc:	19 f0       	breq	.+6      	; 0xfc4 <BCM_Send+0x46>
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	29 f0       	breq	.+10     	; 0xfcc <BCM_Send+0x4e>
     fc2:	07 c0       	rjmp	.+14     	; 0xfd2 <BCM_Send+0x54>
		{	
			case UART_Protocol :
				UART_Write(BCM_ID);
     fc4:	81 e4       	ldi	r24, 0x41	; 65
     fc6:	0e 94 bb 05 	call	0xb76	; 0xb76 <UART_Write>
				break;
     fca:	03 c0       	rjmp	.+6      	; 0xfd2 <BCM_Send+0x54>
			case  SPI_Protocol :
				_SPISend(BCM_ID);
     fcc:	81 e4       	ldi	r24, 0x41	; 65
     fce:	0e 94 34 02 	call	0x468	; 0x468 <_SPISend>
				break;
		}
		g_BCM_EXcfg.FSM_State = SendingByte_State;
     fd2:	82 e0       	ldi	r24, 0x02	; 2
     fd4:	80 93 84 00 	sts	0x0084, r24
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
     fd8:	8d 2f       	mov	r24, r29
     fda:	9c 2f       	mov	r25, r28
     fdc:	08 c0       	rjmp	.+16     	; 0xfee <BCM_Send+0x70>
	}
	/*-------------[ In Case Of BCM's Null Pointer ]-------------*/
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
     fde:	89 e5       	ldi	r24, 0x59	; 89
     fe0:	92 e0       	ldi	r25, 0x02	; 2
     fe2:	05 c0       	rjmp	.+10     	; 0xfee <BCM_Send+0x70>
     fe4:	89 e5       	ldi	r24, 0x59	; 89
     fe6:	92 e0       	ldi	r25, 0x02	; 2
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <BCM_Send+0x70>
     fea:	89 e5       	ldi	r24, 0x59	; 89
     fec:	92 e0       	ldi	r25, 0x02	; 2
	}
	return errorStatus;
}
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <TMU_ISR_cbf>:


static void TMU_ISR_cbf(void)
{
	/* Adjust The Tick Time According To The TMU's Time Configuration */
	g_SysTicks++;
     ff4:	80 91 90 00 	lds	r24, 0x0090
     ff8:	90 91 91 00 	lds	r25, 0x0091
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	90 93 91 00 	sts	0x0091, r25
    1002:	80 93 90 00 	sts	0x0090, r24
	
	if(g_SysTicks == g_TMU_TickTime)
    1006:	20 91 90 00 	lds	r18, 0x0090
    100a:	30 91 91 00 	lds	r19, 0x0091
    100e:	80 91 92 00 	lds	r24, 0x0092
    1012:	90 91 93 00 	lds	r25, 0x0093
    1016:	28 17       	cp	r18, r24
    1018:	39 07       	cpc	r19, r25
    101a:	39 f4       	brne	.+14     	; 0x102a <TMU_ISR_cbf+0x36>
	{
		g_TMR_Ticks_Changed = TRUE;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	80 93 94 00 	sts	0x0094, r24
		g_SysTicks = FALSE;	
    1022:	10 92 91 00 	sts	0x0091, r1
    1026:	10 92 90 00 	sts	0x0090, r1
    102a:	08 95       	ret

0000102c <TMU_Init>:
{
	ERROR_STATUS errorStauts = E_OK;
	uint16_t index = 0;
	
	/*-------------[ Check TMU's Pointer Validity ]-------------*/
	if(a_TMU_s != NULL)
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	09 f4       	brne	.+2      	; 0x1032 <TMU_Init+0x6>
    1030:	5e c0       	rjmp	.+188    	; 0x10ee <TMU_Init+0xc2>
    1032:	fc 01       	movw	r30, r24
	{
		/*-------------[ TMU Initialization ]-------------*/
		g_TMU.Timer_ID  = a_TMU_s->Timer_ID;
    1034:	a1 e6       	ldi	r26, 0x61	; 97
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	81 81       	ldd	r24, Z+1	; 0x01
    103a:	11 96       	adiw	r26, 0x01	; 1
    103c:	8c 93       	st	X, r24
    103e:	11 97       	sbiw	r26, 0x01	; 1
		g_TMU.Tick_Time = a_TMU_s->Tick_Time;
    1040:	80 81       	ld	r24, Z
    1042:	8c 93       	st	X, r24
		g_TMU.Timer_Cbk_ptr = TMU_ISR_cbf;
    1044:	2a ef       	ldi	r18, 0xFA	; 250
    1046:	37 e0       	ldi	r19, 0x07	; 7
    1048:	14 96       	adiw	r26, 0x04	; 4
    104a:	3c 93       	st	X, r19
    104c:	2e 93       	st	-X, r18
    104e:	13 97       	sbiw	r26, 0x03	; 3
		g_TMU.State    = INACTIVE;
    1050:	12 96       	adiw	r26, 0x02	; 2
    1052:	1c 92       	st	X, r1
		g_TMU_TickTime = g_TMU.Tick_Time;
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	90 93 93 00 	sts	0x0093, r25
    105a:	80 93 92 00 	sts	0x0092, r24
		
		/*-------------[ Timer Initialization ]-------------*/
		g_TMU_TMR.Timer_Mode = TIMER_MODE;
    105e:	ad ed       	ldi	r26, 0xDD	; 221
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	11 96       	adiw	r26, 0x01	; 1
    1064:	1c 92       	st	X, r1
    1066:	11 97       	sbiw	r26, 0x01	; 1
		g_TMU_TMR.Timer_Prescaler = TIMER_PRESCALER_64;
    1068:	84 e0       	ldi	r24, 0x04	; 4
    106a:	13 96       	adiw	r26, 0x03	; 3
    106c:	8c 93       	st	X, r24
    106e:	13 97       	sbiw	r26, 0x03	; 3
		g_TMU_TMR.Timer_Polling_Or_Interrupt = TIMER_INTERRUPT_MODE;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	12 96       	adiw	r26, 0x02	; 2
    1074:	8c 93       	st	X, r24
    1076:	12 97       	sbiw	r26, 0x02	; 2
		g_TMU_TMR.Timer_Cbk_ptr = g_TMU.Timer_Cbk_ptr;
    1078:	15 96       	adiw	r26, 0x05	; 5
    107a:	3c 93       	st	X, r19
    107c:	2e 93       	st	-X, r18
    107e:	14 97       	sbiw	r26, 0x04	; 4
		
		/* Select The Timer Channel & Set It's CallBack Function */
		switch(a_TMU_s->Timer_ID)
    1080:	81 81       	ldd	r24, Z+1	; 0x01
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	59 f0       	breq	.+22     	; 0x109c <TMU_Init+0x70>
    1086:	18 f0       	brcs	.+6      	; 0x108e <TMU_Init+0x62>
    1088:	82 30       	cpi	r24, 0x02	; 2
    108a:	81 f0       	breq	.+32     	; 0x10ac <TMU_Init+0x80>
    108c:	33 c0       	rjmp	.+102    	; 0x10f4 <TMU_Init+0xc8>
		{
			case TIMER_CH0:
				g_TMU_TMR.Timer_CH_NO = TIMER_CH0;
    108e:	10 92 dd 00 	sts	0x00DD, r1
				TIMER0_SetCM(TMU_ISR_cbf);
    1092:	8a ef       	ldi	r24, 0xFA	; 250
    1094:	97 e0       	ldi	r25, 0x07	; 7
    1096:	0e 94 1f 04 	call	0x83e	; 0x83e <TIMER0_SetCM>
				break;
    109a:	0f c0       	rjmp	.+30     	; 0x10ba <TMU_Init+0x8e>
			case TIMER_CH1:
				g_TMU_TMR.Timer_CH_NO = TIMER_CH1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	80 93 dd 00 	sts	0x00DD, r24
				TIMER1_SetCM(TMU_ISR_cbf);
    10a2:	8a ef       	ldi	r24, 0xFA	; 250
    10a4:	97 e0       	ldi	r25, 0x07	; 7
    10a6:	0e 94 29 04 	call	0x852	; 0x852 <TIMER1_SetCM>
				break;
    10aa:	07 c0       	rjmp	.+14     	; 0x10ba <TMU_Init+0x8e>
			case TIMER_CH2:
				g_TMU_TMR.Timer_CH_NO = TIMER_CH2;
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	80 93 dd 00 	sts	0x00DD, r24
				TIMER2_SetCM(TMU_ISR_cbf);
    10b2:	8a ef       	ldi	r24, 0xFA	; 250
    10b4:	97 e0       	ldi	r25, 0x07	; 7
    10b6:	0e 94 24 04 	call	0x848	; 0x848 <TIMER2_SetCM>
				errorStauts = TMU_ERROR + INVALID_IN;
				return errorStauts;
		}
		
		/* Apply The Settings & Start The TMU Timer Hardware Module */
		Timer_Init(&g_TMU_TMR);
    10ba:	8d ed       	ldi	r24, 0xDD	; 221
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Timer_Init>
		Timer_Start(g_TMU_TMR.Timer_CH_NO, TMR_Ticks);	
    10c2:	6a ef       	ldi	r22, 0xFA	; 250
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	80 91 dd 00 	lds	r24, 0x00DD
    10ca:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <Timer_Start>
    10ce:	ee e9       	ldi	r30, 0x9E	; 158
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	84 ee       	ldi	r24, 0xE4	; 228
    10d4:	90 e0       	ldi	r25, 0x00	; 0
		
		/*  Initialize The Request Buffer  */
		for(index = 0; index < REQUEST_BUFFER_LEN; index++)
		{
			g_RequestBuffer[index].State = INACTIVE;
    10d6:	10 82       	st	Z, r1
    10d8:	df 01       	movw	r26, r30
    10da:	17 97       	sbiw	r26, 0x07	; 7
			g_RequestBuffer[index].Consumer_Ptr = NULL;
    10dc:	1d 92       	st	X+, r1
    10de:	1c 92       	st	X, r1
    10e0:	3e 96       	adiw	r30, 0x0e	; 14
		/* Apply The Settings & Start The TMU Timer Hardware Module */
		Timer_Init(&g_TMU_TMR);
		Timer_Start(g_TMU_TMR.Timer_CH_NO, TMR_Ticks);	
		
		/*  Initialize The Request Buffer  */
		for(index = 0; index < REQUEST_BUFFER_LEN; index++)
    10e2:	e8 17       	cp	r30, r24
    10e4:	f9 07       	cpc	r31, r25
    10e6:	b9 f7       	brne	.-18     	; 0x10d6 <TMU_Init+0xaa>
	else
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
	}
	return errorStauts;
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	08 95       	ret
	}
	/*-------------[ In Case Of TMU's Null Pointer ]-------------*/
	else
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
    10ee:	89 ec       	ldi	r24, 0xC9	; 201
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	08 95       	ret
				g_TMU_TMR.Timer_CH_NO = TIMER_CH2;
				TIMER2_SetCM(TMU_ISR_cbf);
				break;
			default:
				errorStauts = TMU_ERROR + INVALID_IN;
				return errorStauts;
    10f4:	8c ec       	ldi	r24, 0xCC	; 204
    10f6:	90 e0       	ldi	r25, 0x00	; 0
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
	}
	return errorStauts;
}
    10f8:	08 95       	ret

000010fa <TMU_Start>:


ERROR_STATUS TMU_Start(FunPtr a_ConsumerFun, uint16_t a_ConsumerID, uint8_t a_Periodic_OneShot, uint32_t a_Time)
{
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	fc 01       	movw	r30, r24
	a_NewConsumer.Time = a_Time;
	a_NewConsumer.Periodicity = a_Periodic_OneShot;
	a_NewConsumer.Count = ZERO;
	a_NewConsumer.State = ACTIVE;
	
	if(g_TMU.State == INACTIVE || g_TMU.State == ACTIVE)
    1104:	90 91 63 00 	lds	r25, 0x0063
    1108:	92 30       	cpi	r25, 0x02	; 2
    110a:	08 f0       	brcs	.+2      	; 0x110e <TMU_Start+0x14>
    110c:	9a c0       	rjmp	.+308    	; 0x1242 <TMU_Start+0x148>
	{
		/*-------------[ Check Consumer's CBF Pointer Validity ]-------------*/
		if(a_ConsumerFun != NULL)
    110e:	30 97       	sbiw	r30, 0x00	; 0
    1110:	09 f4       	brne	.+2      	; 0x1114 <TMU_Start+0x1a>
    1112:	9a c0       	rjmp	.+308    	; 0x1248 <TMU_Start+0x14e>
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
    1114:	80 91 95 00 	lds	r24, 0x0095
    1118:	90 91 96 00 	lds	r25, 0x0096
    111c:	05 97       	sbiw	r24, 0x05	; 5
    111e:	49 f0       	breq	.+18     	; 0x1132 <TMU_Start+0x38>
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].ConsumerID == a_ConsumerID)
    1120:	80 91 a3 00 	lds	r24, 0x00A3
    1124:	90 91 a4 00 	lds	r25, 0x00A4
    1128:	86 17       	cp	r24, r22
    112a:	97 07       	cpc	r25, r23
    112c:	09 f0       	breq	.+2      	; 0x1130 <TMU_Start+0x36>
    112e:	45 c0       	rjmp	.+138    	; 0x11ba <TMU_Start+0xc0>
    1130:	8e c0       	rjmp	.+284    	; 0x124e <TMU_Start+0x154>
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Consumer & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].State == INACTIVE)
    1132:	80 91 9e 00 	lds	r24, 0x009E
    1136:	88 23       	and	r24, r24
    1138:	41 f0       	breq	.+16     	; 0x114a <TMU_Start+0x50>
    113a:	ac ea       	ldi	r26, 0xAC	; 172
    113c:	b0 e0       	ldi	r27, 0x00	; 0
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Consumer & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
				{
					if(g_RequestBuffer[index].State == INACTIVE)
    1142:	5c 91       	ld	r21, X
    1144:	51 11       	cpse	r21, r1
    1146:	31 c0       	rjmp	.+98     	; 0x11aa <TMU_Start+0xb0>
    1148:	02 c0       	rjmp	.+4      	; 0x114e <TMU_Start+0x54>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
					{
						g_RequestBuffer[index] = a_NewConsumer;
    114e:	ec 01       	movw	r28, r24
    1150:	cc 0f       	add	r28, r28
    1152:	dd 1f       	adc	r29, r29
    1154:	de 01       	movw	r26, r28
    1156:	aa 0f       	add	r26, r26
    1158:	bb 1f       	adc	r27, r27
    115a:	aa 0f       	add	r26, r26
    115c:	bb 1f       	adc	r27, r27
    115e:	aa 0f       	add	r26, r26
    1160:	bb 1f       	adc	r27, r27
    1162:	ac 1b       	sub	r26, r28
    1164:	bd 0b       	sbc	r27, r29
    1166:	a9 56       	subi	r26, 0x69	; 105
    1168:	bf 4f       	sbci	r27, 0xFF	; 255
    116a:	11 96       	adiw	r26, 0x01	; 1
    116c:	fc 93       	st	X, r31
    116e:	ee 93       	st	-X, r30
    1170:	12 96       	adiw	r26, 0x02	; 2
    1172:	4c 93       	st	X, r20
    1174:	12 97       	sbiw	r26, 0x02	; 2
    1176:	13 96       	adiw	r26, 0x03	; 3
    1178:	0d 93       	st	X+, r16
    117a:	1d 93       	st	X+, r17
    117c:	2d 93       	st	X+, r18
    117e:	3c 93       	st	X, r19
    1180:	16 97       	sbiw	r26, 0x06	; 6
    1182:	21 e0       	ldi	r18, 0x01	; 1
    1184:	17 96       	adiw	r26, 0x07	; 7
    1186:	2c 93       	st	X, r18
    1188:	17 97       	sbiw	r26, 0x07	; 7
    118a:	18 96       	adiw	r26, 0x08	; 8
    118c:	1d 92       	st	X+, r1
    118e:	1d 92       	st	X+, r1
    1190:	1d 92       	st	X+, r1
    1192:	1c 92       	st	X, r1
    1194:	1b 97       	sbiw	r26, 0x0b	; 11
    1196:	1d 96       	adiw	r26, 0x0d	; 13
    1198:	7c 93       	st	X, r23
    119a:	6e 93       	st	-X, r22
    119c:	1c 97       	sbiw	r26, 0x0c	; 12
						break;
					}
				}
				/*  If All Consumers In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
    119e:	05 97       	sbiw	r24, 0x05	; 5
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <TMU_Start+0xaa>
    11a2:	58 c0       	rjmp	.+176    	; 0x1254 <TMU_Start+0x15a>
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	5a c0       	rjmp	.+180    	; 0x125e <TMU_Start+0x164>
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Consumer & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	1e 96       	adiw	r26, 0x0e	; 14
    11ae:	85 30       	cpi	r24, 0x05	; 5
    11b0:	91 05       	cpc	r25, r1
    11b2:	39 f6       	brne	.-114    	; 0x1142 <TMU_Start+0x48>
				}
				/*  If All Consumers In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
				{
					a_errorStatus = TMU_ERROR + FULL_BUFFER;
					return a_errorStatus;
    11b4:	8f ec       	ldi	r24, 0xCF	; 207
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	52 c0       	rjmp	.+164    	; 0x125e <TMU_Start+0x164>
    11ba:	a7 e9       	ldi	r26, 0x97	; 151
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	cf ec       	ldi	r28, 0xCF	; 207
    11c0:	d0 e0       	ldi	r29, 0x00	; 0
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].ConsumerID == a_ConsumerID)
    11c2:	5a 96       	adiw	r26, 0x1a	; 26
    11c4:	8d 91       	ld	r24, X+
    11c6:	9c 91       	ld	r25, X
    11c8:	5b 97       	sbiw	r26, 0x1b	; 27
    11ca:	86 17       	cp	r24, r22
    11cc:	97 07       	cpc	r25, r23
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <TMU_Start+0xd8>
    11d0:	44 c0       	rjmp	.+136    	; 0x125a <TMU_Start+0x160>
    11d2:	1e 96       	adiw	r26, 0x0e	; 14
			}
			/*  If There Still Space In The Request Buffer  */
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
    11d4:	ac 17       	cp	r26, r28
    11d6:	bd 07       	cpc	r27, r29
    11d8:	a1 f7       	brne	.-24     	; 0x11c2 <TMU_Start+0xc8>
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
					}
				}
				/* Add The New Consumer To The Request Buffer */
				g_RequestBuffer[g_ReqBuffer_Index++] = a_NewConsumer;				
    11da:	80 91 95 00 	lds	r24, 0x0095
    11de:	90 91 96 00 	lds	r25, 0x0096
    11e2:	dc 01       	movw	r26, r24
    11e4:	11 96       	adiw	r26, 0x01	; 1
    11e6:	b0 93 96 00 	sts	0x0096, r27
    11ea:	a0 93 95 00 	sts	0x0095, r26
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	dc 01       	movw	r26, r24
    11f4:	aa 0f       	add	r26, r26
    11f6:	bb 1f       	adc	r27, r27
    11f8:	aa 0f       	add	r26, r26
    11fa:	bb 1f       	adc	r27, r27
    11fc:	aa 0f       	add	r26, r26
    11fe:	bb 1f       	adc	r27, r27
    1200:	a8 1b       	sub	r26, r24
    1202:	b9 0b       	sbc	r27, r25
    1204:	a9 56       	subi	r26, 0x69	; 105
    1206:	bf 4f       	sbci	r27, 0xFF	; 255
    1208:	11 96       	adiw	r26, 0x01	; 1
    120a:	fc 93       	st	X, r31
    120c:	ee 93       	st	-X, r30
    120e:	12 96       	adiw	r26, 0x02	; 2
    1210:	4c 93       	st	X, r20
    1212:	12 97       	sbiw	r26, 0x02	; 2
    1214:	13 96       	adiw	r26, 0x03	; 3
    1216:	0d 93       	st	X+, r16
    1218:	1d 93       	st	X+, r17
    121a:	2d 93       	st	X+, r18
    121c:	3c 93       	st	X, r19
    121e:	16 97       	sbiw	r26, 0x06	; 6
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	17 96       	adiw	r26, 0x07	; 7
    1224:	8c 93       	st	X, r24
    1226:	17 97       	sbiw	r26, 0x07	; 7
    1228:	18 96       	adiw	r26, 0x08	; 8
    122a:	1d 92       	st	X+, r1
    122c:	1d 92       	st	X+, r1
    122e:	1d 92       	st	X+, r1
    1230:	1c 92       	st	X, r1
    1232:	1b 97       	sbiw	r26, 0x0b	; 11
    1234:	1d 96       	adiw	r26, 0x0d	; 13
    1236:	7c 93       	st	X, r23
    1238:	6e 93       	st	-X, r22
    123a:	1c 97       	sbiw	r26, 0x0c	; 12
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e c0       	rjmp	.+28     	; 0x125e <TMU_Start+0x164>
	}
	/*-------------[ In Case The TMU IS Not Active (Not Initialized Yet) ]-------------*/
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
    1242:	8a ec       	ldi	r24, 0xCA	; 202
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0b c0       	rjmp	.+22     	; 0x125e <TMU_Start+0x164>
		}
		/*-------------[ In Case Of Consumer's Null Pointer CBF ]-------------*/
		else
		{
			a_errorStatus = TMU_ERROR + NULL_PTR;
			return a_errorStatus;
    1248:	89 ec       	ldi	r24, 0xC9	; 201
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	08 c0       	rjmp	.+16     	; 0x125e <TMU_Start+0x164>
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].ConsumerID == a_ConsumerID)
					{
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
    124e:	8e ec       	ldi	r24, 0xCE	; 206
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	05 c0       	rjmp	.+10     	; 0x125e <TMU_Start+0x164>
				}
				/*  If All Consumers In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
				{
					a_errorStatus = TMU_ERROR + FULL_BUFFER;
					return a_errorStatus;
    1254:	8f ec       	ldi	r24, 0xCF	; 207
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 c0       	rjmp	.+4      	; 0x125e <TMU_Start+0x164>
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].ConsumerID == a_ConsumerID)
					{
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
    125a:	8e ec       	ldi	r24, 0xCE	; 206
    125c:	90 e0       	ldi	r25, 0x00	; 0
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
}
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	08 95       	ret

00001268 <TMU_Dispatcher>:
	return errorStatus;
}


void TMU_Dispatcher(void)
{
    1268:	ef 92       	push	r14
    126a:	ff 92       	push	r15
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
	uint16_t a_u16_index;
	FunPtr a_ConsumerFunction;
	
	/*-------------[ Every TMU Tick, Go Through The Request Buffer ]-------------*/
	if(g_TMR_Ticks_Changed)
    1274:	80 91 94 00 	lds	r24, 0x0094
    1278:	88 23       	and	r24, r24
    127a:	09 f4       	brne	.+2      	; 0x127e <TMU_Dispatcher+0x16>
    127c:	45 c0       	rjmp	.+138    	; 0x1308 <TMU_Dispatcher+0xa0>
    127e:	c7 e9       	ldi	r28, 0x97	; 151
    1280:	d0 e0       	ldi	r29, 0x00	; 0
    1282:	0e e9       	ldi	r16, 0x9E	; 158
    1284:	10 e0       	ldi	r17, 0x00	; 0
    1286:	0f 2e       	mov	r0, r31
    1288:	fd ed       	ldi	r31, 0xDD	; 221
    128a:	ef 2e       	mov	r14, r31
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	ff 2e       	mov	r15, r31
    1290:	f0 2d       	mov	r31, r0
	{
		for(a_u16_index = ZERO; a_u16_index < REQUEST_BUFFER_LEN; a_u16_index++)
		{
			g_RequestBuffer[a_u16_index].Count += g_TMU_TickTime;
    1292:	40 91 92 00 	lds	r20, 0x0092
    1296:	50 91 93 00 	lds	r21, 0x0093
    129a:	88 85       	ldd	r24, Y+8	; 0x08
    129c:	99 85       	ldd	r25, Y+9	; 0x09
    129e:	aa 85       	ldd	r26, Y+10	; 0x0a
    12a0:	bb 85       	ldd	r27, Y+11	; 0x0b
    12a2:	84 0f       	add	r24, r20
    12a4:	95 1f       	adc	r25, r21
    12a6:	a1 1d       	adc	r26, r1
    12a8:	b1 1d       	adc	r27, r1
    12aa:	88 87       	std	Y+8, r24	; 0x08
    12ac:	99 87       	std	Y+9, r25	; 0x09
    12ae:	aa 87       	std	Y+10, r26	; 0x0a
    12b0:	bb 87       	std	Y+11, r27	; 0x0b
			
			/*-------------[ IF Consumer's Due Time Is Met!  ]-------------*/
			if(g_RequestBuffer[a_u16_index].Count >= g_RequestBuffer[a_u16_index].Time)
    12b2:	4b 81       	ldd	r20, Y+3	; 0x03
    12b4:	5c 81       	ldd	r21, Y+4	; 0x04
    12b6:	6d 81       	ldd	r22, Y+5	; 0x05
    12b8:	7e 81       	ldd	r23, Y+6	; 0x06
    12ba:	84 17       	cp	r24, r20
    12bc:	95 07       	cpc	r25, r21
    12be:	a6 07       	cpc	r26, r22
    12c0:	b7 07       	cpc	r27, r23
    12c2:	d0 f0       	brcs	.+52     	; 0x12f8 <TMU_Dispatcher+0x90>
			{
				a_ConsumerFunction = g_RequestBuffer[a_u16_index].Consumer_Ptr;
    12c4:	48 81       	ld	r20, Y
    12c6:	59 81       	ldd	r21, Y+1	; 0x01
    12c8:	f8 01       	movw	r30, r16
    12ca:	d8 01       	movw	r26, r16
    12cc:	15 97       	sbiw	r26, 0x05	; 5
				
				/* IF The Consumer Function IS Periodic */
				if(g_RequestBuffer[a_u16_index].Periodicity == PERIODIC && g_RequestBuffer[a_u16_index].State == ACTIVE)
    12ce:	8c 91       	ld	r24, X
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	51 f4       	brne	.+20     	; 0x12e8 <TMU_Dispatcher+0x80>
    12d4:	80 81       	ld	r24, Z
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	79 f4       	brne	.+30     	; 0x12f8 <TMU_Dispatcher+0x90>
				{
					g_RequestBuffer[a_u16_index].Count = ZERO;
    12da:	18 86       	std	Y+8, r1	; 0x08
    12dc:	19 86       	std	Y+9, r1	; 0x09
    12de:	1a 86       	std	Y+10, r1	; 0x0a
    12e0:	1b 86       	std	Y+11, r1	; 0x0b
					a_ConsumerFunction();
    12e2:	fa 01       	movw	r30, r20
    12e4:	09 95       	icall
    12e6:	08 c0       	rjmp	.+16     	; 0x12f8 <TMU_Dispatcher+0x90>
				}
				
				/* Else IF The Consumer Function IS OneShot (Non-Periodic) */
				else if (g_RequestBuffer[a_u16_index].Periodicity == ONESHOT && g_RequestBuffer[a_u16_index].State == ACTIVE)
    12e8:	81 11       	cpse	r24, r1
    12ea:	06 c0       	rjmp	.+12     	; 0x12f8 <TMU_Dispatcher+0x90>
    12ec:	80 81       	ld	r24, Z
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	19 f4       	brne	.+6      	; 0x12f8 <TMU_Dispatcher+0x90>
				{
					g_RequestBuffer[a_u16_index].State = INACTIVE;
    12f2:	10 82       	st	Z, r1
					a_ConsumerFunction();
    12f4:	fa 01       	movw	r30, r20
    12f6:	09 95       	icall
    12f8:	2e 96       	adiw	r28, 0x0e	; 14
    12fa:	02 5f       	subi	r16, 0xF2	; 242
    12fc:	1f 4f       	sbci	r17, 0xFF	; 255
	FunPtr a_ConsumerFunction;
	
	/*-------------[ Every TMU Tick, Go Through The Request Buffer ]-------------*/
	if(g_TMR_Ticks_Changed)
	{
		for(a_u16_index = ZERO; a_u16_index < REQUEST_BUFFER_LEN; a_u16_index++)
    12fe:	ce 15       	cp	r28, r14
    1300:	df 05       	cpc	r29, r15
    1302:	39 f6       	brne	.-114    	; 0x1292 <TMU_Dispatcher+0x2a>
					g_RequestBuffer[a_u16_index].State = INACTIVE;
					a_ConsumerFunction();
				}
			}
		}
		g_TMR_Ticks_Changed = FALSE;
    1304:	10 92 94 00 	sts	0x0094, r1
	}
}
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	ff 90       	pop	r15
    1312:	ef 90       	pop	r14
    1314:	08 95       	ret

00001316 <__udivmodsi4>:
    1316:	a1 e2       	ldi	r26, 0x21	; 33
    1318:	1a 2e       	mov	r1, r26
    131a:	aa 1b       	sub	r26, r26
    131c:	bb 1b       	sub	r27, r27
    131e:	fd 01       	movw	r30, r26
    1320:	0d c0       	rjmp	.+26     	; 0x133c <__udivmodsi4_ep>

00001322 <__udivmodsi4_loop>:
    1322:	aa 1f       	adc	r26, r26
    1324:	bb 1f       	adc	r27, r27
    1326:	ee 1f       	adc	r30, r30
    1328:	ff 1f       	adc	r31, r31
    132a:	a2 17       	cp	r26, r18
    132c:	b3 07       	cpc	r27, r19
    132e:	e4 07       	cpc	r30, r20
    1330:	f5 07       	cpc	r31, r21
    1332:	20 f0       	brcs	.+8      	; 0x133c <__udivmodsi4_ep>
    1334:	a2 1b       	sub	r26, r18
    1336:	b3 0b       	sbc	r27, r19
    1338:	e4 0b       	sbc	r30, r20
    133a:	f5 0b       	sbc	r31, r21

0000133c <__udivmodsi4_ep>:
    133c:	66 1f       	adc	r22, r22
    133e:	77 1f       	adc	r23, r23
    1340:	88 1f       	adc	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	1a 94       	dec	r1
    1346:	69 f7       	brne	.-38     	; 0x1322 <__udivmodsi4_loop>
    1348:	60 95       	com	r22
    134a:	70 95       	com	r23
    134c:	80 95       	com	r24
    134e:	90 95       	com	r25
    1350:	9b 01       	movw	r18, r22
    1352:	ac 01       	movw	r20, r24
    1354:	bd 01       	movw	r22, r26
    1356:	cf 01       	movw	r24, r30
    1358:	08 95       	ret

0000135a <__tablejump2__>:
    135a:	ee 0f       	add	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	05 90       	lpm	r0, Z+
    1360:	f4 91       	lpm	r31, Z
    1362:	e0 2d       	mov	r30, r0
    1364:	09 94       	ijmp

00001366 <_exit>:
    1366:	f8 94       	cli

00001368 <__stop_program>:
    1368:	ff cf       	rjmp	.-2      	; 0x1368 <__stop_program>
