
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  00001e94  00001f28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000194  008001ca  008001ca  00002092  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002092  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fe3  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c36  00000000  00000000  00005383  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf3  00000000  00000000  00005fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008a8  00000000  00000000  00006cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b95  00000000  00000000  00007554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c88  00000000  00000000  000080e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000ad71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__vector_4>
      14:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__vector_5>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__vector_7>
      20:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__vector_8>
      24:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_9>
      28:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__vector_10>
      2c:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__vector_11>
      30:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__vector_12>
      34:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__vector_13>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__vector_15>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	98 05       	cpc	r25, r8
      56:	0b 06       	cpc	r0, r27
      58:	69 06       	cpc	r6, r25
      5a:	c7 06       	cpc	r12, r23
      5c:	25 07       	cpc	r18, r21
      5e:	83 07       	cpc	r24, r19
      60:	e1 07       	cpc	r30, r17
      62:	19 0a       	sbc	r1, r25
      64:	40 0a       	sbc	r4, r16
      66:	1e 0a       	sbc	r1, r30
      68:	24 0a       	sbc	r2, r20
      6a:	29 0a       	sbc	r2, r25
      6c:	2f 0a       	sbc	r2, r31
      6e:	35 0a       	sbc	r3, r21
      70:	3a 0a       	sbc	r3, r26
      72:	8a 0a       	sbc	r8, r26
      74:	c3 0a       	sbc	r12, r19
      76:	91 0a       	sbc	r9, r17
      78:	9a 0a       	sbc	r9, r26
      7a:	a1 0a       	sbc	r10, r17
      7c:	aa 0a       	sbc	r10, r26
      7e:	b3 0a       	sbc	r11, r19
      80:	ba 0a       	sbc	r11, r26
      82:	0c 0b       	sbc	r16, r28
      84:	35 0b       	sbc	r19, r21
      86:	11 0b       	sbc	r17, r17
      88:	17 0b       	sbc	r17, r23
      8a:	1d 0b       	sbc	r17, r29
      8c:	23 0b       	sbc	r18, r19
      8e:	29 0b       	sbc	r18, r25
      90:	2f 0b       	sbc	r18, r31

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf e5       	ldi	r28, 0x5F	; 95
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	11 e0       	ldi	r17, 0x01	; 1
      a0:	a0 e6       	ldi	r26, 0x60	; 96
      a2:	b0 e0       	ldi	r27, 0x00	; 0
      a4:	e4 e9       	ldi	r30, 0x94	; 148
      a6:	fe e1       	ldi	r31, 0x1E	; 30
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x10>
      aa:	05 90       	lpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	aa 3c       	cpi	r26, 0xCA	; 202
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0xc>

000000b4 <__do_clear_bss>:
      b4:	23 e0       	ldi	r18, 0x03	; 3
      b6:	aa ec       	ldi	r26, 0xCA	; 202
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	ae 35       	cpi	r26, 0x5E	; 94
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 90 08 	call	0x1120	; 0x1120 <main>
      c8:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <Keypad_Init>:
 * Return: The error status of the function.			
 * Description: Initiates the keypad GPIO pins
 * 							
 */
ERROR_STATUS Keypad_Init(void)
{
      d0:	1f 93       	push	r17
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	62 97       	sbiw	r28, 0x12	; 18
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	DIO_Cfg_s Keypad_COL[COLS], Keypad_ROW[ROWS];
	ERROR_STATUS errorStatus = E_NOK;
	
	if(Keypad_Init_State == ZERO)
      e6:	80 91 cb 01 	lds	r24, 0x01CB
      ea:	81 11       	cpse	r24, r1
      ec:	6f c0       	rjmp	.+222    	; 0x1cc <Keypad_Init+0xfc>
	{
		/* Initialize The Columns IO Pins */
		
		Keypad_COL[0].GPIO = KEYPAD_GPIO;
      ee:	12 e0       	ldi	r17, 0x02	; 2
      f0:	19 83       	std	Y+1, r17	; 0x01
		Keypad_COL[0].dir = OUTPUT;
      f2:	8f ef       	ldi	r24, 0xFF	; 255
      f4:	8b 83       	std	Y+3, r24	; 0x03
		Keypad_COL[0].pins = COL1;
      f6:	90 e2       	ldi	r25, 0x20	; 32
      f8:	9a 83       	std	Y+2, r25	; 0x02
		Ex_Keypad_COL[0] = Keypad_COL[0];
      fa:	e5 ed       	ldi	r30, 0xD5	; 213
      fc:	f1 e0       	ldi	r31, 0x01	; 1
      fe:	29 81       	ldd	r18, Y+1	; 0x01
     100:	3a 81       	ldd	r19, Y+2	; 0x02
     102:	4b 81       	ldd	r20, Y+3	; 0x03
     104:	20 83       	st	Z, r18
     106:	31 83       	std	Z+1, r19	; 0x01
     108:	42 83       	std	Z+2, r20	; 0x02
		Keypad_COL[1].GPIO = KEYPAD_GPIO;
     10a:	1c 83       	std	Y+4, r17	; 0x04
		Keypad_COL[1].dir = OUTPUT;
     10c:	8e 83       	std	Y+6, r24	; 0x06
		Keypad_COL[1].pins = COL2;
     10e:	90 e4       	ldi	r25, 0x40	; 64
     110:	9d 83       	std	Y+5, r25	; 0x05
		Ex_Keypad_COL[1] = Keypad_COL[1];
     112:	2c 81       	ldd	r18, Y+4	; 0x04
     114:	3d 81       	ldd	r19, Y+5	; 0x05
     116:	4e 81       	ldd	r20, Y+6	; 0x06
     118:	23 83       	std	Z+3, r18	; 0x03
     11a:	34 83       	std	Z+4, r19	; 0x04
     11c:	45 83       	std	Z+5, r20	; 0x05
		Keypad_COL[2].GPIO = KEYPAD_GPIO;
     11e:	1f 83       	std	Y+7, r17	; 0x07
		Keypad_COL[2].dir = OUTPUT;
     120:	89 87       	std	Y+9, r24	; 0x09
		Keypad_COL[2].pins = COL3;
     122:	80 e8       	ldi	r24, 0x80	; 128
     124:	88 87       	std	Y+8, r24	; 0x08
		Ex_Keypad_COL[2] = Keypad_COL[2];
     126:	8f 81       	ldd	r24, Y+7	; 0x07
     128:	98 85       	ldd	r25, Y+8	; 0x08
     12a:	a9 85       	ldd	r26, Y+9	; 0x09
     12c:	86 83       	std	Z+6, r24	; 0x06
     12e:	97 83       	std	Z+7, r25	; 0x07
     130:	a0 87       	std	Z+8, r26	; 0x08
		DIO_init(&Keypad_COL[0]);
     132:	ce 01       	movw	r24, r28
     134:	01 96       	adiw	r24, 0x01	; 1
     136:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_init>
		DIO_init(&Keypad_COL[1]);
     13a:	ce 01       	movw	r24, r28
     13c:	04 96       	adiw	r24, 0x04	; 4
     13e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_init>
		DIO_init(&Keypad_COL[2]);
     142:	ce 01       	movw	r24, r28
     144:	07 96       	adiw	r24, 0x07	; 7
     146:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_init>
		
		/* Initialize The Columns IO Pins */
		
		Keypad_ROW[0].GPIO = KEYPAD_GPIO;
     14a:	1a 87       	std	Y+10, r17	; 0x0a
		Keypad_ROW[0].dir = INPUT;
     14c:	1c 86       	std	Y+12, r1	; 0x0c
		Keypad_ROW[0].pins = ROW1;
     14e:	84 e0       	ldi	r24, 0x04	; 4
     150:	8b 87       	std	Y+11, r24	; 0x0b
		Ex_Keypad_ROW[0] = Keypad_ROW[0];
     152:	ec ec       	ldi	r30, 0xCC	; 204
     154:	f1 e0       	ldi	r31, 0x01	; 1
     156:	8a 85       	ldd	r24, Y+10	; 0x0a
     158:	9b 85       	ldd	r25, Y+11	; 0x0b
     15a:	ac 85       	ldd	r26, Y+12	; 0x0c
     15c:	80 83       	st	Z, r24
     15e:	91 83       	std	Z+1, r25	; 0x01
     160:	a2 83       	std	Z+2, r26	; 0x02
		Keypad_ROW[1].GPIO = KEYPAD_GPIO;
     162:	1d 87       	std	Y+13, r17	; 0x0d
		Keypad_ROW[1].dir = INPUT;
     164:	1f 86       	std	Y+15, r1	; 0x0f
		Keypad_ROW[1].pins = ROW2;
     166:	88 e0       	ldi	r24, 0x08	; 8
     168:	8e 87       	std	Y+14, r24	; 0x0e
		Ex_Keypad_ROW[1] = Keypad_ROW[1];
     16a:	8d 85       	ldd	r24, Y+13	; 0x0d
     16c:	9e 85       	ldd	r25, Y+14	; 0x0e
     16e:	af 85       	ldd	r26, Y+15	; 0x0f
     170:	83 83       	std	Z+3, r24	; 0x03
     172:	94 83       	std	Z+4, r25	; 0x04
     174:	a5 83       	std	Z+5, r26	; 0x05
		Keypad_ROW[2].GPIO = KEYPAD_GPIO;
     176:	18 8b       	std	Y+16, r17	; 0x10
		Keypad_ROW[2].dir = INPUT;
     178:	1a 8a       	std	Y+18, r1	; 0x12
		Keypad_ROW[2].pins = ROW3;
     17a:	80 e1       	ldi	r24, 0x10	; 16
     17c:	89 8b       	std	Y+17, r24	; 0x11
		Ex_Keypad_ROW[2] = Keypad_ROW[2];
     17e:	88 89       	ldd	r24, Y+16	; 0x10
     180:	99 89       	ldd	r25, Y+17	; 0x11
     182:	aa 89       	ldd	r26, Y+18	; 0x12
     184:	86 83       	std	Z+6, r24	; 0x06
     186:	97 83       	std	Z+7, r25	; 0x07
     188:	a0 87       	std	Z+8, r26	; 0x08
		DIO_init(&Keypad_ROW[0]);
     18a:	ce 01       	movw	r24, r28
     18c:	0a 96       	adiw	r24, 0x0a	; 10
     18e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_init>
		DIO_init(&Keypad_ROW[1]);
     192:	ce 01       	movw	r24, r28
     194:	0d 96       	adiw	r24, 0x0d	; 13
     196:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_init>
		DIO_init(&Keypad_ROW[2]);
     19a:	ce 01       	movw	r24, r28
     19c:	40 96       	adiw	r24, 0x10	; 16
     19e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_init>
		
		/* Activate The Internal Pull Up Resistors*/
		
		DIO_Write(Keypad_ROW[0].GPIO, Keypad_ROW[0].pins, HIGH);
     1a2:	4f ef       	ldi	r20, 0xFF	; 255
     1a4:	6b 85       	ldd	r22, Y+11	; 0x0b
     1a6:	8a 85       	ldd	r24, Y+10	; 0x0a
     1a8:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
		DIO_Write(Keypad_ROW[1].GPIO, Keypad_ROW[1].pins, HIGH);
     1ac:	4f ef       	ldi	r20, 0xFF	; 255
     1ae:	6e 85       	ldd	r22, Y+14	; 0x0e
     1b0:	8d 85       	ldd	r24, Y+13	; 0x0d
     1b2:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
		DIO_Write(Keypad_ROW[2].GPIO, Keypad_ROW[2].pins, HIGH);
     1b6:	4f ef       	ldi	r20, 0xFF	; 255
     1b8:	69 89       	ldd	r22, Y+17	; 0x11
     1ba:	88 89       	ldd	r24, Y+16	; 0x10
     1bc:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
	{
		errorStatus = KEYPAD_ERROR + ALREADY_INIT;
		return errorStatus;
	}
	
	Keypad_Init_State = TRUE;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	80 93 cb 01 	sts	0x01CB, r24
	errorStatus = E_OK;
	
	return errorStatus;
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <Keypad_Init+0x100>
		DIO_Write(Keypad_ROW[2].GPIO, Keypad_ROW[2].pins, HIGH);
	}	
	else
	{
		errorStatus = KEYPAD_ERROR + ALREADY_INIT;
		return errorStatus;
     1cc:	83 e2       	ldi	r24, 0x23	; 35
     1ce:	93 e0       	ldi	r25, 0x03	; 3
	
	Keypad_Init_State = TRUE;
	errorStatus = E_OK;
	
	return errorStatus;
}
     1d0:	62 96       	adiw	r28, 0x12	; 18
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	f8 94       	cli
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	cd bf       	out	0x3d, r28	; 61
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	1f 91       	pop	r17
     1e2:	08 95       	ret

000001e4 <Keypad_Scan>:
 * Return: The error status of the function.			
 * Description: Scans All The Keys in The Keypad, Applies An FIR Digital Filter To The Key Status. 
 * 							
 */
ERROR_STATUS Keypad_Scan(uint8_t* a_Keys_Status)
{
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	00 d0       	rcall	.+0      	; 0x1f2 <Keypad_Scan+0xe>
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <Keypad_Scan+0x10>
     1f4:	cd b7       	in	r28, 0x3d	; 61
     1f6:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATUS errorStatus = E_NOK;
	static uint8_t index = ZERO;
	static uint8_t States_Buffer[FILTER_ORDER][KEYS_NUM] = {{1}};
	uint8_t a_ret_states[ROWS] = {1};
     1f8:	19 82       	std	Y+1, r1	; 0x01
     1fa:	1a 82       	std	Y+2, r1	; 0x02
     1fc:	1b 82       	std	Y+3, r1	; 0x03
     1fe:	21 e0       	ldi	r18, 0x01	; 1
     200:	29 83       	std	Y+1, r18	; 0x01
	uint8_t a_ret=0, j=0, k=0, sum=0;
     202:	1c 82       	std	Y+4, r1	; 0x04
	/*--[ Null Pointer Check ]--*/
	if(a_Keys_Status == NULL)
     204:	00 97       	sbiw	r24, 0x00	; 0
     206:	09 f4       	brne	.+2      	; 0x20a <Keypad_Scan+0x26>
     208:	78 c2       	rjmp	.+1264   	; 0x6fa <Keypad_Scan+0x516>
	{
		errorStatus = KEYPAD_ERROR + NULL_PTR;
		return errorStatus;
	}
	/*--[ Scan Without Init Check ]--*/
	if(Keypad_Init_State == TRUE)
     20a:	20 91 cb 01 	lds	r18, 0x01CB
     20e:	21 30       	cpi	r18, 0x01	; 1
     210:	09 f0       	breq	.+2      	; 0x214 <Keypad_Scan+0x30>
     212:	76 c2       	rjmp	.+1260   	; 0x700 <Keypad_Scan+0x51c>
     214:	8c 01       	movw	r16, r24
	{
		/* Steady State (Output Pattern 0-0-0) */
		DIO_Write(Ex_Keypad_COL[0].GPIO, Ex_Keypad_COL[0].pins, LOW);
     216:	0f 2e       	mov	r0, r31
     218:	f5 ed       	ldi	r31, 0xD5	; 213
     21a:	ef 2e       	mov	r14, r31
     21c:	f1 e0       	ldi	r31, 0x01	; 1
     21e:	ff 2e       	mov	r15, r31
     220:	f0 2d       	mov	r31, r0
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	f7 01       	movw	r30, r14
     226:	61 81       	ldd	r22, Z+1	; 0x01
     228:	80 81       	ld	r24, Z
     22a:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
		DIO_Write(Ex_Keypad_COL[1].GPIO, Ex_Keypad_COL[1].pins, LOW);
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	f7 01       	movw	r30, r14
     232:	64 81       	ldd	r22, Z+4	; 0x04
     234:	83 81       	ldd	r24, Z+3	; 0x03
     236:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
		DIO_Write(Ex_Keypad_COL[2].GPIO, Ex_Keypad_COL[2].pins, LOW);
     23a:	40 e0       	ldi	r20, 0x00	; 0
     23c:	f7 01       	movw	r30, r14
     23e:	67 81       	ldd	r22, Z+7	; 0x07
     240:	86 81       	ldd	r24, Z+6	; 0x06
     242:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
		
		/* Read The Rows*/
		DIO_Read(Ex_Keypad_ROW[0].GPIO, Ex_Keypad_ROW[0].pins, &a_ret_states[0]);
     246:	0f 2e       	mov	r0, r31
     248:	fc ec       	ldi	r31, 0xCC	; 204
     24a:	ef 2e       	mov	r14, r31
     24c:	f1 e0       	ldi	r31, 0x01	; 1
     24e:	ff 2e       	mov	r15, r31
     250:	f0 2d       	mov	r31, r0
     252:	ae 01       	movw	r20, r28
     254:	4f 5f       	subi	r20, 0xFF	; 255
     256:	5f 4f       	sbci	r21, 0xFF	; 255
     258:	f7 01       	movw	r30, r14
     25a:	61 81       	ldd	r22, Z+1	; 0x01
     25c:	80 81       	ld	r24, Z
     25e:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_Read>
		DIO_Read(Ex_Keypad_ROW[1].GPIO, Ex_Keypad_ROW[1].pins, &a_ret_states[1]);
     262:	ae 01       	movw	r20, r28
     264:	4e 5f       	subi	r20, 0xFE	; 254
     266:	5f 4f       	sbci	r21, 0xFF	; 255
     268:	f7 01       	movw	r30, r14
     26a:	64 81       	ldd	r22, Z+4	; 0x04
     26c:	83 81       	ldd	r24, Z+3	; 0x03
     26e:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_Read>
		DIO_Read(Ex_Keypad_ROW[2].GPIO, Ex_Keypad_ROW[2].pins, &a_ret_states[2]);
     272:	ae 01       	movw	r20, r28
     274:	4d 5f       	subi	r20, 0xFD	; 253
     276:	5f 4f       	sbci	r21, 0xFF	; 255
     278:	f7 01       	movw	r30, r14
     27a:	67 81       	ldd	r22, Z+7	; 0x07
     27c:	86 81       	ldd	r24, Z+6	; 0x06
     27e:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_Read>
		
		/* Check If Any Key Is Pressed */
		if(!a_ret_states[0] | !a_ret_states[1] | !a_ret_states[2])
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	81 11       	cpse	r24, r1
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	2a 81       	ldd	r18, Y+2	; 0x02
     28e:	21 11       	cpse	r18, r1
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	89 2b       	or	r24, r25
     294:	39 f4       	brne	.+14     	; 0x2a4 <Keypad_Scan+0xc0>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	2b 81       	ldd	r18, Y+3	; 0x03
     29a:	21 11       	cpse	r18, r1
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	88 23       	and	r24, r24
     2a0:	09 f4       	brne	.+2      	; 0x2a4 <Keypad_Scan+0xc0>
     2a2:	ea c1       	rjmp	.+980    	; 0x678 <Keypad_Scan+0x494>
		{
			/*--[ 1st Row Check ]--*/
			if(!a_ret_states[0])
     2a4:	99 23       	and	r25, r25
     2a6:	09 f4       	brne	.+2      	; 0x2aa <Keypad_Scan+0xc6>
     2a8:	8e c0       	rjmp	.+284    	; 0x3c6 <Keypad_Scan+0x1e2>
			{
				/* (Output Pattern 1-0-0) */
				DIO_Write(Ex_Keypad_COL[0].GPIO, Ex_Keypad_COL[0].pins, LOW);
     2aa:	0f 2e       	mov	r0, r31
     2ac:	f5 ed       	ldi	r31, 0xD5	; 213
     2ae:	ef 2e       	mov	r14, r31
     2b0:	f1 e0       	ldi	r31, 0x01	; 1
     2b2:	ff 2e       	mov	r15, r31
     2b4:	f0 2d       	mov	r31, r0
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	f7 01       	movw	r30, r14
     2ba:	61 81       	ldd	r22, Z+1	; 0x01
     2bc:	80 81       	ld	r24, Z
     2be:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
				DIO_Write(Ex_Keypad_COL[1].GPIO, Ex_Keypad_COL[1].pins, HIGH);
     2c2:	4f ef       	ldi	r20, 0xFF	; 255
     2c4:	f7 01       	movw	r30, r14
     2c6:	64 81       	ldd	r22, Z+4	; 0x04
     2c8:	83 81       	ldd	r24, Z+3	; 0x03
     2ca:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
				DIO_Write(Ex_Keypad_COL[2].GPIO, Ex_Keypad_COL[2].pins, HIGH);
     2ce:	4f ef       	ldi	r20, 0xFF	; 255
     2d0:	f7 01       	movw	r30, r14
     2d2:	67 81       	ldd	r22, Z+7	; 0x07
     2d4:	86 81       	ldd	r24, Z+6	; 0x06
     2d6:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
				/* Read ROW0 */
				DIO_Read(Ex_Keypad_ROW[0].GPIO, Ex_Keypad_ROW[0].pins, &a_ret);
     2da:	ec ec       	ldi	r30, 0xCC	; 204
     2dc:	f1 e0       	ldi	r31, 0x01	; 1
     2de:	ae 01       	movw	r20, r28
     2e0:	4c 5f       	subi	r20, 0xFC	; 252
     2e2:	5f 4f       	sbci	r21, 0xFF	; 255
     2e4:	61 81       	ldd	r22, Z+1	; 0x01
     2e6:	80 81       	ld	r24, Z
     2e8:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_Read>
				if(!a_ret)
     2ec:	8c 81       	ldd	r24, Y+4	; 0x04
     2ee:	81 11       	cpse	r24, r1
     2f0:	11 c0       	rjmp	.+34     	; 0x314 <Keypad_Scan+0x130>
				{
					States_Buffer[index][0] = 0;
     2f2:	80 91 ca 01 	lds	r24, 0x01CA
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	fc 01       	movw	r30, r24
     2fa:	ee 0f       	add	r30, r30
     2fc:	ff 1f       	adc	r31, r31
     2fe:	ee 0f       	add	r30, r30
     300:	ff 1f       	adc	r31, r31
     302:	ee 0f       	add	r30, r30
     304:	ff 1f       	adc	r31, r31
     306:	8e 0f       	add	r24, r30
     308:	9f 1f       	adc	r25, r31
     30a:	fc 01       	movw	r30, r24
     30c:	e0 5a       	subi	r30, 0xA0	; 160
     30e:	ff 4f       	sbci	r31, 0xFF	; 255
     310:	10 82       	st	Z, r1
     312:	6b c0       	rjmp	.+214    	; 0x3ea <Keypad_Scan+0x206>
				}
				else
				{
					States_Buffer[index][0] = 1;
     314:	80 91 ca 01 	lds	r24, 0x01CA
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	fc 01       	movw	r30, r24
     31c:	ee 0f       	add	r30, r30
     31e:	ff 1f       	adc	r31, r31
     320:	ee 0f       	add	r30, r30
     322:	ff 1f       	adc	r31, r31
     324:	ee 0f       	add	r30, r30
     326:	ff 1f       	adc	r31, r31
     328:	8e 0f       	add	r24, r30
     32a:	9f 1f       	adc	r25, r31
     32c:	fc 01       	movw	r30, r24
     32e:	e0 5a       	subi	r30, 0xA0	; 160
     330:	ff 4f       	sbci	r31, 0xFF	; 255
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	80 83       	st	Z, r24
					
					/* (Output Pattern 1-0-1) */
					DIO_Write(Ex_Keypad_COL[0].GPIO, Ex_Keypad_COL[0].pins, HIGH);
     336:	0f 2e       	mov	r0, r31
     338:	f5 ed       	ldi	r31, 0xD5	; 213
     33a:	ef 2e       	mov	r14, r31
     33c:	f1 e0       	ldi	r31, 0x01	; 1
     33e:	ff 2e       	mov	r15, r31
     340:	f0 2d       	mov	r31, r0
     342:	4f ef       	ldi	r20, 0xFF	; 255
     344:	f7 01       	movw	r30, r14
     346:	61 81       	ldd	r22, Z+1	; 0x01
     348:	80 81       	ld	r24, Z
     34a:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
					DIO_Write(Ex_Keypad_COL[1].GPIO, Ex_Keypad_COL[1].pins, LOW);
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	f7 01       	movw	r30, r14
     352:	64 81       	ldd	r22, Z+4	; 0x04
     354:	83 81       	ldd	r24, Z+3	; 0x03
     356:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
					DIO_Write(Ex_Keypad_COL[2].GPIO, Ex_Keypad_COL[2].pins, HIGH);
     35a:	4f ef       	ldi	r20, 0xFF	; 255
     35c:	f7 01       	movw	r30, r14
     35e:	67 81       	ldd	r22, Z+7	; 0x07
     360:	86 81       	ldd	r24, Z+6	; 0x06
     362:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
					
					/* Read ROW0 */
					DIO_Read(Ex_Keypad_ROW[0].GPIO, Ex_Keypad_ROW[0].pins, &a_ret);
     366:	ec ec       	ldi	r30, 0xCC	; 204
     368:	f1 e0       	ldi	r31, 0x01	; 1
     36a:	ae 01       	movw	r20, r28
     36c:	4c 5f       	subi	r20, 0xFC	; 252
     36e:	5f 4f       	sbci	r21, 0xFF	; 255
     370:	61 81       	ldd	r22, Z+1	; 0x01
     372:	80 81       	ld	r24, Z
     374:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_Read>
					if(!a_ret)
     378:	8c 81       	ldd	r24, Y+4	; 0x04
     37a:	81 11       	cpse	r24, r1
     37c:	11 c0       	rjmp	.+34     	; 0x3a0 <Keypad_Scan+0x1bc>
					{
						States_Buffer[index][1] = 0;
     37e:	80 91 ca 01 	lds	r24, 0x01CA
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	fc 01       	movw	r30, r24
     386:	ee 0f       	add	r30, r30
     388:	ff 1f       	adc	r31, r31
     38a:	ee 0f       	add	r30, r30
     38c:	ff 1f       	adc	r31, r31
     38e:	ee 0f       	add	r30, r30
     390:	ff 1f       	adc	r31, r31
     392:	8e 0f       	add	r24, r30
     394:	9f 1f       	adc	r25, r31
     396:	fc 01       	movw	r30, r24
     398:	e0 5a       	subi	r30, 0xA0	; 160
     39a:	ff 4f       	sbci	r31, 0xFF	; 255
     39c:	11 82       	std	Z+1, r1	; 0x01
     39e:	25 c0       	rjmp	.+74     	; 0x3ea <Keypad_Scan+0x206>
					}
					else
					{
						States_Buffer[index][1] = 1;
     3a0:	80 91 ca 01 	lds	r24, 0x01CA
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	fc 01       	movw	r30, r24
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	ee 0f       	add	r30, r30
     3ae:	ff 1f       	adc	r31, r31
     3b0:	ee 0f       	add	r30, r30
     3b2:	ff 1f       	adc	r31, r31
     3b4:	8e 0f       	add	r24, r30
     3b6:	9f 1f       	adc	r25, r31
     3b8:	fc 01       	movw	r30, r24
     3ba:	e0 5a       	subi	r30, 0xA0	; 160
     3bc:	ff 4f       	sbci	r31, 0xFF	; 255
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	81 83       	std	Z+1, r24	; 0x01
						States_Buffer[index][2] = 0;
     3c2:	12 82       	std	Z+2, r1	; 0x02
     3c4:	12 c0       	rjmp	.+36     	; 0x3ea <Keypad_Scan+0x206>
					}
				}
			}
			else
			{
				States_Buffer[index][0] = 1;
     3c6:	80 91 ca 01 	lds	r24, 0x01CA
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	fc 01       	movw	r30, r24
     3ce:	ee 0f       	add	r30, r30
     3d0:	ff 1f       	adc	r31, r31
     3d2:	ee 0f       	add	r30, r30
     3d4:	ff 1f       	adc	r31, r31
     3d6:	ee 0f       	add	r30, r30
     3d8:	ff 1f       	adc	r31, r31
     3da:	e8 0f       	add	r30, r24
     3dc:	f9 1f       	adc	r31, r25
     3de:	e0 5a       	subi	r30, 0xA0	; 160
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	80 83       	st	Z, r24
				States_Buffer[index][1] = 1;
     3e6:	81 83       	std	Z+1, r24	; 0x01
				States_Buffer[index][2] = 1;
     3e8:	82 83       	std	Z+2, r24	; 0x02
			}
			/*--[ 2nd Row Check ]--*/
			if(!a_ret_states[1])
     3ea:	8a 81       	ldd	r24, Y+2	; 0x02
     3ec:	81 11       	cpse	r24, r1
     3ee:	8e c0       	rjmp	.+284    	; 0x50c <Keypad_Scan+0x328>
			{
				/* (Output Pattern 1-0-0) */
				DIO_Write(Ex_Keypad_COL[0].GPIO, Ex_Keypad_COL[0].pins, LOW);
     3f0:	0f 2e       	mov	r0, r31
     3f2:	f5 ed       	ldi	r31, 0xD5	; 213
     3f4:	ef 2e       	mov	r14, r31
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	ff 2e       	mov	r15, r31
     3fa:	f0 2d       	mov	r31, r0
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	f7 01       	movw	r30, r14
     400:	61 81       	ldd	r22, Z+1	; 0x01
     402:	80 81       	ld	r24, Z
     404:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
				DIO_Write(Ex_Keypad_COL[1].GPIO, Ex_Keypad_COL[1].pins, HIGH);
     408:	4f ef       	ldi	r20, 0xFF	; 255
     40a:	f7 01       	movw	r30, r14
     40c:	64 81       	ldd	r22, Z+4	; 0x04
     40e:	83 81       	ldd	r24, Z+3	; 0x03
     410:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
				DIO_Write(Ex_Keypad_COL[2].GPIO, Ex_Keypad_COL[2].pins, HIGH);
     414:	4f ef       	ldi	r20, 0xFF	; 255
     416:	f7 01       	movw	r30, r14
     418:	67 81       	ldd	r22, Z+7	; 0x07
     41a:	86 81       	ldd	r24, Z+6	; 0x06
     41c:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
				/* Read ROW1 */
				DIO_Read(Ex_Keypad_ROW[1].GPIO, Ex_Keypad_ROW[1].pins, &a_ret);
     420:	ec ec       	ldi	r30, 0xCC	; 204
     422:	f1 e0       	ldi	r31, 0x01	; 1
     424:	ae 01       	movw	r20, r28
     426:	4c 5f       	subi	r20, 0xFC	; 252
     428:	5f 4f       	sbci	r21, 0xFF	; 255
     42a:	64 81       	ldd	r22, Z+4	; 0x04
     42c:	83 81       	ldd	r24, Z+3	; 0x03
     42e:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_Read>
				if(!a_ret)
     432:	8c 81       	ldd	r24, Y+4	; 0x04
     434:	81 11       	cpse	r24, r1
     436:	11 c0       	rjmp	.+34     	; 0x45a <Keypad_Scan+0x276>
				{
					States_Buffer[index][3] = 0;
     438:	80 91 ca 01 	lds	r24, 0x01CA
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	fc 01       	movw	r30, r24
     440:	ee 0f       	add	r30, r30
     442:	ff 1f       	adc	r31, r31
     444:	ee 0f       	add	r30, r30
     446:	ff 1f       	adc	r31, r31
     448:	ee 0f       	add	r30, r30
     44a:	ff 1f       	adc	r31, r31
     44c:	8e 0f       	add	r24, r30
     44e:	9f 1f       	adc	r25, r31
     450:	fc 01       	movw	r30, r24
     452:	e0 5a       	subi	r30, 0xA0	; 160
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	13 82       	std	Z+3, r1	; 0x03
     458:	6b c0       	rjmp	.+214    	; 0x530 <Keypad_Scan+0x34c>
				}
				else
				{
					States_Buffer[index][3] = 1;
     45a:	80 91 ca 01 	lds	r24, 0x01CA
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	fc 01       	movw	r30, r24
     462:	ee 0f       	add	r30, r30
     464:	ff 1f       	adc	r31, r31
     466:	ee 0f       	add	r30, r30
     468:	ff 1f       	adc	r31, r31
     46a:	ee 0f       	add	r30, r30
     46c:	ff 1f       	adc	r31, r31
     46e:	8e 0f       	add	r24, r30
     470:	9f 1f       	adc	r25, r31
     472:	fc 01       	movw	r30, r24
     474:	e0 5a       	subi	r30, 0xA0	; 160
     476:	ff 4f       	sbci	r31, 0xFF	; 255
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	83 83       	std	Z+3, r24	; 0x03
					
					/* (Output Pattern 0-1-0) */
					DIO_Write(Ex_Keypad_COL[0].GPIO, Ex_Keypad_COL[0].pins, HIGH);
     47c:	0f 2e       	mov	r0, r31
     47e:	f5 ed       	ldi	r31, 0xD5	; 213
     480:	ef 2e       	mov	r14, r31
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	ff 2e       	mov	r15, r31
     486:	f0 2d       	mov	r31, r0
     488:	4f ef       	ldi	r20, 0xFF	; 255
     48a:	f7 01       	movw	r30, r14
     48c:	61 81       	ldd	r22, Z+1	; 0x01
     48e:	80 81       	ld	r24, Z
     490:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
					DIO_Write(Ex_Keypad_COL[1].GPIO, Ex_Keypad_COL[1].pins, LOW);
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	f7 01       	movw	r30, r14
     498:	64 81       	ldd	r22, Z+4	; 0x04
     49a:	83 81       	ldd	r24, Z+3	; 0x03
     49c:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
					DIO_Write(Ex_Keypad_COL[2].GPIO, Ex_Keypad_COL[2].pins, HIGH);
     4a0:	4f ef       	ldi	r20, 0xFF	; 255
     4a2:	f7 01       	movw	r30, r14
     4a4:	67 81       	ldd	r22, Z+7	; 0x07
     4a6:	86 81       	ldd	r24, Z+6	; 0x06
     4a8:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
					
					/* Read ROW1 */
					DIO_Read(Ex_Keypad_ROW[1].GPIO, Ex_Keypad_ROW[1].pins, &a_ret);
     4ac:	ec ec       	ldi	r30, 0xCC	; 204
     4ae:	f1 e0       	ldi	r31, 0x01	; 1
     4b0:	ae 01       	movw	r20, r28
     4b2:	4c 5f       	subi	r20, 0xFC	; 252
     4b4:	5f 4f       	sbci	r21, 0xFF	; 255
     4b6:	64 81       	ldd	r22, Z+4	; 0x04
     4b8:	83 81       	ldd	r24, Z+3	; 0x03
     4ba:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_Read>
					if(!a_ret)
     4be:	8c 81       	ldd	r24, Y+4	; 0x04
     4c0:	81 11       	cpse	r24, r1
     4c2:	11 c0       	rjmp	.+34     	; 0x4e6 <Keypad_Scan+0x302>
					{
						States_Buffer[index][4] = 0;
     4c4:	80 91 ca 01 	lds	r24, 0x01CA
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	fc 01       	movw	r30, r24
     4cc:	ee 0f       	add	r30, r30
     4ce:	ff 1f       	adc	r31, r31
     4d0:	ee 0f       	add	r30, r30
     4d2:	ff 1f       	adc	r31, r31
     4d4:	ee 0f       	add	r30, r30
     4d6:	ff 1f       	adc	r31, r31
     4d8:	8e 0f       	add	r24, r30
     4da:	9f 1f       	adc	r25, r31
     4dc:	fc 01       	movw	r30, r24
     4de:	e0 5a       	subi	r30, 0xA0	; 160
     4e0:	ff 4f       	sbci	r31, 0xFF	; 255
     4e2:	14 82       	std	Z+4, r1	; 0x04
     4e4:	25 c0       	rjmp	.+74     	; 0x530 <Keypad_Scan+0x34c>
					}
					else
					{
						States_Buffer[index][4] = 1;
     4e6:	80 91 ca 01 	lds	r24, 0x01CA
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	fc 01       	movw	r30, r24
     4ee:	ee 0f       	add	r30, r30
     4f0:	ff 1f       	adc	r31, r31
     4f2:	ee 0f       	add	r30, r30
     4f4:	ff 1f       	adc	r31, r31
     4f6:	ee 0f       	add	r30, r30
     4f8:	ff 1f       	adc	r31, r31
     4fa:	8e 0f       	add	r24, r30
     4fc:	9f 1f       	adc	r25, r31
     4fe:	fc 01       	movw	r30, r24
     500:	e0 5a       	subi	r30, 0xA0	; 160
     502:	ff 4f       	sbci	r31, 0xFF	; 255
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	84 83       	std	Z+4, r24	; 0x04
						States_Buffer[index][5] = 0;
     508:	15 82       	std	Z+5, r1	; 0x05
     50a:	12 c0       	rjmp	.+36     	; 0x530 <Keypad_Scan+0x34c>
					}
				}
			}
			else
			{
				States_Buffer[index][3] = 1;
     50c:	80 91 ca 01 	lds	r24, 0x01CA
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	fc 01       	movw	r30, r24
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	ee 0f       	add	r30, r30
     51a:	ff 1f       	adc	r31, r31
     51c:	ee 0f       	add	r30, r30
     51e:	ff 1f       	adc	r31, r31
     520:	e8 0f       	add	r30, r24
     522:	f9 1f       	adc	r31, r25
     524:	e0 5a       	subi	r30, 0xA0	; 160
     526:	ff 4f       	sbci	r31, 0xFF	; 255
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	83 83       	std	Z+3, r24	; 0x03
				States_Buffer[index][4] = 1;
     52c:	84 83       	std	Z+4, r24	; 0x04
				States_Buffer[index][5] = 1;
     52e:	85 83       	std	Z+5, r24	; 0x05
			}
			/*--[ 3rd Row Check ]--*/
			if(!a_ret_states[2])
     530:	8b 81       	ldd	r24, Y+3	; 0x03
     532:	81 11       	cpse	r24, r1
     534:	8e c0       	rjmp	.+284    	; 0x652 <Keypad_Scan+0x46e>
			{
				/* (Output Pattern 0-1-1) */
				DIO_Write(Ex_Keypad_COL[0].GPIO, Ex_Keypad_COL[0].pins, LOW);
     536:	0f 2e       	mov	r0, r31
     538:	f5 ed       	ldi	r31, 0xD5	; 213
     53a:	ef 2e       	mov	r14, r31
     53c:	f1 e0       	ldi	r31, 0x01	; 1
     53e:	ff 2e       	mov	r15, r31
     540:	f0 2d       	mov	r31, r0
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	f7 01       	movw	r30, r14
     546:	61 81       	ldd	r22, Z+1	; 0x01
     548:	80 81       	ld	r24, Z
     54a:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
				DIO_Write(Ex_Keypad_COL[1].GPIO, Ex_Keypad_COL[1].pins, HIGH);
     54e:	4f ef       	ldi	r20, 0xFF	; 255
     550:	f7 01       	movw	r30, r14
     552:	64 81       	ldd	r22, Z+4	; 0x04
     554:	83 81       	ldd	r24, Z+3	; 0x03
     556:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
				DIO_Write(Ex_Keypad_COL[2].GPIO, Ex_Keypad_COL[2].pins, HIGH);
     55a:	4f ef       	ldi	r20, 0xFF	; 255
     55c:	f7 01       	movw	r30, r14
     55e:	67 81       	ldd	r22, Z+7	; 0x07
     560:	86 81       	ldd	r24, Z+6	; 0x06
     562:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
				/* Read ROW2 */
				DIO_Read(Ex_Keypad_ROW[2].GPIO, Ex_Keypad_ROW[2].pins, &a_ret);
     566:	ec ec       	ldi	r30, 0xCC	; 204
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	ae 01       	movw	r20, r28
     56c:	4c 5f       	subi	r20, 0xFC	; 252
     56e:	5f 4f       	sbci	r21, 0xFF	; 255
     570:	67 81       	ldd	r22, Z+7	; 0x07
     572:	86 81       	ldd	r24, Z+6	; 0x06
     574:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_Read>
				if(!a_ret)
     578:	8c 81       	ldd	r24, Y+4	; 0x04
     57a:	81 11       	cpse	r24, r1
     57c:	11 c0       	rjmp	.+34     	; 0x5a0 <Keypad_Scan+0x3bc>
				{
					States_Buffer[index][6] = 0;
     57e:	80 91 ca 01 	lds	r24, 0x01CA
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	fc 01       	movw	r30, r24
     586:	ee 0f       	add	r30, r30
     588:	ff 1f       	adc	r31, r31
     58a:	ee 0f       	add	r30, r30
     58c:	ff 1f       	adc	r31, r31
     58e:	ee 0f       	add	r30, r30
     590:	ff 1f       	adc	r31, r31
     592:	8e 0f       	add	r24, r30
     594:	9f 1f       	adc	r25, r31
     596:	fc 01       	movw	r30, r24
     598:	e0 5a       	subi	r30, 0xA0	; 160
     59a:	ff 4f       	sbci	r31, 0xFF	; 255
     59c:	16 82       	std	Z+6, r1	; 0x06
     59e:	b3 c0       	rjmp	.+358    	; 0x706 <Keypad_Scan+0x522>
				}
				else
				{
					States_Buffer[index][6] = 1;
     5a0:	80 91 ca 01 	lds	r24, 0x01CA
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	fc 01       	movw	r30, r24
     5a8:	ee 0f       	add	r30, r30
     5aa:	ff 1f       	adc	r31, r31
     5ac:	ee 0f       	add	r30, r30
     5ae:	ff 1f       	adc	r31, r31
     5b0:	ee 0f       	add	r30, r30
     5b2:	ff 1f       	adc	r31, r31
     5b4:	8e 0f       	add	r24, r30
     5b6:	9f 1f       	adc	r25, r31
     5b8:	fc 01       	movw	r30, r24
     5ba:	e0 5a       	subi	r30, 0xA0	; 160
     5bc:	ff 4f       	sbci	r31, 0xFF	; 255
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	86 83       	std	Z+6, r24	; 0x06
					
					/* (Output Pattern 1-0-1) */
					DIO_Write(Ex_Keypad_COL[0].GPIO, Ex_Keypad_COL[0].pins, HIGH);
     5c2:	0f 2e       	mov	r0, r31
     5c4:	f5 ed       	ldi	r31, 0xD5	; 213
     5c6:	ef 2e       	mov	r14, r31
     5c8:	f1 e0       	ldi	r31, 0x01	; 1
     5ca:	ff 2e       	mov	r15, r31
     5cc:	f0 2d       	mov	r31, r0
     5ce:	4f ef       	ldi	r20, 0xFF	; 255
     5d0:	f7 01       	movw	r30, r14
     5d2:	61 81       	ldd	r22, Z+1	; 0x01
     5d4:	80 81       	ld	r24, Z
     5d6:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
					DIO_Write(Ex_Keypad_COL[1].GPIO, Ex_Keypad_COL[1].pins, LOW);
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	f7 01       	movw	r30, r14
     5de:	64 81       	ldd	r22, Z+4	; 0x04
     5e0:	83 81       	ldd	r24, Z+3	; 0x03
     5e2:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
					DIO_Write(Ex_Keypad_COL[2].GPIO, Ex_Keypad_COL[2].pins, HIGH);
     5e6:	4f ef       	ldi	r20, 0xFF	; 255
     5e8:	f7 01       	movw	r30, r14
     5ea:	67 81       	ldd	r22, Z+7	; 0x07
     5ec:	86 81       	ldd	r24, Z+6	; 0x06
     5ee:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
					
					/* Read ROW2 */
					DIO_Read(Ex_Keypad_ROW[2].GPIO, Ex_Keypad_ROW[2].pins, &a_ret);
     5f2:	ec ec       	ldi	r30, 0xCC	; 204
     5f4:	f1 e0       	ldi	r31, 0x01	; 1
     5f6:	ae 01       	movw	r20, r28
     5f8:	4c 5f       	subi	r20, 0xFC	; 252
     5fa:	5f 4f       	sbci	r21, 0xFF	; 255
     5fc:	67 81       	ldd	r22, Z+7	; 0x07
     5fe:	86 81       	ldd	r24, Z+6	; 0x06
     600:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_Read>
					if(!a_ret)
     604:	8c 81       	ldd	r24, Y+4	; 0x04
     606:	81 11       	cpse	r24, r1
     608:	11 c0       	rjmp	.+34     	; 0x62c <Keypad_Scan+0x448>
					{
						States_Buffer[index][7] = 0;
     60a:	80 91 ca 01 	lds	r24, 0x01CA
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	fc 01       	movw	r30, r24
     612:	ee 0f       	add	r30, r30
     614:	ff 1f       	adc	r31, r31
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
     61a:	ee 0f       	add	r30, r30
     61c:	ff 1f       	adc	r31, r31
     61e:	8e 0f       	add	r24, r30
     620:	9f 1f       	adc	r25, r31
     622:	fc 01       	movw	r30, r24
     624:	e0 5a       	subi	r30, 0xA0	; 160
     626:	ff 4f       	sbci	r31, 0xFF	; 255
     628:	17 82       	std	Z+7, r1	; 0x07
     62a:	6d c0       	rjmp	.+218    	; 0x706 <Keypad_Scan+0x522>
					}
					else
					{
						States_Buffer[index][7] = 1;
     62c:	80 91 ca 01 	lds	r24, 0x01CA
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	fc 01       	movw	r30, r24
     634:	ee 0f       	add	r30, r30
     636:	ff 1f       	adc	r31, r31
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	8e 0f       	add	r24, r30
     642:	9f 1f       	adc	r25, r31
     644:	fc 01       	movw	r30, r24
     646:	e0 5a       	subi	r30, 0xA0	; 160
     648:	ff 4f       	sbci	r31, 0xFF	; 255
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	87 83       	std	Z+7, r24	; 0x07
						States_Buffer[index][8] = 0;
     64e:	10 86       	std	Z+8, r1	; 0x08
     650:	5a c0       	rjmp	.+180    	; 0x706 <Keypad_Scan+0x522>
					}
				}
			}
			else
			{
				States_Buffer[index][6] = 1;
     652:	80 91 ca 01 	lds	r24, 0x01CA
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	fc 01       	movw	r30, r24
     65a:	ee 0f       	add	r30, r30
     65c:	ff 1f       	adc	r31, r31
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	e8 0f       	add	r30, r24
     668:	f9 1f       	adc	r31, r25
     66a:	e0 5a       	subi	r30, 0xA0	; 160
     66c:	ff 4f       	sbci	r31, 0xFF	; 255
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	86 83       	std	Z+6, r24	; 0x06
				States_Buffer[index][7] = 1;
     672:	87 83       	std	Z+7, r24	; 0x07
				States_Buffer[index][8] = 1;
     674:	80 87       	std	Z+8, r24	; 0x08
     676:	47 c0       	rjmp	.+142    	; 0x706 <Keypad_Scan+0x522>
     678:	80 91 ca 01 	lds	r24, 0x01CA
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	9c 01       	movw	r18, r24
     680:	22 0f       	add	r18, r18
     682:	33 1f       	adc	r19, r19
     684:	22 0f       	add	r18, r18
     686:	33 1f       	adc	r19, r19
     688:	22 0f       	add	r18, r18
     68a:	33 1f       	adc	r19, r19
     68c:	82 0f       	add	r24, r18
     68e:	93 1f       	adc	r25, r19
     690:	fc 01       	movw	r30, r24
     692:	e0 5a       	subi	r30, 0xA0	; 160
     694:	ff 4f       	sbci	r31, 0xFF	; 255
     696:	87 59       	subi	r24, 0x97	; 151
     698:	9f 4f       	sbci	r25, 0xFF	; 255
		/* Else IF No Key IS Pressed */
		else
		{
			for(k=0; k<KEYS_NUM; k++)
			{
				States_Buffer[index][k] = 1;
     69a:	21 e0       	ldi	r18, 0x01	; 1
     69c:	21 93       	st	Z+, r18
			}
		}
		/* Else IF No Key IS Pressed */
		else
		{
			for(k=0; k<KEYS_NUM; k++)
     69e:	e8 17       	cp	r30, r24
     6a0:	f9 07       	cpc	r31, r25
     6a2:	e1 f7       	brne	.-8      	; 0x69c <Keypad_Scan+0x4b8>
     6a4:	30 c0       	rjmp	.+96     	; 0x706 <Keypad_Scan+0x522>
		for(k=0; k<KEYS_NUM; k++)
		{
			sum = ZERO;
			for(j=0; j<FILTER_ORDER; j++)
			{
				sum += States_Buffer[j][k];
     6a6:	20 81       	ld	r18, Z
     6a8:	92 0f       	add	r25, r18
     6aa:	39 96       	adiw	r30, 0x09	; 9
		/* Apply The FIR Digital Filter On Key States Array */
		/* Set The Return Key States Array Based On Filter's Output */
		for(k=0; k<KEYS_NUM; k++)
		{
			sum = ZERO;
			for(j=0; j<FILTER_ORDER; j++)
     6ac:	e4 17       	cp	r30, r20
     6ae:	f5 07       	cpc	r31, r21
     6b0:	d1 f7       	brne	.-12     	; 0x6a6 <Keypad_Scan+0x4c2>
			{
				sum += States_Buffer[j][k];
			}
			if(sum == 8)
     6b2:	98 30       	cpi	r25, 0x08	; 8
     6b4:	11 f4       	brne	.+4      	; 0x6ba <Keypad_Scan+0x4d6>
			{
				a_Keys_Status[k] = KEY_RELEASED;
     6b6:	1c 92       	st	X, r1
     6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <Keypad_Scan+0x4e0>
			}
			else if(sum == 0)
     6ba:	91 11       	cpse	r25, r1
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <Keypad_Scan+0x4de>
			{
				a_Keys_Status[k] = KEY_PRESSED;
     6be:	3c 93       	st	X, r19
     6c0:	01 c0       	rjmp	.+2      	; 0x6c4 <Keypad_Scan+0x4e0>
			}
			else
			{
				a_Keys_Status[k] = KEY_FLOATING;
     6c2:	fc 92       	st	X, r15
     6c4:	11 96       	adiw	r26, 0x01	; 1
     6c6:	6f 5f       	subi	r22, 0xFF	; 255
     6c8:	7f 4f       	sbci	r23, 0xFF	; 255
				States_Buffer[index][k] = 1;
			}
		}
		/* Apply The FIR Digital Filter On Key States Array */
		/* Set The Return Key States Array Based On Filter's Output */
		for(k=0; k<KEYS_NUM; k++)
     6ca:	60 17       	cp	r22, r16
     6cc:	71 07       	cpc	r23, r17
     6ce:	31 f0       	breq	.+12     	; 0x6dc <Keypad_Scan+0x4f8>
     6d0:	ab 01       	movw	r20, r22
     6d2:	48 5b       	subi	r20, 0xB8	; 184
     6d4:	5f 4f       	sbci	r21, 0xFF	; 255
 * Return: The error status of the function.			
 * Description: Scans All The Keys in The Keypad, Applies An FIR Digital Filter To The Key Status. 
 * 							
 */
ERROR_STATUS Keypad_Scan(uint8_t* a_Keys_Status)
{
     6d6:	fb 01       	movw	r30, r22
     6d8:	98 2f       	mov	r25, r24
     6da:	e5 cf       	rjmp	.-54     	; 0x6a6 <Keypad_Scan+0x4c2>
			{
				a_Keys_Status[k] = KEY_FLOATING;
			}
		}
		/* Increment The Filter Buffer Pointer And Bound-Check It */
		index++;
     6dc:	80 91 ca 01 	lds	r24, 0x01CA
     6e0:	8f 5f       	subi	r24, 0xFF	; 255
		if(index == FILTER_ORDER)
     6e2:	88 30       	cpi	r24, 0x08	; 8
     6e4:	29 f0       	breq	.+10     	; 0x6f0 <Keypad_Scan+0x50c>
			{
				a_Keys_Status[k] = KEY_FLOATING;
			}
		}
		/* Increment The Filter Buffer Pointer And Bound-Check It */
		index++;
     6e6:	80 93 ca 01 	sts	0x01CA, r24
		return errorStatus;
	}
	
	errorStatus = E_OK;
	
	return errorStatus;
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	16 c0       	rjmp	.+44     	; 0x71c <Keypad_Scan+0x538>
			}
		}
		/* Increment The Filter Buffer Pointer And Bound-Check It */
		index++;
		if(index == FILTER_ORDER)
		index = ZERO;
     6f0:	10 92 ca 01 	sts	0x01CA, r1
		return errorStatus;
	}
	
	errorStatus = E_OK;
	
	return errorStatus;
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	11 c0       	rjmp	.+34     	; 0x71c <Keypad_Scan+0x538>
	uint8_t a_ret=0, j=0, k=0, sum=0;
	/*--[ Null Pointer Check ]--*/
	if(a_Keys_Status == NULL)
	{
		errorStatus = KEYPAD_ERROR + NULL_PTR;
		return errorStatus;
     6fa:	81 e2       	ldi	r24, 0x21	; 33
     6fc:	93 e0       	ldi	r25, 0x03	; 3
     6fe:	0e c0       	rjmp	.+28     	; 0x71c <Keypad_Scan+0x538>
	}
	/* Else if The Keypad Module Is Not Initialized Yet */
	else
	{
		errorStatus = KEYPAD_ERROR + NOT_INIT;
		return errorStatus;
     700:	82 e2       	ldi	r24, 0x22	; 34
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	0b c0       	rjmp	.+22     	; 0x71c <Keypad_Scan+0x538>
     706:	d8 01       	movw	r26, r16
     708:	60 e6       	ldi	r22, 0x60	; 96
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	09 e6       	ldi	r16, 0x69	; 105
     70e:	10 e0       	ldi	r17, 0x00	; 0
 * Return: The error status of the function.			
 * Description: Scans All The Keys in The Keypad, Applies An FIR Digital Filter To The Key Status. 
 * 							
 */
ERROR_STATUS Keypad_Scan(uint8_t* a_Keys_Status)
{
     710:	80 e0       	ldi	r24, 0x00	; 0
			{
				a_Keys_Status[k] = KEY_PRESSED;
			}
			else
			{
				a_Keys_Status[k] = KEY_FLOATING;
     712:	68 94       	set
     714:	ff 24       	eor	r15, r15
     716:	f1 f8       	bld	r15, 1
			{
				a_Keys_Status[k] = KEY_RELEASED;
			}
			else if(sum == 0)
			{
				a_Keys_Status[k] = KEY_PRESSED;
     718:	31 e0       	ldi	r19, 0x01	; 1
     71a:	da cf       	rjmp	.-76     	; 0x6d0 <Keypad_Scan+0x4ec>
	}
	
	errorStatus = E_OK;
	
	return errorStatus;
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	08 95       	ret

00000732 <LCD_DATA>:

	return errorStatus;
}

ERROR_STATUS LCD_DATA(uint8_t a_Data)
{
     732:	cf 93       	push	r28
     734:	c8 2f       	mov	r28, r24
	ERROR_STATUS errorStatus = E_NOK;
	
	if(a_Data & 1)
     736:	80 ff       	sbrs	r24, 0
     738:	06 c0       	rjmp	.+12     	; 0x746 <LCD_DATA+0x14>
		DIO_Write(LCD_GPIO, D4, HIGH);
     73a:	4f ef       	ldi	r20, 0xFF	; 255
     73c:	60 e1       	ldi	r22, 0x10	; 16
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
     744:	05 c0       	rjmp	.+10     	; 0x750 <LCD_DATA+0x1e>
	else
		DIO_Write(LCD_GPIO, D4, LOW);
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	60 e1       	ldi	r22, 0x10	; 16
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
	if(a_Data & 2)
     750:	c1 ff       	sbrs	r28, 1
     752:	06 c0       	rjmp	.+12     	; 0x760 <LCD_DATA+0x2e>
		DIO_Write(LCD_GPIO, D5, HIGH);
     754:	4f ef       	ldi	r20, 0xFF	; 255
     756:	60 e2       	ldi	r22, 0x20	; 32
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
     75e:	05 c0       	rjmp	.+10     	; 0x76a <LCD_DATA+0x38>
	else
		DIO_Write(LCD_GPIO, D5, LOW);
     760:	40 e0       	ldi	r20, 0x00	; 0
     762:	60 e2       	ldi	r22, 0x20	; 32
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
	if(a_Data & 4)
     76a:	c2 ff       	sbrs	r28, 2
     76c:	06 c0       	rjmp	.+12     	; 0x77a <LCD_DATA+0x48>
		DIO_Write(LCD_GPIO, D6, HIGH);
     76e:	4f ef       	ldi	r20, 0xFF	; 255
     770:	60 e4       	ldi	r22, 0x40	; 64
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
     778:	05 c0       	rjmp	.+10     	; 0x784 <LCD_DATA+0x52>
	else
		DIO_Write(LCD_GPIO, D6, LOW);
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	60 e4       	ldi	r22, 0x40	; 64
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
	if(a_Data & 8)
     784:	c3 ff       	sbrs	r28, 3
     786:	06 c0       	rjmp	.+12     	; 0x794 <LCD_DATA+0x62>
		DIO_Write(LCD_GPIO, D7, HIGH);
     788:	4f ef       	ldi	r20, 0xFF	; 255
     78a:	60 e8       	ldi	r22, 0x80	; 128
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
     792:	05 c0       	rjmp	.+10     	; 0x79e <LCD_DATA+0x6c>
	else
		DIO_Write(LCD_GPIO, D7, LOW);
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	60 e8       	ldi	r22, 0x80	; 128
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
	
	errorStatus = E_OK;
		
	return errorStatus;
}
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <LCD_sendCommand>:

ERROR_STATUS LCD_sendCommand(uint8_t a_CMD)
{
     7a6:	cf 93       	push	r28
     7a8:	c8 2f       	mov	r28, r24
	ERROR_STATUS errorStatus = E_NOK;
	
	// Select Command Register
	DIO_Write(LCD_GPIO, RS, LOW);
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	62 e0       	ldi	r22, 0x02	; 2
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
	// Move The Command Data To LCD
	LCD_DATA(a_CMD);
     7b4:	8c 2f       	mov	r24, r28
     7b6:	0e 94 99 03 	call	0x732	; 0x732 <LCD_DATA>
	// Send The EN Clock Signal
	DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, HIGH);
     7ba:	4f ef       	ldi	r20, 0xFF	; 255
     7bc:	68 e0       	ldi	r22, 0x08	; 8
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c4:	80 e5       	ldi	r24, 0x50	; 80
     7c6:	8a 95       	dec	r24
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <LCD_sendCommand+0x20>
	_delay_us(15);
	DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, LOW);
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	68 e0       	ldi	r22, 0x08	; 8
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
     7d4:	80 e5       	ldi	r24, 0x50	; 80
     7d6:	8a 95       	dec	r24
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <LCD_sendCommand+0x30>
	_delay_us(15);
	
	errorStatus = E_OK;
	
	return errorStatus;
}
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <LCD_init>:
#include <util/delay.h> // for development only

static uint8_t LCD_Init_State = ZERO;

ERROR_STATUS LCD_init (void)
{
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	00 d0       	rcall	.+0      	; 0x7e8 <LCD_init+0x6>
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <LCD_init+0x8>
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <LCD_init+0xa>
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATUS errorStatus = E_NOK;
	
	if(LCD_Init_State == ZERO)
     7f0:	80 91 de 01 	lds	r24, 0x01DE
     7f4:	81 11       	cpse	r24, r1
     7f6:	5d c0       	rjmp	.+186    	; 0x8b2 <__stack+0x53>
	{
		/* DIO Pins Initialization */
		DIO_Cfg_s LCD_Pins, LCD_EN;
		LCD_EN.GPIO   = LCD_EN_GPIO;
     7f8:	19 82       	std	Y+1, r1	; 0x01
		LCD_EN.pins   = LCD_EN_BIT;
     7fa:	88 e0       	ldi	r24, 0x08	; 8
     7fc:	8a 83       	std	Y+2, r24	; 0x02
		LCD_EN.dir    = OUTPUT;
     7fe:	8f ef       	ldi	r24, 0xFF	; 255
     800:	8b 83       	std	Y+3, r24	; 0x03
		LCD_Pins.GPIO = LCD_GPIO;
     802:	1c 82       	std	Y+4, r1	; 0x04
		LCD_Pins.dir  = OUTPUT;
     804:	8e 83       	std	Y+6, r24	; 0x06
		LCD_Pins.pins = (RS | RW | D4 | D5 | D6 | D7);
     806:	86 ef       	ldi	r24, 0xF6	; 246
     808:	8d 83       	std	Y+5, r24	; 0x05
		DIO_init(&LCD_EN);
     80a:	ce 01       	movw	r24, r28
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_init>
		DIO_init(&LCD_Pins);
     812:	ce 01       	movw	r24, r28
     814:	04 96       	adiw	r24, 0x04	; 4
     816:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_init>
		
		/* LCD Initialization Procedure (As Stated In Datasheet) */
		DIO_Write(LCD_GPIO, RS, LOW);
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	62 e0       	ldi	r22, 0x02	; 2
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
		DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, LOW);
     824:	40 e0       	ldi	r20, 0x00	; 0
     826:	68 e0       	ldi	r22, 0x08	; 8
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
		LCD_DATA(0x00);
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 99 03 	call	0x732	; 0x732 <LCD_DATA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     834:	2f ef       	ldi	r18, 0xFF	; 255
     836:	82 e5       	ldi	r24, 0x52	; 82
     838:	97 e0       	ldi	r25, 0x07	; 7
     83a:	21 50       	subi	r18, 0x01	; 1
     83c:	80 40       	sbci	r24, 0x00	; 0
     83e:	90 40       	sbci	r25, 0x00	; 0
     840:	e1 f7       	brne	.-8      	; 0x83a <LCD_init+0x58>
     842:	00 c0       	rjmp	.+0      	; 0x844 <LCD_init+0x62>
     844:	00 00       	nop
		_delay_ms(150);
		
		LCD_sendCommand(0x03);
     846:	83 e0       	ldi	r24, 0x03	; 3
     848:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
     84c:	8f e1       	ldi	r24, 0x1F	; 31
     84e:	9e e4       	ldi	r25, 0x4E	; 78
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	f1 f7       	brne	.-4      	; 0x850 <LCD_init+0x6e>
     854:	00 c0       	rjmp	.+0      	; 0x856 <LCD_init+0x74>
     856:	00 00       	nop
		_delay_ms(5);
		LCD_sendCommand(0x03);
     858:	83 e0       	ldi	r24, 0x03	; 3
     85a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     85e:	87 e5       	ldi	r24, 0x57	; 87
     860:	92 e0       	ldi	r25, 0x02	; 2
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <__stack+0x3>
     866:	00 c0       	rjmp	.+0      	; 0x868 <__stack+0x9>
     868:	00 00       	nop
		_delay_us(150);
		
		LCD_sendCommand(0x03);
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
		LCD_sendCommand(0x02);
     870:	82 e0       	ldi	r24, 0x02	; 2
     872:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
		
		LCD_sendCommand(0x02);
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
		LCD_sendCommand(0x08);
     87c:	88 e0       	ldi	r24, 0x08	; 8
     87e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
		
		LCD_sendCommand(0x00);
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
		LCD_sendCommand(0x0C);
     888:	8c e0       	ldi	r24, 0x0C	; 12
     88a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
		
		LCD_sendCommand(0x00);
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
		LCD_sendCommand(0x06);
     894:	86 e0       	ldi	r24, 0x06	; 6
     896:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
		
		LCD_sendCommand(0x00);
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
		LCD_sendCommand(0x01);
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
	{
		errorStatus = KEYPAD_ERROR + ALREADY_INIT;
		return errorStatus;
	}
	
	LCD_Init_State = TRUE;
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	80 93 de 01 	sts	0x01DE, r24
	errorStatus = E_OK;

	return errorStatus;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__stack+0x57>
		LCD_sendCommand(0x01);
	}
	else
	{
		errorStatus = KEYPAD_ERROR + ALREADY_INIT;
		return errorStatus;
     8b2:	83 e2       	ldi	r24, 0x23	; 35
     8b4:	93 e0       	ldi	r25, 0x03	; 3
	
	LCD_Init_State = TRUE;
	errorStatus = E_OK;

	return errorStatus;
}
     8b6:	26 96       	adiw	r28, 0x06	; 6
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <LCD_displayChar>:
	
	return errorStatus;
}

ERROR_STATUS LCD_displayChar(uint8_t a_CH)
{
     8c8:	cf 93       	push	r28
	ERROR_STATUS errorStatus = E_NOK;
	uint8_t Low4,High4;
	  
	if(LCD_Init_State == TRUE)
     8ca:	90 91 de 01 	lds	r25, 0x01DE
     8ce:	91 30       	cpi	r25, 0x01	; 1
     8d0:	91 f5       	brne	.+100    	; 0x936 <LCD_displayChar+0x6e>
     8d2:	c8 2f       	mov	r28, r24
	{
		Low4 = a_CH & 0x0F;
		High4 = a_CH & 0xF0;
		
		DIO_Write(LCD_GPIO, RS, HIGH);
     8d4:	4f ef       	ldi	r20, 0xFF	; 255
     8d6:	62 e0       	ldi	r22, 0x02	; 2
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
		
		LCD_DATA(High4>>4);
     8de:	8c 2f       	mov	r24, r28
     8e0:	82 95       	swap	r24
     8e2:	8f 70       	andi	r24, 0x0F	; 15
     8e4:	0e 94 99 03 	call	0x732	; 0x732 <LCD_DATA>
		DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, HIGH);
     8e8:	4f ef       	ldi	r20, 0xFF	; 255
     8ea:	68 e0       	ldi	r22, 0x08	; 8
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
     8f2:	80 e5       	ldi	r24, 0x50	; 80
     8f4:	8a 95       	dec	r24
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <LCD_displayChar+0x2c>
		_delay_us(15);
		DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, LOW);
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	68 e0       	ldi	r22, 0x08	; 8
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
     902:	80 e5       	ldi	r24, 0x50	; 80
     904:	8a 95       	dec	r24
     906:	f1 f7       	brne	.-4      	; 0x904 <LCD_displayChar+0x3c>
		_delay_us(15);
		
		LCD_DATA(Low4);
     908:	8c 2f       	mov	r24, r28
     90a:	8f 70       	andi	r24, 0x0F	; 15
     90c:	0e 94 99 03 	call	0x732	; 0x732 <LCD_DATA>
		DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, HIGH);
     910:	4f ef       	ldi	r20, 0xFF	; 255
     912:	68 e0       	ldi	r22, 0x08	; 8
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
     91a:	80 e5       	ldi	r24, 0x50	; 80
     91c:	8a 95       	dec	r24
     91e:	f1 f7       	brne	.-4      	; 0x91c <LCD_displayChar+0x54>
		_delay_us(15);
		DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, LOW);
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	68 e0       	ldi	r22, 0x08	; 8
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
     92a:	80 e5       	ldi	r24, 0x50	; 80
     92c:	8a 95       	dec	r24
     92e:	f1 f7       	brne	.-4      	; 0x92c <LCD_displayChar+0x64>
		return errorStatus;
	} 
	
	errorStatus = E_OK;
	
	return errorStatus;
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	02 c0       	rjmp	.+4      	; 0x93a <LCD_displayChar+0x72>
		_delay_us(15);
	}
	else
	{
		errorStatus = LCD_ERROR + NOT_INIT;
		return errorStatus;
     936:	8e eb       	ldi	r24, 0xBE	; 190
     938:	92 e0       	ldi	r25, 0x02	; 2
	} 
	
	errorStatus = E_OK;
	
	return errorStatus;
}
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <LCD_gotoRowColumn>:

ERROR_STATUS LCD_gotoRowColumn(uint8_t a_ROW, uint8_t a_COL)
{
     93e:	cf 93       	push	r28
	ERROR_STATUS errorStatus = E_NOK;
	uint8_t Temp,Low4,High4;
	
	if(LCD_Init_State == TRUE)
     940:	90 91 de 01 	lds	r25, 0x01DE
     944:	91 30       	cpi	r25, 0x01	; 1
     946:	01 f5       	brne	.+64     	; 0x988 <LCD_gotoRowColumn+0x4a>
	{
		if(a_ROW == 1)
     948:	81 30       	cpi	r24, 0x01	; 1
     94a:	71 f4       	brne	.+28     	; 0x968 <LCD_gotoRowColumn+0x2a>
		{
			Temp = 0x80 + a_COL - 1;
     94c:	cf e7       	ldi	r28, 0x7F	; 127
     94e:	c6 0f       	add	r28, r22
			High4 = Temp >> 4;
			Low4 = Temp & 0x0F;
			LCD_sendCommand(High4);
     950:	8c 2f       	mov	r24, r28
     952:	82 95       	swap	r24
     954:	8f 70       	andi	r24, 0x0F	; 15
     956:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
			LCD_sendCommand(Low4);
     95a:	8c 2f       	mov	r24, r28
     95c:	8f 70       	andi	r24, 0x0F	; 15
     95e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
		return errorStatus;
	}
	
	errorStatus = E_OK;
	
	return errorStatus;
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	15 c0       	rjmp	.+42     	; 0x992 <LCD_gotoRowColumn+0x54>
			High4 = Temp >> 4;
			Low4 = Temp & 0x0F;
			LCD_sendCommand(High4);
			LCD_sendCommand(Low4);
		}
		if(a_ROW == 2)
     968:	82 30       	cpi	r24, 0x02	; 2
     96a:	89 f4       	brne	.+34     	; 0x98e <LCD_gotoRowColumn+0x50>
		{
			Temp = 0xC0 + a_COL - 1;
     96c:	cf eb       	ldi	r28, 0xBF	; 191
     96e:	c6 0f       	add	r28, r22
			High4 = Temp >> 4;
			Low4 = Temp & 0x0F;
			LCD_sendCommand(High4);
     970:	8c 2f       	mov	r24, r28
     972:	82 95       	swap	r24
     974:	8f 70       	andi	r24, 0x0F	; 15
     976:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
			LCD_sendCommand(Low4);
     97a:	8c 2f       	mov	r24, r28
     97c:	8f 70       	andi	r24, 0x0F	; 15
     97e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
		return errorStatus;
	}
	
	errorStatus = E_OK;
	
	return errorStatus;
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	05 c0       	rjmp	.+10     	; 0x992 <LCD_gotoRowColumn+0x54>
		}
	}
	else
	{
		errorStatus = LCD_ERROR + NOT_INIT;
		return errorStatus;
     988:	8e eb       	ldi	r24, 0xBE	; 190
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	02 c0       	rjmp	.+4      	; 0x992 <LCD_gotoRowColumn+0x54>
	}
	
	errorStatus = E_OK;
	
	return errorStatus;
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
}
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <LCD_displayString>:

ERROR_STATUS LCD_displayString(uint8_t* a_STR)
{
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	uint8_t i;
	
	if(LCD_Init_State == TRUE)
     99e:	80 91 de 01 	lds	r24, 0x01DE
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	99 f4       	brne	.+38     	; 0x9cc <LCD_displayString+0x36>
	{
		if(a_STR != NULL)
     9a6:	30 97       	sbiw	r30, 0x00	; 0
     9a8:	a1 f0       	breq	.+40     	; 0x9d2 <LCD_displayString+0x3c>
		{
			for(i=0; a_STR[i] != '\0'; i++)
     9aa:	80 81       	ld	r24, Z
     9ac:	88 23       	and	r24, r24
     9ae:	a1 f0       	breq	.+40     	; 0x9d8 <LCD_displayString+0x42>
     9b0:	8f 01       	movw	r16, r30
     9b2:	c0 e0       	ldi	r28, 0x00	; 0
			{
				LCD_displayChar(a_STR[i]);
     9b4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_displayChar>
	
	if(LCD_Init_State == TRUE)
	{
		if(a_STR != NULL)
		{
			for(i=0; a_STR[i] != '\0'; i++)
     9b8:	cf 5f       	subi	r28, 0xFF	; 255
     9ba:	f8 01       	movw	r30, r16
     9bc:	ec 0f       	add	r30, r28
     9be:	f1 1d       	adc	r31, r1
     9c0:	80 81       	ld	r24, Z
     9c2:	81 11       	cpse	r24, r1
     9c4:	f7 cf       	rjmp	.-18     	; 0x9b4 <LCD_displayString+0x1e>
		return errorStatus;
	}

	errorStatus = E_OK;
	
	return errorStatus;
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	08 c0       	rjmp	.+16     	; 0x9dc <LCD_displayString+0x46>
		}
	}
	else
	{
		errorStatus = LCD_ERROR + NOT_INIT;
		return errorStatus;
     9cc:	8e eb       	ldi	r24, 0xBE	; 190
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	05 c0       	rjmp	.+10     	; 0x9dc <LCD_displayString+0x46>
			}
		}
		else
		{
			errorStatus = LCD_ERROR + NULL_PTR;
			return errorStatus;
     9d2:	8d eb       	ldi	r24, 0xBD	; 189
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <LCD_displayString+0x46>
		return errorStatus;
	}

	errorStatus = E_OK;
	
	return errorStatus;
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
}
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	08 95       	ret

000009e4 <LCD_displayStringRowColumn>:

ERROR_STATUS LCD_displayStringRowColumn(uint8_t a_ROW, uint8_t a_COL, uint8_t* a_STR)
{
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
	ERROR_STATUS errorStatus = E_NOK;
	
	if(LCD_Init_State == TRUE)
     9e8:	90 91 de 01 	lds	r25, 0x01DE
     9ec:	91 30       	cpi	r25, 0x01	; 1
     9ee:	61 f4       	brne	.+24     	; 0xa08 <LCD_displayStringRowColumn+0x24>
	{
		if(a_STR != NULL)
     9f0:	41 15       	cp	r20, r1
     9f2:	51 05       	cpc	r21, r1
     9f4:	61 f0       	breq	.+24     	; 0xa0e <LCD_displayStringRowColumn+0x2a>
     9f6:	ea 01       	movw	r28, r20
		{
			LCD_gotoRowColumn(a_ROW, a_COL);
     9f8:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_gotoRowColumn>
			LCD_displayString(a_STR);
     9fc:	ce 01       	movw	r24, r28
     9fe:	0e 94 cb 04 	call	0x996	; 0x996 <LCD_displayString>
		return errorStatus;
	}
	
	errorStatus = E_OK;
	
	return errorStatus;
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	05 c0       	rjmp	.+10     	; 0xa12 <LCD_displayStringRowColumn+0x2e>
		}
	}
	else
	{
		errorStatus = LCD_ERROR + NOT_INIT;
		return errorStatus;
     a08:	8e eb       	ldi	r24, 0xBE	; 190
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <LCD_displayStringRowColumn+0x2e>
			LCD_displayString(a_STR);
		}
		else
		{
			errorStatus = LCD_ERROR + NULL_PTR;
			return errorStatus;
     a0e:	8d eb       	ldi	r24, 0xBD	; 189
     a10:	92 e0       	ldi	r25, 0x02	; 2
	}
	
	errorStatus = E_OK;
	
	return errorStatus;
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <LCD_clear>:

ERROR_STATUS LCD_clear(void)
{
	ERROR_STATUS errorStatus = E_NOK;
	
	if(LCD_Init_State == TRUE)
     a18:	80 91 de 01 	lds	r24, 0x01DE
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	49 f4       	brne	.+18     	; 0xa32 <LCD_clear+0x1a>
	{
		LCD_sendCommand(0x00);
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
		LCD_sendCommand(0x01);
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_sendCommand>
		return errorStatus;
	}
	
	errorStatus = E_OK;
	
	return errorStatus;
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	08 95       	ret
		LCD_sendCommand(0x01);
	}
	else
	{
		errorStatus = LCD_ERROR + NOT_INIT;
		return errorStatus;
     a32:	8e eb       	ldi	r24, 0xBE	; 190
     a34:	92 e0       	ldi	r25, 0x02	; 2
	}
	
	errorStatus = E_OK;
	
	return errorStatus;
     a36:	08 95       	ret

00000a38 <Dummy>:

/*==========================================================================*/
void Game_App(void);
void Dummy(void)
{
	DIO_Toggle(Test_Pin.GPIO, Test_Pin.pins);
     a38:	e9 e5       	ldi	r30, 0x59	; 89
     a3a:	f3 e0       	ldi	r31, 0x03	; 3
     a3c:	61 81       	ldd	r22, Z+1	; 0x01
     a3e:	80 81       	ld	r24, Z
     a40:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <DIO_Toggle>
     a44:	08 95       	ret

00000a46 <Scan_Keypad>:
}
void Scan_Keypad()
{
	Keypad_Scan(key_states);
     a46:	83 ee       	ldi	r24, 0xE3	; 227
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Keypad_Scan>
     a4e:	08 95       	ret

00000a50 <Update_LEDs>:
}
void Update_LEDs()
{
	if((key_states[0] == KEY_PRESSED) | (key_states[1] == KEY_PRESSED) | (key_states[2] == KEY_PRESSED))
     a50:	e3 ee       	ldi	r30, 0xE3	; 227
     a52:	f1 e0       	ldi	r31, 0x01	; 1
     a54:	90 81       	ld	r25, Z
     a56:	21 81       	ldd	r18, Z+1	; 0x01
     a58:	42 81       	ldd	r20, Z+2	; 0x02
     a5a:	31 e0       	ldi	r19, 0x01	; 1
     a5c:	21 30       	cpi	r18, 0x01	; 1
     a5e:	09 f0       	breq	.+2      	; 0xa62 <Update_LEDs+0x12>
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	91 30       	cpi	r25, 0x01	; 1
     a66:	09 f0       	breq	.+2      	; 0xa6a <Update_LEDs+0x1a>
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	83 2b       	or	r24, r19
     a6c:	31 f4       	brne	.+12     	; 0xa7a <Update_LEDs+0x2a>
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	41 30       	cpi	r20, 0x01	; 1
     a72:	09 f0       	breq	.+2      	; 0xa76 <Update_LEDs+0x26>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	88 23       	and	r24, r24
     a78:	e9 f0       	breq	.+58     	; 0xab4 <Update_LEDs+0x64>
	{
		DIO_Write(g_LED0.GPIO, g_LED0.pins, HIGH);
     a7a:	e8 e4       	ldi	r30, 0x48	; 72
     a7c:	f3 e0       	ldi	r31, 0x03	; 3
     a7e:	4f ef       	ldi	r20, 0xFF	; 255
     a80:	61 81       	ldd	r22, Z+1	; 0x01
     a82:	80 81       	ld	r24, Z
     a84:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
		DIO_Write(g_LED1.GPIO, g_LED1.pins, HIGH);
     a88:	ee e4       	ldi	r30, 0x4E	; 78
     a8a:	f3 e0       	ldi	r31, 0x03	; 3
     a8c:	4f ef       	ldi	r20, 0xFF	; 255
     a8e:	61 81       	ldd	r22, Z+1	; 0x01
     a90:	80 81       	ld	r24, Z
     a92:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
		DIO_Write(g_LED2.GPIO, g_LED2.pins, HIGH);
     a96:	eb e4       	ldi	r30, 0x4B	; 75
     a98:	f3 e0       	ldi	r31, 0x03	; 3
     a9a:	4f ef       	ldi	r20, 0xFF	; 255
     a9c:	61 81       	ldd	r22, Z+1	; 0x01
     a9e:	80 81       	ld	r24, Z
     aa0:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
		DIO_Write(g_LED3.GPIO, g_LED3.pins, HIGH);
     aa4:	e1 e5       	ldi	r30, 0x51	; 81
     aa6:	f3 e0       	ldi	r31, 0x03	; 3
     aa8:	4f ef       	ldi	r20, 0xFF	; 255
     aaa:	61 81       	ldd	r22, Z+1	; 0x01
     aac:	80 81       	ld	r24, Z
     aae:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
     ab2:	08 95       	ret
	}	
	else if((key_states[0] == KEY_RELEASED) | (key_states[1] == KEY_RELEASED) | (key_states[2] == KEY_RELEASED))
     ab4:	31 e0       	ldi	r19, 0x01	; 1
     ab6:	21 11       	cpse	r18, r1
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	91 11       	cpse	r25, r1
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	83 2b       	or	r24, r19
     ac2:	29 f4       	brne	.+10     	; 0xace <Update_LEDs+0x7e>
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	41 11       	cpse	r20, r1
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	88 23       	and	r24, r24
     acc:	e1 f0       	breq	.+56     	; 0xb06 <Update_LEDs+0xb6>
	{
		DIO_Write(g_LED0.GPIO, g_LED0.pins, LOW);
     ace:	e8 e4       	ldi	r30, 0x48	; 72
     ad0:	f3 e0       	ldi	r31, 0x03	; 3
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	61 81       	ldd	r22, Z+1	; 0x01
     ad6:	80 81       	ld	r24, Z
     ad8:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
		DIO_Write(g_LED1.GPIO, g_LED1.pins, LOW);
     adc:	ee e4       	ldi	r30, 0x4E	; 78
     ade:	f3 e0       	ldi	r31, 0x03	; 3
     ae0:	40 e0       	ldi	r20, 0x00	; 0
     ae2:	61 81       	ldd	r22, Z+1	; 0x01
     ae4:	80 81       	ld	r24, Z
     ae6:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
		DIO_Write(g_LED2.GPIO, g_LED2.pins, LOW);
     aea:	eb e4       	ldi	r30, 0x4B	; 75
     aec:	f3 e0       	ldi	r31, 0x03	; 3
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	61 81       	ldd	r22, Z+1	; 0x01
     af2:	80 81       	ld	r24, Z
     af4:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
		DIO_Write(g_LED3.GPIO, g_LED3.pins, LOW);
     af8:	e1 e5       	ldi	r30, 0x51	; 81
     afa:	f3 e0       	ldi	r31, 0x03	; 3
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	61 81       	ldd	r22, Z+1	; 0x01
     b00:	80 81       	ld	r24, Z
     b02:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_Write>
     b06:	08 95       	ret

00000b08 <Game_App>:
}

/*==========================================================================*/

void Game_App(void)
{
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <Game_App+0x6>
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
	static uint8_t Game_FSM = ZERO, Ticks = ZERO, Score = ZERO, Key_Hold = ZERO;
	uint8_t score_ch[2] = {'\0'};
     b12:	1a 82       	std	Y+2, r1	; 0x02
     b14:	19 82       	std	Y+1, r1	; 0x01
	
	switch(Game_FSM)
     b16:	e0 91 e2 01 	lds	r30, 0x01E2
     b1a:	8e 2f       	mov	r24, r30
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	87 30       	cpi	r24, 0x07	; 7
     b20:	91 05       	cpc	r25, r1
     b22:	08 f0       	brcs	.+2      	; 0xb26 <Game_App+0x1e>
     b24:	c4 c2       	rjmp	.+1416   	; 0x10ae <Game_App+0x5a6>
     b26:	fc 01       	movw	r30, r24
     b28:	e6 5d       	subi	r30, 0xD6	; 214
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__tablejump2__>
	{
		case GAME_INTRO_STATE:
		{
			if(Ticks == ZERO)
     b30:	80 91 e1 01 	lds	r24, 0x01E1
     b34:	81 11       	cpse	r24, r1
     b36:	12 c0       	rjmp	.+36     	; 0xb5c <Game_App+0x54>
			{
				LCD_displayStringRowColumn(1, 4, (uint8_t*)"Welcome To");
     b38:	4e ea       	ldi	r20, 0xAE	; 174
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	64 e0       	ldi	r22, 0x04	; 4
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 5, (uint8_t*)"The Game");
     b44:	49 eb       	ldi	r20, 0xB9	; 185
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	65 e0       	ldi	r22, 0x05	; 5
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				Ticks++;
     b50:	80 91 e1 01 	lds	r24, 0x01E1
     b54:	8f 5f       	subi	r24, 0xFF	; 255
     b56:	80 93 e1 01 	sts	0x01E1, r24
     b5a:	a9 c2       	rjmp	.+1362   	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks < 50)
     b5c:	82 33       	cpi	r24, 0x32	; 50
     b5e:	20 f4       	brcc	.+8      	; 0xb68 <Game_App+0x60>
			{
				Ticks++;
     b60:	8f 5f       	subi	r24, 0xFF	; 255
     b62:	80 93 e1 01 	sts	0x01E1, r24
     b66:	a3 c2       	rjmp	.+1350   	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks == 50)
     b68:	82 33       	cpi	r24, 0x32	; 50
     b6a:	91 f4       	brne	.+36     	; 0xb90 <Game_App+0x88>
			{
				LCD_displayStringRowColumn(1, 3, (uint8_t*)"Press Any Key");
     b6c:	42 ec       	ldi	r20, 0xC2	; 194
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	63 e0       	ldi	r22, 0x03	; 3
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 5, (uint8_t*)"To Start");
     b78:	40 ed       	ldi	r20, 0xD0	; 208
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	65 e0       	ldi	r22, 0x05	; 5
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				Ticks++;
     b84:	80 91 e1 01 	lds	r24, 0x01E1
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	80 93 e1 01 	sts	0x01E1, r24
     b8e:	8f c2       	rjmp	.+1310   	; 0x10ae <Game_App+0x5a6>
			}
			else
			{
				if(((key_states[0] == KEY_PRESSED) | (key_states[1] == KEY_PRESSED) | (key_states[2] == KEY_PRESSED)) && !Key_Hold)
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	80 91 e4 01 	lds	r24, 0x01E4
     b96:	81 30       	cpi	r24, 0x01	; 1
     b98:	09 f0       	breq	.+2      	; 0xb9c <Game_App+0x94>
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	20 91 e3 01 	lds	r18, 0x01E3
     ba2:	21 30       	cpi	r18, 0x01	; 1
     ba4:	09 f0       	breq	.+2      	; 0xba8 <Game_App+0xa0>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	89 2b       	or	r24, r25
     baa:	41 f4       	brne	.+16     	; 0xbbc <Game_App+0xb4>
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 91 e5 01 	lds	r25, 0x01E5
     bb2:	91 30       	cpi	r25, 0x01	; 1
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <Game_App+0xb0>
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	88 23       	and	r24, r24
     bba:	a1 f0       	breq	.+40     	; 0xbe4 <Game_App+0xdc>
     bbc:	80 91 e0 01 	lds	r24, 0x01E0
     bc0:	81 11       	cpse	r24, r1
     bc2:	10 c0       	rjmp	.+32     	; 0xbe4 <Game_App+0xdc>
				{
					LCD_displayStringRowColumn(1, 1, (uint8_t*)"Answer By Hiting");
     bc4:	49 ed       	ldi	r20, 0xD9	; 217
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(2, 1, (uint8_t*)"YES / NO / SKIP");
     bd0:	4a ee       	ldi	r20, 0xEA	; 234
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	61 e0       	ldi	r22, 0x01	; 1
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
					Key_Hold = 1;
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 93 e0 01 	sts	0x01E0, r24
     be2:	05 c0       	rjmp	.+10     	; 0xbee <Game_App+0xe6>
				}
				if((Key_Hold == 1) && ((key_states[0] == KEY_RELEASED)&&(key_states[1] == KEY_RELEASED)&&(key_states[2] == KEY_RELEASED)))
     be4:	80 91 e0 01 	lds	r24, 0x01E0
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	09 f0       	breq	.+2      	; 0xbee <Game_App+0xe6>
     bec:	60 c2       	rjmp	.+1216   	; 0x10ae <Game_App+0x5a6>
     bee:	80 91 e3 01 	lds	r24, 0x01E3
     bf2:	81 11       	cpse	r24, r1
     bf4:	5c c2       	rjmp	.+1208   	; 0x10ae <Game_App+0x5a6>
     bf6:	80 91 e4 01 	lds	r24, 0x01E4
     bfa:	81 11       	cpse	r24, r1
     bfc:	58 c2       	rjmp	.+1200   	; 0x10ae <Game_App+0x5a6>
     bfe:	80 91 e5 01 	lds	r24, 0x01E5
     c02:	81 11       	cpse	r24, r1
     c04:	54 c2       	rjmp	.+1192   	; 0x10ae <Game_App+0x5a6>
				{
					Key_Hold = ZERO;
     c06:	10 92 e0 01 	sts	0x01E0, r1
					Ticks = ZERO;
     c0a:	10 92 e1 01 	sts	0x01E1, r1
					Game_FSM = GAME_Q1_STATE;
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	80 93 e2 01 	sts	0x01E2, r24
     c14:	4c c2       	rjmp	.+1176   	; 0x10ae <Game_App+0x5a6>
			}
			break;
		}
		case GAME_Q1_STATE:
		{
			if(Ticks == 50)
     c16:	80 91 e1 01 	lds	r24, 0x01E1
     c1a:	82 33       	cpi	r24, 0x32	; 50
     c1c:	41 f4       	brne	.+16     	; 0xc2e <Game_App+0x126>
			{
				LCD_clear();
     c1e:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clear>
				Ticks++;
     c22:	80 91 e1 01 	lds	r24, 0x01E1
     c26:	8f 5f       	subi	r24, 0xFF	; 255
     c28:	80 93 e1 01 	sts	0x01E1, r24
     c2c:	40 c2       	rjmp	.+1152   	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks < 55)
     c2e:	87 33       	cpi	r24, 0x37	; 55
     c30:	20 f4       	brcc	.+8      	; 0xc3a <Game_App+0x132>
			{
				Ticks++;
     c32:	8f 5f       	subi	r24, 0xFF	; 255
     c34:	80 93 e1 01 	sts	0x01E1, r24
     c38:	3a c2       	rjmp	.+1140   	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks == 55)
     c3a:	87 33       	cpi	r24, 0x37	; 55
     c3c:	91 f4       	brne	.+36     	; 0xc62 <Game_App+0x15a>
			{
				LCD_displayStringRowColumn(1, 1, (uint8_t*)"Mars Planet Has");
     c3e:	4a ef       	ldi	r20, 0xFA	; 250
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	61 e0       	ldi	r22, 0x01	; 1
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 1, (uint8_t*)"3 Moons");
     c4a:	4a e0       	ldi	r20, 0x0A	; 10
     c4c:	51 e0       	ldi	r21, 0x01	; 1
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				Ticks++;
     c56:	80 91 e1 01 	lds	r24, 0x01E1
     c5a:	8f 5f       	subi	r24, 0xFF	; 255
     c5c:	80 93 e1 01 	sts	0x01E1, r24
     c60:	26 c2       	rjmp	.+1100   	; 0x10ae <Game_App+0x5a6>
			}
			else
			{
				if(((key_states[0] == KEY_PRESSED) | (key_states[1] == KEY_PRESSED) | (key_states[2] == KEY_PRESSED)) && !Key_Hold)
     c62:	e3 ee       	ldi	r30, 0xE3	; 227
     c64:	f1 e0       	ldi	r31, 0x01	; 1
     c66:	20 81       	ld	r18, Z
     c68:	31 81       	ldd	r19, Z+1	; 0x01
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	31 30       	cpi	r19, 0x01	; 1
     c6e:	09 f0       	breq	.+2      	; 0xc72 <Game_App+0x16a>
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	40 91 e5 01 	lds	r20, 0x01E5
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	21 30       	cpi	r18, 0x01	; 1
     c7a:	09 f0       	breq	.+2      	; 0xc7e <Game_App+0x176>
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	89 2b       	or	r24, r25
     c80:	31 f4       	brne	.+12     	; 0xc8e <Game_App+0x186>
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	41 30       	cpi	r20, 0x01	; 1
     c86:	09 f0       	breq	.+2      	; 0xc8a <Game_App+0x182>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	88 23       	and	r24, r24
     c8c:	79 f0       	breq	.+30     	; 0xcac <Game_App+0x1a4>
     c8e:	80 91 e0 01 	lds	r24, 0x01E0
     c92:	81 11       	cpse	r24, r1
     c94:	0b c0       	rjmp	.+22     	; 0xcac <Game_App+0x1a4>
				{
					if(key_states[1] == KEY_PRESSED)
     c96:	99 23       	and	r25, r25
     c98:	29 f0       	breq	.+10     	; 0xca4 <Game_App+0x19c>
					{ Score++; }
     c9a:	80 91 df 01 	lds	r24, 0x01DF
     c9e:	8f 5f       	subi	r24, 0xFF	; 255
     ca0:	80 93 df 01 	sts	0x01DF, r24
					Key_Hold = 1;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 93 e0 01 	sts	0x01E0, r24
     caa:	05 c0       	rjmp	.+10     	; 0xcb6 <Game_App+0x1ae>
				}
				if((Key_Hold == 1) && ((key_states[0] == KEY_RELEASED)&&(key_states[1] == KEY_RELEASED)&&(key_states[2] == KEY_RELEASED)))
     cac:	80 91 e0 01 	lds	r24, 0x01E0
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <Game_App+0x1ae>
     cb4:	fc c1       	rjmp	.+1016   	; 0x10ae <Game_App+0x5a6>
     cb6:	21 11       	cpse	r18, r1
     cb8:	fa c1       	rjmp	.+1012   	; 0x10ae <Game_App+0x5a6>
     cba:	31 11       	cpse	r19, r1
     cbc:	f8 c1       	rjmp	.+1008   	; 0x10ae <Game_App+0x5a6>
     cbe:	41 11       	cpse	r20, r1
     cc0:	f6 c1       	rjmp	.+1004   	; 0x10ae <Game_App+0x5a6>
				{
					Key_Hold = ZERO;
     cc2:	10 92 e0 01 	sts	0x01E0, r1
					Ticks = ZERO;
     cc6:	10 92 e1 01 	sts	0x01E1, r1
					Game_FSM = GAME_Q2_STATE;
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	80 93 e2 01 	sts	0x01E2, r24
     cd0:	ee c1       	rjmp	.+988    	; 0x10ae <Game_App+0x5a6>
			}
			break;
		}
		case GAME_Q2_STATE:
		{
			if(Ticks == ZERO)
     cd2:	80 91 e1 01 	lds	r24, 0x01E1
     cd6:	81 11       	cpse	r24, r1
     cd8:	08 c0       	rjmp	.+16     	; 0xcea <Game_App+0x1e2>
			{
				LCD_clear();
     cda:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clear>
				Ticks++;
     cde:	80 91 e1 01 	lds	r24, 0x01E1
     ce2:	8f 5f       	subi	r24, 0xFF	; 255
     ce4:	80 93 e1 01 	sts	0x01E1, r24
     ce8:	e2 c1       	rjmp	.+964    	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks < 5)
     cea:	85 30       	cpi	r24, 0x05	; 5
     cec:	20 f4       	brcc	.+8      	; 0xcf6 <Game_App+0x1ee>
			{
				Ticks++;
     cee:	8f 5f       	subi	r24, 0xFF	; 255
     cf0:	80 93 e1 01 	sts	0x01E1, r24
     cf4:	dc c1       	rjmp	.+952    	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks == 5)
     cf6:	85 30       	cpi	r24, 0x05	; 5
     cf8:	91 f4       	brne	.+36     	; 0xd1e <Game_App+0x216>
			{
				LCD_displayStringRowColumn(1, 1, (uint8_t*)"A Year On Mars");
     cfa:	42 e1       	ldi	r20, 0x12	; 18
     cfc:	51 e0       	ldi	r21, 0x01	; 1
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 1, (uint8_t*)"Is 687 Days");
     d06:	41 e2       	ldi	r20, 0x21	; 33
     d08:	51 e0       	ldi	r21, 0x01	; 1
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				Ticks++;
     d12:	80 91 e1 01 	lds	r24, 0x01E1
     d16:	8f 5f       	subi	r24, 0xFF	; 255
     d18:	80 93 e1 01 	sts	0x01E1, r24
     d1c:	c8 c1       	rjmp	.+912    	; 0x10ae <Game_App+0x5a6>
			}
			else
			{
				if(((key_states[0] == KEY_PRESSED) | (key_states[1] == KEY_PRESSED) | (key_states[2] == KEY_PRESSED)) && !Key_Hold)
     d1e:	20 91 e3 01 	lds	r18, 0x01E3
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	21 30       	cpi	r18, 0x01	; 1
     d26:	09 f0       	breq	.+2      	; 0xd2a <Game_App+0x222>
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	e3 ee       	ldi	r30, 0xE3	; 227
     d2c:	f1 e0       	ldi	r31, 0x01	; 1
     d2e:	31 81       	ldd	r19, Z+1	; 0x01
     d30:	42 81       	ldd	r20, Z+2	; 0x02
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	31 30       	cpi	r19, 0x01	; 1
     d36:	09 f0       	breq	.+2      	; 0xd3a <Game_App+0x232>
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	89 2b       	or	r24, r25
     d3c:	31 f4       	brne	.+12     	; 0xd4a <Game_App+0x242>
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	41 30       	cpi	r20, 0x01	; 1
     d42:	09 f0       	breq	.+2      	; 0xd46 <Game_App+0x23e>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	88 23       	and	r24, r24
     d48:	79 f0       	breq	.+30     	; 0xd68 <Game_App+0x260>
     d4a:	80 91 e0 01 	lds	r24, 0x01E0
     d4e:	81 11       	cpse	r24, r1
     d50:	0b c0       	rjmp	.+22     	; 0xd68 <Game_App+0x260>
				{
					if(key_states[0] == KEY_PRESSED)
     d52:	99 23       	and	r25, r25
     d54:	29 f0       	breq	.+10     	; 0xd60 <Game_App+0x258>
					{ Score++; }
     d56:	80 91 df 01 	lds	r24, 0x01DF
     d5a:	8f 5f       	subi	r24, 0xFF	; 255
     d5c:	80 93 df 01 	sts	0x01DF, r24
					Key_Hold = 1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	80 93 e0 01 	sts	0x01E0, r24
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <Game_App+0x26a>
				}
				if((Key_Hold == 1) && ((key_states[0] == KEY_RELEASED)&&(key_states[1] == KEY_RELEASED)&&(key_states[2] == KEY_RELEASED)))
     d68:	80 91 e0 01 	lds	r24, 0x01E0
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	09 f0       	breq	.+2      	; 0xd72 <Game_App+0x26a>
     d70:	9e c1       	rjmp	.+828    	; 0x10ae <Game_App+0x5a6>
     d72:	21 11       	cpse	r18, r1
     d74:	9c c1       	rjmp	.+824    	; 0x10ae <Game_App+0x5a6>
     d76:	31 11       	cpse	r19, r1
     d78:	9a c1       	rjmp	.+820    	; 0x10ae <Game_App+0x5a6>
     d7a:	41 11       	cpse	r20, r1
     d7c:	98 c1       	rjmp	.+816    	; 0x10ae <Game_App+0x5a6>
				{
					Key_Hold = ZERO;
     d7e:	10 92 e0 01 	sts	0x01E0, r1
					Ticks = ZERO;
     d82:	10 92 e1 01 	sts	0x01E1, r1
					Game_FSM = GAME_Q3_STATE;
     d86:	83 e0       	ldi	r24, 0x03	; 3
     d88:	80 93 e2 01 	sts	0x01E2, r24
     d8c:	90 c1       	rjmp	.+800    	; 0x10ae <Game_App+0x5a6>
			}
			break;
		}
		case GAME_Q3_STATE:
		{
			if(Ticks == ZERO)
     d8e:	80 91 e1 01 	lds	r24, 0x01E1
     d92:	81 11       	cpse	r24, r1
     d94:	08 c0       	rjmp	.+16     	; 0xda6 <Game_App+0x29e>
			{
				LCD_clear();
     d96:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clear>
				Ticks++;
     d9a:	80 91 e1 01 	lds	r24, 0x01E1
     d9e:	8f 5f       	subi	r24, 0xFF	; 255
     da0:	80 93 e1 01 	sts	0x01E1, r24
     da4:	84 c1       	rjmp	.+776    	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks < 5)
     da6:	85 30       	cpi	r24, 0x05	; 5
     da8:	20 f4       	brcc	.+8      	; 0xdb2 <Game_App+0x2aa>
			{
				Ticks++;
     daa:	8f 5f       	subi	r24, 0xFF	; 255
     dac:	80 93 e1 01 	sts	0x01E1, r24
     db0:	7e c1       	rjmp	.+764    	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks == 5)
     db2:	85 30       	cpi	r24, 0x05	; 5
     db4:	91 f4       	brne	.+36     	; 0xdda <Game_App+0x2d2>
			{
				LCD_displayStringRowColumn(1, 1, (uint8_t*)"60kg On Earth");
     db6:	4d e2       	ldi	r20, 0x2D	; 45
     db8:	51 e0       	ldi	r21, 0x01	; 1
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 1, (uint8_t*)"Is 20kg on Moon");
     dc2:	4b e3       	ldi	r20, 0x3B	; 59
     dc4:	51 e0       	ldi	r21, 0x01	; 1
     dc6:	61 e0       	ldi	r22, 0x01	; 1
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				Ticks++;
     dce:	80 91 e1 01 	lds	r24, 0x01E1
     dd2:	8f 5f       	subi	r24, 0xFF	; 255
     dd4:	80 93 e1 01 	sts	0x01E1, r24
     dd8:	6a c1       	rjmp	.+724    	; 0x10ae <Game_App+0x5a6>
			}
			else
			{
				if(((key_states[0] == KEY_PRESSED) | (key_states[1] == KEY_PRESSED) | (key_states[2] == KEY_PRESSED)) && !Key_Hold)
     dda:	e3 ee       	ldi	r30, 0xE3	; 227
     ddc:	f1 e0       	ldi	r31, 0x01	; 1
     dde:	20 81       	ld	r18, Z
     de0:	31 81       	ldd	r19, Z+1	; 0x01
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	31 30       	cpi	r19, 0x01	; 1
     de6:	09 f0       	breq	.+2      	; 0xdea <Game_App+0x2e2>
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	40 91 e5 01 	lds	r20, 0x01E5
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	21 30       	cpi	r18, 0x01	; 1
     df2:	09 f0       	breq	.+2      	; 0xdf6 <Game_App+0x2ee>
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	89 2b       	or	r24, r25
     df8:	31 f4       	brne	.+12     	; 0xe06 <Game_App+0x2fe>
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	41 30       	cpi	r20, 0x01	; 1
     dfe:	09 f0       	breq	.+2      	; 0xe02 <Game_App+0x2fa>
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	88 23       	and	r24, r24
     e04:	79 f0       	breq	.+30     	; 0xe24 <Game_App+0x31c>
     e06:	80 91 e0 01 	lds	r24, 0x01E0
     e0a:	81 11       	cpse	r24, r1
     e0c:	0b c0       	rjmp	.+22     	; 0xe24 <Game_App+0x31c>
				{
					if(key_states[1] == KEY_PRESSED)
     e0e:	99 23       	and	r25, r25
     e10:	29 f0       	breq	.+10     	; 0xe1c <Game_App+0x314>
					{ Score++; }
     e12:	80 91 df 01 	lds	r24, 0x01DF
     e16:	8f 5f       	subi	r24, 0xFF	; 255
     e18:	80 93 df 01 	sts	0x01DF, r24
					Key_Hold = 1;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	80 93 e0 01 	sts	0x01E0, r24
     e22:	05 c0       	rjmp	.+10     	; 0xe2e <Game_App+0x326>
				}
				if((Key_Hold == 1) && ((key_states[0] == KEY_RELEASED)&&(key_states[1] == KEY_RELEASED)&&(key_states[2] == KEY_RELEASED)))
     e24:	80 91 e0 01 	lds	r24, 0x01E0
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	09 f0       	breq	.+2      	; 0xe2e <Game_App+0x326>
     e2c:	40 c1       	rjmp	.+640    	; 0x10ae <Game_App+0x5a6>
     e2e:	21 11       	cpse	r18, r1
     e30:	3e c1       	rjmp	.+636    	; 0x10ae <Game_App+0x5a6>
     e32:	31 11       	cpse	r19, r1
     e34:	3c c1       	rjmp	.+632    	; 0x10ae <Game_App+0x5a6>
     e36:	41 11       	cpse	r20, r1
     e38:	3a c1       	rjmp	.+628    	; 0x10ae <Game_App+0x5a6>
				{
					Key_Hold = ZERO;
     e3a:	10 92 e0 01 	sts	0x01E0, r1
					Ticks = ZERO;
     e3e:	10 92 e1 01 	sts	0x01E1, r1
					Game_FSM = GAME_Q4_STATE;
     e42:	84 e0       	ldi	r24, 0x04	; 4
     e44:	80 93 e2 01 	sts	0x01E2, r24
     e48:	32 c1       	rjmp	.+612    	; 0x10ae <Game_App+0x5a6>
			}
			break;
		}
		case GAME_Q4_STATE:
		{
			if(Ticks == ZERO)
     e4a:	80 91 e1 01 	lds	r24, 0x01E1
     e4e:	81 11       	cpse	r24, r1
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <Game_App+0x35a>
			{
				LCD_clear();
     e52:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clear>
				Ticks++;
     e56:	80 91 e1 01 	lds	r24, 0x01E1
     e5a:	8f 5f       	subi	r24, 0xFF	; 255
     e5c:	80 93 e1 01 	sts	0x01E1, r24
     e60:	26 c1       	rjmp	.+588    	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks < 5)
     e62:	85 30       	cpi	r24, 0x05	; 5
     e64:	20 f4       	brcc	.+8      	; 0xe6e <Game_App+0x366>
			{
				Ticks++;
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	80 93 e1 01 	sts	0x01E1, r24
     e6c:	20 c1       	rjmp	.+576    	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks == 5)
     e6e:	85 30       	cpi	r24, 0x05	; 5
     e70:	91 f4       	brne	.+36     	; 0xe96 <Game_App+0x38e>
			{
				LCD_displayStringRowColumn(1, 2, (uint8_t*)"1, 2, 4, 7, ??");
     e72:	4b e4       	ldi	r20, 0x4B	; 75
     e74:	51 e0       	ldi	r21, 0x01	; 1
     e76:	62 e0       	ldi	r22, 0x02	; 2
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 1, (uint8_t*)"Missing Num: 14");
     e7e:	4a e5       	ldi	r20, 0x5A	; 90
     e80:	51 e0       	ldi	r21, 0x01	; 1
     e82:	61 e0       	ldi	r22, 0x01	; 1
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				Ticks++;
     e8a:	80 91 e1 01 	lds	r24, 0x01E1
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	80 93 e1 01 	sts	0x01E1, r24
     e94:	0c c1       	rjmp	.+536    	; 0x10ae <Game_App+0x5a6>
			}
			else
			{
				if(((key_states[0] == KEY_PRESSED) | (key_states[1] == KEY_PRESSED) | (key_states[2] == KEY_PRESSED)) && !Key_Hold)
     e96:	e3 ee       	ldi	r30, 0xE3	; 227
     e98:	f1 e0       	ldi	r31, 0x01	; 1
     e9a:	20 81       	ld	r18, Z
     e9c:	31 81       	ldd	r19, Z+1	; 0x01
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	31 30       	cpi	r19, 0x01	; 1
     ea2:	09 f0       	breq	.+2      	; 0xea6 <Game_App+0x39e>
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	40 91 e5 01 	lds	r20, 0x01E5
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	21 30       	cpi	r18, 0x01	; 1
     eae:	09 f0       	breq	.+2      	; 0xeb2 <Game_App+0x3aa>
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	89 2b       	or	r24, r25
     eb4:	31 f4       	brne	.+12     	; 0xec2 <Game_App+0x3ba>
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	41 30       	cpi	r20, 0x01	; 1
     eba:	09 f0       	breq	.+2      	; 0xebe <Game_App+0x3b6>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	88 23       	and	r24, r24
     ec0:	79 f0       	breq	.+30     	; 0xee0 <Game_App+0x3d8>
     ec2:	80 91 e0 01 	lds	r24, 0x01E0
     ec6:	81 11       	cpse	r24, r1
     ec8:	0b c0       	rjmp	.+22     	; 0xee0 <Game_App+0x3d8>
				{
					if(key_states[1] == KEY_PRESSED)
     eca:	99 23       	and	r25, r25
     ecc:	29 f0       	breq	.+10     	; 0xed8 <Game_App+0x3d0>
					{ Score++; }
     ece:	80 91 df 01 	lds	r24, 0x01DF
     ed2:	8f 5f       	subi	r24, 0xFF	; 255
     ed4:	80 93 df 01 	sts	0x01DF, r24
					Key_Hold = 1;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	80 93 e0 01 	sts	0x01E0, r24
     ede:	05 c0       	rjmp	.+10     	; 0xeea <Game_App+0x3e2>
				}
				if((Key_Hold == 1) && ((key_states[0] == KEY_RELEASED)&&(key_states[1] == KEY_RELEASED)&&(key_states[2] == KEY_RELEASED)))
     ee0:	80 91 e0 01 	lds	r24, 0x01E0
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	09 f0       	breq	.+2      	; 0xeea <Game_App+0x3e2>
     ee8:	e2 c0       	rjmp	.+452    	; 0x10ae <Game_App+0x5a6>
     eea:	21 11       	cpse	r18, r1
     eec:	e0 c0       	rjmp	.+448    	; 0x10ae <Game_App+0x5a6>
     eee:	31 11       	cpse	r19, r1
     ef0:	de c0       	rjmp	.+444    	; 0x10ae <Game_App+0x5a6>
     ef2:	41 11       	cpse	r20, r1
     ef4:	dc c0       	rjmp	.+440    	; 0x10ae <Game_App+0x5a6>
				{
					Key_Hold = ZERO;
     ef6:	10 92 e0 01 	sts	0x01E0, r1
					Ticks = ZERO;
     efa:	10 92 e1 01 	sts	0x01E1, r1
					Game_FSM = GAME_Q5_STATE;
     efe:	85 e0       	ldi	r24, 0x05	; 5
     f00:	80 93 e2 01 	sts	0x01E2, r24
     f04:	d4 c0       	rjmp	.+424    	; 0x10ae <Game_App+0x5a6>
			}
			break;
		}
		case GAME_Q5_STATE:
		{
			if(Ticks == ZERO)
     f06:	80 91 e1 01 	lds	r24, 0x01E1
     f0a:	81 11       	cpse	r24, r1
     f0c:	08 c0       	rjmp	.+16     	; 0xf1e <Game_App+0x416>
			{
				LCD_clear();
     f0e:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clear>
				Ticks++;
     f12:	80 91 e1 01 	lds	r24, 0x01E1
     f16:	8f 5f       	subi	r24, 0xFF	; 255
     f18:	80 93 e1 01 	sts	0x01E1, r24
     f1c:	c8 c0       	rjmp	.+400    	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks < 5)
     f1e:	85 30       	cpi	r24, 0x05	; 5
     f20:	20 f4       	brcc	.+8      	; 0xf2a <Game_App+0x422>
			{
				Ticks++;
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	80 93 e1 01 	sts	0x01E1, r24
     f28:	c2 c0       	rjmp	.+388    	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks == 5)
     f2a:	85 30       	cpi	r24, 0x05	; 5
     f2c:	91 f4       	brne	.+36     	; 0xf52 <Game_App+0x44a>
			{
				LCD_displayStringRowColumn(1, 1, (uint8_t*)"Sound Travels In");
     f2e:	4a e6       	ldi	r20, 0x6A	; 106
     f30:	51 e0       	ldi	r21, 0x01	; 1
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 1, (uint8_t*)"Air Faster < H2O");
     f3a:	4b e7       	ldi	r20, 0x7B	; 123
     f3c:	51 e0       	ldi	r21, 0x01	; 1
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	82 e0       	ldi	r24, 0x02	; 2
     f42:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				Ticks++;
     f46:	80 91 e1 01 	lds	r24, 0x01E1
     f4a:	8f 5f       	subi	r24, 0xFF	; 255
     f4c:	80 93 e1 01 	sts	0x01E1, r24
     f50:	ae c0       	rjmp	.+348    	; 0x10ae <Game_App+0x5a6>
			}
			else
			{
				if(((key_states[0] == KEY_PRESSED) | (key_states[1] == KEY_PRESSED) | (key_states[2] == KEY_PRESSED)) && !Key_Hold)
     f52:	e3 ee       	ldi	r30, 0xE3	; 227
     f54:	f1 e0       	ldi	r31, 0x01	; 1
     f56:	20 81       	ld	r18, Z
     f58:	31 81       	ldd	r19, Z+1	; 0x01
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	31 30       	cpi	r19, 0x01	; 1
     f5e:	09 f0       	breq	.+2      	; 0xf62 <Game_App+0x45a>
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	40 91 e5 01 	lds	r20, 0x01E5
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	21 30       	cpi	r18, 0x01	; 1
     f6a:	09 f0       	breq	.+2      	; 0xf6e <Game_App+0x466>
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	89 2b       	or	r24, r25
     f70:	31 f4       	brne	.+12     	; 0xf7e <Game_App+0x476>
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	41 30       	cpi	r20, 0x01	; 1
     f76:	09 f0       	breq	.+2      	; 0xf7a <Game_App+0x472>
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	79 f0       	breq	.+30     	; 0xf9c <Game_App+0x494>
     f7e:	80 91 e0 01 	lds	r24, 0x01E0
     f82:	81 11       	cpse	r24, r1
     f84:	0b c0       	rjmp	.+22     	; 0xf9c <Game_App+0x494>
				{
					if(key_states[1] == KEY_PRESSED)
     f86:	99 23       	and	r25, r25
     f88:	29 f0       	breq	.+10     	; 0xf94 <Game_App+0x48c>
					{ Score++; }
     f8a:	80 91 df 01 	lds	r24, 0x01DF
     f8e:	8f 5f       	subi	r24, 0xFF	; 255
     f90:	80 93 df 01 	sts	0x01DF, r24
					Key_Hold = 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	80 93 e0 01 	sts	0x01E0, r24
     f9a:	05 c0       	rjmp	.+10     	; 0xfa6 <Game_App+0x49e>
				}
				if((Key_Hold == 1) && ((key_states[0] == KEY_RELEASED)&&(key_states[1] == KEY_RELEASED)&&(key_states[2] == KEY_RELEASED)))
     f9c:	80 91 e0 01 	lds	r24, 0x01E0
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <Game_App+0x49e>
     fa4:	84 c0       	rjmp	.+264    	; 0x10ae <Game_App+0x5a6>
     fa6:	21 11       	cpse	r18, r1
     fa8:	82 c0       	rjmp	.+260    	; 0x10ae <Game_App+0x5a6>
     faa:	31 11       	cpse	r19, r1
     fac:	80 c0       	rjmp	.+256    	; 0x10ae <Game_App+0x5a6>
     fae:	41 11       	cpse	r20, r1
     fb0:	7e c0       	rjmp	.+252    	; 0x10ae <Game_App+0x5a6>
				{
					Key_Hold = ZERO;
     fb2:	10 92 e0 01 	sts	0x01E0, r1
					Ticks = ZERO;
     fb6:	10 92 e1 01 	sts	0x01E1, r1
					Game_FSM = GAME_END_STATE;
     fba:	86 e0       	ldi	r24, 0x06	; 6
     fbc:	80 93 e2 01 	sts	0x01E2, r24
     fc0:	76 c0       	rjmp	.+236    	; 0x10ae <Game_App+0x5a6>
			}
			break;
		}
		case GAME_END_STATE:
		{
			if(Ticks == ZERO)
     fc2:	80 91 e1 01 	lds	r24, 0x01E1
     fc6:	81 11       	cpse	r24, r1
     fc8:	08 c0       	rjmp	.+16     	; 0xfda <Game_App+0x4d2>
			{
				LCD_clear();
     fca:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clear>
				Ticks++;
     fce:	80 91 e1 01 	lds	r24, 0x01E1
     fd2:	8f 5f       	subi	r24, 0xFF	; 255
     fd4:	80 93 e1 01 	sts	0x01E1, r24
     fd8:	6a c0       	rjmp	.+212    	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks < 5)
     fda:	85 30       	cpi	r24, 0x05	; 5
     fdc:	20 f4       	brcc	.+8      	; 0xfe6 <Game_App+0x4de>
			{
				Ticks++;
     fde:	8f 5f       	subi	r24, 0xFF	; 255
     fe0:	80 93 e1 01 	sts	0x01E1, r24
     fe4:	64 c0       	rjmp	.+200    	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks == 5)
     fe6:	85 30       	cpi	r24, 0x05	; 5
     fe8:	b9 f4       	brne	.+46     	; 0x1018 <Game_App+0x510>
			{
				score_ch[ZERO] = Score+48;
     fea:	80 91 df 01 	lds	r24, 0x01DF
     fee:	80 5d       	subi	r24, 0xD0	; 208
     ff0:	89 83       	std	Y+1, r24	; 0x01
				LCD_displayStringRowColumn(1, 2, (uint8_t*)"Your Score Is:");
     ff2:	4c e8       	ldi	r20, 0x8C	; 140
     ff4:	51 e0       	ldi	r21, 0x01	; 1
     ff6:	62 e0       	ldi	r22, 0x02	; 2
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 9, (uint8_t*)&score_ch);
     ffe:	ae 01       	movw	r20, r28
    1000:	4f 5f       	subi	r20, 0xFF	; 255
    1002:	5f 4f       	sbci	r21, 0xFF	; 255
    1004:	69 e0       	ldi	r22, 0x09	; 9
    1006:	82 e0       	ldi	r24, 0x02	; 2
    1008:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				Ticks++;
    100c:	80 91 e1 01 	lds	r24, 0x01E1
    1010:	8f 5f       	subi	r24, 0xFF	; 255
    1012:	80 93 e1 01 	sts	0x01E1, r24
    1016:	4b c0       	rjmp	.+150    	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks < 50)
    1018:	82 33       	cpi	r24, 0x32	; 50
    101a:	20 f4       	brcc	.+8      	; 0x1024 <Game_App+0x51c>
			{
				Ticks++;
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	80 93 e1 01 	sts	0x01E1, r24
    1022:	45 c0       	rjmp	.+138    	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks == 50)
    1024:	82 33       	cpi	r24, 0x32	; 50
    1026:	41 f4       	brne	.+16     	; 0x1038 <Game_App+0x530>
			{
				LCD_clear();
    1028:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clear>
				Ticks++;
    102c:	80 91 e1 01 	lds	r24, 0x01E1
    1030:	8f 5f       	subi	r24, 0xFF	; 255
    1032:	80 93 e1 01 	sts	0x01E1, r24
    1036:	3b c0       	rjmp	.+118    	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks < 55)
    1038:	87 33       	cpi	r24, 0x37	; 55
    103a:	20 f4       	brcc	.+8      	; 0x1044 <Game_App+0x53c>
			{
				Ticks++;
    103c:	8f 5f       	subi	r24, 0xFF	; 255
    103e:	80 93 e1 01 	sts	0x01E1, r24
    1042:	35 c0       	rjmp	.+106    	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks == 55)
    1044:	87 33       	cpi	r24, 0x37	; 55
    1046:	19 f5       	brne	.+70     	; 0x108e <Game_App+0x586>
			{
				if(Score == WIN_SCORE)
    1048:	80 91 df 01 	lds	r24, 0x01DF
    104c:	85 30       	cpi	r24, 0x05	; 5
    104e:	69 f4       	brne	.+26     	; 0x106a <Game_App+0x562>
				{
					LCD_displayStringRowColumn(1, 1, (uint8_t*)"Congratulations!");
    1050:	4b e9       	ldi	r20, 0x9B	; 155
    1052:	51 e0       	ldi	r21, 0x01	; 1
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(2, 5, (uint8_t*)"You Won!");	
    105c:	4c ea       	ldi	r20, 0xAC	; 172
    105e:	51 e0       	ldi	r21, 0x01	; 1
    1060:	65 e0       	ldi	r22, 0x05	; 5
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
    1068:	0c c0       	rjmp	.+24     	; 0x1082 <Game_App+0x57a>
				}
				else
				{
					LCD_displayStringRowColumn(1, 5, (uint8_t*)"Game Over");
    106a:	45 eb       	ldi	r20, 0xB5	; 181
    106c:	51 e0       	ldi	r21, 0x01	; 1
    106e:	65 e0       	ldi	r22, 0x05	; 5
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(2, 5, (uint8_t*)"You Lose!");
    1076:	4f eb       	ldi	r20, 0xBF	; 191
    1078:	51 e0       	ldi	r21, 0x01	; 1
    107a:	65 e0       	ldi	r22, 0x05	; 5
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <LCD_displayStringRowColumn>
				}
				Ticks++;
    1082:	80 91 e1 01 	lds	r24, 0x01E1
    1086:	8f 5f       	subi	r24, 0xFF	; 255
    1088:	80 93 e1 01 	sts	0x01E1, r24
    108c:	10 c0       	rjmp	.+32     	; 0x10ae <Game_App+0x5a6>
			}
			else if(Ticks < 100)
    108e:	84 36       	cpi	r24, 0x64	; 100
    1090:	20 f4       	brcc	.+8      	; 0x109a <Game_App+0x592>
			{
				Ticks++;
    1092:	8f 5f       	subi	r24, 0xFF	; 255
    1094:	80 93 e1 01 	sts	0x01E1, r24
    1098:	0a c0       	rjmp	.+20     	; 0x10ae <Game_App+0x5a6>
			}
			else
			{
				LCD_clear();
    109a:	0e 94 0c 05 	call	0xa18	; 0xa18 <LCD_clear>
				Score    = ZERO;
    109e:	10 92 df 01 	sts	0x01DF, r1
				Key_Hold = ZERO;
    10a2:	10 92 e0 01 	sts	0x01E0, r1
				Ticks    = ZERO;
    10a6:	10 92 e1 01 	sts	0x01E1, r1
				Game_FSM = GAME_INTRO_STATE;
    10aa:	10 92 e2 01 	sts	0x01E2, r1
			break;
		}
		default:
			break;
	}
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <Init_LEDs>:
		DIO_Write(g_LED2.GPIO, g_LED2.pins, LOW);
		DIO_Write(g_LED3.GPIO, g_LED3.pins, LOW);
	}
}
void Init_LEDs(void)
{
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
	g_LED0.GPIO = GPIOB;
    10bc:	e8 e4       	ldi	r30, 0x48	; 72
    10be:	f3 e0       	ldi	r31, 0x03	; 3
    10c0:	c1 e0       	ldi	r28, 0x01	; 1
    10c2:	c0 83       	st	Z, r28
	g_LED0.dir  = OUTPUT;
    10c4:	df ef       	ldi	r29, 0xFF	; 255
    10c6:	d2 83       	std	Z+2, r29	; 0x02
	g_LED0.pins = BIT4;
    10c8:	80 e1       	ldi	r24, 0x10	; 16
    10ca:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED0);
    10cc:	cf 01       	movw	r24, r30
    10ce:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_init>
	g_LED1.GPIO = GPIOB;
    10d2:	ee e4       	ldi	r30, 0x4E	; 78
    10d4:	f3 e0       	ldi	r31, 0x03	; 3
    10d6:	c0 83       	st	Z, r28
	g_LED1.dir  = OUTPUT;
    10d8:	d2 83       	std	Z+2, r29	; 0x02
	g_LED1.pins = BIT5;
    10da:	80 e2       	ldi	r24, 0x20	; 32
    10dc:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED1);
    10de:	cf 01       	movw	r24, r30
    10e0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_init>
	g_LED2.GPIO = GPIOB;
    10e4:	eb e4       	ldi	r30, 0x4B	; 75
    10e6:	f3 e0       	ldi	r31, 0x03	; 3
    10e8:	c0 83       	st	Z, r28
	g_LED2.dir  = OUTPUT;
    10ea:	d2 83       	std	Z+2, r29	; 0x02
	g_LED2.pins = BIT6;
    10ec:	80 e4       	ldi	r24, 0x40	; 64
    10ee:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED2);
    10f0:	cf 01       	movw	r24, r30
    10f2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_init>
	g_LED3.GPIO = GPIOB;
    10f6:	e1 e5       	ldi	r30, 0x51	; 81
    10f8:	f3 e0       	ldi	r31, 0x03	; 3
    10fa:	c0 83       	st	Z, r28
	g_LED3.dir  = OUTPUT;
    10fc:	d2 83       	std	Z+2, r29	; 0x02
	g_LED3.pins = BIT7;
    10fe:	80 e8       	ldi	r24, 0x80	; 128
    1100:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED3);
    1102:	cf 01       	movw	r24, r30
    1104:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_init>
	Test_Pin.dir = OUTPUT;
    1108:	e9 e5       	ldi	r30, 0x59	; 89
    110a:	f3 e0       	ldi	r31, 0x03	; 3
    110c:	d2 83       	std	Z+2, r29	; 0x02
	Test_Pin.GPIO = GPIOD;
    110e:	83 e0       	ldi	r24, 0x03	; 3
    1110:	80 83       	st	Z, r24
	Test_Pin.pins = BIT0;
    1112:	c1 83       	std	Z+1, r28	; 0x01
	DIO_init(&Test_Pin);
    1114:	cf 01       	movw	r24, r30
    1116:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <DIO_init>
}
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <main>:
/*==========================================================================*/

int main(void)
{
	/*---------------[ LCD Initialization ]--------------*/
	LCD_init();
    1120:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_init>
	
	/*--------------[ LEDs Initialization ]--------------*/
	Init_LEDs();
    1124:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <Init_LEDs>
	
	/*-------------[ Keypad Initialization ]-------------*/
	Keypad_Init();
    1128:	0e 94 68 00 	call	0xd0	; 0xd0 <Keypad_Init>
	
	/*---------------[ TMU Initialization ]--------------*/
	MySOS.Tick_Time = 1;
    112c:	e4 e5       	ldi	r30, 0x54	; 84
    112e:	f3 e0       	ldi	r31, 0x03	; 3
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	80 83       	st	Z, r24
	MySOS.Timer_ID = TIMER_CH0;
    1134:	11 82       	std	Z+1, r1	; 0x01
	SOS_Init(&MySOS);
    1136:	cf 01       	movw	r24, r30
    1138:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <SOS_Init>
	
	/*----------[ Start 3 Different Tasks ]---------*/
	/*---[[ Start_Task(Task_FunPtr, TaskID, Periodicity, Time_IN_ms, Priority, PreHook, PostHook); ]]---*/
	Start_Task(Scan_Keypad, 120, PERIODIC, 5,  2, Dummy, Dummy);
    113c:	0f 2e       	mov	r0, r31
    113e:	fc e1       	ldi	r31, 0x1C	; 28
    1140:	af 2e       	mov	r10, r31
    1142:	f5 e0       	ldi	r31, 0x05	; 5
    1144:	bf 2e       	mov	r11, r31
    1146:	f0 2d       	mov	r31, r0
    1148:	65 01       	movw	r12, r10
    114a:	68 94       	set
    114c:	ee 24       	eor	r14, r14
    114e:	e1 f8       	bld	r14, 1
    1150:	05 e0       	ldi	r16, 0x05	; 5
    1152:	10 e0       	ldi	r17, 0x00	; 0
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	41 e0       	ldi	r20, 0x01	; 1
    115a:	68 e7       	ldi	r22, 0x78	; 120
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	83 e2       	ldi	r24, 0x23	; 35
    1160:	95 e0       	ldi	r25, 0x05	; 5
    1162:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <Start_Task>
	Start_Task(Update_LEDs, 150, PERIODIC, 10, 5, Dummy, Dummy);
    1166:	0f 2e       	mov	r0, r31
    1168:	f5 e0       	ldi	r31, 0x05	; 5
    116a:	ef 2e       	mov	r14, r31
    116c:	f0 2d       	mov	r31, r0
    116e:	0a e0       	ldi	r16, 0x0A	; 10
    1170:	10 e0       	ldi	r17, 0x00	; 0
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	41 e0       	ldi	r20, 0x01	; 1
    1178:	66 e9       	ldi	r22, 0x96	; 150
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	88 e2       	ldi	r24, 0x28	; 40
    117e:	95 e0       	ldi	r25, 0x05	; 5
    1180:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <Start_Task>
	Start_Task(Game_App,    110, PERIODIC, 50, 7, Dummy, Dummy);
    1184:	0f 2e       	mov	r0, r31
    1186:	f7 e0       	ldi	r31, 0x07	; 7
    1188:	ef 2e       	mov	r14, r31
    118a:	f0 2d       	mov	r31, r0
    118c:	02 e3       	ldi	r16, 0x32	; 50
    118e:	10 e0       	ldi	r17, 0x00	; 0
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	41 e0       	ldi	r20, 0x01	; 1
    1196:	6e e6       	ldi	r22, 0x6E	; 110
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	84 e8       	ldi	r24, 0x84	; 132
    119c:	95 e0       	ldi	r25, 0x05	; 5
    119e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <Start_Task>
	
	/*-------------[ SUPER LOOP ]-------------*/
	while (1)
	{
		SOS_Run();
    11a2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <SOS_Run>
	}
    11a6:	fd cf       	rjmp	.-6      	; 0x11a2 <main+0x82>

000011a8 <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
    11a8:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
    11aa:	89 2b       	or	r24, r25
    11ac:	e9 f1       	breq	.+122    	; 0x1228 <DIO_init+0x80>
	{
		switch(DIO_info->GPIO)
    11ae:	80 81       	ld	r24, Z
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	99 f0       	breq	.+38     	; 0x11da <DIO_init+0x32>
    11b4:	28 f0       	brcs	.+10     	; 0x11c0 <DIO_init+0x18>
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	e9 f0       	breq	.+58     	; 0x11f4 <DIO_init+0x4c>
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	41 f1       	breq	.+80     	; 0x120e <DIO_init+0x66>
    11be:	37 c0       	rjmp	.+110    	; 0x122e <DIO_init+0x86>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
    11c0:	81 81       	ldd	r24, Z+1	; 0x01
    11c2:	2a b3       	in	r18, 0x1a	; 26
    11c4:	98 2f       	mov	r25, r24
    11c6:	90 95       	com	r25
    11c8:	29 23       	and	r18, r25
    11ca:	92 81       	ldd	r25, Z+2	; 0x02
    11cc:	98 23       	and	r25, r24
    11ce:	82 2f       	mov	r24, r18
    11d0:	89 2b       	or	r24, r25
    11d2:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
			break;
    11d8:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
    11da:	81 81       	ldd	r24, Z+1	; 0x01
    11dc:	27 b3       	in	r18, 0x17	; 23
    11de:	98 2f       	mov	r25, r24
    11e0:	90 95       	com	r25
    11e2:	29 23       	and	r18, r25
    11e4:	92 81       	ldd	r25, Z+2	; 0x02
    11e6:	98 23       	and	r25, r24
    11e8:	82 2f       	mov	r24, r18
    11ea:	89 2b       	or	r24, r25
    11ec:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
			break;
    11f2:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
    11f4:	81 81       	ldd	r24, Z+1	; 0x01
    11f6:	24 b3       	in	r18, 0x14	; 20
    11f8:	98 2f       	mov	r25, r24
    11fa:	90 95       	com	r25
    11fc:	29 23       	and	r18, r25
    11fe:	92 81       	ldd	r25, Z+2	; 0x02
    1200:	98 23       	and	r25, r24
    1202:	82 2f       	mov	r24, r18
    1204:	89 2b       	or	r24, r25
    1206:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	90 e0       	ldi	r25, 0x00	; 0
			break;
    120c:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
    120e:	81 81       	ldd	r24, Z+1	; 0x01
    1210:	21 b3       	in	r18, 0x11	; 17
    1212:	98 2f       	mov	r25, r24
    1214:	90 95       	com	r25
    1216:	29 23       	and	r18, r25
    1218:	92 81       	ldd	r25, Z+2	; 0x02
    121a:	98 23       	and	r25, r24
    121c:	82 2f       	mov	r24, r18
    121e:	89 2b       	or	r24, r25
    1220:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1226:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
    1232:	08 95       	ret

00001234 <DIO_Write>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write(uint8_t GPIO, uint8_t pins, uint8_t value)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	81 f0       	breq	.+32     	; 0x1258 <DIO_Write+0x24>
    1238:	28 f0       	brcs	.+10     	; 0x1244 <DIO_Write+0x10>
    123a:	82 30       	cpi	r24, 0x02	; 2
    123c:	b9 f0       	breq	.+46     	; 0x126c <DIO_Write+0x38>
    123e:	83 30       	cpi	r24, 0x03	; 3
    1240:	f9 f0       	breq	.+62     	; 0x1280 <DIO_Write+0x4c>
    1242:	28 c0       	rjmp	.+80     	; 0x1294 <DIO_Write+0x60>
	{
		case GPIOA :
		PORTA_DATA = (pins & value) | (~pins & PORTA_DATA);
    1244:	8b b3       	in	r24, 0x1b	; 27
    1246:	96 2f       	mov	r25, r22
    1248:	90 95       	com	r25
    124a:	89 23       	and	r24, r25
    124c:	46 23       	and	r20, r22
    124e:	48 2b       	or	r20, r24
    1250:	4b bb       	out	0x1b, r20	; 27
		errorStatus = E_OK;
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1256:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & value) | (~pins & PORTB_DATA);
    1258:	88 b3       	in	r24, 0x18	; 24
    125a:	96 2f       	mov	r25, r22
    125c:	90 95       	com	r25
    125e:	89 23       	and	r24, r25
    1260:	46 23       	and	r20, r22
    1262:	48 2b       	or	r20, r24
    1264:	48 bb       	out	0x18, r20	; 24
		errorStatus = E_OK;
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e0       	ldi	r25, 0x00	; 0
		break;
    126a:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & value) | (~pins & PORTC_DATA);
    126c:	85 b3       	in	r24, 0x15	; 21
    126e:	96 2f       	mov	r25, r22
    1270:	90 95       	com	r25
    1272:	89 23       	and	r24, r25
    1274:	46 23       	and	r20, r22
    1276:	48 2b       	or	r20, r24
    1278:	45 bb       	out	0x15, r20	; 21
		errorStatus = E_OK;
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
		break;
    127e:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & value) | (~pins & PORTD_DATA);
    1280:	82 b3       	in	r24, 0x12	; 18
    1282:	96 2f       	mov	r25, r22
    1284:	90 95       	com	r25
    1286:	89 23       	and	r24, r25
    1288:	46 23       	and	r20, r22
    128a:	48 2b       	or	r20, r24
    128c:	42 bb       	out	0x12, r20	; 18
		errorStatus = E_OK;
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1292:	08 95       	ret
		default :
		errorStatus = E_NOK;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	return errorStatus;
}
    1298:	08 95       	ret

0000129a <DIO_Read>:
*/
ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{

	ERROR_STATUS errorStatus = E_NOK;
	if(data != NULL)
    129a:	41 15       	cp	r20, r1
    129c:	51 05       	cpc	r21, r1
    129e:	21 f1       	breq	.+72     	; 0x12e8 <DIO_Read+0x4e>
	{
		switch(GPIO)
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	69 f0       	breq	.+26     	; 0x12be <DIO_Read+0x24>
    12a4:	28 f0       	brcs	.+10     	; 0x12b0 <DIO_Read+0x16>
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	89 f0       	breq	.+34     	; 0x12cc <DIO_Read+0x32>
    12aa:	83 30       	cpi	r24, 0x03	; 3
    12ac:	b1 f0       	breq	.+44     	; 0x12da <DIO_Read+0x40>
    12ae:	1f c0       	rjmp	.+62     	; 0x12ee <DIO_Read+0x54>
		{
			case GPIOA :
			*data = (PORTA_PIN & pins);
    12b0:	89 b3       	in	r24, 0x19	; 25
    12b2:	68 23       	and	r22, r24
    12b4:	fa 01       	movw	r30, r20
    12b6:	60 83       	st	Z, r22
			errorStatus = E_OK;
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
			break;
    12bc:	08 95       	ret
			case GPIOB :
			*data = (PORTB_PIN & pins);
    12be:	86 b3       	in	r24, 0x16	; 22
    12c0:	68 23       	and	r22, r24
    12c2:	fa 01       	movw	r30, r20
    12c4:	60 83       	st	Z, r22
			errorStatus = E_OK;
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
			break;
    12ca:	08 95       	ret
			case GPIOC :
			*data = (PORTC_PIN & pins);
    12cc:	83 b3       	in	r24, 0x13	; 19
    12ce:	68 23       	and	r22, r24
    12d0:	fa 01       	movw	r30, r20
    12d2:	60 83       	st	Z, r22
			errorStatus = E_OK;
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
			break;
    12d8:	08 95       	ret
			case GPIOD :
			*data = (PORTD_PIN & pins);
    12da:	80 b3       	in	r24, 0x10	; 16
    12dc:	68 23       	and	r22, r24
    12de:	fa 01       	movw	r30, r20
    12e0:	60 83       	st	Z, r22
			errorStatus = E_OK;
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	90 e0       	ldi	r25, 0x00	; 0
			break;
    12e6:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	08 95       	ret
			case GPIOD :
			*data = (PORTD_PIN & pins);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
    12f2:	08 95       	ret

000012f4 <DIO_Toggle>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle(uint8_t GPIO, uint8_t pins)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	91 f0       	breq	.+36     	; 0x131c <DIO_Toggle+0x28>
    12f8:	28 f0       	brcs	.+10     	; 0x1304 <DIO_Toggle+0x10>
    12fa:	82 30       	cpi	r24, 0x02	; 2
    12fc:	d9 f0       	breq	.+54     	; 0x1334 <DIO_Toggle+0x40>
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	29 f1       	breq	.+74     	; 0x134c <DIO_Toggle+0x58>
    1302:	30 c0       	rjmp	.+96     	; 0x1364 <DIO_Toggle+0x70>
	{
		case GPIOA :
		PORTA_DATA = (pins & (~PORTA_DATA)) | (~pins & PORTA_DATA);
    1304:	8b b3       	in	r24, 0x1b	; 27
    1306:	9b b3       	in	r25, 0x1b	; 27
    1308:	26 2f       	mov	r18, r22
    130a:	20 95       	com	r18
    130c:	92 23       	and	r25, r18
    130e:	80 95       	com	r24
    1310:	68 23       	and	r22, r24
    1312:	69 2b       	or	r22, r25
    1314:	6b bb       	out	0x1b, r22	; 27
		errorStatus = E_OK;
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
		break;
    131a:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & (~PORTB_DATA)) | (~pins & PORTB_DATA);
    131c:	88 b3       	in	r24, 0x18	; 24
    131e:	98 b3       	in	r25, 0x18	; 24
    1320:	26 2f       	mov	r18, r22
    1322:	20 95       	com	r18
    1324:	92 23       	and	r25, r18
    1326:	80 95       	com	r24
    1328:	68 23       	and	r22, r24
    132a:	69 2b       	or	r22, r25
    132c:	68 bb       	out	0x18, r22	; 24
		errorStatus = E_OK;
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1332:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & (~PORTC_DATA)) | (~pins & PORTC_DATA);
    1334:	85 b3       	in	r24, 0x15	; 21
    1336:	95 b3       	in	r25, 0x15	; 21
    1338:	26 2f       	mov	r18, r22
    133a:	20 95       	com	r18
    133c:	92 23       	and	r25, r18
    133e:	80 95       	com	r24
    1340:	68 23       	and	r22, r24
    1342:	69 2b       	or	r22, r25
    1344:	65 bb       	out	0x15, r22	; 21
		errorStatus = E_OK;
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
		break;
    134a:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & (~PORTD_DATA)) | (~pins & PORTD_DATA);
    134c:	82 b3       	in	r24, 0x12	; 18
    134e:	92 b3       	in	r25, 0x12	; 18
    1350:	26 2f       	mov	r18, r22
    1352:	20 95       	com	r18
    1354:	92 23       	and	r25, r18
    1356:	80 95       	com	r24
    1358:	68 23       	and	r22, r24
    135a:	69 2b       	or	r22, r25
    135c:	62 bb       	out	0x12, r22	; 18
		errorStatus = E_OK;
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1362:	08 95       	ret
		default :
		errorStatus = E_NOK;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	return errorStatus;
}
    1368:	08 95       	ret

0000136a <__vector_12>:
{
	PTR_CALL_BACK = isr_ptr;
}

ISR(SPI_STC_vect)
{
    136a:	1f 92       	push	r1
    136c:	0f 92       	push	r0
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	0f 92       	push	r0
    1372:	11 24       	eor	r1, r1
    1374:	2f 93       	push	r18
    1376:	3f 93       	push	r19
    1378:	4f 93       	push	r20
    137a:	5f 93       	push	r21
    137c:	6f 93       	push	r22
    137e:	7f 93       	push	r23
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	af 93       	push	r26
    1386:	bf 93       	push	r27
    1388:	ef 93       	push	r30
    138a:	ff 93       	push	r31
	g_u8_RxFlag = TRUE;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	80 93 a8 00 	sts	0x00A8, r24
	PTR_CALL_BACK();
    1392:	e0 91 5c 03 	lds	r30, 0x035C
    1396:	f0 91 5d 03 	lds	r31, 0x035D
    139a:	09 95       	icall
}
    139c:	ff 91       	pop	r31
    139e:	ef 91       	pop	r30
    13a0:	bf 91       	pop	r27
    13a2:	af 91       	pop	r26
    13a4:	9f 91       	pop	r25
    13a6:	8f 91       	pop	r24
    13a8:	7f 91       	pop	r23
    13aa:	6f 91       	pop	r22
    13ac:	5f 91       	pop	r21
    13ae:	4f 91       	pop	r20
    13b0:	3f 91       	pop	r19
    13b2:	2f 91       	pop	r18
    13b4:	0f 90       	pop	r0
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	0f 90       	pop	r0
    13ba:	1f 90       	pop	r1
    13bc:	18 95       	reti

000013be <Timer_Init>:
 * Return: The error status of the function.			
 * Description: Initiates the module.
 * 							
 */
ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
    13be:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
    13c0:	89 2b       	or	r24, r25
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <Timer_Init+0x8>
    13c4:	5c c1       	rjmp	.+696    	; 0x167e <Timer_Init+0x2c0>
	{
		// Check The Timer Channel Number & Init The Corresponding One
		switch(Timer_cfg->Timer_CH_NO)
    13c6:	80 81       	ld	r24, Z
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <Timer_Init+0x10>
    13cc:	6f c0       	rjmp	.+222    	; 0x14ac <Timer_Init+0xee>
    13ce:	20 f0       	brcs	.+8      	; 0x13d8 <Timer_Init+0x1a>
    13d0:	82 30       	cpi	r24, 0x02	; 2
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <Timer_Init+0x18>
    13d4:	f8 c0       	rjmp	.+496    	; 0x15c6 <Timer_Init+0x208>
    13d6:	56 c1       	rjmp	.+684    	; 0x1684 <Timer_Init+0x2c6>
static ERROR_STATUS Timer0_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR0 =  Timer0_CMP_Mask;
    13d8:	88 e0       	ldi	r24, 0x08	; 8
    13da:	83 bf       	out	0x33, r24	; 51
		OCR0  =  0x00;
    13dc:	1c be       	out	0x3c, r1	; 60
		TIMSK &= Timer0_Int_CLR_Mask;
    13de:	89 b7       	in	r24, 0x39	; 57
    13e0:	8c 7f       	andi	r24, 0xFC	; 252
    13e2:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
    13e4:	82 81       	ldd	r24, Z+2	; 0x02
    13e6:	88 23       	and	r24, r24
    13e8:	19 f0       	breq	.+6      	; 0x13f0 <Timer_Init+0x32>
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	21 f0       	breq	.+8      	; 0x13f6 <Timer_Init+0x38>
    13ee:	0f c0       	rjmp	.+30     	; 0x140e <Timer_Init+0x50>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer0_Polling_Int_Mask;
    13f0:	89 b7       	in	r24, 0x39	; 57
    13f2:	89 bf       	out	0x39, r24	; 57
    13f4:	0c c0       	rjmp	.+24     	; 0x140e <Timer_Init+0x50>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer0_Interrupt_CMP_Int_Mask;
    13f6:	89 b7       	in	r24, 0x39	; 57
    13f8:	82 60       	ori	r24, 0x02	; 2
    13fa:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
    13fc:	8f b7       	in	r24, 0x3f	; 63
    13fe:	80 68       	ori	r24, 0x80	; 128
    1400:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer0_CM = Timer_cfg->Timer_Cbk_ptr;
    1402:	84 81       	ldd	r24, Z+4	; 0x04
    1404:	95 81       	ldd	r25, Z+5	; 0x05
    1406:	90 93 f5 01 	sts	0x01F5, r25
    140a:	80 93 f4 01 	sts	0x01F4, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
    140e:	81 81       	ldd	r24, Z+1	; 0x01
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	d9 f1       	breq	.+118    	; 0x148a <Timer_Init+0xcc>
    1414:	18 f0       	brcs	.+6      	; 0x141c <Timer_Init+0x5e>
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	f1 f1       	breq	.+124    	; 0x1496 <Timer_Init+0xd8>
    141a:	43 c0       	rjmp	.+134    	; 0x14a2 <Timer_Init+0xe4>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
    141c:	e3 81       	ldd	r30, Z+3	; 0x03
    141e:	8e 2f       	mov	r24, r30
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	88 30       	cpi	r24, 0x08	; 8
    1424:	91 05       	cpc	r25, r1
    1426:	60 f5       	brcc	.+88     	; 0x1480 <Timer_Init+0xc2>
    1428:	fc 01       	movw	r30, r24
    142a:	ef 5c       	subi	r30, 0xCF	; 207
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
    1432:	10 92 fb 01 	sts	0x01FB, r1
						errorStatus = E_OK;
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer0_Prescaler = TIMER0_PRESCALER_8;
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	80 93 fb 01 	sts	0x01FB, r24
						errorStatus = E_OK;
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
    1448:	10 92 fb 01 	sts	0x01FB, r1
						errorStatus = E_NOK;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer0_Prescaler = TIMER0_PRESCALER_64;
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	80 93 fb 01 	sts	0x01FB, r24
						errorStatus = E_OK;
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer0_Prescaler = TIMER0_PRESCALER_128;
    145e:	84 e0       	ldi	r24, 0x04	; 4
    1460:	80 93 fb 01 	sts	0x01FB, r24
						errorStatus = E_OK;
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
    146a:	10 92 fb 01 	sts	0x01FB, r1
						errorStatus = E_NOK;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	08 95       	ret
						break;
					case TIMER_PRESCALER_1024 :
						Timer0_Prescaler = TIMER0_PRESCALER_1024;
    1474:	85 e0       	ldi	r24, 0x05	; 5
    1476:	80 93 fb 01 	sts	0x01FB, r24
						errorStatus = E_OK;
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	08 95       	ret
						break;
					default :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
    1480:	10 92 fb 01 	sts	0x01FB, r1
						errorStatus = E_NOK;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	08 95       	ret
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_RISING;
    148a:	87 e0       	ldi	r24, 0x07	; 7
    148c:	80 93 fb 01 	sts	0x01FB, r24
				errorStatus = E_OK;
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	08 95       	ret
				break;
			case COUNTER_DOWN_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_FALLING;
    1496:	86 e0       	ldi	r24, 0x06	; 6
    1498:	80 93 fb 01 	sts	0x01FB, r24
				errorStatus = E_OK;
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	08 95       	ret
				break;
			default :
				Timer0_Prescaler = TIMER0_NO_CLOCK;
    14a2:	10 92 fb 01 	sts	0x01FB, r1
				errorStatus = E_NOK;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	08 95       	ret
static ERROR_STATUS Timer1_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR1 = Timer1_CMP_Mask;
    14ac:	88 e0       	ldi	r24, 0x08	; 8
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9f bd       	out	0x2f, r25	; 47
    14b2:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0x00;
    14b4:	1d bc       	out	0x2d, r1	; 45
    14b6:	1c bc       	out	0x2c, r1	; 44
		OCR1A = 0x00;
    14b8:	1b bc       	out	0x2b, r1	; 43
    14ba:	1a bc       	out	0x2a, r1	; 42
		TIMSK &= Timer1_Int_CLR_Mask;
    14bc:	89 b7       	in	r24, 0x39	; 57
    14be:	83 7c       	andi	r24, 0xC3	; 195
    14c0:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
    14c2:	82 81       	ldd	r24, Z+2	; 0x02
    14c4:	88 23       	and	r24, r24
    14c6:	19 f0       	breq	.+6      	; 0x14ce <Timer_Init+0x110>
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <Timer_Init+0x116>
    14cc:	0f c0       	rjmp	.+30     	; 0x14ec <Timer_Init+0x12e>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer1_Polling_Int_Mask;
    14ce:	89 b7       	in	r24, 0x39	; 57
    14d0:	89 bf       	out	0x39, r24	; 57
    14d2:	0c c0       	rjmp	.+24     	; 0x14ec <Timer_Init+0x12e>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer1_OCA_Int_Mask;
    14d4:	89 b7       	in	r24, 0x39	; 57
    14d6:	80 61       	ori	r24, 0x10	; 16
    14d8:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
    14da:	8f b7       	in	r24, 0x3f	; 63
    14dc:	80 68       	ori	r24, 0x80	; 128
    14de:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer1_CM = Timer_cfg->Timer_Cbk_ptr;
    14e0:	84 81       	ldd	r24, Z+4	; 0x04
    14e2:	95 81       	ldd	r25, Z+5	; 0x05
    14e4:	90 93 f1 01 	sts	0x01F1, r25
    14e8:	80 93 f0 01 	sts	0x01F0, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
    14ec:	81 81       	ldd	r24, Z+1	; 0x01
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <Timer_Init+0x136>
    14f2:	50 c0       	rjmp	.+160    	; 0x1594 <Timer_Init+0x1d6>
    14f4:	20 f0       	brcs	.+8      	; 0x14fe <Timer_Init+0x140>
    14f6:	82 30       	cpi	r24, 0x02	; 2
    14f8:	09 f4       	brne	.+2      	; 0x14fc <Timer_Init+0x13e>
    14fa:	55 c0       	rjmp	.+170    	; 0x15a6 <Timer_Init+0x1e8>
    14fc:	5d c0       	rjmp	.+186    	; 0x15b8 <Timer_Init+0x1fa>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
    14fe:	e3 81       	ldd	r30, Z+3	; 0x03
    1500:	8e 2f       	mov	r24, r30
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	88 30       	cpi	r24, 0x08	; 8
    1506:	91 05       	cpc	r25, r1
    1508:	f0 f5       	brcc	.+124    	; 0x1586 <Timer_Init+0x1c8>
    150a:	fc 01       	movw	r30, r24
    150c:	e7 5c       	subi	r30, 0xC7	; 199
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
    1514:	10 92 fa 01 	sts	0x01FA, r1
    1518:	10 92 f9 01 	sts	0x01F9, r1
						errorStatus = E_OK;
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer1_Prescaler = TIMER1_PRESCALER_8;
    1522:	82 e0       	ldi	r24, 0x02	; 2
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	90 93 fa 01 	sts	0x01FA, r25
    152a:	80 93 f9 01 	sts	0x01F9, r24
						errorStatus = E_OK;
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
    1534:	10 92 fa 01 	sts	0x01FA, r1
    1538:	10 92 f9 01 	sts	0x01F9, r1
						errorStatus = E_NOK;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer1_Prescaler = TIMER1_PRESCALER_64;
    1542:	83 e0       	ldi	r24, 0x03	; 3
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	90 93 fa 01 	sts	0x01FA, r25
    154a:	80 93 f9 01 	sts	0x01F9, r24
						errorStatus = E_OK;
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer1_Prescaler = TIMER1_PRESCALER_128;
    1554:	84 e0       	ldi	r24, 0x04	; 4
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	90 93 fa 01 	sts	0x01FA, r25
    155c:	80 93 f9 01 	sts	0x01F9, r24
						errorStatus = E_OK;
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
    1566:	10 92 fa 01 	sts	0x01FA, r1
    156a:	10 92 f9 01 	sts	0x01F9, r1
						errorStatus = E_NOK;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	08 95       	ret
						break;
					case TIMER_PRESCALER_1024 :
						Timer1_Prescaler = TIMER1_PRESCALER_1024;
    1574:	85 e0       	ldi	r24, 0x05	; 5
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	90 93 fa 01 	sts	0x01FA, r25
    157c:	80 93 f9 01 	sts	0x01F9, r24
						errorStatus = E_OK;
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	08 95       	ret
						break;
					default :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
    1586:	10 92 fa 01 	sts	0x01FA, r1
    158a:	10 92 f9 01 	sts	0x01F9, r1
						errorStatus = E_NOK;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	08 95       	ret
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_RISING;
    1594:	87 e0       	ldi	r24, 0x07	; 7
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	90 93 fa 01 	sts	0x01FA, r25
    159c:	80 93 f9 01 	sts	0x01F9, r24
				errorStatus = E_OK;
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	08 95       	ret
				break;
			case COUNTER_DOWN_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_FALLING;
    15a6:	86 e0       	ldi	r24, 0x06	; 6
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	90 93 fa 01 	sts	0x01FA, r25
    15ae:	80 93 f9 01 	sts	0x01F9, r24
				errorStatus = E_OK;
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	08 95       	ret
				break;
			default :
				Timer1_Prescaler = TIMER1_NO_CLOCK;
    15b8:	10 92 fa 01 	sts	0x01FA, r1
    15bc:	10 92 f9 01 	sts	0x01F9, r1
				errorStatus = E_NOK;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	08 95       	ret
static ERROR_STATUS Timer2_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR2 = Timer2_CMP_Mask;
    15c6:	88 e0       	ldi	r24, 0x08	; 8
    15c8:	85 bd       	out	0x25, r24	; 37
		TCNT2 = Timer2_TCNT_INIT_Mask;
    15ca:	14 bc       	out	0x24, r1	; 36
		TIMSK &= Timer1_Int_CLR_Mask;
    15cc:	89 b7       	in	r24, 0x39	; 57
    15ce:	83 7c       	andi	r24, 0xC3	; 195
    15d0:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
    15d2:	82 81       	ldd	r24, Z+2	; 0x02
    15d4:	88 23       	and	r24, r24
    15d6:	19 f0       	breq	.+6      	; 0x15de <Timer_Init+0x220>
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	21 f0       	breq	.+8      	; 0x15e4 <Timer_Init+0x226>
    15dc:	0f c0       	rjmp	.+30     	; 0x15fc <Timer_Init+0x23e>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer2_Polling_Int_Mask;
    15de:	89 b7       	in	r24, 0x39	; 57
    15e0:	89 bf       	out	0x39, r24	; 57
    15e2:	0c c0       	rjmp	.+24     	; 0x15fc <Timer_Init+0x23e>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer2_Interrupt_CMP_Int_Mask;
    15e4:	89 b7       	in	r24, 0x39	; 57
    15e6:	80 68       	ori	r24, 0x80	; 128
    15e8:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
    15ea:	8f b7       	in	r24, 0x3f	; 63
    15ec:	80 68       	ori	r24, 0x80	; 128
    15ee:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer2_CM = Timer_cfg->Timer_Cbk_ptr;
    15f0:	84 81       	ldd	r24, Z+4	; 0x04
    15f2:	95 81       	ldd	r25, Z+5	; 0x05
    15f4:	90 93 ed 01 	sts	0x01ED, r25
    15f8:	80 93 ec 01 	sts	0x01EC, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
    15fc:	81 81       	ldd	r24, Z+1	; 0x01
    15fe:	81 11       	cpse	r24, r1
    1600:	39 c0       	rjmp	.+114    	; 0x1674 <Timer_Init+0x2b6>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
    1602:	e3 81       	ldd	r30, Z+3	; 0x03
    1604:	8e 2f       	mov	r24, r30
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	88 30       	cpi	r24, 0x08	; 8
    160a:	91 05       	cpc	r25, r1
    160c:	70 f5       	brcc	.+92     	; 0x166a <Timer_Init+0x2ac>
    160e:	fc 01       	movw	r30, r24
    1610:	ef 5b       	subi	r30, 0xBF	; 191
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
    1618:	10 92 f8 01 	sts	0x01F8, r1
						errorStatus = E_OK;
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer2_Prescaler = TIMER2_PRESCALER_8;
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	80 93 f8 01 	sts	0x01F8, r24
						errorStatus = E_OK;
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer2_Prescaler = TIMER2_PRESCALER_32;
    162e:	83 e0       	ldi	r24, 0x03	; 3
    1630:	80 93 f8 01 	sts	0x01F8, r24
						errorStatus = E_OK;
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer2_Prescaler = TIMER2_PRESCALER_64;
    163a:	84 e0       	ldi	r24, 0x04	; 4
    163c:	80 93 f8 01 	sts	0x01F8, r24
						errorStatus = E_OK;
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer2_Prescaler = TIMER2_PRESCALER_128;
    1646:	85 e0       	ldi	r24, 0x05	; 5
    1648:	80 93 f8 01 	sts	0x01F8, r24
						errorStatus = E_OK;
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer2_Prescaler = TIMER2_PRESCALER_256;
    1652:	86 e0       	ldi	r24, 0x06	; 6
    1654:	80 93 f8 01 	sts	0x01F8, r24
						errorStatus = E_OK;
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	08 95       	ret
						break;
						case TIMER_PRESCALER_1024 :
						Timer2_Prescaler = TIMER2_PRESCALER_1024;
    165e:	87 e0       	ldi	r24, 0x07	; 7
    1660:	80 93 f8 01 	sts	0x01F8, r24
						errorStatus = E_OK;
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	08 95       	ret
						break;
					default :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
    166a:	10 92 f8 01 	sts	0x01F8, r1
						errorStatus = E_NOK;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	08 95       	ret
						break;
				}
				break;
			default :
				Timer2_Prescaler = TIMER2_NO_CLOCK;
    1674:	10 92 f8 01 	sts	0x01F8, r1
				errorStatus = E_NOK;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	08 95       	ret
				break;
		}
	}
	else
	{
		errorStatus = E_NOK;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	08 95       	ret
				break;
			case TIMER_CH2 :
				errorStatus = Timer2_Init(Timer_cfg);
				break;
			default :
				errorStatus = E_NOK;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
    1688:	08 95       	ret

0000168a <Timer_Start>:
 */

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(Timer_CH_NO)
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	91 f0       	breq	.+36     	; 0x16b2 <Timer_Start+0x28>
    168e:	18 f0       	brcs	.+6      	; 0x1696 <Timer_Start+0xc>
    1690:	82 30       	cpi	r24, 0x02	; 2
    1692:	01 f1       	breq	.+64     	; 0x16d4 <Timer_Start+0x4a>
    1694:	2d c0       	rjmp	.+90     	; 0x16f0 <Timer_Start+0x66>
	{
		case TIMER_CH0 :
			if(Timer_Count <= 255)
    1696:	6f 3f       	cpi	r22, 0xFF	; 255
    1698:	71 05       	cpc	r23, r1
    169a:	09 f0       	breq	.+2      	; 0x169e <Timer_Start+0x14>
    169c:	60 f5       	brcc	.+88     	; 0x16f6 <Timer_Start+0x6c>
			{
				TCNT0 = 0x00;
    169e:	12 be       	out	0x32, r1	; 50
				OCR0  = Timer_Count;
    16a0:	6c bf       	out	0x3c, r22	; 60
				TCCR0 |= Timer0_Prescaler;
    16a2:	93 b7       	in	r25, 0x33	; 51
    16a4:	80 91 fb 01 	lds	r24, 0x01FB
    16a8:	89 2b       	or	r24, r25
    16aa:	83 bf       	out	0x33, r24	; 51
				errorStatus = E_OK;
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	08 95       	ret
			{
				errorStatus = E_NOK;
			}
			break;
		case TIMER_CH1 :
			TCNT1 = 0x0000;
    16b2:	1d bc       	out	0x2d, r1	; 45
    16b4:	1c bc       	out	0x2c, r1	; 44
			OCR1A = Timer_Count;
    16b6:	7b bd       	out	0x2b, r23	; 43
    16b8:	6a bd       	out	0x2a, r22	; 42
			TCCR1 |= Timer1_Prescaler;
    16ba:	2e b5       	in	r18, 0x2e	; 46
    16bc:	3f b5       	in	r19, 0x2f	; 47
    16be:	80 91 f9 01 	lds	r24, 0x01F9
    16c2:	90 91 fa 01 	lds	r25, 0x01FA
    16c6:	82 2b       	or	r24, r18
    16c8:	93 2b       	or	r25, r19
    16ca:	9f bd       	out	0x2f, r25	; 47
    16cc:	8e bd       	out	0x2e, r24	; 46
			errorStatus = E_OK;
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
			break;
    16d2:	08 95       	ret
		case TIMER_CH2 :
			if(Timer_Count <= 255)
    16d4:	6f 3f       	cpi	r22, 0xFF	; 255
    16d6:	71 05       	cpc	r23, r1
    16d8:	09 f0       	breq	.+2      	; 0x16dc <Timer_Start+0x52>
    16da:	80 f4       	brcc	.+32     	; 0x16fc <Timer_Start+0x72>
			{
				TCNT2 = 0x00;
    16dc:	14 bc       	out	0x24, r1	; 36
				OCR2  = Timer_Count;
    16de:	63 bd       	out	0x23, r22	; 35
				TCCR2 |= Timer2_Prescaler;
    16e0:	95 b5       	in	r25, 0x25	; 37
    16e2:	80 91 f8 01 	lds	r24, 0x01F8
    16e6:	89 2b       	or	r24, r25
    16e8:	85 bd       	out	0x25, r24	; 37
				errorStatus = E_OK;
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	08 95       	ret
			{
				errorStatus = E_NOK;
			}
			break;
		default :
			errorStatus = E_NOK;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	08 95       	ret
				TCCR0 |= Timer0_Prescaler;
				errorStatus = E_OK;
			}
			else
			{
				errorStatus = E_NOK;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	08 95       	ret
				TCCR2 |= Timer2_Prescaler;
				errorStatus = E_OK;
			}
			else
			{
				errorStatus = E_NOK;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
		default :
			errorStatus = E_NOK;
			break;
	}
	return errorStatus;
}
    1700:	08 95       	ret

00001702 <TIMER0_SetCM>:
	Ptr_Timer0_OV = Ptr_ISR;
}

void TIMER0_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer0_CM = Ptr_ISR;
    1702:	90 93 f5 01 	sts	0x01F5, r25
    1706:	80 93 f4 01 	sts	0x01F4, r24
    170a:	08 95       	ret

0000170c <TIMER2_SetCM>:
	Ptr_Timer2_OV = Ptr_ISR;
}

void TIMER2_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer2_CM = Ptr_ISR;
    170c:	90 93 ed 01 	sts	0x01ED, r25
    1710:	80 93 ec 01 	sts	0x01EC, r24
    1714:	08 95       	ret

00001716 <TIMER1_SetCM>:
	Ptr_Timer1_OV = Ptr_ISR;
}

void TIMER1_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer1_CM = Ptr_ISR;
    1716:	90 93 f1 01 	sts	0x01F1, r25
    171a:	80 93 f0 01 	sts	0x01F0, r24
    171e:	08 95       	ret

00001720 <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
    1720:	1f 92       	push	r1
    1722:	0f 92       	push	r0
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	0f 92       	push	r0
    1728:	11 24       	eor	r1, r1
    172a:	2f 93       	push	r18
    172c:	3f 93       	push	r19
    172e:	4f 93       	push	r20
    1730:	5f 93       	push	r21
    1732:	6f 93       	push	r22
    1734:	7f 93       	push	r23
    1736:	8f 93       	push	r24
    1738:	9f 93       	push	r25
    173a:	af 93       	push	r26
    173c:	bf 93       	push	r27
    173e:	ef 93       	push	r30
    1740:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
    1742:	e0 91 f6 01 	lds	r30, 0x01F6
    1746:	f0 91 f7 01 	lds	r31, 0x01F7
    174a:	30 97       	sbiw	r30, 0x00	; 0
    174c:	09 f0       	breq	.+2      	; 0x1750 <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
    174e:	09 95       	icall
	}
}
    1750:	ff 91       	pop	r31
    1752:	ef 91       	pop	r30
    1754:	bf 91       	pop	r27
    1756:	af 91       	pop	r26
    1758:	9f 91       	pop	r25
    175a:	8f 91       	pop	r24
    175c:	7f 91       	pop	r23
    175e:	6f 91       	pop	r22
    1760:	5f 91       	pop	r21
    1762:	4f 91       	pop	r20
    1764:	3f 91       	pop	r19
    1766:	2f 91       	pop	r18
    1768:	0f 90       	pop	r0
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	0f 90       	pop	r0
    176e:	1f 90       	pop	r1
    1770:	18 95       	reti

00001772 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1772:	1f 92       	push	r1
    1774:	0f 92       	push	r0
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	0f 92       	push	r0
    177a:	11 24       	eor	r1, r1
    177c:	2f 93       	push	r18
    177e:	3f 93       	push	r19
    1780:	4f 93       	push	r20
    1782:	5f 93       	push	r21
    1784:	6f 93       	push	r22
    1786:	7f 93       	push	r23
    1788:	8f 93       	push	r24
    178a:	9f 93       	push	r25
    178c:	af 93       	push	r26
    178e:	bf 93       	push	r27
    1790:	ef 93       	push	r30
    1792:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
    1794:	e0 91 f4 01 	lds	r30, 0x01F4
    1798:	f0 91 f5 01 	lds	r31, 0x01F5
    179c:	30 97       	sbiw	r30, 0x00	; 0
    179e:	09 f0       	breq	.+2      	; 0x17a2 <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
    17a0:	09 95       	icall
	}
}
    17a2:	ff 91       	pop	r31
    17a4:	ef 91       	pop	r30
    17a6:	bf 91       	pop	r27
    17a8:	af 91       	pop	r26
    17aa:	9f 91       	pop	r25
    17ac:	8f 91       	pop	r24
    17ae:	7f 91       	pop	r23
    17b0:	6f 91       	pop	r22
    17b2:	5f 91       	pop	r21
    17b4:	4f 91       	pop	r20
    17b6:	3f 91       	pop	r19
    17b8:	2f 91       	pop	r18
    17ba:	0f 90       	pop	r0
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	0f 90       	pop	r0
    17c0:	1f 90       	pop	r1
    17c2:	18 95       	reti

000017c4 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    17c4:	1f 92       	push	r1
    17c6:	0f 92       	push	r0
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	0f 92       	push	r0
    17cc:	11 24       	eor	r1, r1
    17ce:	2f 93       	push	r18
    17d0:	3f 93       	push	r19
    17d2:	4f 93       	push	r20
    17d4:	5f 93       	push	r21
    17d6:	6f 93       	push	r22
    17d8:	7f 93       	push	r23
    17da:	8f 93       	push	r24
    17dc:	9f 93       	push	r25
    17de:	af 93       	push	r26
    17e0:	bf 93       	push	r27
    17e2:	ef 93       	push	r30
    17e4:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
    17e6:	e0 91 ee 01 	lds	r30, 0x01EE
    17ea:	f0 91 ef 01 	lds	r31, 0x01EF
    17ee:	30 97       	sbiw	r30, 0x00	; 0
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
    17f2:	09 95       	icall
	}
}
    17f4:	ff 91       	pop	r31
    17f6:	ef 91       	pop	r30
    17f8:	bf 91       	pop	r27
    17fa:	af 91       	pop	r26
    17fc:	9f 91       	pop	r25
    17fe:	8f 91       	pop	r24
    1800:	7f 91       	pop	r23
    1802:	6f 91       	pop	r22
    1804:	5f 91       	pop	r21
    1806:	4f 91       	pop	r20
    1808:	3f 91       	pop	r19
    180a:	2f 91       	pop	r18
    180c:	0f 90       	pop	r0
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	0f 90       	pop	r0
    1812:	1f 90       	pop	r1
    1814:	18 95       	reti

00001816 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1816:	1f 92       	push	r1
    1818:	0f 92       	push	r0
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	0f 92       	push	r0
    181e:	11 24       	eor	r1, r1
    1820:	2f 93       	push	r18
    1822:	3f 93       	push	r19
    1824:	4f 93       	push	r20
    1826:	5f 93       	push	r21
    1828:	6f 93       	push	r22
    182a:	7f 93       	push	r23
    182c:	8f 93       	push	r24
    182e:	9f 93       	push	r25
    1830:	af 93       	push	r26
    1832:	bf 93       	push	r27
    1834:	ef 93       	push	r30
    1836:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
    1838:	e0 91 ec 01 	lds	r30, 0x01EC
    183c:	f0 91 ed 01 	lds	r31, 0x01ED
    1840:	30 97       	sbiw	r30, 0x00	; 0
    1842:	09 f0       	breq	.+2      	; 0x1846 <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
    1844:	09 95       	icall
	}
}
    1846:	ff 91       	pop	r31
    1848:	ef 91       	pop	r30
    184a:	bf 91       	pop	r27
    184c:	af 91       	pop	r26
    184e:	9f 91       	pop	r25
    1850:	8f 91       	pop	r24
    1852:	7f 91       	pop	r23
    1854:	6f 91       	pop	r22
    1856:	5f 91       	pop	r21
    1858:	4f 91       	pop	r20
    185a:	3f 91       	pop	r19
    185c:	2f 91       	pop	r18
    185e:	0f 90       	pop	r0
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	0f 90       	pop	r0
    1864:	1f 90       	pop	r1
    1866:	18 95       	reti

00001868 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1868:	1f 92       	push	r1
    186a:	0f 92       	push	r0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	0f 92       	push	r0
    1870:	11 24       	eor	r1, r1
    1872:	2f 93       	push	r18
    1874:	3f 93       	push	r19
    1876:	4f 93       	push	r20
    1878:	5f 93       	push	r21
    187a:	6f 93       	push	r22
    187c:	7f 93       	push	r23
    187e:	8f 93       	push	r24
    1880:	9f 93       	push	r25
    1882:	af 93       	push	r26
    1884:	bf 93       	push	r27
    1886:	ef 93       	push	r30
    1888:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
    188a:	e0 91 f2 01 	lds	r30, 0x01F2
    188e:	f0 91 f3 01 	lds	r31, 0x01F3
    1892:	30 97       	sbiw	r30, 0x00	; 0
    1894:	09 f0       	breq	.+2      	; 0x1898 <__vector_9+0x30>
	{
		Ptr_Timer1_OV();
    1896:	09 95       	icall
	}
}
    1898:	ff 91       	pop	r31
    189a:	ef 91       	pop	r30
    189c:	bf 91       	pop	r27
    189e:	af 91       	pop	r26
    18a0:	9f 91       	pop	r25
    18a2:	8f 91       	pop	r24
    18a4:	7f 91       	pop	r23
    18a6:	6f 91       	pop	r22
    18a8:	5f 91       	pop	r21
    18aa:	4f 91       	pop	r20
    18ac:	3f 91       	pop	r19
    18ae:	2f 91       	pop	r18
    18b0:	0f 90       	pop	r0
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	0f 90       	pop	r0
    18b6:	1f 90       	pop	r1
    18b8:	18 95       	reti

000018ba <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    18ba:	1f 92       	push	r1
    18bc:	0f 92       	push	r0
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	0f 92       	push	r0
    18c2:	11 24       	eor	r1, r1
    18c4:	2f 93       	push	r18
    18c6:	3f 93       	push	r19
    18c8:	4f 93       	push	r20
    18ca:	5f 93       	push	r21
    18cc:	6f 93       	push	r22
    18ce:	7f 93       	push	r23
    18d0:	8f 93       	push	r24
    18d2:	9f 93       	push	r25
    18d4:	af 93       	push	r26
    18d6:	bf 93       	push	r27
    18d8:	ef 93       	push	r30
    18da:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
    18dc:	e0 91 f0 01 	lds	r30, 0x01F0
    18e0:	f0 91 f1 01 	lds	r31, 0x01F1
    18e4:	30 97       	sbiw	r30, 0x00	; 0
    18e6:	09 f0       	breq	.+2      	; 0x18ea <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
    18e8:	09 95       	icall
	}	
}
    18ea:	ff 91       	pop	r31
    18ec:	ef 91       	pop	r30
    18ee:	bf 91       	pop	r27
    18f0:	af 91       	pop	r26
    18f2:	9f 91       	pop	r25
    18f4:	8f 91       	pop	r24
    18f6:	7f 91       	pop	r23
    18f8:	6f 91       	pop	r22
    18fa:	5f 91       	pop	r21
    18fc:	4f 91       	pop	r20
    18fe:	3f 91       	pop	r19
    1900:	2f 91       	pop	r18
    1902:	0f 90       	pop	r0
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	0f 90       	pop	r0
    1908:	1f 90       	pop	r1
    190a:	18 95       	reti

0000190c <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    190c:	1f 92       	push	r1
    190e:	0f 92       	push	r0
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	0f 92       	push	r0
    1914:	11 24       	eor	r1, r1
    1916:	2f 93       	push	r18
    1918:	3f 93       	push	r19
    191a:	4f 93       	push	r20
    191c:	5f 93       	push	r21
    191e:	6f 93       	push	r22
    1920:	7f 93       	push	r23
    1922:	8f 93       	push	r24
    1924:	9f 93       	push	r25
    1926:	af 93       	push	r26
    1928:	bf 93       	push	r27
    192a:	ef 93       	push	r30
    192c:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
    192e:	e0 91 f0 01 	lds	r30, 0x01F0
    1932:	f0 91 f1 01 	lds	r31, 0x01F1
    1936:	30 97       	sbiw	r30, 0x00	; 0
    1938:	09 f0       	breq	.+2      	; 0x193c <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
    193a:	09 95       	icall
	}
}
    193c:	ff 91       	pop	r31
    193e:	ef 91       	pop	r30
    1940:	bf 91       	pop	r27
    1942:	af 91       	pop	r26
    1944:	9f 91       	pop	r25
    1946:	8f 91       	pop	r24
    1948:	7f 91       	pop	r23
    194a:	6f 91       	pop	r22
    194c:	5f 91       	pop	r21
    194e:	4f 91       	pop	r20
    1950:	3f 91       	pop	r19
    1952:	2f 91       	pop	r18
    1954:	0f 90       	pop	r0
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	0f 90       	pop	r0
    195a:	1f 90       	pop	r1
    195c:	18 95       	reti

0000195e <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
    195e:	1f 92       	push	r1
    1960:	0f 92       	push	r0
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	0f 92       	push	r0
    1966:	11 24       	eor	r1, r1
    1968:	2f 93       	push	r18
    196a:	3f 93       	push	r19
    196c:	4f 93       	push	r20
    196e:	5f 93       	push	r21
    1970:	6f 93       	push	r22
    1972:	7f 93       	push	r23
    1974:	8f 93       	push	r24
    1976:	9f 93       	push	r25
    1978:	af 93       	push	r26
    197a:	bf 93       	push	r27
    197c:	ef 93       	push	r30
    197e:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
    1980:	e0 91 fc 01 	lds	r30, 0x01FC
    1984:	f0 91 fd 01 	lds	r31, 0x01FD
    1988:	30 97       	sbiw	r30, 0x00	; 0
    198a:	09 f0       	breq	.+2      	; 0x198e <__vector_13+0x30>
	{
		Ptr_UART_RX();
    198c:	09 95       	icall
	}
}
    198e:	ff 91       	pop	r31
    1990:	ef 91       	pop	r30
    1992:	bf 91       	pop	r27
    1994:	af 91       	pop	r26
    1996:	9f 91       	pop	r25
    1998:	8f 91       	pop	r24
    199a:	7f 91       	pop	r23
    199c:	6f 91       	pop	r22
    199e:	5f 91       	pop	r21
    19a0:	4f 91       	pop	r20
    19a2:	3f 91       	pop	r19
    19a4:	2f 91       	pop	r18
    19a6:	0f 90       	pop	r0
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	0f 90       	pop	r0
    19ac:	1f 90       	pop	r1
    19ae:	18 95       	reti

000019b0 <__vector_15>:

ISR(USART_TXC_vect)
{
    19b0:	1f 92       	push	r1
    19b2:	0f 92       	push	r0
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	0f 92       	push	r0
    19b8:	11 24       	eor	r1, r1
    19ba:	2f 93       	push	r18
    19bc:	3f 93       	push	r19
    19be:	4f 93       	push	r20
    19c0:	5f 93       	push	r21
    19c2:	6f 93       	push	r22
    19c4:	7f 93       	push	r23
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	af 93       	push	r26
    19cc:	bf 93       	push	r27
    19ce:	ef 93       	push	r30
    19d0:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
    19d2:	e0 91 fe 01 	lds	r30, 0x01FE
    19d6:	f0 91 ff 01 	lds	r31, 0x01FF
    19da:	30 97       	sbiw	r30, 0x00	; 0
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <__vector_15+0x30>
	{
		Ptr_UART_TX();
    19de:	09 95       	icall
	}
    19e0:	ff 91       	pop	r31
    19e2:	ef 91       	pop	r30
    19e4:	bf 91       	pop	r27
    19e6:	af 91       	pop	r26
    19e8:	9f 91       	pop	r25
    19ea:	8f 91       	pop	r24
    19ec:	7f 91       	pop	r23
    19ee:	6f 91       	pop	r22
    19f0:	5f 91       	pop	r21
    19f2:	4f 91       	pop	r20
    19f4:	3f 91       	pop	r19
    19f6:	2f 91       	pop	r18
    19f8:	0f 90       	pop	r0
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	0f 90       	pop	r0
    19fe:	1f 90       	pop	r1
    1a00:	18 95       	reti

00001a02 <SOS_ISR_cbf>:


static void SOS_ISR_cbf(void)
{
	/* Adjust The Tick Time According To The TMU's Time Configuration */
	g_SysTicks++;
    1a02:	80 91 00 02 	lds	r24, 0x0200
    1a06:	90 91 01 02 	lds	r25, 0x0201
    1a0a:	01 96       	adiw	r24, 0x01	; 1
    1a0c:	90 93 01 02 	sts	0x0201, r25
    1a10:	80 93 00 02 	sts	0x0200, r24
	
	if(g_SysTicks == g_SOS_TickTime)
    1a14:	20 91 00 02 	lds	r18, 0x0200
    1a18:	30 91 01 02 	lds	r19, 0x0201
    1a1c:	80 91 02 02 	lds	r24, 0x0202
    1a20:	90 91 03 02 	lds	r25, 0x0203
    1a24:	28 17       	cp	r18, r24
    1a26:	39 07       	cpc	r19, r25
    1a28:	39 f4       	brne	.+14     	; 0x1a38 <SOS_ISR_cbf+0x36>
	{
		g_TMR_Ticks_Changed = TRUE;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	80 93 04 02 	sts	0x0204, r24
		g_SysTicks = FALSE;	
    1a30:	10 92 01 02 	sts	0x0201, r1
    1a34:	10 92 00 02 	sts	0x0200, r1
    1a38:	08 95       	ret

00001a3a <SOS_Init>:
{
	ERROR_STATUS errorStauts = E_OK;
	uint16_t index = 0;
	
	/*-------------[ Check TMU's Pointer Validity ]-------------*/
	if(a_SOS_s != NULL)
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <SOS_Init+0x6>
    1a3e:	63 c0       	rjmp	.+198    	; 0x1b06 <SOS_Init+0xcc>
    1a40:	fc 01       	movw	r30, r24
	{
		/*-------------[ TMU Initialization ]-------------*/
		g_SOS.Timer_ID  = a_SOS_s->Timer_ID;
    1a42:	a9 ea       	ldi	r26, 0xA9	; 169
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	81 81       	ldd	r24, Z+1	; 0x01
    1a48:	11 96       	adiw	r26, 0x01	; 1
    1a4a:	8c 93       	st	X, r24
    1a4c:	11 97       	sbiw	r26, 0x01	; 1
		g_SOS.Tick_Time = a_SOS_s->Tick_Time;
    1a4e:	80 81       	ld	r24, Z
    1a50:	8c 93       	st	X, r24
		g_SOS.Timer_Cbk_ptr = SOS_ISR_cbf;
    1a52:	21 e0       	ldi	r18, 0x01	; 1
    1a54:	3d e0       	ldi	r19, 0x0D	; 13
    1a56:	14 96       	adiw	r26, 0x04	; 4
    1a58:	3c 93       	st	X, r19
    1a5a:	2e 93       	st	-X, r18
    1a5c:	13 97       	sbiw	r26, 0x03	; 3
		g_SOS.State    = INACTIVE;
    1a5e:	12 96       	adiw	r26, 0x02	; 2
    1a60:	1c 92       	st	X, r1
		g_SOS_TickTime = g_SOS.Tick_Time;
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	90 93 03 02 	sts	0x0203, r25
    1a68:	80 93 02 02 	sts	0x0202, r24
		
		/*-------------[ Timer Initialization ]-------------*/
		g_SOS_TMR.Timer_Mode = TIMER_MODE;
    1a6c:	a2 e4       	ldi	r26, 0x42	; 66
    1a6e:	b3 e0       	ldi	r27, 0x03	; 3
    1a70:	11 96       	adiw	r26, 0x01	; 1
    1a72:	1c 92       	st	X, r1
    1a74:	11 97       	sbiw	r26, 0x01	; 1
		g_SOS_TMR.Timer_Prescaler = TIMER_PRESCALER_64;
    1a76:	84 e0       	ldi	r24, 0x04	; 4
    1a78:	13 96       	adiw	r26, 0x03	; 3
    1a7a:	8c 93       	st	X, r24
    1a7c:	13 97       	sbiw	r26, 0x03	; 3
		g_SOS_TMR.Timer_Polling_Or_Interrupt = TIMER_INTERRUPT_MODE;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	12 96       	adiw	r26, 0x02	; 2
    1a82:	8c 93       	st	X, r24
    1a84:	12 97       	sbiw	r26, 0x02	; 2
		g_SOS_TMR.Timer_Cbk_ptr = g_SOS.Timer_Cbk_ptr;
    1a86:	15 96       	adiw	r26, 0x05	; 5
    1a88:	3c 93       	st	X, r19
    1a8a:	2e 93       	st	-X, r18
    1a8c:	14 97       	sbiw	r26, 0x04	; 4
		
		/* Select The Timer Channel & Set It's CallBack Function */
		switch(a_SOS_s->Timer_ID)
    1a8e:	81 81       	ldd	r24, Z+1	; 0x01
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	59 f0       	breq	.+22     	; 0x1aaa <SOS_Init+0x70>
    1a94:	18 f0       	brcs	.+6      	; 0x1a9c <SOS_Init+0x62>
    1a96:	82 30       	cpi	r24, 0x02	; 2
    1a98:	81 f0       	breq	.+32     	; 0x1aba <SOS_Init+0x80>
    1a9a:	38 c0       	rjmp	.+112    	; 0x1b0c <SOS_Init+0xd2>
		{
			case TIMER_CH0:
				g_SOS_TMR.Timer_CH_NO = TIMER_CH0;
    1a9c:	10 92 42 03 	sts	0x0342, r1
				TIMER0_SetCM(SOS_ISR_cbf);
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	9d e0       	ldi	r25, 0x0D	; 13
    1aa4:	0e 94 81 0b 	call	0x1702	; 0x1702 <TIMER0_SetCM>
				break;
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <SOS_Init+0x8e>
			case TIMER_CH1:
				g_SOS_TMR.Timer_CH_NO = TIMER_CH1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	80 93 42 03 	sts	0x0342, r24
				TIMER1_SetCM(SOS_ISR_cbf);
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	9d e0       	ldi	r25, 0x0D	; 13
    1ab4:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TIMER1_SetCM>
				break;
    1ab8:	07 c0       	rjmp	.+14     	; 0x1ac8 <SOS_Init+0x8e>
			case TIMER_CH2:
				g_SOS_TMR.Timer_CH_NO = TIMER_CH2;
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	80 93 42 03 	sts	0x0342, r24
				TIMER2_SetCM(SOS_ISR_cbf);
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	9d e0       	ldi	r25, 0x0D	; 13
    1ac4:	0e 94 86 0b 	call	0x170c	; 0x170c <TIMER2_SetCM>
				errorStauts = TMU_ERROR + INVALID_IN;
				return errorStauts;
		}
		
		/* Apply The Settings & Start The TMU Timer Hardware Module */
		Timer_Init(&g_SOS_TMR);
    1ac8:	82 e4       	ldi	r24, 0x42	; 66
    1aca:	93 e0       	ldi	r25, 0x03	; 3
    1acc:	0e 94 df 09 	call	0x13be	; 0x13be <Timer_Init>
		Timer_Start(g_SOS_TMR.Timer_CH_NO, TMR_Ticks);	
    1ad0:	6a ef       	ldi	r22, 0xFA	; 250
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	80 91 42 03 	lds	r24, 0x0342
    1ad8:	0e 94 45 0b 	call	0x168a	; 0x168a <Timer_Start>
    1adc:	a1 e3       	ldi	r26, 0x31	; 49
    1ade:	b2 e0       	ldi	r27, 0x02	; 2
    1ae0:	e5 e2       	ldi	r30, 0x25	; 37
    1ae2:	f2 e0       	ldi	r31, 0x02	; 2
    1ae4:	82 e4       	ldi	r24, 0x42	; 66
    1ae6:	93 e0       	ldi	r25, 0x03	; 3
		
		/*  Initialize The Request Buffer  */
		for(index = 0; index < REQUEST_BUFFER_LEN; index++)
		{
			g_RequestBuffer[index].State     = INACTIVE;
    1ae8:	1c 92       	st	X, r1
			g_RequestBuffer[index].Task_Ptr  = NULL;
    1aea:	11 82       	std	Z+1, r1	; 0x01
    1aec:	10 82       	st	Z, r1
			g_RequestBuffer[index].Pre_Hook  = NULL;
    1aee:	13 82       	std	Z+3, r1	; 0x03
    1af0:	12 82       	std	Z+2, r1	; 0x02
			g_RequestBuffer[index].Post_Hook = NULL;
    1af2:	15 82       	std	Z+5, r1	; 0x05
    1af4:	14 82       	std	Z+4, r1	; 0x04
    1af6:	53 96       	adiw	r26, 0x13	; 19
    1af8:	73 96       	adiw	r30, 0x13	; 19
		/* Apply The Settings & Start The TMU Timer Hardware Module */
		Timer_Init(&g_SOS_TMR);
		Timer_Start(g_SOS_TMR.Timer_CH_NO, TMR_Ticks);	
		
		/*  Initialize The Request Buffer  */
		for(index = 0; index < REQUEST_BUFFER_LEN; index++)
    1afa:	e8 17       	cp	r30, r24
    1afc:	f9 07       	cpc	r31, r25
    1afe:	a1 f7       	brne	.-24     	; 0x1ae8 <SOS_Init+0xae>
	else
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
	}
	return errorStauts;
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	08 95       	ret
	}
	/*-------------[ In Case Of TMU's Null Pointer ]-------------*/
	else
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
    1b06:	89 ec       	ldi	r24, 0xC9	; 201
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	08 95       	ret
				g_SOS_TMR.Timer_CH_NO = TIMER_CH2;
				TIMER2_SetCM(SOS_ISR_cbf);
				break;
			default:
				errorStauts = TMU_ERROR + INVALID_IN;
				return errorStauts;
    1b0c:	8c ec       	ldi	r24, 0xCC	; 204
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
	}
	return errorStauts;
}
    1b10:	08 95       	ret

00001b12 <Start_Task>:


ERROR_STATUS Start_Task(FunPtr a_TaskFun, uint16_t a_TaskID, uint8_t a_Periodic_OneShot, uint32_t a_Time, uint8_t a_Priority, FunPtr PreHook, FunPtr PostHook)
{
    1b12:	af 92       	push	r10
    1b14:	bf 92       	push	r11
    1b16:	cf 92       	push	r12
    1b18:	df 92       	push	r13
    1b1a:	ef 92       	push	r14
    1b1c:	0f 93       	push	r16
    1b1e:	1f 93       	push	r17
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
    1b24:	dc 01       	movw	r26, r24
	a_NewTask.Periodicity = a_Periodic_OneShot;
	a_NewTask.Periority = a_Priority;
	a_NewTask.Count = ZERO;
	a_NewTask.State = ACTIVE;
	
	if(g_SOS.State == INACTIVE || g_SOS.State == ACTIVE)
    1b26:	90 91 ab 00 	lds	r25, 0x00AB
    1b2a:	92 30       	cpi	r25, 0x02	; 2
    1b2c:	08 f0       	brcs	.+2      	; 0x1b30 <Start_Task+0x1e>
    1b2e:	88 c0       	rjmp	.+272    	; 0x1c40 <Start_Task+0x12e>
	{
		/*-------------[ Check All CBF Pointers Validity ]-------------*/
		if(a_TaskFun != NULL && PreHook != NULL && PostHook != NULL)
    1b30:	10 97       	sbiw	r26, 0x00	; 0
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <Start_Task+0x24>
    1b34:	88 c0       	rjmp	.+272    	; 0x1c46 <Start_Task+0x134>
    1b36:	c1 14       	cp	r12, r1
    1b38:	d1 04       	cpc	r13, r1
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <Start_Task+0x2c>
    1b3c:	87 c0       	rjmp	.+270    	; 0x1c4c <Start_Task+0x13a>
    1b3e:	a1 14       	cp	r10, r1
    1b40:	b1 04       	cpc	r11, r1
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <Start_Task+0x34>
    1b44:	86 c0       	rjmp	.+268    	; 0x1c52 <Start_Task+0x140>
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
    1b46:	80 91 05 02 	lds	r24, 0x0205
    1b4a:	90 91 06 02 	lds	r25, 0x0206
    1b4e:	0f 97       	sbiw	r24, 0x0f	; 15
    1b50:	41 f0       	breq	.+16     	; 0x1b62 <Start_Task+0x50>
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
    1b52:	80 91 36 02 	lds	r24, 0x0236
    1b56:	90 91 37 02 	lds	r25, 0x0237
    1b5a:	86 17       	cp	r24, r22
    1b5c:	97 07       	cpc	r25, r23
    1b5e:	c9 f5       	brne	.+114    	; 0x1bd2 <Start_Task+0xc0>
    1b60:	7b c0       	rjmp	.+246    	; 0x1c58 <Start_Task+0x146>
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Task & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].State == INACTIVE)
    1b62:	80 91 31 02 	lds	r24, 0x0231
    1b66:	88 23       	and	r24, r24
    1b68:	41 f0       	breq	.+16     	; 0x1b7a <Start_Task+0x68>
    1b6a:	e4 e4       	ldi	r30, 0x44	; 68
    1b6c:	f2 e0       	ldi	r31, 0x02	; 2
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Task & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
				{
					if(g_RequestBuffer[index].State == INACTIVE)
    1b72:	50 81       	ld	r21, Z
    1b74:	51 11       	cpse	r21, r1
    1b76:	25 c0       	rjmp	.+74     	; 0x1bc2 <Start_Task+0xb0>
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <Start_Task+0x6c>
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
					{
						g_RequestBuffer[index] = a_NewTask;
    1b7e:	53 e1       	ldi	r21, 0x13	; 19
    1b80:	58 9f       	mul	r21, r24
    1b82:	f0 01       	movw	r30, r0
    1b84:	59 9f       	mul	r21, r25
    1b86:	f0 0d       	add	r31, r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	eb 5d       	subi	r30, 0xDB	; 219
    1b8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b8e:	b1 83       	std	Z+1, r27	; 0x01
    1b90:	a0 83       	st	Z, r26
    1b92:	d3 82       	std	Z+3, r13	; 0x03
    1b94:	c2 82       	std	Z+2, r12	; 0x02
    1b96:	b5 82       	std	Z+5, r11	; 0x05
    1b98:	a4 82       	std	Z+4, r10	; 0x04
    1b9a:	e6 82       	std	Z+6, r14	; 0x06
    1b9c:	47 83       	std	Z+7, r20	; 0x07
    1b9e:	00 87       	std	Z+8, r16	; 0x08
    1ba0:	11 87       	std	Z+9, r17	; 0x09
    1ba2:	22 87       	std	Z+10, r18	; 0x0a
    1ba4:	33 87       	std	Z+11, r19	; 0x0b
    1ba6:	21 e0       	ldi	r18, 0x01	; 1
    1ba8:	24 87       	std	Z+12, r18	; 0x0c
    1baa:	15 86       	std	Z+13, r1	; 0x0d
    1bac:	16 86       	std	Z+14, r1	; 0x0e
    1bae:	17 86       	std	Z+15, r1	; 0x0f
    1bb0:	10 8a       	std	Z+16, r1	; 0x10
    1bb2:	72 8b       	std	Z+18, r23	; 0x12
    1bb4:	61 8b       	std	Z+17, r22	; 0x11
						break;
					}
				}
				/*  If All Tasks In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
    1bb6:	0f 97       	sbiw	r24, 0x0f	; 15
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <Start_Task+0xaa>
    1bba:	51 c0       	rjmp	.+162    	; 0x1c5e <Start_Task+0x14c>
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	53 c0       	rjmp	.+166    	; 0x1c68 <Start_Task+0x156>
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Task & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	73 96       	adiw	r30, 0x13	; 19
    1bc6:	8f 30       	cpi	r24, 0x0F	; 15
    1bc8:	91 05       	cpc	r25, r1
    1bca:	99 f6       	brne	.-90     	; 0x1b72 <Start_Task+0x60>
				}
				/*  If All Tasks In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
				{
					a_errorStatus = TMU_ERROR + FULL_BUFFER;
					return a_errorStatus;
    1bcc:	8f ec       	ldi	r24, 0xCF	; 207
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	4b c0       	rjmp	.+150    	; 0x1c68 <Start_Task+0x156>
    1bd2:	e9 e4       	ldi	r30, 0x49	; 73
    1bd4:	f2 e0       	ldi	r31, 0x02	; 2
    1bd6:	c3 e5       	ldi	r28, 0x53	; 83
    1bd8:	d3 e0       	ldi	r29, 0x03	; 3
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
    1bda:	80 81       	ld	r24, Z
    1bdc:	91 81       	ldd	r25, Z+1	; 0x01
    1bde:	86 17       	cp	r24, r22
    1be0:	97 07       	cpc	r25, r23
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <Start_Task+0xd4>
    1be4:	3f c0       	rjmp	.+126    	; 0x1c64 <Start_Task+0x152>
    1be6:	73 96       	adiw	r30, 0x13	; 19
			}
			/*  If There Still Space In The Request Buffer  */
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
    1be8:	ec 17       	cp	r30, r28
    1bea:	fd 07       	cpc	r31, r29
    1bec:	b1 f7       	brne	.-20     	; 0x1bda <Start_Task+0xc8>
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
					}
				}
				/* Add The New Consumer To The Request Buffer */
				g_RequestBuffer[g_ReqBuffer_Index++] = a_NewTask;				
    1bee:	80 91 05 02 	lds	r24, 0x0205
    1bf2:	90 91 06 02 	lds	r25, 0x0206
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	31 96       	adiw	r30, 0x01	; 1
    1bfa:	f0 93 06 02 	sts	0x0206, r31
    1bfe:	e0 93 05 02 	sts	0x0205, r30
    1c02:	53 e1       	ldi	r21, 0x13	; 19
    1c04:	58 9f       	mul	r21, r24
    1c06:	f0 01       	movw	r30, r0
    1c08:	59 9f       	mul	r21, r25
    1c0a:	f0 0d       	add	r31, r0
    1c0c:	11 24       	eor	r1, r1
    1c0e:	eb 5d       	subi	r30, 0xDB	; 219
    1c10:	fd 4f       	sbci	r31, 0xFD	; 253
    1c12:	b1 83       	std	Z+1, r27	; 0x01
    1c14:	a0 83       	st	Z, r26
    1c16:	d3 82       	std	Z+3, r13	; 0x03
    1c18:	c2 82       	std	Z+2, r12	; 0x02
    1c1a:	b5 82       	std	Z+5, r11	; 0x05
    1c1c:	a4 82       	std	Z+4, r10	; 0x04
    1c1e:	e6 82       	std	Z+6, r14	; 0x06
    1c20:	47 83       	std	Z+7, r20	; 0x07
    1c22:	00 87       	std	Z+8, r16	; 0x08
    1c24:	11 87       	std	Z+9, r17	; 0x09
    1c26:	22 87       	std	Z+10, r18	; 0x0a
    1c28:	33 87       	std	Z+11, r19	; 0x0b
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	84 87       	std	Z+12, r24	; 0x0c
    1c2e:	15 86       	std	Z+13, r1	; 0x0d
    1c30:	16 86       	std	Z+14, r1	; 0x0e
    1c32:	17 86       	std	Z+15, r1	; 0x0f
    1c34:	10 8a       	std	Z+16, r1	; 0x10
    1c36:	72 8b       	std	Z+18, r23	; 0x12
    1c38:	61 8b       	std	Z+17, r22	; 0x11
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	14 c0       	rjmp	.+40     	; 0x1c68 <Start_Task+0x156>
	}
	/*-------------[ In Case The TMU IS Not Active (Not Initialized Yet) ]-------------*/
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
    1c40:	8a ec       	ldi	r24, 0xCA	; 202
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	11 c0       	rjmp	.+34     	; 0x1c68 <Start_Task+0x156>
		}
		/*-------------[ In Case Of Consumer's Null Pointer CBF ]-------------*/
		else
		{
			a_errorStatus = TMU_ERROR + NULL_PTR;
			return a_errorStatus;
    1c46:	89 ec       	ldi	r24, 0xC9	; 201
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	0e c0       	rjmp	.+28     	; 0x1c68 <Start_Task+0x156>
    1c4c:	89 ec       	ldi	r24, 0xC9	; 201
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	0b c0       	rjmp	.+22     	; 0x1c68 <Start_Task+0x156>
    1c52:	89 ec       	ldi	r24, 0xC9	; 201
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	08 c0       	rjmp	.+16     	; 0x1c68 <Start_Task+0x156>
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
					{
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
    1c58:	8e ec       	ldi	r24, 0xCE	; 206
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	05 c0       	rjmp	.+10     	; 0x1c68 <Start_Task+0x156>
				}
				/*  If All Tasks In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
				{
					a_errorStatus = TMU_ERROR + FULL_BUFFER;
					return a_errorStatus;
    1c5e:	8f ec       	ldi	r24, 0xCF	; 207
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <Start_Task+0x156>
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
					{
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
    1c64:	8e ec       	ldi	r24, 0xCE	; 206
    1c66:	90 e0       	ldi	r25, 0x00	; 0
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
}
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	ef 90       	pop	r14
    1c72:	df 90       	pop	r13
    1c74:	cf 90       	pop	r12
    1c76:	bf 90       	pop	r11
    1c78:	af 90       	pop	r10
    1c7a:	08 95       	ret

00001c7c <SOS_Run>:
	/*-------------[ Consumer Not Found In Request Buffer ]-------------*/
	return errorStatus;
}

void SOS_Run(void)
{
    1c7c:	8f 92       	push	r8
    1c7e:	9f 92       	push	r9
    1c80:	bf 92       	push	r11
    1c82:	cf 92       	push	r12
    1c84:	df 92       	push	r13
    1c86:	ef 92       	push	r14
    1c88:	ff 92       	push	r15
    1c8a:	0f 93       	push	r16
    1c8c:	1f 93       	push	r17
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
	sint16_t a_s16_index = ZERO, a_temp = ZERO;
	uint8_t a_u8_ReadyIndex = ZERO, a_counter = ZERO;
	
	/*-------------[ Every TMU Tick, Go Through The Request Buffer ]-------------*/
	if(g_TMR_Ticks_Changed)
    1c92:	80 91 04 02 	lds	r24, 0x0204
    1c96:	88 23       	and	r24, r24
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <SOS_Run+0x20>
    1c9a:	e8 c0       	rjmp	.+464    	; 0x1e6c <SOS_Run+0x1f0>
    1c9c:	0f 2e       	mov	r0, r31
    1c9e:	f7 e0       	ldi	r31, 0x07	; 7
    1ca0:	8f 2e       	mov	r8, r31
    1ca2:	f2 e0       	ldi	r31, 0x02	; 2
    1ca4:	9f 2e       	mov	r9, r31
    1ca6:	f0 2d       	mov	r31, r0
    1ca8:	25 e2       	ldi	r18, 0x25	; 37
    1caa:	32 e0       	ldi	r19, 0x02	; 2
    1cac:	f4 01       	movw	r30, r8
	{
		/* Initialize The Ready Tasks Buffer */
		for(a_s16_index = ZERO; a_s16_index < REQUEST_BUFFER_LEN; a_s16_index++)
		{
			g_ReadyTasks[a_s16_index] = -1;
    1cae:	8f ef       	ldi	r24, 0xFF	; 255
    1cb0:	9f ef       	ldi	r25, 0xFF	; 255
    1cb2:	81 93       	st	Z+, r24
    1cb4:	91 93       	st	Z+, r25
	
	/*-------------[ Every TMU Tick, Go Through The Request Buffer ]-------------*/
	if(g_TMR_Ticks_Changed)
	{
		/* Initialize The Ready Tasks Buffer */
		for(a_s16_index = ZERO; a_s16_index < REQUEST_BUFFER_LEN; a_s16_index++)
    1cb6:	e2 17       	cp	r30, r18
    1cb8:	f3 07       	cpc	r31, r19
    1cba:	d9 f7       	brne	.-10     	; 0x1cb2 <SOS_Run+0x36>
    1cbc:	e1 e3       	ldi	r30, 0x31	; 49
    1cbe:	f2 e0       	ldi	r31, 0x02	; 2
    1cc0:	2c e2       	ldi	r18, 0x2C	; 44
    1cc2:	32 e0       	ldi	r19, 0x02	; 2
    1cc4:	b1 2c       	mov	r11, r1
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
		}
		
		/* Go Through The Tasks Request Buffer To Add All Ready Tasks To Be Executed */
		for(a_s16_index = ZERO; a_s16_index < REQUEST_BUFFER_LEN; a_s16_index++)
		{
			g_RequestBuffer[a_s16_index].Count += g_SOS_TickTime;
    1cca:	00 91 02 02 	lds	r16, 0x0202
    1cce:	10 91 03 02 	lds	r17, 0x0203
    1cd2:	bf 01       	movw	r22, r30
    1cd4:	81 81       	ldd	r24, Z+1	; 0x01
    1cd6:	92 81       	ldd	r25, Z+2	; 0x02
    1cd8:	a3 81       	ldd	r26, Z+3	; 0x03
    1cda:	b4 81       	ldd	r27, Z+4	; 0x04
    1cdc:	80 0f       	add	r24, r16
    1cde:	91 1f       	adc	r25, r17
    1ce0:	a1 1d       	adc	r26, r1
    1ce2:	b1 1d       	adc	r27, r1
    1ce4:	81 83       	std	Z+1, r24	; 0x01
    1ce6:	92 83       	std	Z+2, r25	; 0x02
    1ce8:	a3 83       	std	Z+3, r26	; 0x03
    1cea:	b4 83       	std	Z+4, r27	; 0x04
			
			/*-------------[ IF Consumer's Due Time Is Met!  ]-------------*/
			if(g_RequestBuffer[a_s16_index].Count >= g_RequestBuffer[a_s16_index].Time)
    1cec:	e9 01       	movw	r28, r18
    1cee:	c9 80       	ldd	r12, Y+1	; 0x01
    1cf0:	da 80       	ldd	r13, Y+2	; 0x02
    1cf2:	eb 80       	ldd	r14, Y+3	; 0x03
    1cf4:	fc 80       	ldd	r15, Y+4	; 0x04
    1cf6:	8c 15       	cp	r24, r12
    1cf8:	9d 05       	cpc	r25, r13
    1cfa:	ae 05       	cpc	r26, r14
    1cfc:	bf 05       	cpc	r27, r15
    1cfe:	30 f1       	brcs	.+76     	; 0x1d4c <SOS_Run+0xd0>
			{	
				/* IF The Consumer Function IS Periodic */
				if(g_RequestBuffer[a_s16_index].Periodicity == PERIODIC && g_RequestBuffer[a_s16_index].State == ACTIVE)
    1d00:	88 81       	ld	r24, Y
    1d02:	81 30       	cpi	r24, 0x01	; 1
    1d04:	a1 f4       	brne	.+40     	; 0x1d2e <SOS_Run+0xb2>
    1d06:	80 81       	ld	r24, Z
    1d08:	81 30       	cpi	r24, 0x01	; 1
    1d0a:	01 f5       	brne	.+64     	; 0x1d4c <SOS_Run+0xd0>
				{
					g_RequestBuffer[a_s16_index].Count = ZERO;
    1d0c:	db 01       	movw	r26, r22
    1d0e:	11 96       	adiw	r26, 0x01	; 1
    1d10:	1d 92       	st	X+, r1
    1d12:	1d 92       	st	X+, r1
    1d14:	1d 92       	st	X+, r1
    1d16:	1c 92       	st	X, r1
    1d18:	14 97       	sbiw	r26, 0x04	; 4
					g_ReadyTasks[a_u8_ReadyIndex++] = a_s16_index;
    1d1a:	ab 2d       	mov	r26, r11
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	aa 0f       	add	r26, r26
    1d20:	bb 1f       	adc	r27, r27
    1d22:	a9 5f       	subi	r26, 0xF9	; 249
    1d24:	bd 4f       	sbci	r27, 0xFD	; 253
    1d26:	4d 93       	st	X+, r20
    1d28:	5c 93       	st	X, r21
    1d2a:	b3 94       	inc	r11
    1d2c:	0f c0       	rjmp	.+30     	; 0x1d4c <SOS_Run+0xd0>
				}
				
				/* Else IF The Consumer Function IS OneShot (Non-Periodic) */
				else if (g_RequestBuffer[a_s16_index].Periodicity == ONESHOT && g_RequestBuffer[a_s16_index].State == ACTIVE)
    1d2e:	81 11       	cpse	r24, r1
    1d30:	0d c0       	rjmp	.+26     	; 0x1d4c <SOS_Run+0xd0>
    1d32:	80 81       	ld	r24, Z
    1d34:	81 30       	cpi	r24, 0x01	; 1
    1d36:	51 f4       	brne	.+20     	; 0x1d4c <SOS_Run+0xd0>
				{
					g_RequestBuffer[a_s16_index].State = INACTIVE;
    1d38:	10 82       	st	Z, r1
					g_ReadyTasks[a_u8_ReadyIndex++] = a_s16_index;
    1d3a:	ab 2d       	mov	r26, r11
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	aa 0f       	add	r26, r26
    1d40:	bb 1f       	adc	r27, r27
    1d42:	a9 5f       	subi	r26, 0xF9	; 249
    1d44:	bd 4f       	sbci	r27, 0xFD	; 253
    1d46:	4d 93       	st	X+, r20
    1d48:	5c 93       	st	X, r21
    1d4a:	b3 94       	inc	r11
		{
			g_ReadyTasks[a_s16_index] = -1;
		}
		
		/* Go Through The Tasks Request Buffer To Add All Ready Tasks To Be Executed */
		for(a_s16_index = ZERO; a_s16_index < REQUEST_BUFFER_LEN; a_s16_index++)
    1d4c:	4f 5f       	subi	r20, 0xFF	; 255
    1d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d50:	73 96       	adiw	r30, 0x13	; 19
    1d52:	2d 5e       	subi	r18, 0xED	; 237
    1d54:	3f 4f       	sbci	r19, 0xFF	; 255
    1d56:	4f 30       	cpi	r20, 0x0F	; 15
    1d58:	51 05       	cpc	r21, r1
    1d5a:	09 f0       	breq	.+2      	; 0x1d5e <SOS_Run+0xe2>
    1d5c:	b6 cf       	rjmp	.-148    	; 0x1cca <SOS_Run+0x4e>
					g_ReadyTasks[a_u8_ReadyIndex++] = a_s16_index;
				}
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
    1d5e:	80 91 07 02 	lds	r24, 0x0207
    1d62:	90 91 08 02 	lds	r25, 0x0208
    1d66:	01 96       	adiw	r24, 0x01	; 1
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <SOS_Run+0xf0>
    1d6a:	7e c0       	rjmp	.+252    	; 0x1e68 <SOS_Run+0x1ec>
    1d6c:	07 e0       	ldi	r16, 0x07	; 7
    1d6e:	12 e0       	ldi	r17, 0x02	; 2
    1d70:	61 e0       	ldi	r22, 0x01	; 1
    1d72:	70 e0       	ldi	r23, 0x00	; 0
		{
			for (a_counter = a_s16_index + 1; g_ReadyTasks[a_counter] != -1; a_counter++)
			{
				if(g_RequestBuffer[g_ReadyTasks[a_s16_index]].Periority > g_RequestBuffer[g_ReadyTasks[a_counter]].Periority)
    1d74:	0f 2e       	mov	r0, r31
    1d76:	f3 e1       	ldi	r31, 0x13	; 19
    1d78:	ef 2e       	mov	r14, r31
    1d7a:	f0 2d       	mov	r31, r0
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
		{
			for (a_counter = a_s16_index + 1; g_ReadyTasks[a_counter] != -1; a_counter++)
    1d7c:	f6 2e       	mov	r15, r22
    1d7e:	cb 01       	movw	r24, r22
    1d80:	e8 01       	movw	r28, r16
    1d82:	2a 81       	ldd	r18, Y+2	; 0x02
    1d84:	3b 81       	ldd	r19, Y+3	; 0x03
    1d86:	2f 3f       	cpi	r18, 0xFF	; 255
    1d88:	ef ef       	ldi	r30, 0xFF	; 255
    1d8a:	3e 07       	cpc	r19, r30
    1d8c:	a1 f1       	breq	.+104    	; 0x1df6 <SOS_Run+0x17a>
			{
				if(g_RequestBuffer[g_ReadyTasks[a_s16_index]].Periority > g_RequestBuffer[g_ReadyTasks[a_counter]].Periority)
    1d8e:	c8 80       	ld	r12, Y
    1d90:	d9 80       	ldd	r13, Y+1	; 0x01
    1d92:	ec 9c       	mul	r14, r12
    1d94:	d0 01       	movw	r26, r0
    1d96:	ed 9c       	mul	r14, r13
    1d98:	b0 0d       	add	r27, r0
    1d9a:	11 24       	eor	r1, r1
    1d9c:	ab 5d       	subi	r26, 0xDB	; 219
    1d9e:	bd 4f       	sbci	r27, 0xFD	; 253
    1da0:	e2 9e       	mul	r14, r18
    1da2:	f0 01       	movw	r30, r0
    1da4:	e3 9e       	mul	r14, r19
    1da6:	f0 0d       	add	r31, r0
    1da8:	11 24       	eor	r1, r1
    1daa:	eb 5d       	subi	r30, 0xDB	; 219
    1dac:	fd 4f       	sbci	r31, 0xFD	; 253
    1dae:	16 96       	adiw	r26, 0x06	; 6
    1db0:	ac 91       	ld	r26, X
    1db2:	e6 81       	ldd	r30, Z+6	; 0x06
    1db4:	ea 17       	cp	r30, r26
    1db6:	48 f4       	brcc	.+18     	; 0x1dca <SOS_Run+0x14e>
				{
					a_temp = g_ReadyTasks[a_s16_index];
					g_ReadyTasks[a_s16_index] = g_ReadyTasks[a_counter];
    1db8:	39 83       	std	Y+1, r19	; 0x01
    1dba:	28 83       	st	Y, r18
					g_ReadyTasks[a_counter] = a_temp;
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	e9 5f       	subi	r30, 0xF9	; 249
    1dc4:	fd 4f       	sbci	r31, 0xFD	; 253
    1dc6:	d1 82       	std	Z+1, r13	; 0x01
    1dc8:	c0 82       	st	Z, r12
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
		{
			for (a_counter = a_s16_index + 1; g_ReadyTasks[a_counter] != -1; a_counter++)
    1dca:	f3 94       	inc	r15
    1dcc:	8f 2d       	mov	r24, r15
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	ee 0f       	add	r30, r30
    1dd4:	ff 1f       	adc	r31, r31
    1dd6:	e9 5f       	subi	r30, 0xF9	; 249
    1dd8:	fd 4f       	sbci	r31, 0xFD	; 253
    1dda:	20 81       	ld	r18, Z
    1ddc:	31 81       	ldd	r19, Z+1	; 0x01
    1dde:	2f 3f       	cpi	r18, 0xFF	; 255
    1de0:	ff ef       	ldi	r31, 0xFF	; 255
    1de2:	3f 07       	cpc	r19, r31
    1de4:	a1 f6       	brne	.-88     	; 0x1d8e <SOS_Run+0x112>
    1de6:	6f 5f       	subi	r22, 0xFF	; 255
    1de8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dea:	0e 5f       	subi	r16, 0xFE	; 254
    1dec:	1f 4f       	sbci	r17, 0xFF	; 255
					g_ReadyTasks[a_u8_ReadyIndex++] = a_s16_index;
				}
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	9b 81       	ldd	r25, Y+3	; 0x03
    1df2:	01 96       	adiw	r24, 0x01	; 1
    1df4:	19 f6       	brne	.-122    	; 0x1d7c <SOS_Run+0x100>
					g_ReadyTasks[a_counter] = a_temp;
				}					
			}
		}
		/* Execute The Ready Tasks One By One (In Priority Order) */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
    1df6:	80 91 07 02 	lds	r24, 0x0207
    1dfa:	90 91 08 02 	lds	r25, 0x0208
    1dfe:	8f 3f       	cpi	r24, 0xFF	; 255
    1e00:	4f ef       	ldi	r20, 0xFF	; 255
    1e02:	94 07       	cpc	r25, r20
    1e04:	89 f1       	breq	.+98     	; 0x1e68 <SOS_Run+0x1ec>
		{
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Pre_Hook();
    1e06:	13 e1       	ldi	r17, 0x13	; 19
    1e08:	18 9f       	mul	r17, r24
    1e0a:	f0 01       	movw	r30, r0
    1e0c:	19 9f       	mul	r17, r25
    1e0e:	f0 0d       	add	r31, r0
    1e10:	11 24       	eor	r1, r1
    1e12:	eb 5d       	subi	r30, 0xDB	; 219
    1e14:	fd 4f       	sbci	r31, 0xFD	; 253
    1e16:	02 80       	ldd	r0, Z+2	; 0x02
    1e18:	f3 81       	ldd	r31, Z+3	; 0x03
    1e1a:	e0 2d       	mov	r30, r0
    1e1c:	09 95       	icall
    1e1e:	74 01       	movw	r14, r8
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Task_Ptr();
    1e20:	d4 01       	movw	r26, r8
    1e22:	8d 91       	ld	r24, X+
    1e24:	9d 91       	ld	r25, X+
    1e26:	4d 01       	movw	r8, r26
    1e28:	18 9f       	mul	r17, r24
    1e2a:	f0 01       	movw	r30, r0
    1e2c:	19 9f       	mul	r17, r25
    1e2e:	f0 0d       	add	r31, r0
    1e30:	11 24       	eor	r1, r1
    1e32:	eb 5d       	subi	r30, 0xDB	; 219
    1e34:	fd 4f       	sbci	r31, 0xFD	; 253
    1e36:	01 90       	ld	r0, Z+
    1e38:	f0 81       	ld	r31, Z
    1e3a:	e0 2d       	mov	r30, r0
    1e3c:	09 95       	icall
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Post_Hook();
    1e3e:	e7 01       	movw	r28, r14
    1e40:	88 81       	ld	r24, Y
    1e42:	99 81       	ldd	r25, Y+1	; 0x01
    1e44:	18 9f       	mul	r17, r24
    1e46:	f0 01       	movw	r30, r0
    1e48:	19 9f       	mul	r17, r25
    1e4a:	f0 0d       	add	r31, r0
    1e4c:	11 24       	eor	r1, r1
    1e4e:	eb 5d       	subi	r30, 0xDB	; 219
    1e50:	fd 4f       	sbci	r31, 0xFD	; 253
    1e52:	04 80       	ldd	r0, Z+4	; 0x04
    1e54:	f5 81       	ldd	r31, Z+5	; 0x05
    1e56:	e0 2d       	mov	r30, r0
    1e58:	09 95       	icall
					g_ReadyTasks[a_counter] = a_temp;
				}					
			}
		}
		/* Execute The Ready Tasks One By One (In Priority Order) */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
    1e5a:	f4 01       	movw	r30, r8
    1e5c:	80 81       	ld	r24, Z
    1e5e:	91 81       	ldd	r25, Z+1	; 0x01
    1e60:	8f 3f       	cpi	r24, 0xFF	; 255
    1e62:	ff ef       	ldi	r31, 0xFF	; 255
    1e64:	9f 07       	cpc	r25, r31
    1e66:	81 f6       	brne	.-96     	; 0x1e08 <SOS_Run+0x18c>
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Pre_Hook();
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Task_Ptr();
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Post_Hook();
		}		
		
		g_TMR_Ticks_Changed = FALSE;
    1e68:	10 92 04 02 	sts	0x0204, r1
	}
}
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	df 90       	pop	r13
    1e7a:	cf 90       	pop	r12
    1e7c:	bf 90       	pop	r11
    1e7e:	9f 90       	pop	r9
    1e80:	8f 90       	pop	r8
    1e82:	08 95       	ret

00001e84 <__tablejump2__>:
    1e84:	ee 0f       	add	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	05 90       	lpm	r0, Z+
    1e8a:	f4 91       	lpm	r31, Z
    1e8c:	e0 2d       	mov	r30, r0
    1e8e:	09 94       	ijmp

00001e90 <_exit>:
    1e90:	f8 94       	cli

00001e92 <__stop_program>:
    1e92:	ff cf       	rjmp	.-2      	; 0x1e92 <__stop_program>
