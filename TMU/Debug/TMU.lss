
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a46  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000aba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000071  00800060  00800060  00000aba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000aec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ba  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ae  00000000  00000000  00001d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000521  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a0  00000000  00000000  00002814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b9  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001527  00000000  00000000  0000326d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004794  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <__vector_4>
  14:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_5>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__vector_7>
  20:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__vector_8>
  24:	0c 94 9c 03 	jmp	0x738	; 0x738 <__vector_9>
  28:	0c 94 21 03 	jmp	0x642	; 0x642 <__vector_10>
  2c:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_11>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  54:	a8 01       	movw	r20, r16
  56:	c8 01       	movw	r24, r16
  58:	ac 01       	movw	r20, r24
  5a:	b1 01       	movw	r22, r2
  5c:	b5 01       	movw	r22, r10
  5e:	ba 01       	movw	r22, r20
  60:	bf 01       	movw	r22, r30
  62:	c3 01       	movw	r24, r6
  64:	0e 02       	muls	r16, r30
  66:	40 02       	muls	r20, r16
  68:	14 02       	muls	r17, r20
  6a:	1c 02       	muls	r17, r28
  6c:	22 02       	muls	r18, r18
  6e:	2a 02       	muls	r18, r26
  70:	32 02       	muls	r19, r18
  72:	38 02       	muls	r19, r24
  74:	85 02       	muls	r24, r21
  76:	a7 02       	muls	r26, r23
  78:	89 02       	muls	r24, r25
  7a:	8e 02       	muls	r24, r30
  7c:	93 02       	muls	r25, r19
  7e:	98 02       	muls	r25, r24
  80:	9d 02       	muls	r25, r29
  82:	a2 02       	muls	r26, r18

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf e5       	ldi	r28, 0x5F	; 95
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_clear_bss>:
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	a0 e6       	ldi	r26, 0x60	; 96
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
  98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
  9a:	a1 3d       	cpi	r26, 0xD1	; 209
  9c:	b2 07       	cpc	r27, r18
  9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>
  a0:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  a4:	0c 94 21 05 	jmp	0xa42	; 0xa42 <_exit>

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <ToggleLED1>:
DIO_Cfg_s g_LED2;
DIO_Cfg_s g_LED3;

void ToggleLED1()
{
	DIO_Toggle(g_LED1.GPIO, g_LED1.pins);
  ac:	eb ec       	ldi	r30, 0xCB	; 203
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	61 81       	ldd	r22, Z+1	; 0x01
  b2:	80 81       	ld	r24, Z
  b4:	0e 94 38 01 	call	0x270	; 0x270 <DIO_Toggle>
  b8:	08 95       	ret

000000ba <ToggleLED2>:
}
void ToggleLED2()
{
	DIO_Toggle(g_LED2.GPIO, g_LED2.pins);
  ba:	e8 ec       	ldi	r30, 0xC8	; 200
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	61 81       	ldd	r22, Z+1	; 0x01
  c0:	80 81       	ld	r24, Z
  c2:	0e 94 38 01 	call	0x270	; 0x270 <DIO_Toggle>
  c6:	08 95       	ret

000000c8 <ToggleLED3>:
}
void ToggleLED3()
{
	DIO_Toggle(g_LED3.GPIO, g_LED3.pins);
  c8:	ee ec       	ldi	r30, 0xCE	; 206
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	61 81       	ldd	r22, Z+1	; 0x01
  ce:	80 81       	ld	r24, Z
  d0:	0e 94 38 01 	call	0x270	; 0x270 <DIO_Toggle>
  d4:	08 95       	ret

000000d6 <Init_LEDs>:
}

void Init_LEDs(void)
{
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
	g_LED1.GPIO = GPIOD;
  de:	eb ec       	ldi	r30, 0xCB	; 203
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	03 e0       	ldi	r16, 0x03	; 3
  e4:	00 83       	st	Z, r16
	g_LED1.dir  = OUTPUT;
  e6:	1f ef       	ldi	r17, 0xFF	; 255
  e8:	12 83       	std	Z+2, r17	; 0x02
	g_LED1.pins = BIT4;
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED1);
  ee:	cf 01       	movw	r24, r30
  f0:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_init>
	g_LED2.GPIO = GPIOD;
  f4:	e8 ec       	ldi	r30, 0xC8	; 200
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	00 83       	st	Z, r16
	g_LED2.dir  = OUTPUT;
  fa:	12 83       	std	Z+2, r17	; 0x02
	g_LED2.pins = BIT5;
  fc:	80 e2       	ldi	r24, 0x20	; 32
  fe:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED2);
 100:	cf 01       	movw	r24, r30
 102:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_init>
	g_LED3.GPIO = GPIOD;
 106:	ce ec       	ldi	r28, 0xCE	; 206
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	08 83       	st	Y, r16
	g_LED3.dir  = OUTPUT;
 10c:	1a 83       	std	Y+2, r17	; 0x02
	g_LED3.pins = BIT6;
 10e:	80 e4       	ldi	r24, 0x40	; 64
 110:	89 83       	std	Y+1, r24	; 0x01
	DIO_init(&g_LED3);
 112:	ce 01       	movw	r24, r28
 114:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_init>
	DIO_Write(g_LED3.GPIO, g_LED3.pins, HIGH);
 118:	4f ef       	ldi	r20, 0xFF	; 255
 11a:	69 81       	ldd	r22, Y+1	; 0x01
 11c:	88 81       	ld	r24, Y
 11e:	0e 94 0a 01 	call	0x214	; 0x214 <DIO_Write>
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <main>:


int main(void)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	00 d0       	rcall	.+0      	; 0x132 <main+0x6>
 132:	00 d0       	rcall	.+0      	; 0x134 <main+0x8>
 134:	1f 92       	push	r1
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
	/*-------------[ TMU Initialization ]-------------*/
    TMU_cfg_s TMU1;
	TMU1.Tick_Time = 1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	89 83       	std	Y+1, r24	; 0x01
	TMU1.Timer_ID = TIMER_CH0;
 13e:	1a 82       	std	Y+2, r1	; 0x02
	TMU_Init(&TMU1);
 140:	ce 01       	movw	r24, r28
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	0e 94 33 04 	call	0x866	; 0x866 <TMU_Init>
    
	/*-------------[ LEDs Initialization ]-------------*/
	Init_LEDs();
 148:	0e 94 6b 00 	call	0xd6	; 0xd6 <Init_LEDs>
	
	/*----------[ Start 3 Different Consumers ]---------*/
	/*[[ TMU_Srart(Consumer_FunPtr, ConsumerID, Periodicity, Time_IN_ms); ]]*/
	TMU_Start(ToggleLED1, 100, PERIODIC, 100);
 14c:	04 e6       	ldi	r16, 0x64	; 100
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	41 e0       	ldi	r20, 0x01	; 1
 156:	64 e6       	ldi	r22, 0x64	; 100
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	86 e5       	ldi	r24, 0x56	; 86
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 8a 04 	call	0x914	; 0x914 <TMU_Start>
	TMU_Start(ToggleLED2, 110, PERIODIC, 300);
 162:	0c e2       	ldi	r16, 0x2C	; 44
 164:	11 e0       	ldi	r17, 0x01	; 1
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	41 e0       	ldi	r20, 0x01	; 1
 16c:	6e e6       	ldi	r22, 0x6E	; 110
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	8d e5       	ldi	r24, 0x5D	; 93
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 8a 04 	call	0x914	; 0x914 <TMU_Start>
	TMU_Start(ToggleLED3, 120, ONESHOT, 3000);
 178:	08 eb       	ldi	r16, 0xB8	; 184
 17a:	1b e0       	ldi	r17, 0x0B	; 11
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	68 e7       	ldi	r22, 0x78	; 120
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	84 e6       	ldi	r24, 0x64	; 100
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 8a 04 	call	0x914	; 0x914 <TMU_Start>
	
	while (1) 
    {
		TMU_Dispatcher();
 18e:	0e 94 c4 04 	call	0x988	; 0x988 <TMU_Dispatcher>
    }
 192:	fd cf       	rjmp	.-6      	; 0x18e <main+0x62>

00000194 <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
 194:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
 196:	89 2b       	or	r24, r25
 198:	c9 f1       	breq	.+114    	; 0x20c <DIO_init+0x78>
	{
		switch(DIO_info->GPIO)
 19a:	80 81       	ld	r24, Z
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 f0       	breq	.+36     	; 0x1c4 <DIO_init+0x30>
 1a0:	28 f0       	brcs	.+10     	; 0x1ac <DIO_init+0x18>
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	d9 f0       	breq	.+54     	; 0x1dc <DIO_init+0x48>
 1a6:	83 30       	cpi	r24, 0x03	; 3
 1a8:	29 f1       	breq	.+74     	; 0x1f4 <DIO_init+0x60>
 1aa:	32 c0       	rjmp	.+100    	; 0x210 <DIO_init+0x7c>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
 1ac:	81 81       	ldd	r24, Z+1	; 0x01
 1ae:	2a b3       	in	r18, 0x1a	; 26
 1b0:	98 2f       	mov	r25, r24
 1b2:	90 95       	com	r25
 1b4:	29 23       	and	r18, r25
 1b6:	92 81       	ldd	r25, Z+2	; 0x02
 1b8:	98 23       	and	r25, r24
 1ba:	82 2f       	mov	r24, r18
 1bc:	89 2b       	or	r24, r25
 1be:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1c2:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
 1c4:	81 81       	ldd	r24, Z+1	; 0x01
 1c6:	27 b3       	in	r18, 0x17	; 23
 1c8:	98 2f       	mov	r25, r24
 1ca:	90 95       	com	r25
 1cc:	29 23       	and	r18, r25
 1ce:	92 81       	ldd	r25, Z+2	; 0x02
 1d0:	98 23       	and	r25, r24
 1d2:	82 2f       	mov	r24, r18
 1d4:	89 2b       	or	r24, r25
 1d6:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1da:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
 1dc:	81 81       	ldd	r24, Z+1	; 0x01
 1de:	24 b3       	in	r18, 0x14	; 20
 1e0:	98 2f       	mov	r25, r24
 1e2:	90 95       	com	r25
 1e4:	29 23       	and	r18, r25
 1e6:	92 81       	ldd	r25, Z+2	; 0x02
 1e8:	98 23       	and	r25, r24
 1ea:	82 2f       	mov	r24, r18
 1ec:	89 2b       	or	r24, r25
 1ee:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1f2:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	21 b3       	in	r18, 0x11	; 17
 1f8:	98 2f       	mov	r25, r24
 1fa:	90 95       	com	r25
 1fc:	29 23       	and	r18, r25
 1fe:	92 81       	ldd	r25, Z+2	; 0x02
 200:	98 23       	and	r25, r24
 202:	82 2f       	mov	r24, r18
 204:	89 2b       	or	r24, r25
 206:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
 208:	80 e0       	ldi	r24, 0x00	; 0
			break;
 20a:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
 210:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 212:	08 95       	ret

00000214 <DIO_Write>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write(uint8_t GPIO, uint8_t pins, uint8_t value)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	79 f0       	breq	.+30     	; 0x236 <DIO_Write+0x22>
 218:	28 f0       	brcs	.+10     	; 0x224 <DIO_Write+0x10>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	a9 f0       	breq	.+42     	; 0x248 <DIO_Write+0x34>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	e1 f0       	breq	.+56     	; 0x25a <DIO_Write+0x46>
 222:	24 c0       	rjmp	.+72     	; 0x26c <DIO_Write+0x58>
	{
		case GPIOA :
		PORTA_DATA = (pins & value) | (~pins & PORTA_DATA);
 224:	8b b3       	in	r24, 0x1b	; 27
 226:	96 2f       	mov	r25, r22
 228:	90 95       	com	r25
 22a:	89 23       	and	r24, r25
 22c:	46 23       	and	r20, r22
 22e:	48 2b       	or	r20, r24
 230:	4b bb       	out	0x1b, r20	; 27
		errorStatus = E_OK;
 232:	80 e0       	ldi	r24, 0x00	; 0
		break;
 234:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & value) | (~pins & PORTB_DATA);
 236:	88 b3       	in	r24, 0x18	; 24
 238:	96 2f       	mov	r25, r22
 23a:	90 95       	com	r25
 23c:	89 23       	and	r24, r25
 23e:	46 23       	and	r20, r22
 240:	48 2b       	or	r20, r24
 242:	48 bb       	out	0x18, r20	; 24
		errorStatus = E_OK;
 244:	80 e0       	ldi	r24, 0x00	; 0
		break;
 246:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & value) | (~pins & PORTC_DATA);
 248:	85 b3       	in	r24, 0x15	; 21
 24a:	96 2f       	mov	r25, r22
 24c:	90 95       	com	r25
 24e:	89 23       	and	r24, r25
 250:	46 23       	and	r20, r22
 252:	48 2b       	or	r20, r24
 254:	45 bb       	out	0x15, r20	; 21
		errorStatus = E_OK;
 256:	80 e0       	ldi	r24, 0x00	; 0
		break;
 258:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & value) | (~pins & PORTD_DATA);
 25a:	82 b3       	in	r24, 0x12	; 18
 25c:	96 2f       	mov	r25, r22
 25e:	90 95       	com	r25
 260:	89 23       	and	r24, r25
 262:	46 23       	and	r20, r22
 264:	48 2b       	or	r20, r24
 266:	42 bb       	out	0x12, r20	; 18
		errorStatus = E_OK;
 268:	80 e0       	ldi	r24, 0x00	; 0
		break;
 26a:	08 95       	ret
		default :
		errorStatus = E_NOK;
 26c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return errorStatus;
}
 26e:	08 95       	ret

00000270 <DIO_Toggle>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle(uint8_t GPIO, uint8_t pins)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	89 f0       	breq	.+34     	; 0x296 <DIO_Toggle+0x26>
 274:	28 f0       	brcs	.+10     	; 0x280 <DIO_Toggle+0x10>
 276:	82 30       	cpi	r24, 0x02	; 2
 278:	c9 f0       	breq	.+50     	; 0x2ac <DIO_Toggle+0x3c>
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	11 f1       	breq	.+68     	; 0x2c2 <DIO_Toggle+0x52>
 27e:	2c c0       	rjmp	.+88     	; 0x2d8 <DIO_Toggle+0x68>
	{
		case GPIOA :
		PORTA_DATA = (pins & (~PORTA_DATA)) | (~pins & PORTA_DATA);
 280:	8b b3       	in	r24, 0x1b	; 27
 282:	9b b3       	in	r25, 0x1b	; 27
 284:	26 2f       	mov	r18, r22
 286:	20 95       	com	r18
 288:	92 23       	and	r25, r18
 28a:	80 95       	com	r24
 28c:	68 23       	and	r22, r24
 28e:	69 2b       	or	r22, r25
 290:	6b bb       	out	0x1b, r22	; 27
		errorStatus = E_OK;
 292:	80 e0       	ldi	r24, 0x00	; 0
		break;
 294:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & (~PORTB_DATA)) | (~pins & PORTB_DATA);
 296:	88 b3       	in	r24, 0x18	; 24
 298:	98 b3       	in	r25, 0x18	; 24
 29a:	26 2f       	mov	r18, r22
 29c:	20 95       	com	r18
 29e:	92 23       	and	r25, r18
 2a0:	80 95       	com	r24
 2a2:	68 23       	and	r22, r24
 2a4:	69 2b       	or	r22, r25
 2a6:	68 bb       	out	0x18, r22	; 24
		errorStatus = E_OK;
 2a8:	80 e0       	ldi	r24, 0x00	; 0
		break;
 2aa:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & (~PORTC_DATA)) | (~pins & PORTC_DATA);
 2ac:	85 b3       	in	r24, 0x15	; 21
 2ae:	95 b3       	in	r25, 0x15	; 21
 2b0:	26 2f       	mov	r18, r22
 2b2:	20 95       	com	r18
 2b4:	92 23       	and	r25, r18
 2b6:	80 95       	com	r24
 2b8:	68 23       	and	r22, r24
 2ba:	69 2b       	or	r22, r25
 2bc:	65 bb       	out	0x15, r22	; 21
		errorStatus = E_OK;
 2be:	80 e0       	ldi	r24, 0x00	; 0
		break;
 2c0:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & (~PORTD_DATA)) | (~pins & PORTD_DATA);
 2c2:	82 b3       	in	r24, 0x12	; 18
 2c4:	92 b3       	in	r25, 0x12	; 18
 2c6:	26 2f       	mov	r18, r22
 2c8:	20 95       	com	r18
 2ca:	92 23       	and	r25, r18
 2cc:	80 95       	com	r24
 2ce:	68 23       	and	r22, r24
 2d0:	69 2b       	or	r22, r25
 2d2:	62 bb       	out	0x12, r22	; 18
		errorStatus = E_OK;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
		break;
 2d6:	08 95       	ret
		default :
		errorStatus = E_NOK;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return errorStatus;
}
 2da:	08 95       	ret

000002dc <Timer_Init>:
 * Return: The error status of the function.			
 * Description: Initiates the module.
 * 							
 */
ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
 2dc:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
 2de:	89 2b       	or	r24, r25
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <Timer_Init+0x8>
 2e2:	3d c1       	rjmp	.+634    	; 0x55e <Timer_Init+0x282>
	{
		// Check The Timer Channel Number & Init The Corresponding One
		switch(Timer_cfg->Timer_CH_NO)
 2e4:	80 81       	ld	r24, Z
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	09 f4       	brne	.+2      	; 0x2ec <Timer_Init+0x10>
 2ea:	64 c0       	rjmp	.+200    	; 0x3b4 <Timer_Init+0xd8>
 2ec:	20 f0       	brcs	.+8      	; 0x2f6 <Timer_Init+0x1a>
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <Timer_Init+0x18>
 2f2:	e2 c0       	rjmp	.+452    	; 0x4b8 <Timer_Init+0x1dc>
 2f4:	36 c1       	rjmp	.+620    	; 0x562 <Timer_Init+0x286>
static ERROR_STATUS Timer0_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR0 =  Timer0_CMP_Mask;
 2f6:	88 e0       	ldi	r24, 0x08	; 8
 2f8:	83 bf       	out	0x33, r24	; 51
		OCR0  =  0x00;
 2fa:	1c be       	out	0x3c, r1	; 60
		TIMSK &= Timer0_Int_CLR_Mask;
 2fc:	89 b7       	in	r24, 0x39	; 57
 2fe:	8c 7f       	andi	r24, 0xFC	; 252
 300:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 302:	82 81       	ldd	r24, Z+2	; 0x02
 304:	88 23       	and	r24, r24
 306:	19 f0       	breq	.+6      	; 0x30e <Timer_Init+0x32>
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	21 f0       	breq	.+8      	; 0x314 <Timer_Init+0x38>
 30c:	0f c0       	rjmp	.+30     	; 0x32c <Timer_Init+0x50>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer0_Polling_Int_Mask;
 30e:	89 b7       	in	r24, 0x39	; 57
 310:	89 bf       	out	0x39, r24	; 57
 312:	0c c0       	rjmp	.+24     	; 0x32c <Timer_Init+0x50>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer0_Interrupt_CMP_Int_Mask;
 314:	89 b7       	in	r24, 0x39	; 57
 316:	82 60       	ori	r24, 0x02	; 2
 318:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
 31a:	8f b7       	in	r24, 0x3f	; 63
 31c:	80 68       	ori	r24, 0x80	; 128
 31e:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer0_CM = Timer_cfg->Timer_Cbk_ptr;
 320:	84 81       	ldd	r24, Z+4	; 0x04
 322:	95 81       	ldd	r25, Z+5	; 0x05
 324:	90 93 69 00 	sts	0x0069, r25
 328:	80 93 68 00 	sts	0x0068, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 32c:	81 81       	ldd	r24, Z+1	; 0x01
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	99 f1       	breq	.+102    	; 0x398 <Timer_Init+0xbc>
 332:	18 f0       	brcs	.+6      	; 0x33a <Timer_Init+0x5e>
 334:	82 30       	cpi	r24, 0x02	; 2
 336:	a9 f1       	breq	.+106    	; 0x3a2 <Timer_Init+0xc6>
 338:	39 c0       	rjmp	.+114    	; 0x3ac <Timer_Init+0xd0>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 33a:	e3 81       	ldd	r30, Z+3	; 0x03
 33c:	8e 2f       	mov	r24, r30
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	88 30       	cpi	r24, 0x08	; 8
 342:	91 05       	cpc	r25, r1
 344:	28 f5       	brcc	.+74     	; 0x390 <Timer_Init+0xb4>
 346:	fc 01       	movw	r30, r24
 348:	e6 5d       	subi	r30, 0xD6	; 214
 34a:	ff 4f       	sbci	r31, 0xFF	; 255
 34c:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 350:	10 92 6f 00 	sts	0x006F, r1
						errorStatus = E_OK;
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer0_Prescaler = TIMER0_PRESCALER_8;
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	80 93 6f 00 	sts	0x006F, r24
						errorStatus = E_OK;
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 362:	10 92 6f 00 	sts	0x006F, r1
						errorStatus = E_NOK;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer0_Prescaler = TIMER0_PRESCALER_64;
 36a:	83 e0       	ldi	r24, 0x03	; 3
 36c:	80 93 6f 00 	sts	0x006F, r24
						errorStatus = E_OK;
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer0_Prescaler = TIMER0_PRESCALER_128;
 374:	84 e0       	ldi	r24, 0x04	; 4
 376:	80 93 6f 00 	sts	0x006F, r24
						errorStatus = E_OK;
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 37e:	10 92 6f 00 	sts	0x006F, r1
						errorStatus = E_NOK;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	08 95       	ret
						break;
					case TIMER_PRESCALER_1024 :
						Timer0_Prescaler = TIMER0_PRESCALER_1024;
 386:	85 e0       	ldi	r24, 0x05	; 5
 388:	80 93 6f 00 	sts	0x006F, r24
						errorStatus = E_OK;
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	08 95       	ret
						break;
					default :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 390:	10 92 6f 00 	sts	0x006F, r1
						errorStatus = E_NOK;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	08 95       	ret
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_RISING;
 398:	87 e0       	ldi	r24, 0x07	; 7
 39a:	80 93 6f 00 	sts	0x006F, r24
				errorStatus = E_OK;
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	08 95       	ret
				break;
			case COUNTER_DOWN_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_FALLING;
 3a2:	86 e0       	ldi	r24, 0x06	; 6
 3a4:	80 93 6f 00 	sts	0x006F, r24
				errorStatus = E_OK;
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	08 95       	ret
				break;
			default :
				Timer0_Prescaler = TIMER0_NO_CLOCK;
 3ac:	10 92 6f 00 	sts	0x006F, r1
				errorStatus = E_NOK;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	08 95       	ret
static ERROR_STATUS Timer1_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR1 = Timer1_CMP_Mask;
 3b4:	88 e0       	ldi	r24, 0x08	; 8
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	9f bd       	out	0x2f, r25	; 47
 3ba:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0x00;
 3bc:	1d bc       	out	0x2d, r1	; 45
 3be:	1c bc       	out	0x2c, r1	; 44
		OCR1A = 0x00;
 3c0:	1b bc       	out	0x2b, r1	; 43
 3c2:	1a bc       	out	0x2a, r1	; 42
		TIMSK &= Timer1_Int_CLR_Mask;
 3c4:	89 b7       	in	r24, 0x39	; 57
 3c6:	83 7c       	andi	r24, 0xC3	; 195
 3c8:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 3ca:	82 81       	ldd	r24, Z+2	; 0x02
 3cc:	88 23       	and	r24, r24
 3ce:	19 f0       	breq	.+6      	; 0x3d6 <Timer_Init+0xfa>
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	21 f0       	breq	.+8      	; 0x3dc <Timer_Init+0x100>
 3d4:	0f c0       	rjmp	.+30     	; 0x3f4 <Timer_Init+0x118>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer1_Polling_Int_Mask;
 3d6:	89 b7       	in	r24, 0x39	; 57
 3d8:	89 bf       	out	0x39, r24	; 57
 3da:	0c c0       	rjmp	.+24     	; 0x3f4 <Timer_Init+0x118>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer1_OCA_Int_Mask;
 3dc:	89 b7       	in	r24, 0x39	; 57
 3de:	80 61       	ori	r24, 0x10	; 16
 3e0:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
 3e2:	8f b7       	in	r24, 0x3f	; 63
 3e4:	80 68       	ori	r24, 0x80	; 128
 3e6:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer1_CM = Timer_cfg->Timer_Cbk_ptr;
 3e8:	84 81       	ldd	r24, Z+4	; 0x04
 3ea:	95 81       	ldd	r25, Z+5	; 0x05
 3ec:	90 93 65 00 	sts	0x0065, r25
 3f0:	80 93 64 00 	sts	0x0064, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 3f4:	81 81       	ldd	r24, Z+1	; 0x01
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	09 f4       	brne	.+2      	; 0x3fc <Timer_Init+0x120>
 3fa:	48 c0       	rjmp	.+144    	; 0x48c <Timer_Init+0x1b0>
 3fc:	20 f0       	brcs	.+8      	; 0x406 <Timer_Init+0x12a>
 3fe:	82 30       	cpi	r24, 0x02	; 2
 400:	09 f4       	brne	.+2      	; 0x404 <Timer_Init+0x128>
 402:	4c c0       	rjmp	.+152    	; 0x49c <Timer_Init+0x1c0>
 404:	53 c0       	rjmp	.+166    	; 0x4ac <Timer_Init+0x1d0>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 406:	e3 81       	ldd	r30, Z+3	; 0x03
 408:	8e 2f       	mov	r24, r30
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	88 30       	cpi	r24, 0x08	; 8
 40e:	91 05       	cpc	r25, r1
 410:	b8 f5       	brcc	.+110    	; 0x480 <Timer_Init+0x1a4>
 412:	fc 01       	movw	r30, r24
 414:	ee 5c       	subi	r30, 0xCE	; 206
 416:	ff 4f       	sbci	r31, 0xFF	; 255
 418:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 41c:	10 92 6e 00 	sts	0x006E, r1
 420:	10 92 6d 00 	sts	0x006D, r1
						errorStatus = E_OK;
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer1_Prescaler = TIMER1_PRESCALER_8;
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	90 93 6e 00 	sts	0x006E, r25
 430:	80 93 6d 00 	sts	0x006D, r24
						errorStatus = E_OK;
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 438:	10 92 6e 00 	sts	0x006E, r1
 43c:	10 92 6d 00 	sts	0x006D, r1
						errorStatus = E_NOK;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer1_Prescaler = TIMER1_PRESCALER_64;
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	90 93 6e 00 	sts	0x006E, r25
 44c:	80 93 6d 00 	sts	0x006D, r24
						errorStatus = E_OK;
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer1_Prescaler = TIMER1_PRESCALER_128;
 454:	84 e0       	ldi	r24, 0x04	; 4
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	90 93 6e 00 	sts	0x006E, r25
 45c:	80 93 6d 00 	sts	0x006D, r24
						errorStatus = E_OK;
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 464:	10 92 6e 00 	sts	0x006E, r1
 468:	10 92 6d 00 	sts	0x006D, r1
						errorStatus = E_NOK;
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	08 95       	ret
						break;
					case TIMER_PRESCALER_1024 :
						Timer1_Prescaler = TIMER1_PRESCALER_1024;
 470:	85 e0       	ldi	r24, 0x05	; 5
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	90 93 6e 00 	sts	0x006E, r25
 478:	80 93 6d 00 	sts	0x006D, r24
						errorStatus = E_OK;
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	08 95       	ret
						break;
					default :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 480:	10 92 6e 00 	sts	0x006E, r1
 484:	10 92 6d 00 	sts	0x006D, r1
						errorStatus = E_NOK;
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	08 95       	ret
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_RISING;
 48c:	87 e0       	ldi	r24, 0x07	; 7
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	90 93 6e 00 	sts	0x006E, r25
 494:	80 93 6d 00 	sts	0x006D, r24
				errorStatus = E_OK;
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	08 95       	ret
				break;
			case COUNTER_DOWN_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_FALLING;
 49c:	86 e0       	ldi	r24, 0x06	; 6
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	90 93 6e 00 	sts	0x006E, r25
 4a4:	80 93 6d 00 	sts	0x006D, r24
				errorStatus = E_OK;
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	08 95       	ret
				break;
			default :
				Timer1_Prescaler = TIMER1_NO_CLOCK;
 4ac:	10 92 6e 00 	sts	0x006E, r1
 4b0:	10 92 6d 00 	sts	0x006D, r1
				errorStatus = E_NOK;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	08 95       	ret
static ERROR_STATUS Timer2_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR2 = Timer2_CMP_Mask;
 4b8:	88 e0       	ldi	r24, 0x08	; 8
 4ba:	85 bd       	out	0x25, r24	; 37
		TCNT2 = Timer2_TCNT_INIT_Mask;
 4bc:	14 bc       	out	0x24, r1	; 36
		TIMSK &= Timer1_Int_CLR_Mask;
 4be:	89 b7       	in	r24, 0x39	; 57
 4c0:	83 7c       	andi	r24, 0xC3	; 195
 4c2:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 4c4:	82 81       	ldd	r24, Z+2	; 0x02
 4c6:	88 23       	and	r24, r24
 4c8:	19 f0       	breq	.+6      	; 0x4d0 <Timer_Init+0x1f4>
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	21 f0       	breq	.+8      	; 0x4d6 <Timer_Init+0x1fa>
 4ce:	0f c0       	rjmp	.+30     	; 0x4ee <Timer_Init+0x212>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer2_Polling_Int_Mask;
 4d0:	89 b7       	in	r24, 0x39	; 57
 4d2:	89 bf       	out	0x39, r24	; 57
 4d4:	0c c0       	rjmp	.+24     	; 0x4ee <Timer_Init+0x212>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer2_Interrupt_CMP_Int_Mask;
 4d6:	89 b7       	in	r24, 0x39	; 57
 4d8:	80 68       	ori	r24, 0x80	; 128
 4da:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
 4dc:	8f b7       	in	r24, 0x3f	; 63
 4de:	80 68       	ori	r24, 0x80	; 128
 4e0:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer2_CM = Timer_cfg->Timer_Cbk_ptr;
 4e2:	84 81       	ldd	r24, Z+4	; 0x04
 4e4:	95 81       	ldd	r25, Z+5	; 0x05
 4e6:	90 93 61 00 	sts	0x0061, r25
 4ea:	80 93 60 00 	sts	0x0060, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 4ee:	81 81       	ldd	r24, Z+1	; 0x01
 4f0:	81 11       	cpse	r24, r1
 4f2:	31 c0       	rjmp	.+98     	; 0x556 <Timer_Init+0x27a>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 4f4:	e3 81       	ldd	r30, Z+3	; 0x03
 4f6:	8e 2f       	mov	r24, r30
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	88 30       	cpi	r24, 0x08	; 8
 4fc:	91 05       	cpc	r25, r1
 4fe:	38 f5       	brcc	.+78     	; 0x54e <Timer_Init+0x272>
 500:	fc 01       	movw	r30, r24
 502:	e6 5c       	subi	r30, 0xC6	; 198
 504:	ff 4f       	sbci	r31, 0xFF	; 255
 506:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
 50a:	10 92 6c 00 	sts	0x006C, r1
						errorStatus = E_OK;
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer2_Prescaler = TIMER2_PRESCALER_8;
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	80 93 6c 00 	sts	0x006C, r24
						errorStatus = E_OK;
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer2_Prescaler = TIMER2_PRESCALER_32;
 51c:	83 e0       	ldi	r24, 0x03	; 3
 51e:	80 93 6c 00 	sts	0x006C, r24
						errorStatus = E_OK;
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer2_Prescaler = TIMER2_PRESCALER_64;
 526:	84 e0       	ldi	r24, 0x04	; 4
 528:	80 93 6c 00 	sts	0x006C, r24
						errorStatus = E_OK;
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer2_Prescaler = TIMER2_PRESCALER_128;
 530:	85 e0       	ldi	r24, 0x05	; 5
 532:	80 93 6c 00 	sts	0x006C, r24
						errorStatus = E_OK;
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer2_Prescaler = TIMER2_PRESCALER_256;
 53a:	86 e0       	ldi	r24, 0x06	; 6
 53c:	80 93 6c 00 	sts	0x006C, r24
						errorStatus = E_OK;
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	08 95       	ret
						break;
						case TIMER_PRESCALER_1024 :
						Timer2_Prescaler = TIMER2_PRESCALER_1024;
 544:	87 e0       	ldi	r24, 0x07	; 7
 546:	80 93 6c 00 	sts	0x006C, r24
						errorStatus = E_OK;
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	08 95       	ret
						break;
					default :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
 54e:	10 92 6c 00 	sts	0x006C, r1
						errorStatus = E_NOK;
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	08 95       	ret
						break;
				}
				break;
			default :
				Timer2_Prescaler = TIMER2_NO_CLOCK;
 556:	10 92 6c 00 	sts	0x006C, r1
				errorStatus = E_NOK;
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	08 95       	ret
				break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	08 95       	ret
				break;
			case TIMER_CH2 :
				errorStatus = Timer2_Init(Timer_cfg);
				break;
			default :
				errorStatus = E_NOK;
 562:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 564:	08 95       	ret

00000566 <Timer_Start>:
 */

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(Timer_CH_NO)
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	89 f0       	breq	.+34     	; 0x58c <Timer_Start+0x26>
 56a:	18 f0       	brcs	.+6      	; 0x572 <Timer_Start+0xc>
 56c:	82 30       	cpi	r24, 0x02	; 2
 56e:	f1 f0       	breq	.+60     	; 0x5ac <Timer_Start+0x46>
 570:	2a c0       	rjmp	.+84     	; 0x5c6 <Timer_Start+0x60>
	{
		case TIMER_CH0 :
			if(Timer_Count <= 255)
 572:	6f 3f       	cpi	r22, 0xFF	; 255
 574:	71 05       	cpc	r23, r1
 576:	09 f0       	breq	.+2      	; 0x57a <Timer_Start+0x14>
 578:	40 f5       	brcc	.+80     	; 0x5ca <Timer_Start+0x64>
			{
				TCNT0 = 0x00;
 57a:	12 be       	out	0x32, r1	; 50
				OCR0  = Timer_Count;
 57c:	6c bf       	out	0x3c, r22	; 60
				TCCR0 |= Timer0_Prescaler;
 57e:	93 b7       	in	r25, 0x33	; 51
 580:	80 91 6f 00 	lds	r24, 0x006F
 584:	89 2b       	or	r24, r25
 586:	83 bf       	out	0x33, r24	; 51
				errorStatus = E_OK;
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	08 95       	ret
			{
				errorStatus = E_NOK;
			}
			break;
		case TIMER_CH1 :
			TCNT1 = 0x0000;
 58c:	1d bc       	out	0x2d, r1	; 45
 58e:	1c bc       	out	0x2c, r1	; 44
			OCR1A = Timer_Count;
 590:	7b bd       	out	0x2b, r23	; 43
 592:	6a bd       	out	0x2a, r22	; 42
			TCCR1 |= Timer1_Prescaler;
 594:	2e b5       	in	r18, 0x2e	; 46
 596:	3f b5       	in	r19, 0x2f	; 47
 598:	80 91 6d 00 	lds	r24, 0x006D
 59c:	90 91 6e 00 	lds	r25, 0x006E
 5a0:	82 2b       	or	r24, r18
 5a2:	93 2b       	or	r25, r19
 5a4:	9f bd       	out	0x2f, r25	; 47
 5a6:	8e bd       	out	0x2e, r24	; 46
			errorStatus = E_OK;
 5a8:	80 e0       	ldi	r24, 0x00	; 0
			break;
 5aa:	08 95       	ret
		case TIMER_CH2 :
			if(Timer_Count <= 255)
 5ac:	6f 3f       	cpi	r22, 0xFF	; 255
 5ae:	71 05       	cpc	r23, r1
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <Timer_Start+0x4e>
 5b2:	68 f4       	brcc	.+26     	; 0x5ce <Timer_Start+0x68>
			{
				TCNT2 = 0x00;
 5b4:	14 bc       	out	0x24, r1	; 36
				OCR2  = Timer_Count;
 5b6:	63 bd       	out	0x23, r22	; 35
				TCCR2 |= Timer2_Prescaler;
 5b8:	95 b5       	in	r25, 0x25	; 37
 5ba:	80 91 6c 00 	lds	r24, 0x006C
 5be:	89 2b       	or	r24, r25
 5c0:	85 bd       	out	0x25, r24	; 37
				errorStatus = E_OK;
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	08 95       	ret
			{
				errorStatus = E_NOK;
			}
			break;
		default :
			errorStatus = E_NOK;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	08 95       	ret
				TCCR0 |= Timer0_Prescaler;
				errorStatus = E_OK;
			}
			else
			{
				errorStatus = E_NOK;
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	08 95       	ret
				TCCR2 |= Timer2_Prescaler;
				errorStatus = E_OK;
			}
			else
			{
				errorStatus = E_NOK;
 5ce:	81 e0       	ldi	r24, 0x01	; 1
		default :
			errorStatus = E_NOK;
			break;
	}
	return errorStatus;
}
 5d0:	08 95       	ret

000005d2 <TIMER0_SetCM>:
	Ptr_Timer0_OV = Ptr_ISR;
}

void TIMER0_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer0_CM = Ptr_ISR;
 5d2:	90 93 69 00 	sts	0x0069, r25
 5d6:	80 93 68 00 	sts	0x0068, r24
 5da:	08 95       	ret

000005dc <TIMER2_SetCM>:
	Ptr_Timer2_OV = Ptr_ISR;
}

void TIMER2_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer2_CM = Ptr_ISR;
 5dc:	90 93 61 00 	sts	0x0061, r25
 5e0:	80 93 60 00 	sts	0x0060, r24
 5e4:	08 95       	ret

000005e6 <TIMER1_SetCM>:
	Ptr_Timer1_OV = Ptr_ISR;
}

void TIMER1_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer1_CM = Ptr_ISR;
 5e6:	90 93 65 00 	sts	0x0065, r25
 5ea:	80 93 64 00 	sts	0x0064, r24
 5ee:	08 95       	ret

000005f0 <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
 5f0:	1f 92       	push	r1
 5f2:	0f 92       	push	r0
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	0f 92       	push	r0
 5f8:	11 24       	eor	r1, r1
 5fa:	2f 93       	push	r18
 5fc:	3f 93       	push	r19
 5fe:	4f 93       	push	r20
 600:	5f 93       	push	r21
 602:	6f 93       	push	r22
 604:	7f 93       	push	r23
 606:	8f 93       	push	r24
 608:	9f 93       	push	r25
 60a:	af 93       	push	r26
 60c:	bf 93       	push	r27
 60e:	ef 93       	push	r30
 610:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
 612:	e0 91 6a 00 	lds	r30, 0x006A
 616:	f0 91 6b 00 	lds	r31, 0x006B
 61a:	30 97       	sbiw	r30, 0x00	; 0
 61c:	09 f0       	breq	.+2      	; 0x620 <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
 61e:	09 95       	icall
	}
}
 620:	ff 91       	pop	r31
 622:	ef 91       	pop	r30
 624:	bf 91       	pop	r27
 626:	af 91       	pop	r26
 628:	9f 91       	pop	r25
 62a:	8f 91       	pop	r24
 62c:	7f 91       	pop	r23
 62e:	6f 91       	pop	r22
 630:	5f 91       	pop	r21
 632:	4f 91       	pop	r20
 634:	3f 91       	pop	r19
 636:	2f 91       	pop	r18
 638:	0f 90       	pop	r0
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	0f 90       	pop	r0
 63e:	1f 90       	pop	r1
 640:	18 95       	reti

00000642 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 642:	1f 92       	push	r1
 644:	0f 92       	push	r0
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	0f 92       	push	r0
 64a:	11 24       	eor	r1, r1
 64c:	2f 93       	push	r18
 64e:	3f 93       	push	r19
 650:	4f 93       	push	r20
 652:	5f 93       	push	r21
 654:	6f 93       	push	r22
 656:	7f 93       	push	r23
 658:	8f 93       	push	r24
 65a:	9f 93       	push	r25
 65c:	af 93       	push	r26
 65e:	bf 93       	push	r27
 660:	ef 93       	push	r30
 662:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
 664:	e0 91 68 00 	lds	r30, 0x0068
 668:	f0 91 69 00 	lds	r31, 0x0069
 66c:	30 97       	sbiw	r30, 0x00	; 0
 66e:	09 f0       	breq	.+2      	; 0x672 <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
 670:	09 95       	icall
	}
}
 672:	ff 91       	pop	r31
 674:	ef 91       	pop	r30
 676:	bf 91       	pop	r27
 678:	af 91       	pop	r26
 67a:	9f 91       	pop	r25
 67c:	8f 91       	pop	r24
 67e:	7f 91       	pop	r23
 680:	6f 91       	pop	r22
 682:	5f 91       	pop	r21
 684:	4f 91       	pop	r20
 686:	3f 91       	pop	r19
 688:	2f 91       	pop	r18
 68a:	0f 90       	pop	r0
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	0f 90       	pop	r0
 690:	1f 90       	pop	r1
 692:	18 95       	reti

00000694 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 694:	1f 92       	push	r1
 696:	0f 92       	push	r0
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	0f 92       	push	r0
 69c:	11 24       	eor	r1, r1
 69e:	2f 93       	push	r18
 6a0:	3f 93       	push	r19
 6a2:	4f 93       	push	r20
 6a4:	5f 93       	push	r21
 6a6:	6f 93       	push	r22
 6a8:	7f 93       	push	r23
 6aa:	8f 93       	push	r24
 6ac:	9f 93       	push	r25
 6ae:	af 93       	push	r26
 6b0:	bf 93       	push	r27
 6b2:	ef 93       	push	r30
 6b4:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
 6b6:	e0 91 62 00 	lds	r30, 0x0062
 6ba:	f0 91 63 00 	lds	r31, 0x0063
 6be:	30 97       	sbiw	r30, 0x00	; 0
 6c0:	09 f0       	breq	.+2      	; 0x6c4 <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
 6c2:	09 95       	icall
	}
}
 6c4:	ff 91       	pop	r31
 6c6:	ef 91       	pop	r30
 6c8:	bf 91       	pop	r27
 6ca:	af 91       	pop	r26
 6cc:	9f 91       	pop	r25
 6ce:	8f 91       	pop	r24
 6d0:	7f 91       	pop	r23
 6d2:	6f 91       	pop	r22
 6d4:	5f 91       	pop	r21
 6d6:	4f 91       	pop	r20
 6d8:	3f 91       	pop	r19
 6da:	2f 91       	pop	r18
 6dc:	0f 90       	pop	r0
 6de:	0f be       	out	0x3f, r0	; 63
 6e0:	0f 90       	pop	r0
 6e2:	1f 90       	pop	r1
 6e4:	18 95       	reti

000006e6 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 6e6:	1f 92       	push	r1
 6e8:	0f 92       	push	r0
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	0f 92       	push	r0
 6ee:	11 24       	eor	r1, r1
 6f0:	2f 93       	push	r18
 6f2:	3f 93       	push	r19
 6f4:	4f 93       	push	r20
 6f6:	5f 93       	push	r21
 6f8:	6f 93       	push	r22
 6fa:	7f 93       	push	r23
 6fc:	8f 93       	push	r24
 6fe:	9f 93       	push	r25
 700:	af 93       	push	r26
 702:	bf 93       	push	r27
 704:	ef 93       	push	r30
 706:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
 708:	e0 91 60 00 	lds	r30, 0x0060
 70c:	f0 91 61 00 	lds	r31, 0x0061
 710:	30 97       	sbiw	r30, 0x00	; 0
 712:	09 f0       	breq	.+2      	; 0x716 <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
 714:	09 95       	icall
	}
}
 716:	ff 91       	pop	r31
 718:	ef 91       	pop	r30
 71a:	bf 91       	pop	r27
 71c:	af 91       	pop	r26
 71e:	9f 91       	pop	r25
 720:	8f 91       	pop	r24
 722:	7f 91       	pop	r23
 724:	6f 91       	pop	r22
 726:	5f 91       	pop	r21
 728:	4f 91       	pop	r20
 72a:	3f 91       	pop	r19
 72c:	2f 91       	pop	r18
 72e:	0f 90       	pop	r0
 730:	0f be       	out	0x3f, r0	; 63
 732:	0f 90       	pop	r0
 734:	1f 90       	pop	r1
 736:	18 95       	reti

00000738 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 738:	1f 92       	push	r1
 73a:	0f 92       	push	r0
 73c:	0f b6       	in	r0, 0x3f	; 63
 73e:	0f 92       	push	r0
 740:	11 24       	eor	r1, r1
 742:	2f 93       	push	r18
 744:	3f 93       	push	r19
 746:	4f 93       	push	r20
 748:	5f 93       	push	r21
 74a:	6f 93       	push	r22
 74c:	7f 93       	push	r23
 74e:	8f 93       	push	r24
 750:	9f 93       	push	r25
 752:	af 93       	push	r26
 754:	bf 93       	push	r27
 756:	ef 93       	push	r30
 758:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
 75a:	e0 91 66 00 	lds	r30, 0x0066
 75e:	f0 91 67 00 	lds	r31, 0x0067
 762:	30 97       	sbiw	r30, 0x00	; 0
 764:	09 f0       	breq	.+2      	; 0x768 <__vector_9+0x30>
	{
		Ptr_Timer1_OV();
 766:	09 95       	icall
	}
}
 768:	ff 91       	pop	r31
 76a:	ef 91       	pop	r30
 76c:	bf 91       	pop	r27
 76e:	af 91       	pop	r26
 770:	9f 91       	pop	r25
 772:	8f 91       	pop	r24
 774:	7f 91       	pop	r23
 776:	6f 91       	pop	r22
 778:	5f 91       	pop	r21
 77a:	4f 91       	pop	r20
 77c:	3f 91       	pop	r19
 77e:	2f 91       	pop	r18
 780:	0f 90       	pop	r0
 782:	0f be       	out	0x3f, r0	; 63
 784:	0f 90       	pop	r0
 786:	1f 90       	pop	r1
 788:	18 95       	reti

0000078a <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 78a:	1f 92       	push	r1
 78c:	0f 92       	push	r0
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	0f 92       	push	r0
 792:	11 24       	eor	r1, r1
 794:	2f 93       	push	r18
 796:	3f 93       	push	r19
 798:	4f 93       	push	r20
 79a:	5f 93       	push	r21
 79c:	6f 93       	push	r22
 79e:	7f 93       	push	r23
 7a0:	8f 93       	push	r24
 7a2:	9f 93       	push	r25
 7a4:	af 93       	push	r26
 7a6:	bf 93       	push	r27
 7a8:	ef 93       	push	r30
 7aa:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 7ac:	e0 91 64 00 	lds	r30, 0x0064
 7b0:	f0 91 65 00 	lds	r31, 0x0065
 7b4:	30 97       	sbiw	r30, 0x00	; 0
 7b6:	09 f0       	breq	.+2      	; 0x7ba <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
 7b8:	09 95       	icall
	}	
}
 7ba:	ff 91       	pop	r31
 7bc:	ef 91       	pop	r30
 7be:	bf 91       	pop	r27
 7c0:	af 91       	pop	r26
 7c2:	9f 91       	pop	r25
 7c4:	8f 91       	pop	r24
 7c6:	7f 91       	pop	r23
 7c8:	6f 91       	pop	r22
 7ca:	5f 91       	pop	r21
 7cc:	4f 91       	pop	r20
 7ce:	3f 91       	pop	r19
 7d0:	2f 91       	pop	r18
 7d2:	0f 90       	pop	r0
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	0f 90       	pop	r0
 7d8:	1f 90       	pop	r1
 7da:	18 95       	reti

000007dc <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 7dc:	1f 92       	push	r1
 7de:	0f 92       	push	r0
 7e0:	0f b6       	in	r0, 0x3f	; 63
 7e2:	0f 92       	push	r0
 7e4:	11 24       	eor	r1, r1
 7e6:	2f 93       	push	r18
 7e8:	3f 93       	push	r19
 7ea:	4f 93       	push	r20
 7ec:	5f 93       	push	r21
 7ee:	6f 93       	push	r22
 7f0:	7f 93       	push	r23
 7f2:	8f 93       	push	r24
 7f4:	9f 93       	push	r25
 7f6:	af 93       	push	r26
 7f8:	bf 93       	push	r27
 7fa:	ef 93       	push	r30
 7fc:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 7fe:	e0 91 64 00 	lds	r30, 0x0064
 802:	f0 91 65 00 	lds	r31, 0x0065
 806:	30 97       	sbiw	r30, 0x00	; 0
 808:	09 f0       	breq	.+2      	; 0x80c <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 80a:	09 95       	icall
	}
}
 80c:	ff 91       	pop	r31
 80e:	ef 91       	pop	r30
 810:	bf 91       	pop	r27
 812:	af 91       	pop	r26
 814:	9f 91       	pop	r25
 816:	8f 91       	pop	r24
 818:	7f 91       	pop	r23
 81a:	6f 91       	pop	r22
 81c:	5f 91       	pop	r21
 81e:	4f 91       	pop	r20
 820:	3f 91       	pop	r19
 822:	2f 91       	pop	r18
 824:	0f 90       	pop	r0
 826:	0f be       	out	0x3f, r0	; 63
 828:	0f 90       	pop	r0
 82a:	1f 90       	pop	r1
 82c:	18 95       	reti

0000082e <TMU_ISR_cbf>:


static void TMU_ISR_cbf(void)
{
	/* Adjust The Tick Time According To The TMU's Time Configuration */
	g_SysTicks++;
 82e:	80 91 70 00 	lds	r24, 0x0070
 832:	90 91 71 00 	lds	r25, 0x0071
 836:	01 96       	adiw	r24, 0x01	; 1
 838:	90 93 71 00 	sts	0x0071, r25
 83c:	80 93 70 00 	sts	0x0070, r24
	
	if(g_SysTicks == g_TMU_TickTime)
 840:	20 91 70 00 	lds	r18, 0x0070
 844:	30 91 71 00 	lds	r19, 0x0071
 848:	80 91 72 00 	lds	r24, 0x0072
 84c:	90 91 73 00 	lds	r25, 0x0073
 850:	28 17       	cp	r18, r24
 852:	39 07       	cpc	r19, r25
 854:	39 f4       	brne	.+14     	; 0x864 <__stack+0x5>
	{
		g_TMR_Ticks_Changed = TRUE;
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	80 93 74 00 	sts	0x0074, r24
		g_SysTicks = FALSE;	
 85c:	10 92 71 00 	sts	0x0071, r1
 860:	10 92 70 00 	sts	0x0070, r1
 864:	08 95       	ret

00000866 <TMU_Init>:
ERROR_STATUS TMU_Init(TMU_cfg_s* a_TMU_s)
{
	ERROR_STATUS errorStauts = E_OK;
	
	/*-------------[ Check TMU's Pointer Validity ]-------------*/
	if(a_TMU_s != NULL)
 866:	00 97       	sbiw	r24, 0x00	; 0
 868:	09 f4       	brne	.+2      	; 0x86c <TMU_Init+0x6>
 86a:	50 c0       	rjmp	.+160    	; 0x90c <TMU_Init+0xa6>
 86c:	fc 01       	movw	r30, r24
	{
		/*-------------[ TMU Initialization ]-------------*/
		g_TMU.Timer_ID  = a_TMU_s->Timer_ID;
 86e:	ad eb       	ldi	r26, 0xBD	; 189
 870:	b0 e0       	ldi	r27, 0x00	; 0
 872:	81 81       	ldd	r24, Z+1	; 0x01
 874:	11 96       	adiw	r26, 0x01	; 1
 876:	8c 93       	st	X, r24
 878:	11 97       	sbiw	r26, 0x01	; 1
		g_TMU.Tick_Time = a_TMU_s->Tick_Time;
 87a:	80 81       	ld	r24, Z
 87c:	8c 93       	st	X, r24
		g_TMU.Timer_Cbk_ptr = TMU_ISR_cbf;
 87e:	27 e1       	ldi	r18, 0x17	; 23
 880:	34 e0       	ldi	r19, 0x04	; 4
 882:	14 96       	adiw	r26, 0x04	; 4
 884:	3c 93       	st	X, r19
 886:	2e 93       	st	-X, r18
 888:	13 97       	sbiw	r26, 0x03	; 3
		g_TMU.State    = INACTIVE;
 88a:	12 96       	adiw	r26, 0x02	; 2
 88c:	1c 92       	st	X, r1
		g_TMU_TickTime = g_TMU.Tick_Time;
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	90 93 73 00 	sts	0x0073, r25
 894:	80 93 72 00 	sts	0x0072, r24
		
		/*-------------[ Timer Initialization ]-------------*/
		g_TMU_TMR.Timer_Mode = TIMER_MODE;
 898:	a2 ec       	ldi	r26, 0xC2	; 194
 89a:	b0 e0       	ldi	r27, 0x00	; 0
 89c:	11 96       	adiw	r26, 0x01	; 1
 89e:	1c 92       	st	X, r1
 8a0:	11 97       	sbiw	r26, 0x01	; 1
		g_TMU_TMR.Timer_Prescaler = TIMER_PRESCALER_64;
 8a2:	84 e0       	ldi	r24, 0x04	; 4
 8a4:	13 96       	adiw	r26, 0x03	; 3
 8a6:	8c 93       	st	X, r24
 8a8:	13 97       	sbiw	r26, 0x03	; 3
		g_TMU_TMR.Timer_Polling_Or_Interrupt = TIMER_INTERRUPT_MODE;
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	12 96       	adiw	r26, 0x02	; 2
 8ae:	8c 93       	st	X, r24
 8b0:	12 97       	sbiw	r26, 0x02	; 2
		g_TMU_TMR.Timer_Cbk_ptr = g_TMU.Timer_Cbk_ptr;
 8b2:	15 96       	adiw	r26, 0x05	; 5
 8b4:	3c 93       	st	X, r19
 8b6:	2e 93       	st	-X, r18
 8b8:	14 97       	sbiw	r26, 0x04	; 4
		
		/* Select The Timer Channel & Set It's CallBack Function */
		switch(a_TMU_s->Timer_ID)
 8ba:	81 81       	ldd	r24, Z+1	; 0x01
 8bc:	81 30       	cpi	r24, 0x01	; 1
 8be:	59 f0       	breq	.+22     	; 0x8d6 <TMU_Init+0x70>
 8c0:	18 f0       	brcs	.+6      	; 0x8c8 <TMU_Init+0x62>
 8c2:	82 30       	cpi	r24, 0x02	; 2
 8c4:	81 f0       	breq	.+32     	; 0x8e6 <TMU_Init+0x80>
 8c6:	24 c0       	rjmp	.+72     	; 0x910 <TMU_Init+0xaa>
		{
			case TIMER_CH0:
				g_TMU_TMR.Timer_CH_NO = TIMER_CH0;
 8c8:	10 92 c2 00 	sts	0x00C2, r1
				TIMER0_SetCM(TMU_ISR_cbf);
 8cc:	87 e1       	ldi	r24, 0x17	; 23
 8ce:	94 e0       	ldi	r25, 0x04	; 4
 8d0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <TIMER0_SetCM>
				break;
 8d4:	0f c0       	rjmp	.+30     	; 0x8f4 <TMU_Init+0x8e>
			case TIMER_CH1:
				g_TMU_TMR.Timer_CH_NO = TIMER_CH1;
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	80 93 c2 00 	sts	0x00C2, r24
				TIMER1_SetCM(TMU_ISR_cbf);
 8dc:	87 e1       	ldi	r24, 0x17	; 23
 8de:	94 e0       	ldi	r25, 0x04	; 4
 8e0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <TIMER1_SetCM>
				break;
 8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <TMU_Init+0x8e>
			case TIMER_CH2:
				g_TMU_TMR.Timer_CH_NO = TIMER_CH2;
 8e6:	82 e0       	ldi	r24, 0x02	; 2
 8e8:	80 93 c2 00 	sts	0x00C2, r24
				TIMER2_SetCM(TMU_ISR_cbf);
 8ec:	87 e1       	ldi	r24, 0x17	; 23
 8ee:	94 e0       	ldi	r25, 0x04	; 4
 8f0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <TIMER2_SetCM>
				errorStauts = TMU_ERROR + INVALID_IN;
				return errorStauts;
		}
		
		/* Apply The Settings & Start The TMU Timer Hardware Module */
		Timer_Init(&g_TMU_TMR);
 8f4:	82 ec       	ldi	r24, 0xC2	; 194
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Timer_Init>
		Timer_Start(g_TMU_TMR.Timer_CH_NO, TMR_Ticks);	
 8fc:	6a ef       	ldi	r22, 0xFA	; 250
 8fe:	70 e0       	ldi	r23, 0x00	; 0
 900:	80 91 c2 00 	lds	r24, 0x00C2
 904:	0e 94 b3 02 	call	0x566	; 0x566 <Timer_Start>
	else
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
	}
	return errorStauts;
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	08 95       	ret
	}
	/*-------------[ In Case Of TMU's Null Pointer ]-------------*/
	else
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
 90c:	86 e1       	ldi	r24, 0x16	; 22
 90e:	08 95       	ret
				g_TMU_TMR.Timer_CH_NO = TIMER_CH2;
				TIMER2_SetCM(TMU_ISR_cbf);
				break;
			default:
				errorStauts = TMU_ERROR + INVALID_IN;
				return errorStauts;
 910:	85 e1       	ldi	r24, 0x15	; 21
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
	}
	return errorStauts;
}
 912:	08 95       	ret

00000914 <TMU_Start>:


ERROR_STATUS TMU_Start(FunPtr a_ConsumerFun, uint16_t a_ConsumerID, uint8_t a_Periodic_OneShot, uint32_t a_Time)
{
 914:	ef 92       	push	r14
 916:	ff 92       	push	r15
 918:	0f 93       	push	r16
 91a:	1f 93       	push	r17
 91c:	dc 01       	movw	r26, r24
	ERROR_STATUS a_errorStatus = E_OK;
	if(g_TMU.State == INACTIVE)
 91e:	80 91 bf 00 	lds	r24, 0x00BF
 922:	81 11       	cpse	r24, r1
 924:	29 c0       	rjmp	.+82     	; 0x978 <TMU_Start+0x64>
	{
		/*-------------[ Check Consumer's CBF Pointer Validity ]-------------*/
		if(a_ConsumerFun != NULL)
 926:	10 97       	sbiw	r26, 0x00	; 0
 928:	49 f1       	breq	.+82     	; 0x97c <TMU_Start+0x68>
			a_NewConsumer.Periodicity = a_Periodic_OneShot;
			a_NewConsumer.Count = ZERO;
			a_NewConsumer.State = ACTIVE;
			
			/* Add The New Consumer To The Request Buffer */
			g_RequestBuffer[g_ReqBuffer_Index++] = a_NewConsumer;
 92a:	e0 90 75 00 	lds	r14, 0x0075
 92e:	f0 90 76 00 	lds	r15, 0x0076
 932:	f7 01       	movw	r30, r14
 934:	31 96       	adiw	r30, 0x01	; 1
 936:	f0 93 76 00 	sts	0x0076, r31
 93a:	e0 93 75 00 	sts	0x0075, r30
 93e:	ee 0c       	add	r14, r14
 940:	ff 1c       	adc	r15, r15
 942:	f7 01       	movw	r30, r14
 944:	ee 0f       	add	r30, r30
 946:	ff 1f       	adc	r31, r31
 948:	ee 0f       	add	r30, r30
 94a:	ff 1f       	adc	r31, r31
 94c:	ee 0f       	add	r30, r30
 94e:	ff 1f       	adc	r31, r31
 950:	ee 19       	sub	r30, r14
 952:	ff 09       	sbc	r31, r15
 954:	e9 58       	subi	r30, 0x89	; 137
 956:	ff 4f       	sbci	r31, 0xFF	; 255
 958:	b1 83       	std	Z+1, r27	; 0x01
 95a:	a0 83       	st	Z, r26
 95c:	42 83       	std	Z+2, r20	; 0x02
 95e:	03 83       	std	Z+3, r16	; 0x03
 960:	14 83       	std	Z+4, r17	; 0x04
 962:	25 83       	std	Z+5, r18	; 0x05
 964:	36 83       	std	Z+6, r19	; 0x06
 966:	91 e0       	ldi	r25, 0x01	; 1
 968:	97 83       	std	Z+7, r25	; 0x07
 96a:	10 86       	std	Z+8, r1	; 0x08
 96c:	11 86       	std	Z+9, r1	; 0x09
 96e:	12 86       	std	Z+10, r1	; 0x0a
 970:	13 86       	std	Z+11, r1	; 0x0b
 972:	75 87       	std	Z+13, r23	; 0x0d
 974:	64 87       	std	Z+12, r22	; 0x0c
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
 976:	03 c0       	rjmp	.+6      	; 0x97e <TMU_Start+0x6a>
	}
	/*-------------[ In Case The TMU IS Not Active (Not Initialized Yet) ]-------------*/
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
 978:	89 e1       	ldi	r24, 0x19	; 25
 97a:	01 c0       	rjmp	.+2      	; 0x97e <TMU_Start+0x6a>
		}
		/*-------------[ In Case Of Consumer's Null Pointer CBF ]-------------*/
		else
		{
			a_errorStatus = TMU_ERROR + NULL_PTR;
			return a_errorStatus;
 97c:	86 e1       	ldi	r24, 0x16	; 22
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
}
 97e:	1f 91       	pop	r17
 980:	0f 91       	pop	r16
 982:	ff 90       	pop	r15
 984:	ef 90       	pop	r14
 986:	08 95       	ret

00000988 <TMU_Dispatcher>:
	return errorStatus;
}


void TMU_Dispatcher(void)
{
 988:	ef 92       	push	r14
 98a:	ff 92       	push	r15
 98c:	0f 93       	push	r16
 98e:	1f 93       	push	r17
 990:	cf 93       	push	r28
 992:	df 93       	push	r29
	uint16_t a_u16_index;
	FunPtr a_ConsumerFunction;
	
	/*-------------[ Every TMU Tick, Go Through The Request Buffer ]-------------*/
	if(g_TMR_Ticks_Changed)
 994:	80 91 74 00 	lds	r24, 0x0074
 998:	88 23       	and	r24, r24
 99a:	09 f4       	brne	.+2      	; 0x99e <TMU_Dispatcher+0x16>
 99c:	45 c0       	rjmp	.+138    	; 0xa28 <TMU_Dispatcher+0xa0>
 99e:	c7 e7       	ldi	r28, 0x77	; 119
 9a0:	d0 e0       	ldi	r29, 0x00	; 0
 9a2:	0e e7       	ldi	r16, 0x7E	; 126
 9a4:	10 e0       	ldi	r17, 0x00	; 0
 9a6:	0f 2e       	mov	r0, r31
 9a8:	fd eb       	ldi	r31, 0xBD	; 189
 9aa:	ef 2e       	mov	r14, r31
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	ff 2e       	mov	r15, r31
 9b0:	f0 2d       	mov	r31, r0
	{
		for(a_u16_index = ZERO; a_u16_index < REQUEST_BUFFER_LEN; a_u16_index++)
		{
			g_RequestBuffer[a_u16_index].Count += g_TMU_TickTime;
 9b2:	40 91 72 00 	lds	r20, 0x0072
 9b6:	50 91 73 00 	lds	r21, 0x0073
 9ba:	88 85       	ldd	r24, Y+8	; 0x08
 9bc:	99 85       	ldd	r25, Y+9	; 0x09
 9be:	aa 85       	ldd	r26, Y+10	; 0x0a
 9c0:	bb 85       	ldd	r27, Y+11	; 0x0b
 9c2:	84 0f       	add	r24, r20
 9c4:	95 1f       	adc	r25, r21
 9c6:	a1 1d       	adc	r26, r1
 9c8:	b1 1d       	adc	r27, r1
 9ca:	88 87       	std	Y+8, r24	; 0x08
 9cc:	99 87       	std	Y+9, r25	; 0x09
 9ce:	aa 87       	std	Y+10, r26	; 0x0a
 9d0:	bb 87       	std	Y+11, r27	; 0x0b
			
			/*-------------[ IF Consumer's Due Time Is Met!  ]-------------*/
			if(g_RequestBuffer[a_u16_index].Count >= g_RequestBuffer[a_u16_index].Time)
 9d2:	4b 81       	ldd	r20, Y+3	; 0x03
 9d4:	5c 81       	ldd	r21, Y+4	; 0x04
 9d6:	6d 81       	ldd	r22, Y+5	; 0x05
 9d8:	7e 81       	ldd	r23, Y+6	; 0x06
 9da:	84 17       	cp	r24, r20
 9dc:	95 07       	cpc	r25, r21
 9de:	a6 07       	cpc	r26, r22
 9e0:	b7 07       	cpc	r27, r23
 9e2:	d0 f0       	brcs	.+52     	; 0xa18 <TMU_Dispatcher+0x90>
			{
				a_ConsumerFunction = g_RequestBuffer[a_u16_index].Consumer_Ptr;
 9e4:	48 81       	ld	r20, Y
 9e6:	59 81       	ldd	r21, Y+1	; 0x01
 9e8:	f8 01       	movw	r30, r16
 9ea:	d8 01       	movw	r26, r16
 9ec:	15 97       	sbiw	r26, 0x05	; 5
				
				/* IF The Consumer Function IS Periodic */
				if(g_RequestBuffer[a_u16_index].Periodicity == PERIODIC && g_RequestBuffer[a_u16_index].State == ACTIVE)
 9ee:	8c 91       	ld	r24, X
 9f0:	81 30       	cpi	r24, 0x01	; 1
 9f2:	51 f4       	brne	.+20     	; 0xa08 <TMU_Dispatcher+0x80>
 9f4:	80 81       	ld	r24, Z
 9f6:	81 30       	cpi	r24, 0x01	; 1
 9f8:	79 f4       	brne	.+30     	; 0xa18 <TMU_Dispatcher+0x90>
				{
					g_RequestBuffer[a_u16_index].Count = ZERO;
 9fa:	18 86       	std	Y+8, r1	; 0x08
 9fc:	19 86       	std	Y+9, r1	; 0x09
 9fe:	1a 86       	std	Y+10, r1	; 0x0a
 a00:	1b 86       	std	Y+11, r1	; 0x0b
					a_ConsumerFunction();
 a02:	fa 01       	movw	r30, r20
 a04:	09 95       	icall
 a06:	08 c0       	rjmp	.+16     	; 0xa18 <TMU_Dispatcher+0x90>
				}
				
				/* Else IF The Consumer Function IS OneShot (Non-Periodic) */
				else if (g_RequestBuffer[a_u16_index].Periodicity == ONESHOT && g_RequestBuffer[a_u16_index].State == ACTIVE)
 a08:	81 11       	cpse	r24, r1
 a0a:	06 c0       	rjmp	.+12     	; 0xa18 <TMU_Dispatcher+0x90>
 a0c:	80 81       	ld	r24, Z
 a0e:	81 30       	cpi	r24, 0x01	; 1
 a10:	19 f4       	brne	.+6      	; 0xa18 <TMU_Dispatcher+0x90>
				{
					g_RequestBuffer[a_u16_index].State = INACTIVE;
 a12:	10 82       	st	Z, r1
					a_ConsumerFunction();
 a14:	fa 01       	movw	r30, r20
 a16:	09 95       	icall
 a18:	2e 96       	adiw	r28, 0x0e	; 14
 a1a:	02 5f       	subi	r16, 0xF2	; 242
 a1c:	1f 4f       	sbci	r17, 0xFF	; 255
	FunPtr a_ConsumerFunction;
	
	/*-------------[ Every TMU Tick, Go Through The Request Buffer ]-------------*/
	if(g_TMR_Ticks_Changed)
	{
		for(a_u16_index = ZERO; a_u16_index < REQUEST_BUFFER_LEN; a_u16_index++)
 a1e:	ce 15       	cp	r28, r14
 a20:	df 05       	cpc	r29, r15
 a22:	39 f6       	brne	.-114    	; 0x9b2 <TMU_Dispatcher+0x2a>
					g_RequestBuffer[a_u16_index].State = INACTIVE;
					a_ConsumerFunction();
				}
			}
		}
		g_TMR_Ticks_Changed = FALSE;
 a24:	10 92 74 00 	sts	0x0074, r1
	}
}
 a28:	df 91       	pop	r29
 a2a:	cf 91       	pop	r28
 a2c:	1f 91       	pop	r17
 a2e:	0f 91       	pop	r16
 a30:	ff 90       	pop	r15
 a32:	ef 90       	pop	r14
 a34:	08 95       	ret

00000a36 <__tablejump2__>:
 a36:	ee 0f       	add	r30, r30
 a38:	ff 1f       	adc	r31, r31
 a3a:	05 90       	lpm	r0, Z+
 a3c:	f4 91       	lpm	r31, Z
 a3e:	e0 2d       	mov	r30, r0
 a40:	09 94       	ijmp

00000a42 <_exit>:
 a42:	f8 94       	cli

00000a44 <__stop_program>:
 a44:	ff cf       	rjmp	.-2      	; 0xa44 <__stop_program>
