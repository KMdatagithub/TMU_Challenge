
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000067e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800060  00800060  0000067e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000067e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017a1  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b81  00000000  00000000  0000203d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cac  00000000  00000000  00002bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005fc  00000000  00000000  0000386c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091a  00000000  00000000  00003e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001836  00000000  00000000  00004782  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005fb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_4>
  14:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__vector_7>
  20:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__vector_8>
  24:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_9>
  28:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_10>
  2c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_11>
  30:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_12>
  34:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8a:	0c 94 03 03 	jmp	0x606	; 0x606 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <test_SPI>:
#include "SL/BCM.h"
#include "MCAL/UART.h"
#include "MCAL/SPI__.h"
#include "util/softwareDelay.h"

void test_SPI(){
  92:	08 95       	ret

00000094 <main>:
}



int main(void)
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	28 97       	sbiw	r28, 0x08	; 8
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
	uint8_t test2 ;


	
	SPI_cfg_s cfg ;
	cfg.clockSPI = Fosc128 ;
  a8:	83 e0       	ldi	r24, 0x03	; 3
  aa:	8c 83       	std	Y+4, r24	; 0x04
	cfg.phasePolarityMode = mode0 ;
  ac:	1d 82       	std	Y+5, r1	; 0x05
	cfg.dataorder = LSB ;
  ae:	80 e2       	ldi	r24, 0x20	; 32
  b0:	8e 83       	std	Y+6, r24	; 0x06
	cfg.ptr_call_back=test_SPI;
  b2:	89 e4       	ldi	r24, 0x49	; 73
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	98 87       	std	Y+8, r25	; 0x08
  b8:	8f 83       	std	Y+7, r24	; 0x07
	_SPIInitSlave(&cfg);
  ba:	ce 01       	movw	r24, r28
  bc:	04 96       	adiw	r24, 0x04	; 4
  be:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_SPIInitSlave>
	softwareDelayMs(1000);
  c2:	68 ee       	ldi	r22, 0xE8	; 232
  c4:	73 e0       	ldi	r23, 0x03	; 3
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <softwareDelayMs>
	_SPITrancevier(&test);
  ce:	ce 01       	movw	r24, r28
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	0e 94 30 01 	call	0x260	; 0x260 <_SPITrancevier>
		TCNT0 = test ;
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	82 bf       	out	0x32, r24	; 50
		
	softwareDelayMs(1000);
  da:	68 ee       	ldi	r22, 0xE8	; 232
  dc:	73 e0       	ldi	r23, 0x03	; 3
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <softwareDelayMs>
	_SPITrancevier(&test1);
  e6:	ce 01       	movw	r24, r28
  e8:	02 96       	adiw	r24, 0x02	; 2
  ea:	0e 94 30 01 	call	0x260	; 0x260 <_SPITrancevier>
	
		TCNT2 = test1 ;
  ee:	8a 81       	ldd	r24, Y+2	; 0x02
  f0:	84 bd       	out	0x24, r24	; 36
	softwareDelayMs(1000);
  f2:	68 ee       	ldi	r22, 0xE8	; 232
  f4:	73 e0       	ldi	r23, 0x03	; 3
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <softwareDelayMs>
	_SPITrancevier(&test2);
  fe:	ce 01       	movw	r24, r28
 100:	03 96       	adiw	r24, 0x03	; 3
 102:	0e 94 30 01 	call	0x260	; 0x260 <_SPITrancevier>
	
	TCNT1L = test2 ;
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	8c bd       	out	0x2c, r24	; 44
 10a:	ff cf       	rjmp	.-2      	; 0x10a <main+0x76>

0000010c <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
 10c:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
 10e:	89 2b       	or	r24, r25
 110:	c9 f1       	breq	.+114    	; 0x184 <DIO_init+0x78>
	{
		switch(DIO_info->GPIO)
 112:	80 81       	ld	r24, Z
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	91 f0       	breq	.+36     	; 0x13c <DIO_init+0x30>
 118:	28 f0       	brcs	.+10     	; 0x124 <DIO_init+0x18>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	d9 f0       	breq	.+54     	; 0x154 <DIO_init+0x48>
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	29 f1       	breq	.+74     	; 0x16c <DIO_init+0x60>
 122:	32 c0       	rjmp	.+100    	; 0x188 <DIO_init+0x7c>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
 124:	21 81       	ldd	r18, Z+1	; 0x01
 126:	9a b3       	in	r25, 0x1a	; 26
 128:	82 81       	ldd	r24, Z+2	; 0x02
 12a:	32 2f       	mov	r19, r18
 12c:	38 23       	and	r19, r24
 12e:	82 2f       	mov	r24, r18
 130:	80 95       	com	r24
 132:	89 23       	and	r24, r25
 134:	83 2b       	or	r24, r19
 136:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
 138:	80 e0       	ldi	r24, 0x00	; 0
			break;
 13a:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
 13c:	21 81       	ldd	r18, Z+1	; 0x01
 13e:	97 b3       	in	r25, 0x17	; 23
 140:	82 81       	ldd	r24, Z+2	; 0x02
 142:	32 2f       	mov	r19, r18
 144:	38 23       	and	r19, r24
 146:	82 2f       	mov	r24, r18
 148:	80 95       	com	r24
 14a:	89 23       	and	r24, r25
 14c:	83 2b       	or	r24, r19
 14e:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
 150:	80 e0       	ldi	r24, 0x00	; 0
			break;
 152:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
 154:	21 81       	ldd	r18, Z+1	; 0x01
 156:	94 b3       	in	r25, 0x14	; 20
 158:	82 81       	ldd	r24, Z+2	; 0x02
 15a:	32 2f       	mov	r19, r18
 15c:	38 23       	and	r19, r24
 15e:	82 2f       	mov	r24, r18
 160:	80 95       	com	r24
 162:	89 23       	and	r24, r25
 164:	83 2b       	or	r24, r19
 166:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
 168:	80 e0       	ldi	r24, 0x00	; 0
			break;
 16a:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
 16c:	21 81       	ldd	r18, Z+1	; 0x01
 16e:	91 b3       	in	r25, 0x11	; 17
 170:	82 81       	ldd	r24, Z+2	; 0x02
 172:	32 2f       	mov	r19, r18
 174:	38 23       	and	r19, r24
 176:	82 2f       	mov	r24, r18
 178:	80 95       	com	r24
 17a:	89 23       	and	r24, r25
 17c:	83 2b       	or	r24, r19
 17e:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
 180:	80 e0       	ldi	r24, 0x00	; 0
			break;
 182:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
 188:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 18a:	08 95       	ret

0000018c <DIO_Write>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write(uint8_t GPIO, uint8_t pins, uint8_t value)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	79 f0       	breq	.+30     	; 0x1ae <DIO_Write+0x22>
 190:	28 f0       	brcs	.+10     	; 0x19c <DIO_Write+0x10>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	a9 f0       	breq	.+42     	; 0x1c0 <DIO_Write+0x34>
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	e1 f0       	breq	.+56     	; 0x1d2 <DIO_Write+0x46>
 19a:	24 c0       	rjmp	.+72     	; 0x1e4 <DIO_Write+0x58>
	{
		case GPIOA :
		PORTA_DATA = (pins & value) | (~pins & PORTA_DATA);
 19c:	8b b3       	in	r24, 0x1b	; 27
 19e:	96 2f       	mov	r25, r22
 1a0:	90 95       	com	r25
 1a2:	89 23       	and	r24, r25
 1a4:	46 23       	and	r20, r22
 1a6:	48 2b       	or	r20, r24
 1a8:	4b bb       	out	0x1b, r20	; 27
		errorStatus = E_OK;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
		break;
 1ac:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & value) | (~pins & PORTB_DATA);
 1ae:	88 b3       	in	r24, 0x18	; 24
 1b0:	96 2f       	mov	r25, r22
 1b2:	90 95       	com	r25
 1b4:	89 23       	and	r24, r25
 1b6:	46 23       	and	r20, r22
 1b8:	48 2b       	or	r20, r24
 1ba:	48 bb       	out	0x18, r20	; 24
		errorStatus = E_OK;
 1bc:	80 e0       	ldi	r24, 0x00	; 0
		break;
 1be:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & value) | (~pins & PORTC_DATA);
 1c0:	85 b3       	in	r24, 0x15	; 21
 1c2:	96 2f       	mov	r25, r22
 1c4:	90 95       	com	r25
 1c6:	89 23       	and	r24, r25
 1c8:	46 23       	and	r20, r22
 1ca:	48 2b       	or	r20, r24
 1cc:	45 bb       	out	0x15, r20	; 21
		errorStatus = E_OK;
 1ce:	80 e0       	ldi	r24, 0x00	; 0
		break;
 1d0:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & value) | (~pins & PORTD_DATA);
 1d2:	82 b3       	in	r24, 0x12	; 18
 1d4:	96 2f       	mov	r25, r22
 1d6:	90 95       	com	r25
 1d8:	89 23       	and	r24, r25
 1da:	46 23       	and	r20, r22
 1dc:	48 2b       	or	r20, r24
 1de:	42 bb       	out	0x12, r20	; 18
		errorStatus = E_OK;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
		break;
 1e2:	08 95       	ret
		default :
		errorStatus = E_NOK;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return errorStatus;
}
 1e6:	08 95       	ret

000001e8 <_SPIInitSlave>:
	sei();
	SPCR |= Enable_SPI ;
	
}

extern void _SPIInitSlave(SPI_cfg_s * a_SPI_cfg ){
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <_SPIInitSlave+0x6>
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <_SPIInitSlave+0x8>
 1f0:	00 d0       	rcall	.+0      	; 0x1f2 <_SPIInitSlave+0xa>
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	fc 01       	movw	r30, r24
	DIO_Cfg_s SPI_output_pins ;
			
			
	
	//// clear status register
	SPSR = ZERO ;
 1f8:	1e b8       	out	0x0e, r1	; 14
	
	/// clear control mode
	
	SPCR = ZERO ;
 1fa:	1d b8       	out	0x0d, r1	; 13
	
	
	// master or slave bit 4
	SPCR |= Slave_SPI ;
 1fc:	8d b1       	in	r24, 0x0d	; 13
 1fe:	8d b9       	out	0x0d, r24	; 13
	
	/// data order update
	
	SPCR|=a_SPI_cfg-> dataorder ;
 200:	9d b1       	in	r25, 0x0d	; 13
 202:	82 81       	ldd	r24, Z+2	; 0x02
 204:	89 2b       	or	r24, r25
 206:	8d b9       	out	0x0d, r24	; 13
	
	//set clock
	
	SPCR |= a_SPI_cfg-> clockSPI ;
 208:	9d b1       	in	r25, 0x0d	; 13
 20a:	80 81       	ld	r24, Z
 20c:	89 2b       	or	r24, r25
 20e:	8d b9       	out	0x0d, r24	; 13
	
	// set phase and polarity
	SPCR |=a_SPI_cfg -> phasePolarityMode ;
 210:	9d b1       	in	r25, 0x0d	; 13
 212:	81 81       	ldd	r24, Z+1	; 0x01
 214:	89 2b       	or	r24, r25
 216:	8d b9       	out	0x0d, r24	; 13
	
	/* set interrupt  */
	SPCR |= INTERRUPT_SPI ;
 218:	6f 9a       	sbi	0x0d, 7	; 13
	
	/*set interrupt call back function */
		
	PTR_CALL_BACK = a_SPI_cfg->ptr_call_back ;
 21a:	83 81       	ldd	r24, Z+3	; 0x03
 21c:	94 81       	ldd	r25, Z+4	; 0x04
 21e:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <PTR_CALL_BACK+0x1>
 222:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <PTR_CALL_BACK>
	//SS   bit4 INPUT
	//MOSI bit5 INPUT
	//MISO bit6 OUTPUT
	//SCK  bit7 INPUT

	SPI_input_pins.GPIO = SPI_PORT ;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	89 83       	std	Y+1, r24	; 0x01
	SPI_input_pins.pins =  SCK_PIN|MOSI_PIN|SS_PIN ;
 22a:	90 eb       	ldi	r25, 0xB0	; 176
 22c:	9a 83       	std	Y+2, r25	; 0x02
	SPI_input_pins.dir = INPUT ;
 22e:	1b 82       	std	Y+3, r1	; 0x03

	SPI_output_pins.GPIO = SPI_PORT ;
 230:	8c 83       	std	Y+4, r24	; 0x04
	SPI_output_pins.pins = MISO_PIN ;
 232:	80 e4       	ldi	r24, 0x40	; 64
 234:	8d 83       	std	Y+5, r24	; 0x05
	SPI_output_pins.dir = OUTPUT ;
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	8e 83       	std	Y+6, r24	; 0x06


	DIO_init(&SPI_output_pins);
 23a:	ce 01       	movw	r24, r28
 23c:	04 96       	adiw	r24, 0x04	; 4
 23e:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_init>
	DIO_init(&SPI_input_pins);
 242:	ce 01       	movw	r24, r28
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_init>
	

	/// enable SPI bit 6
	sei();
 24a:	78 94       	sei
	
	SPCR |= Enable_SPI ;
 24c:	6e 9a       	sbi	0x0d, 6	; 13
	
		
	
}
 24e:	26 96       	adiw	r28, 0x06	; 6
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	de bf       	out	0x3e, r29	; 62
 256:	0f be       	out	0x3f, r0	; 63
 258:	cd bf       	out	0x3d, r28	; 61
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <_SPITrancevier>:

extern void _SPITrancevier(uint8_t* data){
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	ec 01       	movw	r28, r24
	
	if(SPCR&Master_SPI){
 266:	6c 9b       	sbis	0x0d, 4	; 13
 268:	05 c0       	rjmp	.+10     	; 0x274 <_SPITrancevier+0x14>
		
		/*Select the slave By pull down the SS pin */
		
		DIO_Write(SPI_PORT,BIT4,ZERO );
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	60 e1       	ldi	r22, 0x10	; 16
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_Write>
		
	}
	
	SPDR = *data;
 274:	88 81       	ld	r24, Y
 276:	8f b9       	out	0x0f, r24	; 15
	
	while (!g_u8_RxFlag);
 278:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 27c:	88 23       	and	r24, r24
 27e:	e1 f3       	breq	.-8      	; 0x278 <_SPITrancevier+0x18>
		
	*data = SPDR;
 280:	8f b1       	in	r24, 0x0f	; 15
 282:	88 83       	st	Y, r24
	g_u8_RxFlag = FALSE ;
 284:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <__vector_12>:


ISR(SPI_STC_vect){
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	5f 93       	push	r21
 2a0:	6f 93       	push	r22
 2a2:	7f 93       	push	r23
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
	g_u8_RxFlag = TRUE ;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	PTR_CALL_BACK() ;
 2b6:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <PTR_CALL_BACK>
 2ba:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <PTR_CALL_BACK+0x1>
 2be:	09 95       	icall

}
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	2f 93       	push	r18
 2ee:	3f 93       	push	r19
 2f0:	4f 93       	push	r20
 2f2:	5f 93       	push	r21
 2f4:	6f 93       	push	r22
 2f6:	7f 93       	push	r23
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
 304:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <Ptr_Timer0_OV>
 308:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <Ptr_Timer0_OV+0x1>
 30c:	30 97       	sbiw	r30, 0x00	; 0
 30e:	09 f0       	breq	.+2      	; 0x312 <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
 310:	09 95       	icall
	}
}
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 334:	1f 92       	push	r1
 336:	0f 92       	push	r0
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	0f 92       	push	r0
 33c:	11 24       	eor	r1, r1
 33e:	2f 93       	push	r18
 340:	3f 93       	push	r19
 342:	4f 93       	push	r20
 344:	5f 93       	push	r21
 346:	6f 93       	push	r22
 348:	7f 93       	push	r23
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
 34e:	af 93       	push	r26
 350:	bf 93       	push	r27
 352:	ef 93       	push	r30
 354:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
 356:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <Ptr_Timer0_CM>
 35a:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <Ptr_Timer0_CM+0x1>
 35e:	30 97       	sbiw	r30, 0x00	; 0
 360:	09 f0       	breq	.+2      	; 0x364 <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
 362:	09 95       	icall
	}
}
 364:	ff 91       	pop	r31
 366:	ef 91       	pop	r30
 368:	bf 91       	pop	r27
 36a:	af 91       	pop	r26
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	7f 91       	pop	r23
 372:	6f 91       	pop	r22
 374:	5f 91       	pop	r21
 376:	4f 91       	pop	r20
 378:	3f 91       	pop	r19
 37a:	2f 91       	pop	r18
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	2f 93       	push	r18
 392:	3f 93       	push	r19
 394:	4f 93       	push	r20
 396:	5f 93       	push	r21
 398:	6f 93       	push	r22
 39a:	7f 93       	push	r23
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
 3a8:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <Ptr_Timer2_OV>
 3ac:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <Ptr_Timer2_OV+0x1>
 3b0:	30 97       	sbiw	r30, 0x00	; 0
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
 3b4:	09 95       	icall
	}
}
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	bf 91       	pop	r27
 3bc:	af 91       	pop	r26
 3be:	9f 91       	pop	r25
 3c0:	8f 91       	pop	r24
 3c2:	7f 91       	pop	r23
 3c4:	6f 91       	pop	r22
 3c6:	5f 91       	pop	r21
 3c8:	4f 91       	pop	r20
 3ca:	3f 91       	pop	r19
 3cc:	2f 91       	pop	r18
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
 3fa:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <Ptr_Timer2_CM>
 3fe:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <Ptr_Timer2_CM+0x1>
 402:	30 97       	sbiw	r30, 0x00	; 0
 404:	09 f0       	breq	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		Ptr_Timer2_CM();
 406:	09 95       	icall
	}
}
 408:	ff 91       	pop	r31
 40a:	ef 91       	pop	r30
 40c:	bf 91       	pop	r27
 40e:	af 91       	pop	r26
 410:	9f 91       	pop	r25
 412:	8f 91       	pop	r24
 414:	7f 91       	pop	r23
 416:	6f 91       	pop	r22
 418:	5f 91       	pop	r21
 41a:	4f 91       	pop	r20
 41c:	3f 91       	pop	r19
 41e:	2f 91       	pop	r18
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	2f 93       	push	r18
 436:	3f 93       	push	r19
 438:	4f 93       	push	r20
 43a:	5f 93       	push	r21
 43c:	6f 93       	push	r22
 43e:	7f 93       	push	r23
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	af 93       	push	r26
 446:	bf 93       	push	r27
 448:	ef 93       	push	r30
 44a:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
 44c:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <Ptr_Timer1_OV>
 450:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <Ptr_Timer1_OV+0x1>
 454:	30 97       	sbiw	r30, 0x00	; 0
 456:	09 f0       	breq	.+2      	; 0x45a <__vector_9+0x30>
	{
		Ptr_Timer1_OV();
 458:	09 95       	icall
	}
}
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	bf 91       	pop	r27
 460:	af 91       	pop	r26
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	7f 91       	pop	r23
 468:	6f 91       	pop	r22
 46a:	5f 91       	pop	r21
 46c:	4f 91       	pop	r20
 46e:	3f 91       	pop	r19
 470:	2f 91       	pop	r18
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 47c:	1f 92       	push	r1
 47e:	0f 92       	push	r0
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	0f 92       	push	r0
 484:	11 24       	eor	r1, r1
 486:	2f 93       	push	r18
 488:	3f 93       	push	r19
 48a:	4f 93       	push	r20
 48c:	5f 93       	push	r21
 48e:	6f 93       	push	r22
 490:	7f 93       	push	r23
 492:	8f 93       	push	r24
 494:	9f 93       	push	r25
 496:	af 93       	push	r26
 498:	bf 93       	push	r27
 49a:	ef 93       	push	r30
 49c:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 49e:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <Ptr_Timer1_CM>
 4a2:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <Ptr_Timer1_CM+0x1>
 4a6:	30 97       	sbiw	r30, 0x00	; 0
 4a8:	09 f0       	breq	.+2      	; 0x4ac <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
 4aa:	09 95       	icall
	}	
}
 4ac:	ff 91       	pop	r31
 4ae:	ef 91       	pop	r30
 4b0:	bf 91       	pop	r27
 4b2:	af 91       	pop	r26
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	7f 91       	pop	r23
 4ba:	6f 91       	pop	r22
 4bc:	5f 91       	pop	r21
 4be:	4f 91       	pop	r20
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 4ce:	1f 92       	push	r1
 4d0:	0f 92       	push	r0
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	0f 92       	push	r0
 4d6:	11 24       	eor	r1, r1
 4d8:	2f 93       	push	r18
 4da:	3f 93       	push	r19
 4dc:	4f 93       	push	r20
 4de:	5f 93       	push	r21
 4e0:	6f 93       	push	r22
 4e2:	7f 93       	push	r23
 4e4:	8f 93       	push	r24
 4e6:	9f 93       	push	r25
 4e8:	af 93       	push	r26
 4ea:	bf 93       	push	r27
 4ec:	ef 93       	push	r30
 4ee:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 4f0:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <Ptr_Timer1_CM>
 4f4:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <Ptr_Timer1_CM+0x1>
 4f8:	30 97       	sbiw	r30, 0x00	; 0
 4fa:	09 f0       	breq	.+2      	; 0x4fe <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 4fc:	09 95       	icall
	}
}
 4fe:	ff 91       	pop	r31
 500:	ef 91       	pop	r30
 502:	bf 91       	pop	r27
 504:	af 91       	pop	r26
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	7f 91       	pop	r23
 50c:	6f 91       	pop	r22
 50e:	5f 91       	pop	r21
 510:	4f 91       	pop	r20
 512:	3f 91       	pop	r19
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
 520:	1f 92       	push	r1
 522:	0f 92       	push	r0
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	0f 92       	push	r0
 528:	11 24       	eor	r1, r1
 52a:	2f 93       	push	r18
 52c:	3f 93       	push	r19
 52e:	4f 93       	push	r20
 530:	5f 93       	push	r21
 532:	6f 93       	push	r22
 534:	7f 93       	push	r23
 536:	8f 93       	push	r24
 538:	9f 93       	push	r25
 53a:	af 93       	push	r26
 53c:	bf 93       	push	r27
 53e:	ef 93       	push	r30
 540:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
 542:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <Ptr_UART_RX>
 546:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <Ptr_UART_RX+0x1>
 54a:	30 97       	sbiw	r30, 0x00	; 0
 54c:	09 f0       	breq	.+2      	; 0x550 <__vector_13+0x30>
	{
		Ptr_UART_RX();
 54e:	09 95       	icall
	}
}
 550:	ff 91       	pop	r31
 552:	ef 91       	pop	r30
 554:	bf 91       	pop	r27
 556:	af 91       	pop	r26
 558:	9f 91       	pop	r25
 55a:	8f 91       	pop	r24
 55c:	7f 91       	pop	r23
 55e:	6f 91       	pop	r22
 560:	5f 91       	pop	r21
 562:	4f 91       	pop	r20
 564:	3f 91       	pop	r19
 566:	2f 91       	pop	r18
 568:	0f 90       	pop	r0
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	0f 90       	pop	r0
 56e:	1f 90       	pop	r1
 570:	18 95       	reti

00000572 <__vector_15>:

ISR(USART_TXC_vect)
{
 572:	1f 92       	push	r1
 574:	0f 92       	push	r0
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	2f 93       	push	r18
 57e:	3f 93       	push	r19
 580:	4f 93       	push	r20
 582:	5f 93       	push	r21
 584:	6f 93       	push	r22
 586:	7f 93       	push	r23
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
 58c:	af 93       	push	r26
 58e:	bf 93       	push	r27
 590:	ef 93       	push	r30
 592:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
 594:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <Ptr_UART_TX>
 598:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <Ptr_UART_TX+0x1>
 59c:	30 97       	sbiw	r30, 0x00	; 0
 59e:	09 f0       	breq	.+2      	; 0x5a2 <__vector_15+0x30>
	{
		Ptr_UART_TX();
 5a0:	09 95       	icall
	}
 5a2:	ff 91       	pop	r31
 5a4:	ef 91       	pop	r30
 5a6:	bf 91       	pop	r27
 5a8:	af 91       	pop	r26
 5aa:	9f 91       	pop	r25
 5ac:	8f 91       	pop	r24
 5ae:	7f 91       	pop	r23
 5b0:	6f 91       	pop	r22
 5b2:	5f 91       	pop	r21
 5b4:	4f 91       	pop	r20
 5b6:	3f 91       	pop	r19
 5b8:	2f 91       	pop	r18
 5ba:	0f 90       	pop	r0
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	0f 90       	pop	r0
 5c0:	1f 90       	pop	r1
 5c2:	18 95       	reti

000005c4 <softwareDelayMs>:
 */ 
#include "softwareDelay.h"
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 5c4:	0f 93       	push	r16
 5c6:	1f 93       	push	r17
 5c8:	8b 01       	movw	r16, r22
 5ca:	9c 01       	movw	r18, r24
  uint32_t ticks = 2290, i, j;
  for(j=0; j<u32_delay_in_ms; j++)
 5cc:	67 2b       	or	r22, r23
 5ce:	68 2b       	or	r22, r24
 5d0:	69 2b       	or	r22, r25
 5d2:	81 f4       	brne	.+32     	; 0x5f4 <softwareDelayMs+0x30>
 5d4:	15 c0       	rjmp	.+42     	; 0x600 <softwareDelayMs+0x3c>
 5d6:	01 96       	adiw	r24, 0x01	; 1
  {
    for(i=0; i<ticks; i++)
 5d8:	82 3f       	cpi	r24, 0xF2	; 242
 5da:	e8 e0       	ldi	r30, 0x08	; 8
 5dc:	9e 07       	cpc	r25, r30
 5de:	d9 f7       	brne	.-10     	; 0x5d6 <softwareDelayMs+0x12>
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
  uint32_t ticks = 2290, i, j;
  for(j=0; j<u32_delay_in_ms; j++)
 5e0:	4f 5f       	subi	r20, 0xFF	; 255
 5e2:	5f 4f       	sbci	r21, 0xFF	; 255
 5e4:	6f 4f       	sbci	r22, 0xFF	; 255
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255
 5e8:	04 17       	cp	r16, r20
 5ea:	15 07       	cpc	r17, r21
 5ec:	26 07       	cpc	r18, r22
 5ee:	37 07       	cpc	r19, r23
 5f0:	21 f4       	brne	.+8      	; 0x5fa <softwareDelayMs+0x36>
 5f2:	06 c0       	rjmp	.+12     	; 0x600 <softwareDelayMs+0x3c>
 5f4:	40 e0       	ldi	r20, 0x00	; 0
 5f6:	50 e0       	ldi	r21, 0x00	; 0
 5f8:	ba 01       	movw	r22, r20
 */ 
#include "softwareDelay.h"
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	eb cf       	rjmp	.-42     	; 0x5d6 <softwareDelayMs+0x12>
  for(j=0; j<u32_delay_in_ms; j++)
  {
    for(i=0; i<ticks; i++)
    { }
  }
}
 600:	1f 91       	pop	r17
 602:	0f 91       	pop	r16
 604:	08 95       	ret

00000606 <_exit>:
 606:	f8 94       	cli

00000608 <__stop_program>:
 608:	ff cf       	rjmp	.-2      	; 0x608 <__stop_program>
