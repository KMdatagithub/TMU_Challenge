
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000a76  00000b0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800068  00800068  00000b12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a77  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ec  00000000  00000000  000027f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000715  00000000  00000000  000030e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  000037f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000943  00000000  00000000  00003ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bad  00000000  00000000  000047eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00006398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_4>
  14:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_7>
  20:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_8>
  24:	0c 94 47 02 	jmp	0x48e	; 0x48e <__vector_9>
  28:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_10>
  2c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_11>
  30:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_12>
  34:	0c 94 3c 03 	jmp	0x678	; 0x678 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8a:	0c 94 39 05 	jmp	0xa72	; 0xa72 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <omgplzzz>:
 */ 
#include "SL/BCM.h"
#include "MCAL/UART.h"
#include "util/softwareDelay.h"

void omgplzzz(enum_BcmStatus n){}
  92:	08 95       	ret

00000094 <main>:

int main(void)
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	2a 97       	sbiw	r28, 0x0a	; 10
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
	//uint8_t rxBuffer[50];
	uint8_t MSG[7] = {1, 2, 2, 5, 5, 3, 8};
  a8:	87 e0       	ldi	r24, 0x07	; 7
  aa:	e1 e6       	ldi	r30, 0x61	; 97
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	de 01       	movw	r26, r28
  b0:	11 96       	adiw	r26, 0x01	; 1
  b2:	01 90       	ld	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	8a 95       	dec	r24
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x1e>
	/*-------------[ BCM Initialization ]-------------*/
	BCM_cfg_s BCM1;
	BCM1.BCM_CH_ID = 1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	89 87       	std	Y+9, r24	; 0x09
	BCM1.Mode = BCM_Tx_Mode;
  be:	18 86       	std	Y+8, r1	; 0x08
	BCM1.Protocol = SPI_Protocol;
  c0:	8a 87       	std	Y+10, r24	; 0x0a
	BCM_Init(&BCM1);
  c2:	ce 01       	movw	r24, r28
  c4:	08 96       	adiw	r24, 0x08	; 8
  c6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <BCM_Init>
	BCM_Send(MSG, 7, &BCM1, omgplzzz);
  ca:	29 e4       	ldi	r18, 0x49	; 73
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	ae 01       	movw	r20, r28
  d0:	48 5f       	subi	r20, 0xF8	; 248
  d2:	5f 4f       	sbci	r21, 0xFF	; 255
  d4:	67 e0       	ldi	r22, 0x07	; 7
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	ce 01       	movw	r24, r28
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	0e 94 ed 04 	call	0x9da	; 0x9da <BCM_Send>

	while (1) 
    {
		BCM_Tx_Dispatcher();
  e0:	0e 94 20 04 	call	0x840	; 0x840 <BCM_Tx_Dispatcher>
    }
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <main+0x4c>

000000e6 <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  e6:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
  e8:	89 2b       	or	r24, r25
  ea:	c9 f1       	breq	.+114    	; 0x15e <DIO_init+0x78>
	{
		switch(DIO_info->GPIO)
  ec:	80 81       	ld	r24, Z
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 f0       	breq	.+36     	; 0x116 <DIO_init+0x30>
  f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_init+0x18>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d9 f0       	breq	.+54     	; 0x12e <DIO_init+0x48>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <DIO_init+0x60>
  fc:	32 c0       	rjmp	.+100    	; 0x162 <DIO_init+0x7c>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
  fe:	81 81       	ldd	r24, Z+1	; 0x01
 100:	2a b3       	in	r18, 0x1a	; 26
 102:	98 2f       	mov	r25, r24
 104:	90 95       	com	r25
 106:	29 23       	and	r18, r25
 108:	92 81       	ldd	r25, Z+2	; 0x02
 10a:	98 23       	and	r25, r24
 10c:	82 2f       	mov	r24, r18
 10e:	89 2b       	or	r24, r25
 110:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
 112:	80 e0       	ldi	r24, 0x00	; 0
			break;
 114:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
 116:	81 81       	ldd	r24, Z+1	; 0x01
 118:	27 b3       	in	r18, 0x17	; 23
 11a:	98 2f       	mov	r25, r24
 11c:	90 95       	com	r25
 11e:	29 23       	and	r18, r25
 120:	92 81       	ldd	r25, Z+2	; 0x02
 122:	98 23       	and	r25, r24
 124:	82 2f       	mov	r24, r18
 126:	89 2b       	or	r24, r25
 128:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
 12a:	80 e0       	ldi	r24, 0x00	; 0
			break;
 12c:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
 12e:	81 81       	ldd	r24, Z+1	; 0x01
 130:	24 b3       	in	r18, 0x14	; 20
 132:	98 2f       	mov	r25, r24
 134:	90 95       	com	r25
 136:	29 23       	and	r18, r25
 138:	92 81       	ldd	r25, Z+2	; 0x02
 13a:	98 23       	and	r25, r24
 13c:	82 2f       	mov	r24, r18
 13e:	89 2b       	or	r24, r25
 140:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
 142:	80 e0       	ldi	r24, 0x00	; 0
			break;
 144:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
 146:	81 81       	ldd	r24, Z+1	; 0x01
 148:	21 b3       	in	r18, 0x11	; 17
 14a:	98 2f       	mov	r25, r24
 14c:	90 95       	com	r25
 14e:	29 23       	and	r18, r25
 150:	92 81       	ldd	r25, Z+2	; 0x02
 152:	98 23       	and	r25, r24
 154:	82 2f       	mov	r24, r18
 156:	89 2b       	or	r24, r25
 158:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
 15a:	80 e0       	ldi	r24, 0x00	; 0
			break;
 15c:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
 162:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 164:	08 95       	ret

00000166 <DIO_Write>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write(uint8_t GPIO, uint8_t pins, uint8_t value)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	79 f0       	breq	.+30     	; 0x188 <DIO_Write+0x22>
 16a:	28 f0       	brcs	.+10     	; 0x176 <DIO_Write+0x10>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	a9 f0       	breq	.+42     	; 0x19a <DIO_Write+0x34>
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	e1 f0       	breq	.+56     	; 0x1ac <DIO_Write+0x46>
 174:	24 c0       	rjmp	.+72     	; 0x1be <DIO_Write+0x58>
	{
		case GPIOA :
		PORTA_DATA = (pins & value) | (~pins & PORTA_DATA);
 176:	8b b3       	in	r24, 0x1b	; 27
 178:	96 2f       	mov	r25, r22
 17a:	90 95       	com	r25
 17c:	89 23       	and	r24, r25
 17e:	46 23       	and	r20, r22
 180:	48 2b       	or	r20, r24
 182:	4b bb       	out	0x1b, r20	; 27
		errorStatus = E_OK;
 184:	80 e0       	ldi	r24, 0x00	; 0
		break;
 186:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & value) | (~pins & PORTB_DATA);
 188:	88 b3       	in	r24, 0x18	; 24
 18a:	96 2f       	mov	r25, r22
 18c:	90 95       	com	r25
 18e:	89 23       	and	r24, r25
 190:	46 23       	and	r20, r22
 192:	48 2b       	or	r20, r24
 194:	48 bb       	out	0x18, r20	; 24
		errorStatus = E_OK;
 196:	80 e0       	ldi	r24, 0x00	; 0
		break;
 198:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & value) | (~pins & PORTC_DATA);
 19a:	85 b3       	in	r24, 0x15	; 21
 19c:	96 2f       	mov	r25, r22
 19e:	90 95       	com	r25
 1a0:	89 23       	and	r24, r25
 1a2:	46 23       	and	r20, r22
 1a4:	48 2b       	or	r20, r24
 1a6:	45 bb       	out	0x15, r20	; 21
		errorStatus = E_OK;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
		break;
 1aa:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & value) | (~pins & PORTD_DATA);
 1ac:	82 b3       	in	r24, 0x12	; 18
 1ae:	96 2f       	mov	r25, r22
 1b0:	90 95       	com	r25
 1b2:	89 23       	and	r24, r25
 1b4:	46 23       	and	r20, r22
 1b6:	48 2b       	or	r20, r24
 1b8:	42 bb       	out	0x12, r20	; 18
		errorStatus = E_OK;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
		break;
 1bc:	08 95       	ret
		default :
		errorStatus = E_NOK;
 1be:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return errorStatus;
}
 1c0:	08 95       	ret

000001c2 <_SPIInitMaster>:
#include "SPI__.h"

 void (*PTR_CALL_BACK)(void);
 volatile uint8_t g_u8_RxFlag = TRUE;

extern void _SPIInitMaster(SPI_cfg_s * a_SPI_cfg){
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <_SPIInitMaster+0x6>
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <_SPIInitMaster+0x8>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <_SPIInitMaster+0xa>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	fc 01       	movw	r30, r24
		DIO_Cfg_s SPI_output_pins ;
		
	
	
		/* clear status register */
		SPSR = ZERO ;
 1d2:	1e b8       	out	0x0e, r1	; 14
		
		/* clear control mode */
		
		SPCR = ZERO ;
 1d4:	1d b8       	out	0x0d, r1	; 13
		
		/* master or slave bit 4 */
		SPCR |= Master_SPI ; 
 1d6:	6c 9a       	sbi	0x0d, 4	; 13
		
		/*set clock*/
		 
		SPCR|= a_SPI_cfg-> clockSPI ;
 1d8:	9d b1       	in	r25, 0x0d	; 13
 1da:	80 81       	ld	r24, Z
 1dc:	89 2b       	or	r24, r25
 1de:	8d b9       	out	0x0d, r24	; 13
		
		/* data order update */
		
		SPCR|= a_SPI_cfg-> dataorder ;
 1e0:	9d b1       	in	r25, 0x0d	; 13
 1e2:	82 81       	ldd	r24, Z+2	; 0x02
 1e4:	89 2b       	or	r24, r25
 1e6:	8d b9       	out	0x0d, r24	; 13
		
		/* set phase bit2 and polarity bit3 */
		
		 SPCR |= a_SPI_cfg-> phasePolarityMode;
 1e8:	9d b1       	in	r25, 0x0d	; 13
 1ea:	81 81       	ldd	r24, Z+1	; 0x01
 1ec:	89 2b       	or	r24, r25
 1ee:	8d b9       	out	0x0d, r24	; 13
		
		/* set interrupt  */
		
		SPCR |= INTERRUPT_SPI ;
 1f0:	6f 9a       	sbi	0x0d, 7	; 13
		
		/*set interrupt call back function */
		
		PTR_CALL_BACK = a_SPI_cfg->ptr_call_back ;
 1f2:	83 81       	ldd	r24, Z+3	; 0x03
 1f4:	94 81       	ldd	r25, Z+4	; 0x04
 1f6:	90 93 8d 00 	sts	0x008D, r25
 1fa:	80 93 8c 00 	sts	0x008C, r24
	//SS   bit4 OUTPUT
	//MOSI bit5 OUTPUT
	//MISO bit6 INPUT
	//SCK  bit7 OUTPUT

	SPI_input_pins.GPIO = SPI_PORT ;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	89 83       	std	Y+1, r24	; 0x01
	SPI_input_pins.pins = MISO_PIN ;
 202:	90 e4       	ldi	r25, 0x40	; 64
 204:	9a 83       	std	Y+2, r25	; 0x02
	SPI_input_pins.dir = INPUT ;
 206:	1b 82       	std	Y+3, r1	; 0x03
	
	SPI_output_pins.GPIO = SPI_PORT ;
 208:	8c 83       	std	Y+4, r24	; 0x04
	SPI_output_pins.pins =  SCK_PIN|MOSI_PIN|SS_PIN ;
 20a:	80 eb       	ldi	r24, 0xB0	; 176
 20c:	8d 83       	std	Y+5, r24	; 0x05
	SPI_output_pins.dir = OUTPUT ;
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	8e 83       	std	Y+6, r24	; 0x06
	
	DIO_init(&SPI_output_pins);
 212:	ce 01       	movw	r24, r28
 214:	04 96       	adiw	r24, 0x04	; 4
 216:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_init>
	DIO_init(&SPI_input_pins);
 21a:	ce 01       	movw	r24, r28
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_init>
	
		
	/// enable SPI bit 6
	
	sei();
 222:	78 94       	sei
	SPCR |= Enable_SPI ;
 224:	6e 9a       	sbi	0x0d, 6	; 13
	
}
 226:	26 96       	adiw	r28, 0x06	; 6
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <_SPIInitSlave>:

extern void _SPIInitSlave(SPI_cfg_s * a_SPI_cfg ){
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	00 d0       	rcall	.+0      	; 0x23e <_SPIInitSlave+0x6>
 23e:	00 d0       	rcall	.+0      	; 0x240 <_SPIInitSlave+0x8>
 240:	00 d0       	rcall	.+0      	; 0x242 <_SPIInitSlave+0xa>
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	fc 01       	movw	r30, r24
	DIO_Cfg_s SPI_output_pins ;
			
			
	
	//// clear status register
	SPSR = ZERO ;
 248:	1e b8       	out	0x0e, r1	; 14
	
	/// clear control mode
	
	SPCR = ZERO ;
 24a:	1d b8       	out	0x0d, r1	; 13
	
	
	// master or slave bit 4
	SPCR |= Slave_SPI ;
 24c:	8d b1       	in	r24, 0x0d	; 13
 24e:	8d b9       	out	0x0d, r24	; 13
	
	/// data order update
	
	SPCR|=a_SPI_cfg-> dataorder ;
 250:	9d b1       	in	r25, 0x0d	; 13
 252:	82 81       	ldd	r24, Z+2	; 0x02
 254:	89 2b       	or	r24, r25
 256:	8d b9       	out	0x0d, r24	; 13
	
	//set clock
	
	SPCR |= a_SPI_cfg-> clockSPI ;
 258:	9d b1       	in	r25, 0x0d	; 13
 25a:	80 81       	ld	r24, Z
 25c:	89 2b       	or	r24, r25
 25e:	8d b9       	out	0x0d, r24	; 13
	
	// set phase and polarity
	SPCR |=a_SPI_cfg -> phasePolarityMode ;
 260:	9d b1       	in	r25, 0x0d	; 13
 262:	81 81       	ldd	r24, Z+1	; 0x01
 264:	89 2b       	or	r24, r25
 266:	8d b9       	out	0x0d, r24	; 13
	
	/* set interrupt  */
	SPCR |= INTERRUPT_SPI ;
 268:	6f 9a       	sbi	0x0d, 7	; 13
	
	/*set interrupt call back function */
		
	PTR_CALL_BACK = a_SPI_cfg->ptr_call_back ;
 26a:	83 81       	ldd	r24, Z+3	; 0x03
 26c:	94 81       	ldd	r25, Z+4	; 0x04
 26e:	90 93 8d 00 	sts	0x008D, r25
 272:	80 93 8c 00 	sts	0x008C, r24
	//SS   bit4 INPUT
	//MOSI bit5 INPUT
	//MISO bit6 OUTPUT
	//SCK  bit7 INPUT

	SPI_input_pins.GPIO = SPI_PORT ;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	89 83       	std	Y+1, r24	; 0x01
	SPI_input_pins.pins =  SCK_PIN|MOSI_PIN|SS_PIN ;
 27a:	90 eb       	ldi	r25, 0xB0	; 176
 27c:	9a 83       	std	Y+2, r25	; 0x02
	SPI_input_pins.dir = INPUT ;
 27e:	1b 82       	std	Y+3, r1	; 0x03

	SPI_output_pins.GPIO = SPI_PORT ;
 280:	8c 83       	std	Y+4, r24	; 0x04
	SPI_output_pins.pins = MISO_PIN ;
 282:	80 e4       	ldi	r24, 0x40	; 64
 284:	8d 83       	std	Y+5, r24	; 0x05
	SPI_output_pins.dir = OUTPUT ;
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	8e 83       	std	Y+6, r24	; 0x06


	DIO_init(&SPI_output_pins);
 28a:	ce 01       	movw	r24, r28
 28c:	04 96       	adiw	r24, 0x04	; 4
 28e:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_init>
	DIO_init(&SPI_input_pins);
 292:	ce 01       	movw	r24, r28
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_init>
	

	/// enable SPI bit 6
	sei();
 29a:	78 94       	sei
	
	SPCR |= Enable_SPI ;
 29c:	6e 9a       	sbi	0x0d, 6	; 13
	
		
	
}
 29e:	26 96       	adiw	r28, 0x06	; 6
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <_SPITrancevier>:

extern void _SPITrancevier(uint8_t* data){
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	ec 01       	movw	r28, r24
	
	if(SPCR&Master_SPI){
 2b6:	6c 9b       	sbis	0x0d, 4	; 13
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <_SPITrancevier+0x14>
		
		/*Select the slave By pull down the SS pin */
		
		DIO_Write(SPI_PORT,BIT4,ZERO );
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	60 e1       	ldi	r22, 0x10	; 16
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_Write>
	}
	
	
	//*data = SPDR;
	//while (!g_u8_RxFlag);
	SPDR = *data;	
 2c4:	88 81       	ld	r24, Y
 2c6:	8f b9       	out	0x0f, r24	; 15
	
	g_u8_RxFlag = FALSE ;
 2c8:	10 92 60 00 	sts	0x0060, r1
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <_SPISend>:

extern ERROR_STATUS _SPISend(uint8_t data)
{
	uint8_t state = E_NOK;	
	if(g_u8_RxFlag == TRUE)
 2d2:	90 91 60 00 	lds	r25, 0x0060
 2d6:	91 30       	cpi	r25, 0x01	; 1
 2d8:	29 f4       	brne	.+10     	; 0x2e4 <_SPISend+0x12>
	{
		SPDR = data;
 2da:	8f b9       	out	0x0f, r24	; 15
		g_u8_RxFlag = FALSE;	
 2dc:	10 92 60 00 	sts	0x0060, r1
		state = E_OK;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret
	g_u8_RxFlag = FALSE ;
}

extern ERROR_STATUS _SPISend(uint8_t data)
{
	uint8_t state = E_NOK;	
 2e4:	81 e0       	ldi	r24, 0x01	; 1
		SPDR = data;
		g_u8_RxFlag = FALSE;	
		state = E_OK;
	}
	return state;
}
 2e6:	08 95       	ret

000002e8 <SPI_SetCBF>:
}


void SPI_SetCBF(FunPtr isr_ptr)
{
	PTR_CALL_BACK = isr_ptr;
 2e8:	90 93 8d 00 	sts	0x008D, r25
 2ec:	80 93 8c 00 	sts	0x008C, r24
 2f0:	08 95       	ret

000002f2 <__vector_12>:
}

ISR(SPI_STC_vect)
{
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	2f 93       	push	r18
 2fe:	3f 93       	push	r19
 300:	4f 93       	push	r20
 302:	5f 93       	push	r21
 304:	6f 93       	push	r22
 306:	7f 93       	push	r23
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	af 93       	push	r26
 30e:	bf 93       	push	r27
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
	g_u8_RxFlag = TRUE;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	80 93 60 00 	sts	0x0060, r24
	PTR_CALL_BACK();
 31a:	e0 91 8c 00 	lds	r30, 0x008C
 31e:	f0 91 8d 00 	lds	r31, 0x008D
 322:	09 95       	icall
}
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	bf 91       	pop	r27
 32a:	af 91       	pop	r26
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	7f 91       	pop	r23
 332:	6f 91       	pop	r22
 334:	5f 91       	pop	r21
 336:	4f 91       	pop	r20
 338:	3f 91       	pop	r19
 33a:	2f 91       	pop	r18
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	2f 93       	push	r18
 352:	3f 93       	push	r19
 354:	4f 93       	push	r20
 356:	5f 93       	push	r21
 358:	6f 93       	push	r22
 35a:	7f 93       	push	r23
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	af 93       	push	r26
 362:	bf 93       	push	r27
 364:	ef 93       	push	r30
 366:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
 368:	e0 91 72 00 	lds	r30, 0x0072
 36c:	f0 91 73 00 	lds	r31, 0x0073
 370:	30 97       	sbiw	r30, 0x00	; 0
 372:	09 f0       	breq	.+2      	; 0x376 <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
 374:	09 95       	icall
	}
}
 376:	ff 91       	pop	r31
 378:	ef 91       	pop	r30
 37a:	bf 91       	pop	r27
 37c:	af 91       	pop	r26
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	7f 91       	pop	r23
 384:	6f 91       	pop	r22
 386:	5f 91       	pop	r21
 388:	4f 91       	pop	r20
 38a:	3f 91       	pop	r19
 38c:	2f 91       	pop	r18
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	2f 93       	push	r18
 3a4:	3f 93       	push	r19
 3a6:	4f 93       	push	r20
 3a8:	5f 93       	push	r21
 3aa:	6f 93       	push	r22
 3ac:	7f 93       	push	r23
 3ae:	8f 93       	push	r24
 3b0:	9f 93       	push	r25
 3b2:	af 93       	push	r26
 3b4:	bf 93       	push	r27
 3b6:	ef 93       	push	r30
 3b8:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
 3ba:	e0 91 70 00 	lds	r30, 0x0070
 3be:	f0 91 71 00 	lds	r31, 0x0071
 3c2:	30 97       	sbiw	r30, 0x00	; 0
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
 3c6:	09 95       	icall
	}
}
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
 3f4:	2f 93       	push	r18
 3f6:	3f 93       	push	r19
 3f8:	4f 93       	push	r20
 3fa:	5f 93       	push	r21
 3fc:	6f 93       	push	r22
 3fe:	7f 93       	push	r23
 400:	8f 93       	push	r24
 402:	9f 93       	push	r25
 404:	af 93       	push	r26
 406:	bf 93       	push	r27
 408:	ef 93       	push	r30
 40a:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
 40c:	e0 91 6a 00 	lds	r30, 0x006A
 410:	f0 91 6b 00 	lds	r31, 0x006B
 414:	30 97       	sbiw	r30, 0x00	; 0
 416:	09 f0       	breq	.+2      	; 0x41a <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
 418:	09 95       	icall
	}
}
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 43c:	1f 92       	push	r1
 43e:	0f 92       	push	r0
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	2f 93       	push	r18
 448:	3f 93       	push	r19
 44a:	4f 93       	push	r20
 44c:	5f 93       	push	r21
 44e:	6f 93       	push	r22
 450:	7f 93       	push	r23
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
 456:	af 93       	push	r26
 458:	bf 93       	push	r27
 45a:	ef 93       	push	r30
 45c:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
 45e:	e0 91 68 00 	lds	r30, 0x0068
 462:	f0 91 69 00 	lds	r31, 0x0069
 466:	30 97       	sbiw	r30, 0x00	; 0
 468:	09 f0       	breq	.+2      	; 0x46c <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
 46a:	09 95       	icall
	}
}
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	bf 91       	pop	r27
 472:	af 91       	pop	r26
 474:	9f 91       	pop	r25
 476:	8f 91       	pop	r24
 478:	7f 91       	pop	r23
 47a:	6f 91       	pop	r22
 47c:	5f 91       	pop	r21
 47e:	4f 91       	pop	r20
 480:	3f 91       	pop	r19
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 48e:	1f 92       	push	r1
 490:	0f 92       	push	r0
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	0f 92       	push	r0
 496:	11 24       	eor	r1, r1
 498:	2f 93       	push	r18
 49a:	3f 93       	push	r19
 49c:	4f 93       	push	r20
 49e:	5f 93       	push	r21
 4a0:	6f 93       	push	r22
 4a2:	7f 93       	push	r23
 4a4:	8f 93       	push	r24
 4a6:	9f 93       	push	r25
 4a8:	af 93       	push	r26
 4aa:	bf 93       	push	r27
 4ac:	ef 93       	push	r30
 4ae:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
 4b0:	e0 91 6e 00 	lds	r30, 0x006E
 4b4:	f0 91 6f 00 	lds	r31, 0x006F
 4b8:	30 97       	sbiw	r30, 0x00	; 0
 4ba:	09 f0       	breq	.+2      	; 0x4be <__vector_9+0x30>
	{
		Ptr_Timer1_OV();
 4bc:	09 95       	icall
	}
}
 4be:	ff 91       	pop	r31
 4c0:	ef 91       	pop	r30
 4c2:	bf 91       	pop	r27
 4c4:	af 91       	pop	r26
 4c6:	9f 91       	pop	r25
 4c8:	8f 91       	pop	r24
 4ca:	7f 91       	pop	r23
 4cc:	6f 91       	pop	r22
 4ce:	5f 91       	pop	r21
 4d0:	4f 91       	pop	r20
 4d2:	3f 91       	pop	r19
 4d4:	2f 91       	pop	r18
 4d6:	0f 90       	pop	r0
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	0f 90       	pop	r0
 4dc:	1f 90       	pop	r1
 4de:	18 95       	reti

000004e0 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 4e0:	1f 92       	push	r1
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	2f 93       	push	r18
 4ec:	3f 93       	push	r19
 4ee:	4f 93       	push	r20
 4f0:	5f 93       	push	r21
 4f2:	6f 93       	push	r22
 4f4:	7f 93       	push	r23
 4f6:	8f 93       	push	r24
 4f8:	9f 93       	push	r25
 4fa:	af 93       	push	r26
 4fc:	bf 93       	push	r27
 4fe:	ef 93       	push	r30
 500:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 502:	e0 91 6c 00 	lds	r30, 0x006C
 506:	f0 91 6d 00 	lds	r31, 0x006D
 50a:	30 97       	sbiw	r30, 0x00	; 0
 50c:	09 f0       	breq	.+2      	; 0x510 <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
 50e:	09 95       	icall
	}	
}
 510:	ff 91       	pop	r31
 512:	ef 91       	pop	r30
 514:	bf 91       	pop	r27
 516:	af 91       	pop	r26
 518:	9f 91       	pop	r25
 51a:	8f 91       	pop	r24
 51c:	7f 91       	pop	r23
 51e:	6f 91       	pop	r22
 520:	5f 91       	pop	r21
 522:	4f 91       	pop	r20
 524:	3f 91       	pop	r19
 526:	2f 91       	pop	r18
 528:	0f 90       	pop	r0
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

00000532 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	2f 93       	push	r18
 53e:	3f 93       	push	r19
 540:	4f 93       	push	r20
 542:	5f 93       	push	r21
 544:	6f 93       	push	r22
 546:	7f 93       	push	r23
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
 550:	ef 93       	push	r30
 552:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 554:	e0 91 6c 00 	lds	r30, 0x006C
 558:	f0 91 6d 00 	lds	r31, 0x006D
 55c:	30 97       	sbiw	r30, 0x00	; 0
 55e:	09 f0       	breq	.+2      	; 0x562 <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 560:	09 95       	icall
	}
}
 562:	ff 91       	pop	r31
 564:	ef 91       	pop	r30
 566:	bf 91       	pop	r27
 568:	af 91       	pop	r26
 56a:	9f 91       	pop	r25
 56c:	8f 91       	pop	r24
 56e:	7f 91       	pop	r23
 570:	6f 91       	pop	r22
 572:	5f 91       	pop	r21
 574:	4f 91       	pop	r20
 576:	3f 91       	pop	r19
 578:	2f 91       	pop	r18
 57a:	0f 90       	pop	r0
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	0f 90       	pop	r0
 580:	1f 90       	pop	r1
 582:	18 95       	reti

00000584 <UART_Init>:
FunPtr Ptr_UART_TX = NULL;
FunPtr Ptr_UART_RX = NULL;


void UART_Init(UART_cfg* uart_cfg)
{
 584:	cf 92       	push	r12
 586:	df 92       	push	r13
 588:	ef 92       	push	r14
 58a:	ff 92       	push	r15
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	ec 01       	movw	r28, r24
	uint8_t uart_control = 0x80;
	// Set The UART Baud Rate
	UBRRL = ((F_cpu/(16*uart_cfg->baudrate)) - 1);
 592:	8f 81       	ldd	r24, Y+7	; 0x07
 594:	98 85       	ldd	r25, Y+8	; 0x08
 596:	a9 85       	ldd	r26, Y+9	; 0x09
 598:	ba 85       	ldd	r27, Y+10	; 0x0a
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	aa 1f       	adc	r26, r26
 5a0:	bb 1f       	adc	r27, r27
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	aa 1f       	adc	r26, r26
 5a8:	bb 1f       	adc	r27, r27
 5aa:	9c 01       	movw	r18, r24
 5ac:	ad 01       	movw	r20, r26
 5ae:	22 0f       	add	r18, r18
 5b0:	33 1f       	adc	r19, r19
 5b2:	44 1f       	adc	r20, r20
 5b4:	55 1f       	adc	r21, r21
 5b6:	22 0f       	add	r18, r18
 5b8:	33 1f       	adc	r19, r19
 5ba:	44 1f       	adc	r20, r20
 5bc:	55 1f       	adc	r21, r21
 5be:	0f 2e       	mov	r0, r31
 5c0:	c1 2c       	mov	r12, r1
 5c2:	f4 e2       	ldi	r31, 0x24	; 36
 5c4:	df 2e       	mov	r13, r31
 5c6:	f4 ef       	ldi	r31, 0xF4	; 244
 5c8:	ef 2e       	mov	r14, r31
 5ca:	f1 2c       	mov	r15, r1
 5cc:	f0 2d       	mov	r31, r0
 5ce:	c7 01       	movw	r24, r14
 5d0:	b6 01       	movw	r22, r12
 5d2:	0e 94 17 05 	call	0xa2e	; 0xa2e <__udivmodsi4>
 5d6:	21 50       	subi	r18, 0x01	; 1
 5d8:	29 b9       	out	0x09, r18	; 9
	UBRRH = ((F_cpu/(16*uart_cfg->baudrate)) - 1)>>8;
 5da:	8f 81       	ldd	r24, Y+7	; 0x07
 5dc:	98 85       	ldd	r25, Y+8	; 0x08
 5de:	a9 85       	ldd	r26, Y+9	; 0x09
 5e0:	ba 85       	ldd	r27, Y+10	; 0x0a
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	aa 1f       	adc	r26, r26
 5e8:	bb 1f       	adc	r27, r27
 5ea:	88 0f       	add	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	aa 1f       	adc	r26, r26
 5f0:	bb 1f       	adc	r27, r27
 5f2:	9c 01       	movw	r18, r24
 5f4:	ad 01       	movw	r20, r26
 5f6:	22 0f       	add	r18, r18
 5f8:	33 1f       	adc	r19, r19
 5fa:	44 1f       	adc	r20, r20
 5fc:	55 1f       	adc	r21, r21
 5fe:	22 0f       	add	r18, r18
 600:	33 1f       	adc	r19, r19
 602:	44 1f       	adc	r20, r20
 604:	55 1f       	adc	r21, r21
 606:	c7 01       	movw	r24, r14
 608:	b6 01       	movw	r22, r12
 60a:	0e 94 17 05 	call	0xa2e	; 0xa2e <__udivmodsi4>
 60e:	da 01       	movw	r26, r20
 610:	c9 01       	movw	r24, r18
 612:	01 97       	sbiw	r24, 0x01	; 1
 614:	a1 09       	sbc	r26, r1
 616:	b1 09       	sbc	r27, r1
 618:	89 2f       	mov	r24, r25
 61a:	9a 2f       	mov	r25, r26
 61c:	ab 2f       	mov	r26, r27
 61e:	bb 27       	eor	r27, r27
 620:	80 bd       	out	0x20, r24	; 32
	// Set The UART Mode OF Operation
	UCSRB |= (uart_cfg->mode | uart_cfg->uartInterrupts);
 622:	9a b1       	in	r25, 0x0a	; 10
 624:	88 81       	ld	r24, Y
 626:	89 2b       	or	r24, r25
 628:	9e 81       	ldd	r25, Y+6	; 0x06
 62a:	89 2b       	or	r24, r25
 62c:	8a b9       	out	0x0a, r24	; 10
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
	UCSRC |= uart_control;
 62e:	20 b5       	in	r18, 0x20	; 32
	// Set The UART Data Sampling Edge
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
 630:	8b 81       	ldd	r24, Y+3	; 0x03
 632:	9d 81       	ldd	r25, Y+5	; 0x05
 634:	89 2b       	or	r24, r25
 636:	80 68       	ori	r24, 0x80	; 128
 638:	99 81       	ldd	r25, Y+1	; 0x01
 63a:	89 2b       	or	r24, r25
 63c:	9a 81       	ldd	r25, Y+2	; 0x02
 63e:	89 2b       	or	r24, r25
 640:	9c 81       	ldd	r25, Y+4	; 0x04
 642:	89 2b       	or	r24, r25
	UCSRC |= uart_control;
 644:	82 2b       	or	r24, r18
 646:	80 bd       	out	0x20, r24	; 32
	SREG  |= (0x80);
 648:	8f b7       	in	r24, 0x3f	; 63
 64a:	80 68       	ori	r24, 0x80	; 128
 64c:	8f bf       	out	0x3f, r24	; 63
}
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	ff 90       	pop	r15
 654:	ef 90       	pop	r14
 656:	df 90       	pop	r13
 658:	cf 90       	pop	r12
 65a:	08 95       	ret

0000065c <UART_Write>:

void UART_Write(uint8_t data)
{
	// Wait For Empty Transmit Buffer
	while(!(UCSRA & (1<<5)));
 65c:	5d 9b       	sbis	0x0b, 5	; 11
 65e:	fe cf       	rjmp	.-4      	; 0x65c <UART_Write>
	// Write The Data To The Buffer & Send!
	UDR = data;
 660:	8c b9       	out	0x0c, r24	; 12
 662:	08 95       	ret

00000664 <UART_SetTX>:
/*-----------[ Timers Set CallBack Functions ]-----------*/
/*=======================================================*/

void UART_SetTX(FunPtr Ptr_ISR)
{
	Ptr_UART_TX = Ptr_ISR;
 664:	90 93 77 00 	sts	0x0077, r25
 668:	80 93 76 00 	sts	0x0076, r24
 66c:	08 95       	ret

0000066e <UART_SetRX>:
}

void UART_SetRX(FunPtr Ptr_ISR)
{
	Ptr_UART_RX = Ptr_ISR;
 66e:	90 93 75 00 	sts	0x0075, r25
 672:	80 93 74 00 	sts	0x0074, r24
 676:	08 95       	ret

00000678 <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
 678:	1f 92       	push	r1
 67a:	0f 92       	push	r0
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	0f 92       	push	r0
 680:	11 24       	eor	r1, r1
 682:	2f 93       	push	r18
 684:	3f 93       	push	r19
 686:	4f 93       	push	r20
 688:	5f 93       	push	r21
 68a:	6f 93       	push	r22
 68c:	7f 93       	push	r23
 68e:	8f 93       	push	r24
 690:	9f 93       	push	r25
 692:	af 93       	push	r26
 694:	bf 93       	push	r27
 696:	ef 93       	push	r30
 698:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
 69a:	e0 91 74 00 	lds	r30, 0x0074
 69e:	f0 91 75 00 	lds	r31, 0x0075
 6a2:	30 97       	sbiw	r30, 0x00	; 0
 6a4:	09 f0       	breq	.+2      	; 0x6a8 <__vector_13+0x30>
	{
		Ptr_UART_RX();
 6a6:	09 95       	icall
	}
}
 6a8:	ff 91       	pop	r31
 6aa:	ef 91       	pop	r30
 6ac:	bf 91       	pop	r27
 6ae:	af 91       	pop	r26
 6b0:	9f 91       	pop	r25
 6b2:	8f 91       	pop	r24
 6b4:	7f 91       	pop	r23
 6b6:	6f 91       	pop	r22
 6b8:	5f 91       	pop	r21
 6ba:	4f 91       	pop	r20
 6bc:	3f 91       	pop	r19
 6be:	2f 91       	pop	r18
 6c0:	0f 90       	pop	r0
 6c2:	0f be       	out	0x3f, r0	; 63
 6c4:	0f 90       	pop	r0
 6c6:	1f 90       	pop	r1
 6c8:	18 95       	reti

000006ca <__vector_15>:

ISR(USART_TXC_vect)
{
 6ca:	1f 92       	push	r1
 6cc:	0f 92       	push	r0
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	0f 92       	push	r0
 6d2:	11 24       	eor	r1, r1
 6d4:	2f 93       	push	r18
 6d6:	3f 93       	push	r19
 6d8:	4f 93       	push	r20
 6da:	5f 93       	push	r21
 6dc:	6f 93       	push	r22
 6de:	7f 93       	push	r23
 6e0:	8f 93       	push	r24
 6e2:	9f 93       	push	r25
 6e4:	af 93       	push	r26
 6e6:	bf 93       	push	r27
 6e8:	ef 93       	push	r30
 6ea:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
 6ec:	e0 91 76 00 	lds	r30, 0x0076
 6f0:	f0 91 77 00 	lds	r31, 0x0077
 6f4:	30 97       	sbiw	r30, 0x00	; 0
 6f6:	09 f0       	breq	.+2      	; 0x6fa <__vector_15+0x30>
	{
		Ptr_UART_TX();
 6f8:	09 95       	icall
	}
 6fa:	ff 91       	pop	r31
 6fc:	ef 91       	pop	r30
 6fe:	bf 91       	pop	r27
 700:	af 91       	pop	r26
 702:	9f 91       	pop	r25
 704:	8f 91       	pop	r24
 706:	7f 91       	pop	r23
 708:	6f 91       	pop	r22
 70a:	5f 91       	pop	r21
 70c:	4f 91       	pop	r20
 70e:	3f 91       	pop	r19
 710:	2f 91       	pop	r18
 712:	0f 90       	pop	r0
 714:	0f be       	out	0x3f, r0	; 63
 716:	0f 90       	pop	r0
 718:	1f 90       	pop	r1
 71a:	18 95       	reti

0000071c <BCM_Tx_ISR_cbf>:
/*===================================================================================*/

/*------------[ BCM CallBacks]------------*/
/* BCM Transmit ISR Call-Back Function */
static void BCM_Tx_ISR_cbf(void)
{	if (g_BCM_EXcfg.FSM_State == SendingByte_State)
 71c:	80 91 80 00 	lds	r24, 0x0080
 720:	82 30       	cpi	r24, 0x02	; 2
 722:	49 f4       	brne	.+18     	; 0x736 <BCM_Tx_ISR_cbf+0x1a>
	{
		g_BCM_EXcfg.Count++;
 724:	ec e7       	ldi	r30, 0x7C	; 124
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	84 85       	ldd	r24, Z+12	; 0x0c
 72a:	95 85       	ldd	r25, Z+13	; 0x0d
 72c:	01 96       	adiw	r24, 0x01	; 1
 72e:	95 87       	std	Z+13, r25	; 0x0d
 730:	84 87       	std	Z+12, r24	; 0x0c
		g_BCM_EXcfg.FSM_State = SendComplete_State;
 732:	83 e0       	ldi	r24, 0x03	; 3
 734:	84 83       	std	Z+4, r24	; 0x04
 736:	08 95       	ret

00000738 <BCM_Rx_ISR_cbf>:
	}
}

/* BCM Receive ISR Call-Back Function */
static void BCM_Rx_ISR_cbf(void)
{
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	1f 92       	push	r1
 73e:	cd b7       	in	r28, 0x3d	; 61
 740:	de b7       	in	r29, 0x3e	; 62
	uint8_t a_RX_Byte;
	switch(g_BCM_EXcfg.Protocol)
 742:	80 91 7e 00 	lds	r24, 0x007E
 746:	88 23       	and	r24, r24
 748:	19 f0       	breq	.+6      	; 0x750 <BCM_Rx_ISR_cbf+0x18>
 74a:	81 30       	cpi	r24, 0x01	; 1
 74c:	21 f0       	breq	.+8      	; 0x756 <BCM_Rx_ISR_cbf+0x1e>
 74e:	07 c0       	rjmp	.+14     	; 0x75e <BCM_Rx_ISR_cbf+0x26>
	{
		case UART_Protocol:
		{
			a_RX_Byte = UDR;
 750:	8c b1       	in	r24, 0x0c	; 12
 752:	89 83       	std	Y+1, r24	; 0x01
			break;
 754:	04 c0       	rjmp	.+8      	; 0x75e <BCM_Rx_ISR_cbf+0x26>
		}
		case SPI_Protocol:
		{
			_SPITrancevier(&a_RX_Byte);
 756:	ce 01       	movw	r24, r28
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_SPITrancevier>
		default:
			break;
	}
	
	/* Read & Check The BCM Received ID */
	if(g_BCM_EXcfg.Count == 0)
 75e:	80 91 88 00 	lds	r24, 0x0088
 762:	90 91 89 00 	lds	r25, 0x0089
 766:	00 97       	sbiw	r24, 0x00	; 0
 768:	a1 f4       	brne	.+40     	; 0x792 <BCM_Rx_ISR_cbf+0x5a>
	{
		g_Rx_ID = a_RX_Byte;
 76a:	89 81       	ldd	r24, Y+1	; 0x01
 76c:	80 93 7b 00 	sts	0x007B, r24
	
		if(g_Rx_ID == BCM_ID)
 770:	80 91 7b 00 	lds	r24, 0x007B
 774:	81 34       	cpi	r24, 0x41	; 65
 776:	51 f4       	brne	.+20     	; 0x78c <BCM_Rx_ISR_cbf+0x54>
		{
			g_ID_State = S_OK;
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	80 93 7a 00 	sts	0x007A, r24
			g_BCM_EXcfg.Count++;
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	90 93 89 00 	sts	0x0089, r25
 786:	80 93 88 00 	sts	0x0088, r24
 78a:	56 c0       	rjmp	.+172    	; 0x838 <BCM_Rx_ISR_cbf+0x100>
		}
		else
		{
			g_ID_State = S_NOK;
 78c:	10 92 7a 00 	sts	0x007A, r1
 790:	53 c0       	rjmp	.+166    	; 0x838 <BCM_Rx_ISR_cbf+0x100>
	}
	/*-------------------[ ID IS CHECKED ]------------------*/
	/*------------------------------------------------------*/
	/*-------------------[ Save & CHECK MSG Len ]------------------*/
	/* Read & Check The BCM Received Data Length */
	else if(g_BCM_EXcfg.Count == 1)
 792:	81 30       	cpi	r24, 0x01	; 1
 794:	91 05       	cpc	r25, r1
 796:	19 f5       	brne	.+70     	; 0x7de <BCM_Rx_ISR_cbf+0xa6>
	{
		if(a_RX_Byte > g_BCM_EXcfg.Buf_Len)
 798:	89 81       	ldd	r24, Y+1	; 0x01
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	20 91 84 00 	lds	r18, 0x0084
 7a0:	30 91 85 00 	lds	r19, 0x0085
 7a4:	28 17       	cp	r18, r24
 7a6:	39 07       	cpc	r19, r25
 7a8:	78 f4       	brcc	.+30     	; 0x7c8 <BCM_Rx_ISR_cbf+0x90>
		{
			g_LEN_State = S_NOK;
 7aa:	10 92 79 00 	sts	0x0079, r1
			g_BCM_EXcfg.FSM_State = IDLE_State;
 7ae:	ec e7       	ldi	r30, 0x7C	; 124
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	84 83       	std	Z+4, r24	; 0x04
			g_BCM_EXcfg.Count = ZERO;
 7b6:	15 86       	std	Z+13, r1	; 0x0d
 7b8:	14 86       	std	Z+12, r1	; 0x0c
			g_BCM_EXcfg.BCM_notify_cbf(g_LEN_State);
 7ba:	80 91 79 00 	lds	r24, 0x0079
 7be:	06 84       	ldd	r0, Z+14	; 0x0e
 7c0:	f7 85       	ldd	r31, Z+15	; 0x0f
 7c2:	e0 2d       	mov	r30, r0
 7c4:	09 95       	icall
 7c6:	38 c0       	rjmp	.+112    	; 0x838 <BCM_Rx_ISR_cbf+0x100>
		}
		else
		{
			g_BCM_EXcfg.MSG_Len = a_RX_Byte;
 7c8:	ec e7       	ldi	r30, 0x7C	; 124
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	93 87       	std	Z+11, r25	; 0x0b
 7ce:	82 87       	std	Z+10, r24	; 0x0a
			g_BCM_EXcfg.Count++;
 7d0:	82 e0       	ldi	r24, 0x02	; 2
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	95 87       	std	Z+13, r25	; 0x0d
 7d6:	84 87       	std	Z+12, r24	; 0x0c
			g_BCM_EXcfg.FSM_State = ReceivingByte_State;
 7d8:	84 e0       	ldi	r24, 0x04	; 4
 7da:	84 83       	std	Z+4, r24	; 0x04
 7dc:	2d c0       	rjmp	.+90     	; 0x838 <BCM_Rx_ISR_cbf+0x100>
		}
	}
	else if(g_BCM_EXcfg.Count-2 <= g_BCM_EXcfg.MSG_Len)
 7de:	ac 01       	movw	r20, r24
 7e0:	42 50       	subi	r20, 0x02	; 2
 7e2:	51 09       	sbc	r21, r1
 7e4:	20 91 86 00 	lds	r18, 0x0086
 7e8:	30 91 87 00 	lds	r19, 0x0087
 7ec:	24 17       	cp	r18, r20
 7ee:	35 07       	cpc	r19, r21
 7f0:	a8 f0       	brcs	.+42     	; 0x81c <BCM_Rx_ISR_cbf+0xe4>
	{
		g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2] = a_RX_Byte;
 7f2:	89 81       	ldd	r24, Y+1	; 0x01
 7f4:	ec e7       	ldi	r30, 0x7C	; 124
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	26 81       	ldd	r18, Z+6	; 0x06
 7fa:	37 81       	ldd	r19, Z+7	; 0x07
 7fc:	d9 01       	movw	r26, r18
 7fe:	a4 0f       	add	r26, r20
 800:	b5 1f       	adc	r27, r21
 802:	8c 93       	st	X, r24
		g_CS_Calculated += a_RX_Byte;
 804:	90 91 78 00 	lds	r25, 0x0078
 808:	89 81       	ldd	r24, Y+1	; 0x01
 80a:	89 0f       	add	r24, r25
 80c:	80 93 78 00 	sts	0x0078, r24
		g_BCM_EXcfg.Count++;
 810:	84 85       	ldd	r24, Z+12	; 0x0c
 812:	95 85       	ldd	r25, Z+13	; 0x0d
 814:	01 96       	adiw	r24, 0x01	; 1
 816:	95 87       	std	Z+13, r25	; 0x0d
 818:	84 87       	std	Z+12, r24	; 0x0c
 81a:	0e c0       	rjmp	.+28     	; 0x838 <BCM_Rx_ISR_cbf+0x100>
	}
	else if(g_BCM_EXcfg.Count-2 == g_BCM_EXcfg.MSG_Len+1)
 81c:	2f 5f       	subi	r18, 0xFF	; 255
 81e:	3f 4f       	sbci	r19, 0xFF	; 255
 820:	42 17       	cp	r20, r18
 822:	53 07       	cpc	r21, r19
 824:	49 f4       	brne	.+18     	; 0x838 <BCM_Rx_ISR_cbf+0x100>
	{
		g_BCM_EXcfg.CheckSum = a_RX_Byte;
 826:	ec e7       	ldi	r30, 0x7C	; 124
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	29 81       	ldd	r18, Y+1	; 0x01
 82c:	25 83       	std	Z+5, r18	; 0x05
		g_BCM_EXcfg.Count++;
 82e:	01 96       	adiw	r24, 0x01	; 1
 830:	95 87       	std	Z+13, r25	; 0x0d
 832:	84 87       	std	Z+12, r24	; 0x0c
		g_BCM_EXcfg.FSM_State = ReceiveComplete_State;
 834:	85 e0       	ldi	r24, 0x05	; 5
 836:	84 83       	std	Z+4, r24	; 0x04
	}
	else
	{	}
}
 838:	0f 90       	pop	r0
 83a:	df 91       	pop	r29
 83c:	cf 91       	pop	r28
 83e:	08 95       	ret

00000840 <BCM_Tx_Dispatcher>:
	}
}
/* TX Dispatcher */
void BCM_Tx_Dispatcher(void){
	
	switch(g_BCM_EXcfg.FSM_State)
 840:	80 91 80 00 	lds	r24, 0x0080
 844:	83 30       	cpi	r24, 0x03	; 3
 846:	09 f0       	breq	.+2      	; 0x84a <BCM_Tx_Dispatcher+0xa>
 848:	43 c0       	rjmp	.+134    	; 0x8d0 <__stack+0x71>
		case IDLE_State :
			break;
		case SendingByte_State :
			break;
		case SendComplete_State :
		if (g_BCM_EXcfg.Count<g_BCM_EXcfg.Buf_Len)
 84a:	ec e7       	ldi	r30, 0x7C	; 124
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	84 85       	ldd	r24, Z+12	; 0x0c
 850:	95 85       	ldd	r25, Z+13	; 0x0d
 852:	20 85       	ldd	r18, Z+8	; 0x08
 854:	31 85       	ldd	r19, Z+9	; 0x09
 856:	82 17       	cp	r24, r18
 858:	93 07       	cpc	r25, r19
 85a:	00 f5       	brcc	.+64     	; 0x89c <__stack+0x3d>
		{
			switch(g_BCM_EXcfg.Protocol){
 85c:	20 91 7e 00 	lds	r18, 0x007E
 860:	22 23       	and	r18, r18
 862:	19 f0       	breq	.+6      	; 0x86a <__stack+0xb>
 864:	21 30       	cpi	r18, 0x01	; 1
 866:	61 f0       	breq	.+24     	; 0x880 <__stack+0x21>
 868:	15 c0       	rjmp	.+42     	; 0x894 <__stack+0x35>
				g_BCM_EXcfg.CheckSum+=g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-1];
				case UART_Protocol :
				UART_Write(g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count]);
 86a:	20 91 82 00 	lds	r18, 0x0082
 86e:	30 91 83 00 	lds	r19, 0x0083
 872:	f9 01       	movw	r30, r18
 874:	e8 0f       	add	r30, r24
 876:	f9 1f       	adc	r31, r25
 878:	80 81       	ld	r24, Z
 87a:	0e 94 2e 03 	call	0x65c	; 0x65c <UART_Write>
				break;
 87e:	0a c0       	rjmp	.+20     	; 0x894 <__stack+0x35>
				case  SPI_Protocol :
				_SPISend(g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count]);
 880:	20 91 82 00 	lds	r18, 0x0082
 884:	30 91 83 00 	lds	r19, 0x0083
 888:	f9 01       	movw	r30, r18
 88a:	e8 0f       	add	r30, r24
 88c:	f9 1f       	adc	r31, r25
 88e:	80 81       	ld	r24, Z
 890:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_SPISend>
				//_SPITrancevier(& (g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count]));
				break;
			}
			g_BCM_EXcfg.FSM_State = SendingByte_State ;
 894:	82 e0       	ldi	r24, 0x02	; 2
 896:	80 93 80 00 	sts	0x0080, r24
 89a:	08 95       	ret

			}else if (g_BCM_EXcfg.Count == g_BCM_EXcfg.Buf_Len){
 89c:	82 17       	cp	r24, r18
 89e:	93 07       	cpc	r25, r19
 8a0:	a1 f4       	brne	.+40     	; 0x8ca <__stack+0x6b>
			
			switch(g_BCM_EXcfg.Protocol){
 8a2:	80 91 7e 00 	lds	r24, 0x007E
 8a6:	88 23       	and	r24, r24
 8a8:	19 f0       	breq	.+6      	; 0x8b0 <__stack+0x51>
 8aa:	81 30       	cpi	r24, 0x01	; 1
 8ac:	31 f0       	breq	.+12     	; 0x8ba <__stack+0x5b>
 8ae:	09 c0       	rjmp	.+18     	; 0x8c2 <__stack+0x63>
				g_BCM_EXcfg.CheckSum+=g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-1];
				case UART_Protocol :
				UART_Write(g_BCM_EXcfg.CheckSum);
 8b0:	80 91 81 00 	lds	r24, 0x0081
 8b4:	0e 94 2e 03 	call	0x65c	; 0x65c <UART_Write>
				break;
 8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <__stack+0x63>
				case  SPI_Protocol :
				_SPISend(g_BCM_EXcfg.CheckSum);
 8ba:	80 91 81 00 	lds	r24, 0x0081
 8be:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_SPISend>
				//_SPITrancevier(& (g_BCM_EXcfg.CheckSum));
				break;
			}
			g_BCM_EXcfg.FSM_State = SendingByte_State ;
 8c2:	82 e0       	ldi	r24, 0x02	; 2
 8c4:	80 93 80 00 	sts	0x0080, r24
 8c8:	08 95       	ret
			
			}else{
			g_BCM_EXcfg.FSM_State = IDLE_State ;
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	80 93 80 00 	sts	0x0080, r24
 8d0:	08 95       	ret

000008d2 <BCM_Init>:
}
/*------------------------------------*/

/* BCM Initialization Routine */
ERROR_STATUS BCM_Init(BCM_cfg_s* a_BCM)
{
 8d2:	cf 93       	push	r28
 8d4:	df 93       	push	r29
 8d6:	cd b7       	in	r28, 0x3d	; 61
 8d8:	de b7       	in	r29, 0x3e	; 62
 8da:	60 97       	sbiw	r28, 0x10	; 16
 8dc:	0f b6       	in	r0, 0x3f	; 63
 8de:	f8 94       	cli
 8e0:	de bf       	out	0x3e, r29	; 62
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	cd bf       	out	0x3d, r28	; 61
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	UART_cfg  a_BCM_UART;
	SPI_cfg_s a_BCM_SPI; 
	
	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_BCM != NULL)
 8e6:	00 97       	sbiw	r24, 0x00	; 0
 8e8:	09 f4       	brne	.+2      	; 0x8ec <BCM_Init+0x1a>
 8ea:	69 c0       	rjmp	.+210    	; 0x9be <BCM_Init+0xec>
 8ec:	dc 01       	movw	r26, r24
	{
		/*--------[ Add The BCM CFG To The Working List ]--------*/
		g_BCM_EXcfg.BCM_CH_ID = a_BCM->BCM_CH_ID;
 8ee:	11 96       	adiw	r26, 0x01	; 1
 8f0:	8c 91       	ld	r24, X
 8f2:	11 97       	sbiw	r26, 0x01	; 1
 8f4:	ec e7       	ldi	r30, 0x7C	; 124
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	81 83       	std	Z+1, r24	; 0x01
		g_BCM_EXcfg.Mode      = a_BCM->Mode;
 8fa:	9c 91       	ld	r25, X
 8fc:	90 83       	st	Z, r25
		g_BCM_EXcfg.Protocol  = a_BCM->Protocol;
 8fe:	12 96       	adiw	r26, 0x02	; 2
 900:	8c 91       	ld	r24, X
 902:	82 83       	std	Z+2, r24	; 0x02
		g_BCM_EXcfg.FSM_State = IDLE_State;
 904:	21 e0       	ldi	r18, 0x01	; 1
 906:	24 83       	std	Z+4, r18	; 0x04
		g_BCM_EXcfg.Count     = ZERO;
 908:	15 86       	std	Z+13, r1	; 0x0d
 90a:	14 86       	std	Z+12, r1	; 0x0c
		g_BCM_EXcfg.CheckSum  = ZERO;
 90c:	15 82       	std	Z+5, r1	; 0x05
		g_BCM_EXcfg.Buf_Len   = ZERO;
 90e:	11 86       	std	Z+9, r1	; 0x09
 910:	10 86       	std	Z+8, r1	; 0x08
		g_BCM_EXcfg.MSG_Len   = ZERO;
 912:	13 86       	std	Z+11, r1	; 0x0b
 914:	12 86       	std	Z+10, r1	; 0x0a
		
		/*--------[ Check The BCM HW Communication Protocol ]--------*/
		switch(g_BCM_EXcfg.Protocol)
 916:	88 23       	and	r24, r24
 918:	19 f0       	breq	.+6      	; 0x920 <BCM_Init+0x4e>
 91a:	81 30       	cpi	r24, 0x01	; 1
 91c:	59 f1       	breq	.+86     	; 0x974 <BCM_Init+0xa2>
 91e:	51 c0       	rjmp	.+162    	; 0x9c2 <BCM_Init+0xf0>
		{
			/*----------------------[ UART CASE START ]---------------------*/
			case UART_Protocol:
			{
				a_BCM_UART.baudrate   = BCM_UART_BaudRate;
 920:	40 e8       	ldi	r20, 0x80	; 128
 922:	55 e2       	ldi	r21, 0x25	; 37
 924:	60 e0       	ldi	r22, 0x00	; 0
 926:	70 e0       	ldi	r23, 0x00	; 0
 928:	48 87       	std	Y+8, r20	; 0x08
 92a:	59 87       	std	Y+9, r21	; 0x09
 92c:	6a 87       	std	Y+10, r22	; 0x0a
 92e:	7b 87       	std	Y+11, r23	; 0x0b
				a_BCM_UART.dataBits   = UART_Bits_8;
 930:	86 e0       	ldi	r24, 0x06	; 6
 932:	8a 83       	std	Y+2, r24	; 0x02
				a_BCM_UART.stopBits   = StopBits_1;
 934:	1d 82       	std	Y+5, r1	; 0x05
				a_BCM_UART.parity     = No_Parity;
 936:	1b 82       	std	Y+3, r1	; 0x03
				a_BCM_UART.sampleEdge = RisingEdg;
 938:	1e 82       	std	Y+6, r1	; 0x06
				a_BCM_UART.uartSync   = UART_Async;
 93a:	1c 82       	std	Y+4, r1	; 0x04
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
 93c:	99 23       	and	r25, r25
 93e:	19 f0       	breq	.+6      	; 0x946 <BCM_Init+0x74>
 940:	91 30       	cpi	r25, 0x01	; 1
 942:	51 f0       	breq	.+20     	; 0x958 <BCM_Init+0x86>
 944:	11 c0       	rjmp	.+34     	; 0x968 <BCM_Init+0x96>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_UART.mode = UART_TX;
 946:	88 e0       	ldi	r24, 0x08	; 8
 948:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnTx;
 94a:	80 e4       	ldi	r24, 0x40	; 64
 94c:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						UART_SetTX(BCM_Tx_ISR_cbf);
 94e:	8e e8       	ldi	r24, 0x8E	; 142
 950:	93 e0       	ldi	r25, 0x03	; 3
 952:	0e 94 32 03 	call	0x664	; 0x664 <UART_SetTX>
						break;
 956:	08 c0       	rjmp	.+16     	; 0x968 <BCM_Init+0x96>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_UART.mode = UART_RX;
 958:	80 e1       	ldi	r24, 0x10	; 16
 95a:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnRx;
 95c:	80 e8       	ldi	r24, 0x80	; 128
 95e:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						UART_SetRX(BCM_Rx_ISR_cbf);
 960:	8c e9       	ldi	r24, 0x9C	; 156
 962:	93 e0       	ldi	r25, 0x03	; 3
 964:	0e 94 37 03 	call	0x66e	; 0x66e <UART_SetRX>
					}
					default:
						break;
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
 968:	ce 01       	movw	r24, r28
 96a:	01 96       	adiw	r24, 0x01	; 1
 96c:	0e 94 c2 02 	call	0x584	; 0x584 <UART_Init>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 970:	8c e3       	ldi	r24, 0x3C	; 60
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
				
				errorStatus = BCM_ERROR + E_OK;
				break;
 972:	2a c0       	rjmp	.+84     	; 0x9c8 <BCM_Init+0xf6>
			/*----------------------[ UART CASE END ]---------------------*/
			/*------------------------------------------------------------*/
			/*----------------------[ SPI CASE START ]--------------------*/
			case SPI_Protocol:
			{
				a_BCM_SPI.clockSPI = Fosc128;
 974:	83 e0       	ldi	r24, 0x03	; 3
 976:	8c 87       	std	Y+12, r24	; 0x0c
				a_BCM_SPI.dataorder = MSB;
 978:	1e 86       	std	Y+14, r1	; 0x0e
				a_BCM_SPI.phasePolarityMode = mode0;
 97a:	1d 86       	std	Y+13, r1	; 0x0d
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
 97c:	99 23       	and	r25, r25
 97e:	19 f0       	breq	.+6      	; 0x986 <BCM_Init+0xb4>
 980:	91 30       	cpi	r25, 0x01	; 1
 982:	79 f0       	breq	.+30     	; 0x9a2 <BCM_Init+0xd0>
 984:	20 c0       	rjmp	.+64     	; 0x9c6 <BCM_Init+0xf4>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_SPI.ptr_call_back = BCM_Tx_ISR_cbf;
 986:	8e e8       	ldi	r24, 0x8E	; 142
 988:	93 e0       	ldi	r25, 0x03	; 3
 98a:	98 8b       	std	Y+16, r25	; 0x10
 98c:	8f 87       	std	Y+15, r24	; 0x0f
						_SPIInitMaster(&a_BCM_SPI);
 98e:	ce 01       	movw	r24, r28
 990:	0c 96       	adiw	r24, 0x0c	; 12
 992:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_SPIInitMaster>
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Tx_ISR_cbf);
 996:	8e e8       	ldi	r24, 0x8E	; 142
 998:	93 e0       	ldi	r25, 0x03	; 3
 99a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SPI_SetCBF>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 99e:	8c e3       	ldi	r24, 0x3C	; 60
					{
						a_BCM_SPI.ptr_call_back = BCM_Tx_ISR_cbf;
						_SPIInitMaster(&a_BCM_SPI);
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Tx_ISR_cbf);
						break;
 9a0:	13 c0       	rjmp	.+38     	; 0x9c8 <BCM_Init+0xf6>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_SPI.ptr_call_back = BCM_Rx_ISR_cbf;
 9a2:	8c e9       	ldi	r24, 0x9C	; 156
 9a4:	93 e0       	ldi	r25, 0x03	; 3
 9a6:	98 8b       	std	Y+16, r25	; 0x10
 9a8:	8f 87       	std	Y+15, r24	; 0x0f
						_SPIInitSlave(&a_BCM_SPI);
 9aa:	ce 01       	movw	r24, r28
 9ac:	0c 96       	adiw	r24, 0x0c	; 12
 9ae:	0e 94 1c 01 	call	0x238	; 0x238 <_SPIInitSlave>
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Rx_ISR_cbf);
 9b2:	8c e9       	ldi	r24, 0x9C	; 156
 9b4:	93 e0       	ldi	r25, 0x03	; 3
 9b6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SPI_SetCBF>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 9ba:	8c e3       	ldi	r24, 0x3C	; 60
					{
						a_BCM_SPI.ptr_call_back = BCM_Rx_ISR_cbf;
						_SPIInitSlave(&a_BCM_SPI);
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Rx_ISR_cbf);
						break;
 9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <BCM_Init+0xf6>
	}
	/*-------------[ In Case Of BCM's Null Pointer ]-------------*/
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
 9be:	8d e3       	ldi	r24, 0x3D	; 61
 9c0:	03 c0       	rjmp	.+6      	; 0x9c8 <BCM_Init+0xf6>
				break;
			}
			/*----------------------[ SPI CASE END ]---------------------*/
			default:
				errorStatus = BCM_ERROR + INVALID_IN;
				return errorStatus;
 9c2:	80 e4       	ldi	r24, 0x40	; 64
 9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <BCM_Init+0xf6>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 9c6:	8c e3       	ldi	r24, 0x3C	; 60
}
 9c8:	60 96       	adiw	r28, 0x10	; 16
 9ca:	0f b6       	in	r0, 0x3f	; 63
 9cc:	f8 94       	cli
 9ce:	de bf       	out	0x3e, r29	; 62
 9d0:	0f be       	out	0x3f, r0	; 63
 9d2:	cd bf       	out	0x3d, r28	; 61
 9d4:	df 91       	pop	r29
 9d6:	cf 91       	pop	r28
 9d8:	08 95       	ret

000009da <BCM_Send>:

ERROR_STATUS BCM_Send(uint8_t* Buffer, uint16_t Buf_Len, BCM_cfg_s* My_BCM, Notify_FunPtr Notify_Ptr ){
	
	/* lock the buffer so user can't chance on it  */
	
	g_BCM_EXcfg.Lock_State = Buffer_Locked ;
 9da:	ec e7       	ldi	r30, 0x7C	; 124
 9dc:	f0 e0       	ldi	r31, 0x00	; 0
 9de:	41 e0       	ldi	r20, 0x01	; 1
 9e0:	43 83       	std	Z+3, r20	; 0x03
	
	/*set the buffer address, length, and notification function*/
	
	g_BCM_EXcfg.Buffer = Buffer;
 9e2:	97 83       	std	Z+7, r25	; 0x07
 9e4:	86 83       	std	Z+6, r24	; 0x06
	g_BCM_EXcfg.Buf_Len = Buf_Len;
 9e6:	71 87       	std	Z+9, r23	; 0x09
 9e8:	60 87       	std	Z+8, r22	; 0x08
	g_BCM_EXcfg.BCM_notify_cbf = Notify_Ptr ;
 9ea:	37 87       	std	Z+15, r19	; 0x0f
 9ec:	26 87       	std	Z+14, r18	; 0x0e
	
	switch(g_BCM_EXcfg.Protocol){
 9ee:	22 81       	ldd	r18, Z+2	; 0x02
 9f0:	22 23       	and	r18, r18
 9f2:	19 f0       	breq	.+6      	; 0x9fa <BCM_Send+0x20>
 9f4:	21 30       	cpi	r18, 0x01	; 1
 9f6:	61 f0       	breq	.+24     	; 0xa10 <BCM_Send+0x36>
 9f8:	15 c0       	rjmp	.+42     	; 0xa24 <BCM_Send+0x4a>
		
		case UART_Protocol :
			UART_Write(g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count]);
 9fa:	20 91 88 00 	lds	r18, 0x0088
 9fe:	30 91 89 00 	lds	r19, 0x0089
 a02:	fc 01       	movw	r30, r24
 a04:	e2 0f       	add	r30, r18
 a06:	f3 1f       	adc	r31, r19
 a08:	80 81       	ld	r24, Z
 a0a:	0e 94 2e 03 	call	0x65c	; 0x65c <UART_Write>
		break;
 a0e:	0a c0       	rjmp	.+20     	; 0xa24 <BCM_Send+0x4a>
		case  SPI_Protocol :
			_SPISend(g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count]);
 a10:	20 91 88 00 	lds	r18, 0x0088
 a14:	30 91 89 00 	lds	r19, 0x0089
 a18:	fc 01       	movw	r30, r24
 a1a:	e2 0f       	add	r30, r18
 a1c:	f3 1f       	adc	r31, r19
 a1e:	80 81       	ld	r24, Z
 a20:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_SPISend>
			//_SPITrancevier(& (g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count]));
		break;
		
	}
	g_BCM_EXcfg.FSM_State = SendingByte_State ;	
 a24:	82 e0       	ldi	r24, 0x02	; 2
 a26:	80 93 80 00 	sts	0x0080, r24
	return 0 ;
}
 a2a:	80 e0       	ldi	r24, 0x00	; 0
 a2c:	08 95       	ret

00000a2e <__udivmodsi4>:
 a2e:	a1 e2       	ldi	r26, 0x21	; 33
 a30:	1a 2e       	mov	r1, r26
 a32:	aa 1b       	sub	r26, r26
 a34:	bb 1b       	sub	r27, r27
 a36:	fd 01       	movw	r30, r26
 a38:	0d c0       	rjmp	.+26     	; 0xa54 <__udivmodsi4_ep>

00000a3a <__udivmodsi4_loop>:
 a3a:	aa 1f       	adc	r26, r26
 a3c:	bb 1f       	adc	r27, r27
 a3e:	ee 1f       	adc	r30, r30
 a40:	ff 1f       	adc	r31, r31
 a42:	a2 17       	cp	r26, r18
 a44:	b3 07       	cpc	r27, r19
 a46:	e4 07       	cpc	r30, r20
 a48:	f5 07       	cpc	r31, r21
 a4a:	20 f0       	brcs	.+8      	; 0xa54 <__udivmodsi4_ep>
 a4c:	a2 1b       	sub	r26, r18
 a4e:	b3 0b       	sbc	r27, r19
 a50:	e4 0b       	sbc	r30, r20
 a52:	f5 0b       	sbc	r31, r21

00000a54 <__udivmodsi4_ep>:
 a54:	66 1f       	adc	r22, r22
 a56:	77 1f       	adc	r23, r23
 a58:	88 1f       	adc	r24, r24
 a5a:	99 1f       	adc	r25, r25
 a5c:	1a 94       	dec	r1
 a5e:	69 f7       	brne	.-38     	; 0xa3a <__udivmodsi4_loop>
 a60:	60 95       	com	r22
 a62:	70 95       	com	r23
 a64:	80 95       	com	r24
 a66:	90 95       	com	r25
 a68:	9b 01       	movw	r18, r22
 a6a:	ac 01       	movw	r20, r24
 a6c:	bd 01       	movw	r22, r26
 a6e:	cf 01       	movw	r24, r30
 a70:	08 95       	ret

00000a72 <_exit>:
 a72:	f8 94       	cli

00000a74 <__stop_program>:
 a74:	ff cf       	rjmp	.-2      	; 0xa74 <__stop_program>
