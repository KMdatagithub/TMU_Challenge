
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000afa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000afa  00000b8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000099  00800062  00800062  00000b90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002445  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dcc  00000000  00000000  00003279  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000120b  00000000  00000000  00004045  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000724  00000000  00000000  00005250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b51  00000000  00000000  00005974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bdb  00000000  00000000  000064c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_4>
  14:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_7>
  20:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_8>
  24:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_9>
  28:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__vector_10>
  2c:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_11>
  30:	0c 94 91 01 	jmp	0x322	; 0x322 <__vector_12>
  34:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3f       	cpi	r26, 0xFB	; 251
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  8a:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <txnotify>:
	UART_Init(&UART1);
	
	/*-------------[ SUPER LOOP ]-------------*/
	while (1)
	{
		BCM_Rx_Dispatcher();
  92:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  96:	8c bd       	out	0x2c, r24	; 44
  98:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
  9c:	82 e9       	ldi	r24, 0x92	; 146
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 39 05 	call	0xa72	; 0xa72 <BCM_DeInit>
  a4:	e2 e9       	ldi	r30, 0x92	; 146
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	81 83       	std	Z+1, r24	; 0x01
  ac:	10 82       	st	Z, r1
  ae:	82 83       	std	Z+2, r24	; 0x02
  b0:	cf 01       	movw	r24, r30
  b2:	0e 94 b5 04 	call	0x96a	; 0x96a <BCM_Init>
  b6:	08 95       	ret

000000b8 <UART_ISR_RXcbf>:
  b8:	cf 93       	push	r28
  ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  be:	82 33       	cpi	r24, 0x32	; 50
  c0:	18 f5       	brcc	.+70     	; 0x108 <UART_ISR_RXcbf+0x50>
  c2:	c0 91 62 00 	lds	r28, 0x0062	; 0x800062 <__data_end>
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	8c 0f       	add	r24, r28
  ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
  ce:	0e 94 46 03 	call	0x68c	; 0x68c <UART_Read>
  d2:	ec 2f       	mov	r30, r28
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	e9 53       	subi	r30, 0x39	; 57
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	80 83       	st	Z, r24
  dc:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	ea 53       	subi	r30, 0x3A	; 58
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	80 81       	ld	r24, Z
  e8:	8d 30       	cpi	r24, 0x0D	; 13
  ea:	d9 f4       	brne	.+54     	; 0x122 <UART_ISR_RXcbf+0x6a>
  ec:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	29 e4       	ldi	r18, 0x49	; 73
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	42 e9       	ldi	r20, 0x92	; 146
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	87 ec       	ldi	r24, 0xC7	; 199
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 3d 05 	call	0xa7a	; 0xa7a <BCM_Send>
 102:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 106:	0d c0       	rjmp	.+26     	; 0x122 <UART_ISR_RXcbf+0x6a>
 108:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	29 e4       	ldi	r18, 0x49	; 73
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	42 e9       	ldi	r20, 0x92	; 146
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	87 ec       	ldi	r24, 0xC7	; 199
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <BCM_Send>
 11e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <ECU1_Application>:
 126:	e2 e9       	ldi	r30, 0x92	; 146
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	81 83       	std	Z+1, r24	; 0x01
 12e:	10 82       	st	Z, r1
 130:	82 83       	std	Z+2, r24	; 0x02
 132:	cf 01       	movw	r24, r30
 134:	0e 94 b5 04 	call	0x96a	; 0x96a <BCM_Init>
 138:	e7 e8       	ldi	r30, 0x87	; 135
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 e8       	ldi	r24, 0x80	; 128
 13e:	95 e2       	ldi	r25, 0x25	; 37
 140:	a0 e0       	ldi	r26, 0x00	; 0
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	87 83       	std	Z+7, r24	; 0x07
 146:	90 87       	std	Z+8, r25	; 0x08
 148:	a1 87       	std	Z+9, r26	; 0x09
 14a:	b2 87       	std	Z+10, r27	; 0x0a
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	81 83       	std	Z+1, r24	; 0x01
 150:	14 82       	std	Z+4, r1	; 0x04
 152:	12 82       	std	Z+2, r1	; 0x02
 154:	15 82       	std	Z+5, r1	; 0x05
 156:	13 82       	std	Z+3, r1	; 0x03
 158:	80 e1       	ldi	r24, 0x10	; 16
 15a:	80 83       	st	Z, r24
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	86 83       	std	Z+6, r24	; 0x06
 160:	8c e5       	ldi	r24, 0x5C	; 92
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 51 03 	call	0x6a2	; 0x6a2 <UART_SetRX>
 168:	87 e8       	ldi	r24, 0x87	; 135
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <UART_Init>
 170:	0e 94 42 04 	call	0x884	; 0x884 <BCM_Tx_Dispatcher>
 174:	fd cf       	rjmp	.-6      	; 0x170 <ECU1_Application+0x4a>

00000176 <main>:
}

int main(void)
{
	//ECU2_Application();
	ECU1_Application();
 176:	0e 94 93 00 	call	0x126	; 0x126 <ECU1_Application>

0000017a <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
 17a:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
 17c:	89 2b       	or	r24, r25
 17e:	c9 f1       	breq	.+114    	; 0x1f2 <DIO_init+0x78>
	{
		switch(DIO_info->GPIO)
 180:	80 81       	ld	r24, Z
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	91 f0       	breq	.+36     	; 0x1aa <DIO_init+0x30>
 186:	28 f0       	brcs	.+10     	; 0x192 <DIO_init+0x18>
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	d9 f0       	breq	.+54     	; 0x1c2 <DIO_init+0x48>
 18c:	83 30       	cpi	r24, 0x03	; 3
 18e:	29 f1       	breq	.+74     	; 0x1da <DIO_init+0x60>
 190:	32 c0       	rjmp	.+100    	; 0x1f6 <DIO_init+0x7c>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
 192:	21 81       	ldd	r18, Z+1	; 0x01
 194:	9a b3       	in	r25, 0x1a	; 26
 196:	82 81       	ldd	r24, Z+2	; 0x02
 198:	32 2f       	mov	r19, r18
 19a:	38 23       	and	r19, r24
 19c:	82 2f       	mov	r24, r18
 19e:	80 95       	com	r24
 1a0:	89 23       	and	r24, r25
 1a2:	83 2b       	or	r24, r19
 1a4:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1a8:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
 1aa:	21 81       	ldd	r18, Z+1	; 0x01
 1ac:	97 b3       	in	r25, 0x17	; 23
 1ae:	82 81       	ldd	r24, Z+2	; 0x02
 1b0:	32 2f       	mov	r19, r18
 1b2:	38 23       	and	r19, r24
 1b4:	82 2f       	mov	r24, r18
 1b6:	80 95       	com	r24
 1b8:	89 23       	and	r24, r25
 1ba:	83 2b       	or	r24, r19
 1bc:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
 1be:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1c0:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
 1c2:	21 81       	ldd	r18, Z+1	; 0x01
 1c4:	94 b3       	in	r25, 0x14	; 20
 1c6:	82 81       	ldd	r24, Z+2	; 0x02
 1c8:	32 2f       	mov	r19, r18
 1ca:	38 23       	and	r19, r24
 1cc:	82 2f       	mov	r24, r18
 1ce:	80 95       	com	r24
 1d0:	89 23       	and	r24, r25
 1d2:	83 2b       	or	r24, r19
 1d4:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1d8:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
 1da:	21 81       	ldd	r18, Z+1	; 0x01
 1dc:	91 b3       	in	r25, 0x11	; 17
 1de:	82 81       	ldd	r24, Z+2	; 0x02
 1e0:	32 2f       	mov	r19, r18
 1e2:	38 23       	and	r19, r24
 1e4:	82 2f       	mov	r24, r18
 1e6:	80 95       	com	r24
 1e8:	89 23       	and	r24, r25
 1ea:	83 2b       	or	r24, r19
 1ec:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1f0:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 1f8:	08 95       	ret

000001fa <_SPIInitMaster>:
	SPDR = *data;
	while (!g_u8_RxFlag);
	*data = SPDR;	
	
	g_u8_RxFlag = FALSE ;
}
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	00 d0       	rcall	.+0      	; 0x200 <_SPIInitMaster+0x6>
 200:	00 d0       	rcall	.+0      	; 0x202 <_SPIInitMaster+0x8>
 202:	00 d0       	rcall	.+0      	; 0x204 <_SPIInitMaster+0xa>
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	fc 01       	movw	r30, r24
 20a:	1e b8       	out	0x0e, r1	; 14
 20c:	1d b8       	out	0x0d, r1	; 13
 20e:	6c 9a       	sbi	0x0d, 4	; 13
 210:	9d b1       	in	r25, 0x0d	; 13
 212:	80 81       	ld	r24, Z
 214:	89 2b       	or	r24, r25
 216:	8d b9       	out	0x0d, r24	; 13
 218:	9d b1       	in	r25, 0x0d	; 13
 21a:	82 81       	ldd	r24, Z+2	; 0x02
 21c:	89 2b       	or	r24, r25
 21e:	8d b9       	out	0x0d, r24	; 13
 220:	9d b1       	in	r25, 0x0d	; 13
 222:	81 81       	ldd	r24, Z+1	; 0x01
 224:	89 2b       	or	r24, r25
 226:	8d b9       	out	0x0d, r24	; 13
 228:	6f 9a       	sbi	0x0d, 7	; 13
 22a:	83 81       	ldd	r24, Z+3	; 0x03
 22c:	94 81       	ldd	r25, Z+4	; 0x04
 22e:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <PTR_CALL_BACK+0x1>
 232:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <PTR_CALL_BACK>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	89 83       	std	Y+1, r24	; 0x01
 23a:	90 e4       	ldi	r25, 0x40	; 64
 23c:	9a 83       	std	Y+2, r25	; 0x02
 23e:	1b 82       	std	Y+3, r1	; 0x03
 240:	8c 83       	std	Y+4, r24	; 0x04
 242:	80 eb       	ldi	r24, 0xB0	; 176
 244:	8d 83       	std	Y+5, r24	; 0x05
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	8e 83       	std	Y+6, r24	; 0x06
 24a:	ce 01       	movw	r24, r28
 24c:	04 96       	adiw	r24, 0x04	; 4
 24e:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_init>
 252:	ce 01       	movw	r24, r28
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_init>
 25a:	78 94       	sei
 25c:	6e 9a       	sbi	0x0d, 6	; 13
 25e:	26 96       	adiw	r28, 0x06	; 6
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <_SPIInitSlave>:
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	00 d0       	rcall	.+0      	; 0x276 <_SPIInitSlave+0x6>
 276:	00 d0       	rcall	.+0      	; 0x278 <_SPIInitSlave+0x8>
 278:	00 d0       	rcall	.+0      	; 0x27a <_SPIInitSlave+0xa>
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	fc 01       	movw	r30, r24
 280:	1e b8       	out	0x0e, r1	; 14
 282:	1d b8       	out	0x0d, r1	; 13
 284:	8d b1       	in	r24, 0x0d	; 13
 286:	8d b9       	out	0x0d, r24	; 13
 288:	9d b1       	in	r25, 0x0d	; 13
 28a:	82 81       	ldd	r24, Z+2	; 0x02
 28c:	89 2b       	or	r24, r25
 28e:	8d b9       	out	0x0d, r24	; 13
 290:	9d b1       	in	r25, 0x0d	; 13
 292:	80 81       	ld	r24, Z
 294:	89 2b       	or	r24, r25
 296:	8d b9       	out	0x0d, r24	; 13
 298:	9d b1       	in	r25, 0x0d	; 13
 29a:	81 81       	ldd	r24, Z+1	; 0x01
 29c:	89 2b       	or	r24, r25
 29e:	8d b9       	out	0x0d, r24	; 13
 2a0:	6f 9a       	sbi	0x0d, 7	; 13
 2a2:	83 81       	ldd	r24, Z+3	; 0x03
 2a4:	94 81       	ldd	r25, Z+4	; 0x04
 2a6:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <PTR_CALL_BACK+0x1>
 2aa:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <PTR_CALL_BACK>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	89 83       	std	Y+1, r24	; 0x01
 2b2:	90 eb       	ldi	r25, 0xB0	; 176
 2b4:	9a 83       	std	Y+2, r25	; 0x02
 2b6:	1b 82       	std	Y+3, r1	; 0x03
 2b8:	8c 83       	std	Y+4, r24	; 0x04
 2ba:	80 e4       	ldi	r24, 0x40	; 64
 2bc:	8d 83       	std	Y+5, r24	; 0x05
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	8e 83       	std	Y+6, r24	; 0x06
 2c2:	ce 01       	movw	r24, r28
 2c4:	04 96       	adiw	r24, 0x04	; 4
 2c6:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_init>
 2ca:	ce 01       	movw	r24, r28
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_init>
 2d2:	78 94       	sei
 2d4:	6e 9a       	sbi	0x0d, 6	; 13
 2d6:	26 96       	adiw	r28, 0x06	; 6
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	f8 94       	cli
 2dc:	de bf       	out	0x3e, r29	; 62
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	cd bf       	out	0x3d, r28	; 61
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <_SPISend>:

extern ERROR_STATUS _SPISend(uint8_t data)
{
	uint8_t state = E_NOK;	
	if(g_u8_RxFlag == TRUE)
 2e8:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ec:	91 30       	cpi	r25, 0x01	; 1
 2ee:	29 f4       	brne	.+10     	; 0x2fa <_SPISend+0x12>
	{
		SPDR = data;
 2f0:	8f b9       	out	0x0f, r24	; 15
		g_u8_RxFlag = FALSE;	
 2f2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		state = E_OK;
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	08 95       	ret
	g_u8_RxFlag = FALSE ;
}

extern ERROR_STATUS _SPISend(uint8_t data)
{
	uint8_t state = E_NOK;	
 2fa:	81 e0       	ldi	r24, 0x01	; 1
		SPDR = data;
		g_u8_RxFlag = FALSE;	
		state = E_OK;
	}
	return state;
}
 2fc:	08 95       	ret

000002fe <_SPIRead>:

extern ERROR_STATUS _SPIRead(uint8_t* data)
{
 2fe:	fc 01       	movw	r30, r24
	uint8_t state = E_NOK;
	if(g_u8_RxFlag == TRUE)
 300:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 304:	91 30       	cpi	r25, 0x01	; 1
 306:	31 f4       	brne	.+12     	; 0x314 <_SPIRead+0x16>
	{
		*data = SPDR;
 308:	8f b1       	in	r24, 0x0f	; 15
 30a:	80 83       	st	Z, r24
		g_u8_RxFlag = FALSE;
 30c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		state = E_OK;
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	08 95       	ret
	return state;
}

extern ERROR_STATUS _SPIRead(uint8_t* data)
{
	uint8_t state = E_NOK;
 314:	81 e0       	ldi	r24, 0x01	; 1
		*data = SPDR;
		g_u8_RxFlag = FALSE;
		state = E_OK;
	}
	return state;
}
 316:	08 95       	ret

00000318 <SPI_SetCBF>:


void SPI_SetCBF(FunPtr isr_ptr)
{
	PTR_CALL_BACK = isr_ptr;
 318:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <PTR_CALL_BACK+0x1>
 31c:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <PTR_CALL_BACK>
 320:	08 95       	ret

00000322 <__vector_12>:
}

ISR(SPI_STC_vect)
{
 322:	1f 92       	push	r1
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	2f 93       	push	r18
 32e:	3f 93       	push	r19
 330:	4f 93       	push	r20
 332:	5f 93       	push	r21
 334:	6f 93       	push	r22
 336:	7f 93       	push	r23
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	af 93       	push	r26
 33e:	bf 93       	push	r27
 340:	ef 93       	push	r30
 342:	ff 93       	push	r31
	g_u8_RxFlag = TRUE;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	PTR_CALL_BACK();
 34a:	e0 91 f9 00 	lds	r30, 0x00F9	; 0x8000f9 <PTR_CALL_BACK>
 34e:	f0 91 fa 00 	lds	r31, 0x00FA	; 0x8000fa <PTR_CALL_BACK+0x1>
 352:	09 95       	icall
}
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	7f 91       	pop	r23
 362:	6f 91       	pop	r22
 364:	5f 91       	pop	r21
 366:	4f 91       	pop	r20
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	2f 93       	push	r18
 382:	3f 93       	push	r19
 384:	4f 93       	push	r20
 386:	5f 93       	push	r21
 388:	6f 93       	push	r22
 38a:	7f 93       	push	r23
 38c:	8f 93       	push	r24
 38e:	9f 93       	push	r25
 390:	af 93       	push	r26
 392:	bf 93       	push	r27
 394:	ef 93       	push	r30
 396:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
 398:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <Ptr_Timer0_OV>
 39c:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <Ptr_Timer0_OV+0x1>
 3a0:	30 97       	sbiw	r30, 0x00	; 0
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
 3a4:	09 95       	icall
	}
}
 3a6:	ff 91       	pop	r31
 3a8:	ef 91       	pop	r30
 3aa:	bf 91       	pop	r27
 3ac:	af 91       	pop	r26
 3ae:	9f 91       	pop	r25
 3b0:	8f 91       	pop	r24
 3b2:	7f 91       	pop	r23
 3b4:	6f 91       	pop	r22
 3b6:	5f 91       	pop	r21
 3b8:	4f 91       	pop	r20
 3ba:	3f 91       	pop	r19
 3bc:	2f 91       	pop	r18
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 3c8:	1f 92       	push	r1
 3ca:	0f 92       	push	r0
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	2f 93       	push	r18
 3d4:	3f 93       	push	r19
 3d6:	4f 93       	push	r20
 3d8:	5f 93       	push	r21
 3da:	6f 93       	push	r22
 3dc:	7f 93       	push	r23
 3de:	8f 93       	push	r24
 3e0:	9f 93       	push	r25
 3e2:	af 93       	push	r26
 3e4:	bf 93       	push	r27
 3e6:	ef 93       	push	r30
 3e8:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
 3ea:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <Ptr_Timer0_CM>
 3ee:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <Ptr_Timer0_CM+0x1>
 3f2:	30 97       	sbiw	r30, 0x00	; 0
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
 3f6:	09 95       	icall
	}
}
 3f8:	ff 91       	pop	r31
 3fa:	ef 91       	pop	r30
 3fc:	bf 91       	pop	r27
 3fe:	af 91       	pop	r26
 400:	9f 91       	pop	r25
 402:	8f 91       	pop	r24
 404:	7f 91       	pop	r23
 406:	6f 91       	pop	r22
 408:	5f 91       	pop	r21
 40a:	4f 91       	pop	r20
 40c:	3f 91       	pop	r19
 40e:	2f 91       	pop	r18
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	2f 93       	push	r18
 426:	3f 93       	push	r19
 428:	4f 93       	push	r20
 42a:	5f 93       	push	r21
 42c:	6f 93       	push	r22
 42e:	7f 93       	push	r23
 430:	8f 93       	push	r24
 432:	9f 93       	push	r25
 434:	af 93       	push	r26
 436:	bf 93       	push	r27
 438:	ef 93       	push	r30
 43a:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
 43c:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <Ptr_Timer2_OV>
 440:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <Ptr_Timer2_OV+0x1>
 444:	30 97       	sbiw	r30, 0x00	; 0
 446:	09 f0       	breq	.+2      	; 0x44a <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
 448:	09 95       	icall
	}
}
 44a:	ff 91       	pop	r31
 44c:	ef 91       	pop	r30
 44e:	bf 91       	pop	r27
 450:	af 91       	pop	r26
 452:	9f 91       	pop	r25
 454:	8f 91       	pop	r24
 456:	7f 91       	pop	r23
 458:	6f 91       	pop	r22
 45a:	5f 91       	pop	r21
 45c:	4f 91       	pop	r20
 45e:	3f 91       	pop	r19
 460:	2f 91       	pop	r18
 462:	0f 90       	pop	r0
 464:	0f be       	out	0x3f, r0	; 63
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 46c:	1f 92       	push	r1
 46e:	0f 92       	push	r0
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	0f 92       	push	r0
 474:	11 24       	eor	r1, r1
 476:	2f 93       	push	r18
 478:	3f 93       	push	r19
 47a:	4f 93       	push	r20
 47c:	5f 93       	push	r21
 47e:	6f 93       	push	r22
 480:	7f 93       	push	r23
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
 48e:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <Ptr_Timer2_CM>
 492:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <Ptr_Timer2_CM+0x1>
 496:	30 97       	sbiw	r30, 0x00	; 0
 498:	09 f0       	breq	.+2      	; 0x49c <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
 49a:	09 95       	icall
	}
}
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	bf 91       	pop	r27
 4a2:	af 91       	pop	r26
 4a4:	9f 91       	pop	r25
 4a6:	8f 91       	pop	r24
 4a8:	7f 91       	pop	r23
 4aa:	6f 91       	pop	r22
 4ac:	5f 91       	pop	r21
 4ae:	4f 91       	pop	r20
 4b0:	3f 91       	pop	r19
 4b2:	2f 91       	pop	r18
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	2f 93       	push	r18
 4ca:	3f 93       	push	r19
 4cc:	4f 93       	push	r20
 4ce:	5f 93       	push	r21
 4d0:	6f 93       	push	r22
 4d2:	7f 93       	push	r23
 4d4:	8f 93       	push	r24
 4d6:	9f 93       	push	r25
 4d8:	af 93       	push	r26
 4da:	bf 93       	push	r27
 4dc:	ef 93       	push	r30
 4de:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
 4e0:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <Ptr_Timer1_OV>
 4e4:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <Ptr_Timer1_OV+0x1>
 4e8:	30 97       	sbiw	r30, 0x00	; 0
 4ea:	09 f0       	breq	.+2      	; 0x4ee <__vector_9+0x30>
	{
		Ptr_Timer1_OV();
 4ec:	09 95       	icall
	}
}
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	7f 91       	pop	r23
 4fc:	6f 91       	pop	r22
 4fe:	5f 91       	pop	r21
 500:	4f 91       	pop	r20
 502:	3f 91       	pop	r19
 504:	2f 91       	pop	r18
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	2f 93       	push	r18
 51c:	3f 93       	push	r19
 51e:	4f 93       	push	r20
 520:	5f 93       	push	r21
 522:	6f 93       	push	r22
 524:	7f 93       	push	r23
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
 52a:	af 93       	push	r26
 52c:	bf 93       	push	r27
 52e:	ef 93       	push	r30
 530:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 532:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <Ptr_Timer1_CM>
 536:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <Ptr_Timer1_CM+0x1>
 53a:	30 97       	sbiw	r30, 0x00	; 0
 53c:	09 f0       	breq	.+2      	; 0x540 <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
 53e:	09 95       	icall
	}	
}
 540:	ff 91       	pop	r31
 542:	ef 91       	pop	r30
 544:	bf 91       	pop	r27
 546:	af 91       	pop	r26
 548:	9f 91       	pop	r25
 54a:	8f 91       	pop	r24
 54c:	7f 91       	pop	r23
 54e:	6f 91       	pop	r22
 550:	5f 91       	pop	r21
 552:	4f 91       	pop	r20
 554:	3f 91       	pop	r19
 556:	2f 91       	pop	r18
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	2f 93       	push	r18
 56e:	3f 93       	push	r19
 570:	4f 93       	push	r20
 572:	5f 93       	push	r21
 574:	6f 93       	push	r22
 576:	7f 93       	push	r23
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	af 93       	push	r26
 57e:	bf 93       	push	r27
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 584:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <Ptr_Timer1_CM>
 588:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <Ptr_Timer1_CM+0x1>
 58c:	30 97       	sbiw	r30, 0x00	; 0
 58e:	09 f0       	breq	.+2      	; 0x592 <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 590:	09 95       	icall
	}
}
 592:	ff 91       	pop	r31
 594:	ef 91       	pop	r30
 596:	bf 91       	pop	r27
 598:	af 91       	pop	r26
 59a:	9f 91       	pop	r25
 59c:	8f 91       	pop	r24
 59e:	7f 91       	pop	r23
 5a0:	6f 91       	pop	r22
 5a2:	5f 91       	pop	r21
 5a4:	4f 91       	pop	r20
 5a6:	3f 91       	pop	r19
 5a8:	2f 91       	pop	r18
 5aa:	0f 90       	pop	r0
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	0f 90       	pop	r0
 5b0:	1f 90       	pop	r1
 5b2:	18 95       	reti

000005b4 <UART_Init>:
void UART_Write_String(uint8_t* str)
{
	uint16_t i=0;
	while(str[i] != '\0')
		UART_Write(str[i++]);
}
 5b4:	cf 92       	push	r12
 5b6:	df 92       	push	r13
 5b8:	ef 92       	push	r14
 5ba:	ff 92       	push	r15
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	ec 01       	movw	r28, r24
 5c2:	8f 81       	ldd	r24, Y+7	; 0x07
 5c4:	98 85       	ldd	r25, Y+8	; 0x08
 5c6:	a9 85       	ldd	r26, Y+9	; 0x09
 5c8:	ba 85       	ldd	r27, Y+10	; 0x0a
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	aa 1f       	adc	r26, r26
 5d0:	bb 1f       	adc	r27, r27
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	aa 1f       	adc	r26, r26
 5d8:	bb 1f       	adc	r27, r27
 5da:	9c 01       	movw	r18, r24
 5dc:	ad 01       	movw	r20, r26
 5de:	22 0f       	add	r18, r18
 5e0:	33 1f       	adc	r19, r19
 5e2:	44 1f       	adc	r20, r20
 5e4:	55 1f       	adc	r21, r21
 5e6:	22 0f       	add	r18, r18
 5e8:	33 1f       	adc	r19, r19
 5ea:	44 1f       	adc	r20, r20
 5ec:	55 1f       	adc	r21, r21
 5ee:	0f 2e       	mov	r0, r31
 5f0:	c1 2c       	mov	r12, r1
 5f2:	f4 e2       	ldi	r31, 0x24	; 36
 5f4:	df 2e       	mov	r13, r31
 5f6:	f4 ef       	ldi	r31, 0xF4	; 244
 5f8:	ef 2e       	mov	r14, r31
 5fa:	f1 2c       	mov	r15, r1
 5fc:	f0 2d       	mov	r31, r0
 5fe:	c7 01       	movw	r24, r14
 600:	b6 01       	movw	r22, r12
 602:	0e 94 59 05 	call	0xab2	; 0xab2 <__udivmodsi4>
 606:	21 50       	subi	r18, 0x01	; 1
 608:	29 b9       	out	0x09, r18	; 9
 60a:	8f 81       	ldd	r24, Y+7	; 0x07
 60c:	98 85       	ldd	r25, Y+8	; 0x08
 60e:	a9 85       	ldd	r26, Y+9	; 0x09
 610:	ba 85       	ldd	r27, Y+10	; 0x0a
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	aa 1f       	adc	r26, r26
 618:	bb 1f       	adc	r27, r27
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	aa 1f       	adc	r26, r26
 620:	bb 1f       	adc	r27, r27
 622:	9c 01       	movw	r18, r24
 624:	ad 01       	movw	r20, r26
 626:	22 0f       	add	r18, r18
 628:	33 1f       	adc	r19, r19
 62a:	44 1f       	adc	r20, r20
 62c:	55 1f       	adc	r21, r21
 62e:	22 0f       	add	r18, r18
 630:	33 1f       	adc	r19, r19
 632:	44 1f       	adc	r20, r20
 634:	55 1f       	adc	r21, r21
 636:	c7 01       	movw	r24, r14
 638:	b6 01       	movw	r22, r12
 63a:	0e 94 59 05 	call	0xab2	; 0xab2 <__udivmodsi4>
 63e:	da 01       	movw	r26, r20
 640:	c9 01       	movw	r24, r18
 642:	01 97       	sbiw	r24, 0x01	; 1
 644:	a1 09       	sbc	r26, r1
 646:	b1 09       	sbc	r27, r1
 648:	89 2f       	mov	r24, r25
 64a:	9a 2f       	mov	r25, r26
 64c:	ab 2f       	mov	r26, r27
 64e:	bb 27       	eor	r27, r27
 650:	80 bd       	out	0x20, r24	; 32
 652:	9a b1       	in	r25, 0x0a	; 10
 654:	88 81       	ld	r24, Y
 656:	89 2b       	or	r24, r25
 658:	9e 81       	ldd	r25, Y+6	; 0x06
 65a:	89 2b       	or	r24, r25
 65c:	8a b9       	out	0x0a, r24	; 10
 65e:	20 b5       	in	r18, 0x20	; 32
 660:	8b 81       	ldd	r24, Y+3	; 0x03
 662:	9d 81       	ldd	r25, Y+5	; 0x05
 664:	89 2b       	or	r24, r25
 666:	80 68       	ori	r24, 0x80	; 128
 668:	99 81       	ldd	r25, Y+1	; 0x01
 66a:	89 2b       	or	r24, r25
 66c:	9a 81       	ldd	r25, Y+2	; 0x02
 66e:	89 2b       	or	r24, r25
 670:	9c 81       	ldd	r25, Y+4	; 0x04
 672:	89 2b       	or	r24, r25
 674:	82 2b       	or	r24, r18
 676:	80 bd       	out	0x20, r24	; 32
 678:	8f b7       	in	r24, 0x3f	; 63
 67a:	80 68       	ori	r24, 0x80	; 128
 67c:	8f bf       	out	0x3f, r24	; 63
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	ff 90       	pop	r15
 684:	ef 90       	pop	r14
 686:	df 90       	pop	r13
 688:	cf 90       	pop	r12
 68a:	08 95       	ret

0000068c <UART_Read>:
 68c:	8c b1       	in	r24, 0x0c	; 12
 68e:	08 95       	ret

00000690 <UART_Write>:
 690:	5d 9b       	sbis	0x0b, 5	; 11
 692:	fe cf       	rjmp	.-4      	; 0x690 <UART_Write>
 694:	8c b9       	out	0x0c, r24	; 12
 696:	08 95       	ret

00000698 <UART_SetTX>:
/*-----------[ Timers Set CallBack Functions ]-----------*/
/*=======================================================*/

void UART_SetTX(FunPtr Ptr_ISR)
{
	Ptr_UART_TX = Ptr_ISR;
 698:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Ptr_UART_TX+0x1>
 69c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Ptr_UART_TX>
 6a0:	08 95       	ret

000006a2 <UART_SetRX>:
}

void UART_SetRX(FunPtr Ptr_ISR)
{
	Ptr_UART_RX = Ptr_ISR;
 6a2:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Ptr_UART_RX+0x1>
 6a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Ptr_UART_RX>
 6aa:	08 95       	ret

000006ac <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
 6ac:	1f 92       	push	r1
 6ae:	0f 92       	push	r0
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	0f 92       	push	r0
 6b4:	11 24       	eor	r1, r1
 6b6:	2f 93       	push	r18
 6b8:	3f 93       	push	r19
 6ba:	4f 93       	push	r20
 6bc:	5f 93       	push	r21
 6be:	6f 93       	push	r22
 6c0:	7f 93       	push	r23
 6c2:	8f 93       	push	r24
 6c4:	9f 93       	push	r25
 6c6:	af 93       	push	r26
 6c8:	bf 93       	push	r27
 6ca:	ef 93       	push	r30
 6cc:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
 6ce:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <Ptr_UART_RX>
 6d2:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <Ptr_UART_RX+0x1>
 6d6:	30 97       	sbiw	r30, 0x00	; 0
 6d8:	09 f0       	breq	.+2      	; 0x6dc <__vector_13+0x30>
	{
		Ptr_UART_RX();
 6da:	09 95       	icall
	}
}
 6dc:	ff 91       	pop	r31
 6de:	ef 91       	pop	r30
 6e0:	bf 91       	pop	r27
 6e2:	af 91       	pop	r26
 6e4:	9f 91       	pop	r25
 6e6:	8f 91       	pop	r24
 6e8:	7f 91       	pop	r23
 6ea:	6f 91       	pop	r22
 6ec:	5f 91       	pop	r21
 6ee:	4f 91       	pop	r20
 6f0:	3f 91       	pop	r19
 6f2:	2f 91       	pop	r18
 6f4:	0f 90       	pop	r0
 6f6:	0f be       	out	0x3f, r0	; 63
 6f8:	0f 90       	pop	r0
 6fa:	1f 90       	pop	r1
 6fc:	18 95       	reti

000006fe <__vector_15>:

ISR(USART_TXC_vect)
{
 6fe:	1f 92       	push	r1
 700:	0f 92       	push	r0
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	0f 92       	push	r0
 706:	11 24       	eor	r1, r1
 708:	2f 93       	push	r18
 70a:	3f 93       	push	r19
 70c:	4f 93       	push	r20
 70e:	5f 93       	push	r21
 710:	6f 93       	push	r22
 712:	7f 93       	push	r23
 714:	8f 93       	push	r24
 716:	9f 93       	push	r25
 718:	af 93       	push	r26
 71a:	bf 93       	push	r27
 71c:	ef 93       	push	r30
 71e:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
 720:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <Ptr_UART_TX>
 724:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <Ptr_UART_TX+0x1>
 728:	30 97       	sbiw	r30, 0x00	; 0
 72a:	09 f0       	breq	.+2      	; 0x72e <__vector_15+0x30>
	{
		Ptr_UART_TX();
 72c:	09 95       	icall
	}
 72e:	ff 91       	pop	r31
 730:	ef 91       	pop	r30
 732:	bf 91       	pop	r27
 734:	af 91       	pop	r26
 736:	9f 91       	pop	r25
 738:	8f 91       	pop	r24
 73a:	7f 91       	pop	r23
 73c:	6f 91       	pop	r22
 73e:	5f 91       	pop	r21
 740:	4f 91       	pop	r20
 742:	3f 91       	pop	r19
 744:	2f 91       	pop	r18
 746:	0f 90       	pop	r0
 748:	0f be       	out	0x3f, r0	; 63
 74a:	0f 90       	pop	r0
 74c:	1f 90       	pop	r1
 74e:	18 95       	reti

00000750 <BCM_Tx_ISR_cbf>:
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
}
 750:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <g_BCM_EXcfg+0x4>
 754:	82 30       	cpi	r24, 0x02	; 2
 756:	49 f4       	brne	.+18     	; 0x76a <BCM_Tx_ISR_cbf+0x1a>
 758:	e7 e7       	ldi	r30, 0x77	; 119
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	84 85       	ldd	r24, Z+12	; 0x0c
 75e:	95 85       	ldd	r25, Z+13	; 0x0d
 760:	01 96       	adiw	r24, 0x01	; 1
 762:	95 87       	std	Z+13, r25	; 0x0d
 764:	84 87       	std	Z+12, r24	; 0x0c
 766:	83 e0       	ldi	r24, 0x03	; 3
 768:	84 83       	std	Z+4, r24	; 0x04
 76a:	08 95       	ret

0000076c <BCM_Rx_ISR_cbf>:
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	1f 92       	push	r1
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
 776:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_BCM_EXcfg+0x2>
 77a:	88 23       	and	r24, r24
 77c:	19 f0       	breq	.+6      	; 0x784 <BCM_Rx_ISR_cbf+0x18>
 77e:	81 30       	cpi	r24, 0x01	; 1
 780:	29 f0       	breq	.+10     	; 0x78c <BCM_Rx_ISR_cbf+0x20>
 782:	08 c0       	rjmp	.+16     	; 0x794 <BCM_Rx_ISR_cbf+0x28>
 784:	0e 94 46 03 	call	0x68c	; 0x68c <UART_Read>
 788:	89 83       	std	Y+1, r24	; 0x01
 78a:	04 c0       	rjmp	.+8      	; 0x794 <BCM_Rx_ISR_cbf+0x28>
 78c:	ce 01       	movw	r24, r28
 78e:	01 96       	adiw	r24, 0x01	; 1
 790:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_SPIRead>
 794:	89 81       	ldd	r24, Y+1	; 0x01
 796:	84 bd       	out	0x24, r24	; 36
 798:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <g_BCM_EXcfg+0xc>
 79c:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <g_BCM_EXcfg+0xd>
 7a0:	00 97       	sbiw	r24, 0x00	; 0
 7a2:	b1 f4       	brne	.+44     	; 0x7d0 <BCM_Rx_ISR_cbf+0x64>
 7a4:	89 81       	ldd	r24, Y+1	; 0x01
 7a6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_Rx_ID>
 7aa:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <g_Rx_ID>
 7ae:	91 34       	cpi	r25, 0x41	; 65
 7b0:	61 f4       	brne	.+24     	; 0x7ca <BCM_Rx_ISR_cbf+0x5e>
 7b2:	82 bf       	out	0x32, r24	; 50
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <g_ID_State>
 7ba:	e7 e7       	ldi	r30, 0x77	; 119
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	84 85       	ldd	r24, Z+12	; 0x0c
 7c0:	95 85       	ldd	r25, Z+13	; 0x0d
 7c2:	01 96       	adiw	r24, 0x01	; 1
 7c4:	95 87       	std	Z+13, r25	; 0x0d
 7c6:	84 87       	std	Z+12, r24	; 0x0c
 7c8:	59 c0       	rjmp	.+178    	; 0x87c <__stack+0x1d>
 7ca:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <g_ID_State>
 7ce:	56 c0       	rjmp	.+172    	; 0x87c <__stack+0x1d>
 7d0:	81 30       	cpi	r24, 0x01	; 1
 7d2:	91 05       	cpc	r25, r1
 7d4:	41 f5       	brne	.+80     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7d6:	89 81       	ldd	r24, Y+1	; 0x01
 7d8:	48 2f       	mov	r20, r24
 7da:	50 e0       	ldi	r21, 0x00	; 0
 7dc:	20 91 7f 00 	lds	r18, 0x007F	; 0x80007f <g_BCM_EXcfg+0x8>
 7e0:	30 91 80 00 	lds	r19, 0x0080	; 0x800080 <g_BCM_EXcfg+0x9>
 7e4:	24 17       	cp	r18, r20
 7e6:	35 07       	cpc	r19, r21
 7e8:	78 f4       	brcc	.+30     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7ea:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <g_LEN_State>
 7ee:	e7 e7       	ldi	r30, 0x77	; 119
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	84 83       	std	Z+4, r24	; 0x04
 7f6:	15 86       	std	Z+13, r1	; 0x0d
 7f8:	14 86       	std	Z+12, r1	; 0x0c
 7fa:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <g_LEN_State>
 7fe:	06 84       	ldd	r0, Z+14	; 0x0e
 800:	f7 85       	ldd	r31, Z+15	; 0x0f
 802:	e0 2d       	mov	r30, r0
 804:	09 95       	icall
 806:	3a c0       	rjmp	.+116    	; 0x87c <__stack+0x1d>
 808:	82 bf       	out	0x32, r24	; 50
 80a:	e7 e7       	ldi	r30, 0x77	; 119
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	89 81       	ldd	r24, Y+1	; 0x01
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	93 87       	std	Z+11, r25	; 0x0b
 814:	82 87       	std	Z+10, r24	; 0x0a
 816:	84 85       	ldd	r24, Z+12	; 0x0c
 818:	95 85       	ldd	r25, Z+13	; 0x0d
 81a:	01 96       	adiw	r24, 0x01	; 1
 81c:	95 87       	std	Z+13, r25	; 0x0d
 81e:	84 87       	std	Z+12, r24	; 0x0c
 820:	84 e0       	ldi	r24, 0x04	; 4
 822:	84 83       	std	Z+4, r24	; 0x04
 824:	2b c0       	rjmp	.+86     	; 0x87c <__stack+0x1d>
 826:	9c 01       	movw	r18, r24
 828:	22 50       	subi	r18, 0x02	; 2
 82a:	31 09       	sbc	r19, r1
 82c:	40 91 81 00 	lds	r20, 0x0081	; 0x800081 <g_BCM_EXcfg+0xa>
 830:	50 91 82 00 	lds	r21, 0x0082	; 0x800082 <g_BCM_EXcfg+0xb>
 834:	24 17       	cp	r18, r20
 836:	35 07       	cpc	r19, r21
 838:	a8 f4       	brcc	.+42     	; 0x864 <__stack+0x5>
 83a:	89 81       	ldd	r24, Y+1	; 0x01
 83c:	e7 e7       	ldi	r30, 0x77	; 119
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	46 81       	ldd	r20, Z+6	; 0x06
 842:	57 81       	ldd	r21, Z+7	; 0x07
 844:	da 01       	movw	r26, r20
 846:	a2 0f       	add	r26, r18
 848:	b3 1f       	adc	r27, r19
 84a:	8c 93       	st	X, r24
 84c:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <g_CS_Calculated>
 850:	89 81       	ldd	r24, Y+1	; 0x01
 852:	89 0f       	add	r24, r25
 854:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <g_CS_Calculated>
 858:	84 85       	ldd	r24, Z+12	; 0x0c
 85a:	95 85       	ldd	r25, Z+13	; 0x0d
 85c:	01 96       	adiw	r24, 0x01	; 1
 85e:	95 87       	std	Z+13, r25	; 0x0d
 860:	84 87       	std	Z+12, r24	; 0x0c
 862:	0c c0       	rjmp	.+24     	; 0x87c <__stack+0x1d>
 864:	24 17       	cp	r18, r20
 866:	35 07       	cpc	r19, r21
 868:	49 f4       	brne	.+18     	; 0x87c <__stack+0x1d>
 86a:	e7 e7       	ldi	r30, 0x77	; 119
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	29 81       	ldd	r18, Y+1	; 0x01
 870:	25 83       	std	Z+5, r18	; 0x05
 872:	01 96       	adiw	r24, 0x01	; 1
 874:	95 87       	std	Z+13, r25	; 0x0d
 876:	84 87       	std	Z+12, r24	; 0x0c
 878:	85 e0       	ldi	r24, 0x05	; 5
 87a:	84 83       	std	Z+4, r24	; 0x04
 87c:	0f 90       	pop	r0
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	08 95       	ret

00000884 <BCM_Tx_Dispatcher>:
 884:	cf 93       	push	r28
 886:	df 93       	push	r29
 888:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <g_BCM_EXcfg+0x4>
 88c:	83 30       	cpi	r24, 0x03	; 3
 88e:	09 f0       	breq	.+2      	; 0x892 <BCM_Tx_Dispatcher+0xe>
 890:	69 c0       	rjmp	.+210    	; 0x964 <BCM_Tx_Dispatcher+0xe0>
 892:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <g_BCM_EXcfg+0xc>
 896:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <g_BCM_EXcfg+0xd>
 89a:	81 30       	cpi	r24, 0x01	; 1
 89c:	91 05       	cpc	r25, r1
 89e:	a1 f4       	brne	.+40     	; 0x8c8 <BCM_Tx_Dispatcher+0x44>
 8a0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_BCM_EXcfg+0x2>
 8a4:	88 23       	and	r24, r24
 8a6:	19 f0       	breq	.+6      	; 0x8ae <BCM_Tx_Dispatcher+0x2a>
 8a8:	81 30       	cpi	r24, 0x01	; 1
 8aa:	31 f0       	breq	.+12     	; 0x8b8 <BCM_Tx_Dispatcher+0x34>
 8ac:	09 c0       	rjmp	.+18     	; 0x8c0 <BCM_Tx_Dispatcher+0x3c>
 8ae:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <g_BCM_EXcfg+0x8>
 8b2:	0e 94 48 03 	call	0x690	; 0x690 <UART_Write>
 8b6:	04 c0       	rjmp	.+8      	; 0x8c0 <BCM_Tx_Dispatcher+0x3c>
 8b8:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <g_BCM_EXcfg+0x8>
 8bc:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_SPISend>
 8c0:	82 e0       	ldi	r24, 0x02	; 2
 8c2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <g_BCM_EXcfg+0x4>
 8c6:	4e c0       	rjmp	.+156    	; 0x964 <BCM_Tx_Dispatcher+0xe0>
 8c8:	20 91 7f 00 	lds	r18, 0x007F	; 0x80007f <g_BCM_EXcfg+0x8>
 8cc:	30 91 80 00 	lds	r19, 0x0080	; 0x800080 <g_BCM_EXcfg+0x9>
 8d0:	a9 01       	movw	r20, r18
 8d2:	4f 5f       	subi	r20, 0xFF	; 255
 8d4:	5f 4f       	sbci	r21, 0xFF	; 255
 8d6:	48 17       	cp	r20, r24
 8d8:	59 07       	cpc	r21, r25
 8da:	18 f1       	brcs	.+70     	; 0x922 <BCM_Tx_Dispatcher+0x9e>
 8dc:	a7 e7       	ldi	r26, 0x77	; 119
 8de:	b0 e0       	ldi	r27, 0x00	; 0
 8e0:	02 97       	sbiw	r24, 0x02	; 2
 8e2:	16 96       	adiw	r26, 0x06	; 6
 8e4:	ed 91       	ld	r30, X+
 8e6:	fc 91       	ld	r31, X
 8e8:	17 97       	sbiw	r26, 0x07	; 7
 8ea:	e8 0f       	add	r30, r24
 8ec:	f9 1f       	adc	r31, r25
 8ee:	15 96       	adiw	r26, 0x05	; 5
 8f0:	9c 91       	ld	r25, X
 8f2:	15 97       	sbiw	r26, 0x05	; 5
 8f4:	80 81       	ld	r24, Z
 8f6:	89 0f       	add	r24, r25
 8f8:	15 96       	adiw	r26, 0x05	; 5
 8fa:	8c 93       	st	X, r24
 8fc:	15 97       	sbiw	r26, 0x05	; 5
 8fe:	12 96       	adiw	r26, 0x02	; 2
 900:	8c 91       	ld	r24, X
 902:	88 23       	and	r24, r24
 904:	19 f0       	breq	.+6      	; 0x90c <BCM_Tx_Dispatcher+0x88>
 906:	81 30       	cpi	r24, 0x01	; 1
 908:	29 f0       	breq	.+10     	; 0x914 <BCM_Tx_Dispatcher+0x90>
 90a:	07 c0       	rjmp	.+14     	; 0x91a <BCM_Tx_Dispatcher+0x96>
 90c:	80 81       	ld	r24, Z
 90e:	0e 94 48 03 	call	0x690	; 0x690 <UART_Write>
 912:	03 c0       	rjmp	.+6      	; 0x91a <BCM_Tx_Dispatcher+0x96>
 914:	80 81       	ld	r24, Z
 916:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_SPISend>
 91a:	82 e0       	ldi	r24, 0x02	; 2
 91c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <g_BCM_EXcfg+0x4>
 920:	21 c0       	rjmp	.+66     	; 0x964 <BCM_Tx_Dispatcher+0xe0>
 922:	2e 5f       	subi	r18, 0xFE	; 254
 924:	3f 4f       	sbci	r19, 0xFF	; 255
 926:	82 17       	cp	r24, r18
 928:	93 07       	cpc	r25, r19
 92a:	a1 f4       	brne	.+40     	; 0x954 <BCM_Tx_Dispatcher+0xd0>
 92c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_BCM_EXcfg+0x2>
 930:	88 23       	and	r24, r24
 932:	19 f0       	breq	.+6      	; 0x93a <BCM_Tx_Dispatcher+0xb6>
 934:	81 30       	cpi	r24, 0x01	; 1
 936:	31 f0       	breq	.+12     	; 0x944 <BCM_Tx_Dispatcher+0xc0>
 938:	09 c0       	rjmp	.+18     	; 0x94c <BCM_Tx_Dispatcher+0xc8>
 93a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <g_BCM_EXcfg+0x5>
 93e:	0e 94 48 03 	call	0x690	; 0x690 <UART_Write>
 942:	04 c0       	rjmp	.+8      	; 0x94c <BCM_Tx_Dispatcher+0xc8>
 944:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <g_BCM_EXcfg+0x5>
 948:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_SPISend>
 94c:	82 e0       	ldi	r24, 0x02	; 2
 94e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <g_BCM_EXcfg+0x4>
 952:	08 c0       	rjmp	.+16     	; 0x964 <BCM_Tx_Dispatcher+0xe0>
 954:	c7 e7       	ldi	r28, 0x77	; 119
 956:	d0 e0       	ldi	r29, 0x00	; 0
 958:	ee 85       	ldd	r30, Y+14	; 0x0e
 95a:	ff 85       	ldd	r31, Y+15	; 0x0f
 95c:	8a e0       	ldi	r24, 0x0A	; 10
 95e:	09 95       	icall
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	8c 83       	std	Y+4, r24	; 0x04
 964:	df 91       	pop	r29
 966:	cf 91       	pop	r28
 968:	08 95       	ret

0000096a <BCM_Init>:
 96a:	cf 93       	push	r28
 96c:	df 93       	push	r29
 96e:	cd b7       	in	r28, 0x3d	; 61
 970:	de b7       	in	r29, 0x3e	; 62
 972:	60 97       	sbiw	r28, 0x10	; 16
 974:	0f b6       	in	r0, 0x3f	; 63
 976:	f8 94       	cli
 978:	de bf       	out	0x3e, r29	; 62
 97a:	0f be       	out	0x3f, r0	; 63
 97c:	cd bf       	out	0x3d, r28	; 61
 97e:	00 97       	sbiw	r24, 0x00	; 0
 980:	09 f4       	brne	.+2      	; 0x984 <BCM_Init+0x1a>
 982:	69 c0       	rjmp	.+210    	; 0xa56 <BCM_Init+0xec>
 984:	dc 01       	movw	r26, r24
 986:	11 96       	adiw	r26, 0x01	; 1
 988:	8c 91       	ld	r24, X
 98a:	11 97       	sbiw	r26, 0x01	; 1
 98c:	e7 e7       	ldi	r30, 0x77	; 119
 98e:	f0 e0       	ldi	r31, 0x00	; 0
 990:	81 83       	std	Z+1, r24	; 0x01
 992:	9c 91       	ld	r25, X
 994:	90 83       	st	Z, r25
 996:	12 96       	adiw	r26, 0x02	; 2
 998:	8c 91       	ld	r24, X
 99a:	82 83       	std	Z+2, r24	; 0x02
 99c:	21 e0       	ldi	r18, 0x01	; 1
 99e:	24 83       	std	Z+4, r18	; 0x04
 9a0:	15 86       	std	Z+13, r1	; 0x0d
 9a2:	14 86       	std	Z+12, r1	; 0x0c
 9a4:	15 82       	std	Z+5, r1	; 0x05
 9a6:	11 86       	std	Z+9, r1	; 0x09
 9a8:	10 86       	std	Z+8, r1	; 0x08
 9aa:	13 86       	std	Z+11, r1	; 0x0b
 9ac:	12 86       	std	Z+10, r1	; 0x0a
 9ae:	88 23       	and	r24, r24
 9b0:	19 f0       	breq	.+6      	; 0x9b8 <BCM_Init+0x4e>
 9b2:	81 30       	cpi	r24, 0x01	; 1
 9b4:	59 f1       	breq	.+86     	; 0xa0c <BCM_Init+0xa2>
 9b6:	51 c0       	rjmp	.+162    	; 0xa5a <BCM_Init+0xf0>
 9b8:	40 e8       	ldi	r20, 0x80	; 128
 9ba:	55 e2       	ldi	r21, 0x25	; 37
 9bc:	60 e0       	ldi	r22, 0x00	; 0
 9be:	70 e0       	ldi	r23, 0x00	; 0
 9c0:	48 87       	std	Y+8, r20	; 0x08
 9c2:	59 87       	std	Y+9, r21	; 0x09
 9c4:	6a 87       	std	Y+10, r22	; 0x0a
 9c6:	7b 87       	std	Y+11, r23	; 0x0b
 9c8:	86 e0       	ldi	r24, 0x06	; 6
 9ca:	8a 83       	std	Y+2, r24	; 0x02
 9cc:	1d 82       	std	Y+5, r1	; 0x05
 9ce:	1b 82       	std	Y+3, r1	; 0x03
 9d0:	1e 82       	std	Y+6, r1	; 0x06
 9d2:	1c 82       	std	Y+4, r1	; 0x04
 9d4:	99 23       	and	r25, r25
 9d6:	19 f0       	breq	.+6      	; 0x9de <BCM_Init+0x74>
 9d8:	91 30       	cpi	r25, 0x01	; 1
 9da:	51 f0       	breq	.+20     	; 0x9f0 <BCM_Init+0x86>
 9dc:	11 c0       	rjmp	.+34     	; 0xa00 <BCM_Init+0x96>
 9de:	88 e0       	ldi	r24, 0x08	; 8
 9e0:	89 83       	std	Y+1, r24	; 0x01
 9e2:	80 e4       	ldi	r24, 0x40	; 64
 9e4:	8f 83       	std	Y+7, r24	; 0x07
 9e6:	88 ea       	ldi	r24, 0xA8	; 168
 9e8:	93 e0       	ldi	r25, 0x03	; 3
 9ea:	0e 94 4c 03 	call	0x698	; 0x698 <UART_SetTX>
 9ee:	08 c0       	rjmp	.+16     	; 0xa00 <BCM_Init+0x96>
 9f0:	80 e1       	ldi	r24, 0x10	; 16
 9f2:	89 83       	std	Y+1, r24	; 0x01
 9f4:	80 e8       	ldi	r24, 0x80	; 128
 9f6:	8f 83       	std	Y+7, r24	; 0x07
 9f8:	86 eb       	ldi	r24, 0xB6	; 182
 9fa:	93 e0       	ldi	r25, 0x03	; 3
 9fc:	0e 94 51 03 	call	0x6a2	; 0x6a2 <UART_SetRX>
 a00:	ce 01       	movw	r24, r28
 a02:	01 96       	adiw	r24, 0x01	; 1
 a04:	0e 94 da 02 	call	0x5b4	; 0x5b4 <UART_Init>
 a08:	8c e3       	ldi	r24, 0x3C	; 60
 a0a:	2a c0       	rjmp	.+84     	; 0xa60 <BCM_Init+0xf6>
 a0c:	83 e0       	ldi	r24, 0x03	; 3
 a0e:	8c 87       	std	Y+12, r24	; 0x0c
 a10:	1e 86       	std	Y+14, r1	; 0x0e
 a12:	1d 86       	std	Y+13, r1	; 0x0d
 a14:	99 23       	and	r25, r25
 a16:	19 f0       	breq	.+6      	; 0xa1e <BCM_Init+0xb4>
 a18:	91 30       	cpi	r25, 0x01	; 1
 a1a:	79 f0       	breq	.+30     	; 0xa3a <BCM_Init+0xd0>
 a1c:	20 c0       	rjmp	.+64     	; 0xa5e <BCM_Init+0xf4>
 a1e:	88 ea       	ldi	r24, 0xA8	; 168
 a20:	93 e0       	ldi	r25, 0x03	; 3
 a22:	98 8b       	std	Y+16, r25	; 0x10
 a24:	8f 87       	std	Y+15, r24	; 0x0f
 a26:	ce 01       	movw	r24, r28
 a28:	0c 96       	adiw	r24, 0x0c	; 12
 a2a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_SPIInitMaster>
 a2e:	88 ea       	ldi	r24, 0xA8	; 168
 a30:	93 e0       	ldi	r25, 0x03	; 3
 a32:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_SetCBF>
 a36:	8c e3       	ldi	r24, 0x3C	; 60
 a38:	13 c0       	rjmp	.+38     	; 0xa60 <BCM_Init+0xf6>
 a3a:	86 eb       	ldi	r24, 0xB6	; 182
 a3c:	93 e0       	ldi	r25, 0x03	; 3
 a3e:	98 8b       	std	Y+16, r25	; 0x10
 a40:	8f 87       	std	Y+15, r24	; 0x0f
 a42:	ce 01       	movw	r24, r28
 a44:	0c 96       	adiw	r24, 0x0c	; 12
 a46:	0e 94 38 01 	call	0x270	; 0x270 <_SPIInitSlave>
 a4a:	86 eb       	ldi	r24, 0xB6	; 182
 a4c:	93 e0       	ldi	r25, 0x03	; 3
 a4e:	0e 94 8c 01 	call	0x318	; 0x318 <SPI_SetCBF>
 a52:	8c e3       	ldi	r24, 0x3C	; 60
 a54:	05 c0       	rjmp	.+10     	; 0xa60 <BCM_Init+0xf6>
 a56:	8d e3       	ldi	r24, 0x3D	; 61
 a58:	03 c0       	rjmp	.+6      	; 0xa60 <BCM_Init+0xf6>
 a5a:	80 e4       	ldi	r24, 0x40	; 64
 a5c:	01 c0       	rjmp	.+2      	; 0xa60 <BCM_Init+0xf6>
 a5e:	8c e3       	ldi	r24, 0x3C	; 60
 a60:	60 96       	adiw	r28, 0x10	; 16
 a62:	0f b6       	in	r0, 0x3f	; 63
 a64:	f8 94       	cli
 a66:	de bf       	out	0x3e, r29	; 62
 a68:	0f be       	out	0x3f, r0	; 63
 a6a:	cd bf       	out	0x3d, r28	; 61
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	08 95       	ret

00000a72 <BCM_DeInit>:
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	
	/*--------[ Search For That BCM CFG In The Working List ]--------*/

	/*--------[ Set That BCM To OFF ]--------*/
	g_BCM_EXcfg.FSM_State = OFF_State;
 a72:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <g_BCM_EXcfg+0x4>
	
	
	errorStatus= BCM_ERROR + E_OK;

	return errorStatus;
}
 a76:	8c e3       	ldi	r24, 0x3C	; 60
 a78:	08 95       	ret

00000a7a <BCM_Send>:

ERROR_STATUS BCM_Send(uint8_t* Buffer, uint16_t Buf_Len, BCM_cfg_s* My_BCM, Notify_FunPtr Notify_Ptr ){
	
	/* lock the buffer so user can't chance on it  */
	
	g_BCM_EXcfg.Lock_State = Buffer_Locked ;
 a7a:	e7 e7       	ldi	r30, 0x77	; 119
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	41 e0       	ldi	r20, 0x01	; 1
 a80:	43 83       	std	Z+3, r20	; 0x03
	
	/*set the buffer address, length, and notification function*/
	
	g_BCM_EXcfg.Buffer = Buffer;
 a82:	97 83       	std	Z+7, r25	; 0x07
 a84:	86 83       	std	Z+6, r24	; 0x06
	g_BCM_EXcfg.Buf_Len = Buf_Len;
 a86:	71 87       	std	Z+9, r23	; 0x09
 a88:	60 87       	std	Z+8, r22	; 0x08
	g_BCM_EXcfg.BCM_notify_cbf = Notify_Ptr;
 a8a:	37 87       	std	Z+15, r19	; 0x0f
 a8c:	26 87       	std	Z+14, r18	; 0x0e
	
	switch(g_BCM_EXcfg.Protocol){
 a8e:	82 81       	ldd	r24, Z+2	; 0x02
 a90:	88 23       	and	r24, r24
 a92:	19 f0       	breq	.+6      	; 0xa9a <BCM_Send+0x20>
 a94:	81 30       	cpi	r24, 0x01	; 1
 a96:	29 f0       	breq	.+10     	; 0xaa2 <BCM_Send+0x28>
 a98:	07 c0       	rjmp	.+14     	; 0xaa8 <BCM_Send+0x2e>
		
		case UART_Protocol :
			UART_Write(BCM_ID);
 a9a:	81 e4       	ldi	r24, 0x41	; 65
 a9c:	0e 94 48 03 	call	0x690	; 0x690 <UART_Write>
		break;
 aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <BCM_Send+0x2e>
		case  SPI_Protocol :
			_SPISend(BCM_ID);
 aa2:	81 e4       	ldi	r24, 0x41	; 65
 aa4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_SPISend>
		break;
		
	}
	g_BCM_EXcfg.FSM_State = SendingByte_State ;	
 aa8:	82 e0       	ldi	r24, 0x02	; 2
 aaa:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <g_BCM_EXcfg+0x4>
	return 0 ;
}
 aae:	80 e0       	ldi	r24, 0x00	; 0
 ab0:	08 95       	ret

00000ab2 <__udivmodsi4>:
 ab2:	a1 e2       	ldi	r26, 0x21	; 33
 ab4:	1a 2e       	mov	r1, r26
 ab6:	aa 1b       	sub	r26, r26
 ab8:	bb 1b       	sub	r27, r27
 aba:	fd 01       	movw	r30, r26
 abc:	0d c0       	rjmp	.+26     	; 0xad8 <__udivmodsi4_ep>

00000abe <__udivmodsi4_loop>:
 abe:	aa 1f       	adc	r26, r26
 ac0:	bb 1f       	adc	r27, r27
 ac2:	ee 1f       	adc	r30, r30
 ac4:	ff 1f       	adc	r31, r31
 ac6:	a2 17       	cp	r26, r18
 ac8:	b3 07       	cpc	r27, r19
 aca:	e4 07       	cpc	r30, r20
 acc:	f5 07       	cpc	r31, r21
 ace:	20 f0       	brcs	.+8      	; 0xad8 <__udivmodsi4_ep>
 ad0:	a2 1b       	sub	r26, r18
 ad2:	b3 0b       	sbc	r27, r19
 ad4:	e4 0b       	sbc	r30, r20
 ad6:	f5 0b       	sbc	r31, r21

00000ad8 <__udivmodsi4_ep>:
 ad8:	66 1f       	adc	r22, r22
 ada:	77 1f       	adc	r23, r23
 adc:	88 1f       	adc	r24, r24
 ade:	99 1f       	adc	r25, r25
 ae0:	1a 94       	dec	r1
 ae2:	69 f7       	brne	.-38     	; 0xabe <__udivmodsi4_loop>
 ae4:	60 95       	com	r22
 ae6:	70 95       	com	r23
 ae8:	80 95       	com	r24
 aea:	90 95       	com	r25
 aec:	9b 01       	movw	r18, r22
 aee:	ac 01       	movw	r20, r24
 af0:	bd 01       	movw	r22, r26
 af2:	cf 01       	movw	r24, r30
 af4:	08 95       	ret

00000af6 <_exit>:
 af6:	f8 94       	cli

00000af8 <__stop_program>:
 af8:	ff cf       	rjmp	.-2      	; 0xaf8 <__stop_program>
