
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000e42  00000ed6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000098  00800066  00800066  00000edc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b4a  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000968  00000000  00000000  00002cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000870  00000000  00000000  0000361a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000074c  00000000  00000000  00003e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fd  00000000  00000000  000045d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021cd  00000000  00000000  00004fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  000071a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__vector_4>
  14:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__vector_5>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 48 04 	jmp	0x890	; 0x890 <__vector_7>
  20:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__vector_8>
  24:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__vector_9>
  28:	0c 94 a4 03 	jmp	0x748	; 0x748 <__vector_10>
  2c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_11>
  30:	0c 94 a0 01 	jmp	0x340	; 0x340 <__vector_12>
  34:	0c 94 9a 04 	jmp	0x934	; 0x934 <__vector_13>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 c3 04 	jmp	0x986	; 0x986 <__vector_15>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	04 02       	muls	r16, r20
  56:	2b 02       	muls	r18, r27
  58:	09 02       	muls	r16, r25
  5a:	0f 02       	muls	r16, r31
  5c:	14 02       	muls	r17, r20
  5e:	1a 02       	muls	r17, r26
  60:	20 02       	muls	r18, r16
  62:	25 02       	muls	r18, r21
  64:	75 02       	muls	r23, r21
  66:	ae 02       	muls	r26, r30
  68:	7c 02       	muls	r23, r28
  6a:	85 02       	muls	r24, r21
  6c:	8c 02       	muls	r24, r28
  6e:	95 02       	muls	r25, r21
  70:	9e 02       	muls	r25, r30
  72:	a5 02       	muls	r26, r21
  74:	f7 02       	muls	r31, r23
  76:	20 03       	mulsu	r18, r16
  78:	fc 02       	muls	r31, r28
  7a:	02 03       	mulsu	r16, r18
  7c:	08 03       	fmul	r16, r16
  7e:	0e 03       	fmul	r16, r22
  80:	14 03       	mulsu	r17, r20
  82:	1a 03       	fmul	r17, r18

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf e5       	ldi	r28, 0x5F	; 95
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
  90:	10 e0       	ldi	r17, 0x00	; 0
  92:	a0 e6       	ldi	r26, 0x60	; 96
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e2 e4       	ldi	r30, 0x42	; 66
  98:	fe e0       	ldi	r31, 0x0E	; 14
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <__do_copy_data+0x10>
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a6 36       	cpi	r26, 0x66	; 102
  a2:	b1 07       	cpc	r27, r17
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0xc>

000000a6 <__do_clear_bss>:
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	a6 e6       	ldi	r26, 0x66	; 102
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	ae 3f       	cpi	r26, 0xFE	; 254
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  ba:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <Dummy>:
	sleep_cpu();
}

/*==========================================================================*/

void Dummy(void){}
  c2:	08 95       	ret

000000c4 <ToggleLED1>:

void ToggleLED1()
{
	DIO_Toggle(g_LED1.GPIO, g_LED1.pins);
  c4:	ee ee       	ldi	r30, 0xEE	; 238
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	61 81       	ldd	r22, Z+1	; 0x01
  ca:	80 81       	ld	r24, Z
  cc:	0e 94 65 01 	call	0x2ca	; 0x2ca <DIO_Toggle>
  d0:	08 95       	ret

000000d2 <ToggleLED2>:
}
void ToggleLED2()
{
	DIO_Toggle(g_LED2.GPIO, g_LED2.pins);
  d2:	eb ee       	ldi	r30, 0xEB	; 235
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	61 81       	ldd	r22, Z+1	; 0x01
  d8:	80 81       	ld	r24, Z
  da:	0e 94 65 01 	call	0x2ca	; 0x2ca <DIO_Toggle>
  de:	08 95       	ret

000000e0 <ToggleLED3>:
}
void ToggleLED3()
{
	DIO_Toggle(g_LED3.GPIO, g_LED3.pins);
  e0:	e1 ef       	ldi	r30, 0xF1	; 241
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	61 81       	ldd	r22, Z+1	; 0x01
  e6:	80 81       	ld	r24, Z
  e8:	0e 94 65 01 	call	0x2ca	; 0x2ca <DIO_Toggle>
  ec:	08 95       	ret

000000ee <Init_LEDs>:
}
;
void Init_LEDs(void)
{
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
	g_LED1.GPIO = GPIOD;
  f6:	ee ee       	ldi	r30, 0xEE	; 238
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	13 e0       	ldi	r17, 0x03	; 3
  fc:	10 83       	st	Z, r17
	g_LED1.dir  = OUTPUT;
  fe:	0f ef       	ldi	r16, 0xFF	; 255
 100:	02 83       	std	Z+2, r16	; 0x02
	g_LED1.pins = BIT4;
 102:	80 e1       	ldi	r24, 0x10	; 16
 104:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED1);
 106:	cf 01       	movw	r24, r30
 108:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_init>
	g_LED2.GPIO = GPIOD;
 10c:	eb ee       	ldi	r30, 0xEB	; 235
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	10 83       	st	Z, r17
	g_LED2.dir  = OUTPUT;
 112:	02 83       	std	Z+2, r16	; 0x02
	g_LED2.pins = BIT5;
 114:	80 e2       	ldi	r24, 0x20	; 32
 116:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED2);
 118:	cf 01       	movw	r24, r30
 11a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_init>
	g_LED3.GPIO = GPIOD;
 11e:	c1 ef       	ldi	r28, 0xF1	; 241
 120:	d0 e0       	ldi	r29, 0x00	; 0
 122:	18 83       	st	Y, r17
	g_LED3.dir  = OUTPUT;
 124:	0a 83       	std	Y+2, r16	; 0x02
	g_LED3.pins = BIT6;
 126:	80 e4       	ldi	r24, 0x40	; 64
 128:	89 83       	std	Y+1, r24	; 0x01
	DIO_init(&g_LED3);
 12a:	ce 01       	movw	r24, r28
 12c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_init>
	DIO_Write(g_LED3.GPIO, g_LED3.pins, HIGH);
 130:	4f ef       	ldi	r20, 0xFF	; 255
 132:	69 81       	ldd	r22, Y+1	; 0x01
 134:	88 81       	ld	r24, Y
 136:	0e 94 32 01 	call	0x264	; 0x264 <DIO_Write>
	Test_Pin.dir = OUTPUT;
 13a:	e9 ef       	ldi	r30, 0xF9	; 249
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	02 83       	std	Z+2, r16	; 0x02
	Test_Pin.GPIO = GPIOD;
 140:	10 83       	st	Z, r17
	Test_Pin.pins = BIT0;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&Test_Pin);
 146:	cf 01       	movw	r24, r30
 148:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_init>
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	08 95       	ret

00000156 <main>:
/*==========================================================================*/

int main(void)
{
	/*-------------[ LEDs Initialization ]-------------*/
	Init_LEDs();
 156:	0e 94 77 00 	call	0xee	; 0xee <Init_LEDs>
		
	/*-------------[ TMU Initialization ]-------------*/
	MySOS.Tick_Time = 1;
 15a:	e4 ef       	ldi	r30, 0xF4	; 244
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 83       	st	Z, r24
	MySOS.Timer_ID = TIMER_CH0;
 162:	11 82       	std	Z+1, r1	; 0x01
	SOS_Init(&MySOS);
 164:	cf 01       	movw	r24, r30
 166:	0e 94 08 05 	call	0xa10	; 0xa10 <SOS_Init>
	
	/*----------[ Start 3 Different Tasks ]---------*/
	/*[[ TMU_Srart(Task_FunPtr, TaskID, Periodicity, Time_IN_ms); ]]*/
	Start_Task(ToggleLED1, 100, PERIODIC, 100, 5, Dummy, Dummy);
 16a:	0f 2e       	mov	r0, r31
 16c:	f1 e6       	ldi	r31, 0x61	; 97
 16e:	af 2e       	mov	r10, r31
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	bf 2e       	mov	r11, r31
 174:	f0 2d       	mov	r31, r0
 176:	65 01       	movw	r12, r10
 178:	0f 2e       	mov	r0, r31
 17a:	f5 e0       	ldi	r31, 0x05	; 5
 17c:	ef 2e       	mov	r14, r31
 17e:	f0 2d       	mov	r31, r0
 180:	04 e6       	ldi	r16, 0x64	; 100
 182:	10 e0       	ldi	r17, 0x00	; 0
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	64 e6       	ldi	r22, 0x64	; 100
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	82 e6       	ldi	r24, 0x62	; 98
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 6f 05 	call	0xade	; 0xade <Start_Task>
	Start_Task(ToggleLED2, 110, PERIODIC, 300, 15, Dummy, Dummy);
 196:	0f 2e       	mov	r0, r31
 198:	ff e0       	ldi	r31, 0x0F	; 15
 19a:	ef 2e       	mov	r14, r31
 19c:	f0 2d       	mov	r31, r0
 19e:	0c e2       	ldi	r16, 0x2C	; 44
 1a0:	11 e0       	ldi	r17, 0x01	; 1
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	6e e6       	ldi	r22, 0x6E	; 110
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	89 e6       	ldi	r24, 0x69	; 105
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 6f 05 	call	0xade	; 0xade <Start_Task>
	Start_Task(ToggleLED3, 120, ONESHOT, 3000, 25, Dummy, Dummy);
 1b4:	0f 2e       	mov	r0, r31
 1b6:	f9 e1       	ldi	r31, 0x19	; 25
 1b8:	ef 2e       	mov	r14, r31
 1ba:	f0 2d       	mov	r31, r0
 1bc:	08 eb       	ldi	r16, 0xB8	; 184
 1be:	1b e0       	ldi	r17, 0x0B	; 11
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	68 e7       	ldi	r22, 0x78	; 120
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	80 e7       	ldi	r24, 0x70	; 112
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 6f 05 	call	0xade	; 0xade <Start_Task>
	
	/*-------------[ SUPER LOOP ]-------------*/
	while (1)
	{
		SOS_Run();
 1d2:	0e 94 36 06 	call	0xc6c	; 0xc6c <SOS_Run>
	}
 1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <main+0x7c>

000001d8 <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
 1d8:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
 1da:	89 2b       	or	r24, r25
 1dc:	e9 f1       	breq	.+122    	; 0x258 <DIO_init+0x80>
	{
		switch(DIO_info->GPIO)
 1de:	80 81       	ld	r24, Z
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	99 f0       	breq	.+38     	; 0x20a <DIO_init+0x32>
 1e4:	28 f0       	brcs	.+10     	; 0x1f0 <DIO_init+0x18>
 1e6:	82 30       	cpi	r24, 0x02	; 2
 1e8:	e9 f0       	breq	.+58     	; 0x224 <DIO_init+0x4c>
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	41 f1       	breq	.+80     	; 0x23e <DIO_init+0x66>
 1ee:	37 c0       	rjmp	.+110    	; 0x25e <DIO_init+0x86>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
 1f0:	81 81       	ldd	r24, Z+1	; 0x01
 1f2:	2a b3       	in	r18, 0x1a	; 26
 1f4:	98 2f       	mov	r25, r24
 1f6:	90 95       	com	r25
 1f8:	29 23       	and	r18, r25
 1fa:	92 81       	ldd	r25, Z+2	; 0x02
 1fc:	98 23       	and	r25, r24
 1fe:	82 2f       	mov	r24, r18
 200:	89 2b       	or	r24, r25
 202:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
			break;
 208:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
 20a:	81 81       	ldd	r24, Z+1	; 0x01
 20c:	27 b3       	in	r18, 0x17	; 23
 20e:	98 2f       	mov	r25, r24
 210:	90 95       	com	r25
 212:	29 23       	and	r18, r25
 214:	92 81       	ldd	r25, Z+2	; 0x02
 216:	98 23       	and	r25, r24
 218:	82 2f       	mov	r24, r18
 21a:	89 2b       	or	r24, r25
 21c:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
			break;
 222:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
 224:	81 81       	ldd	r24, Z+1	; 0x01
 226:	24 b3       	in	r18, 0x14	; 20
 228:	98 2f       	mov	r25, r24
 22a:	90 95       	com	r25
 22c:	29 23       	and	r18, r25
 22e:	92 81       	ldd	r25, Z+2	; 0x02
 230:	98 23       	and	r25, r24
 232:	82 2f       	mov	r24, r18
 234:	89 2b       	or	r24, r25
 236:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
			break;
 23c:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
 23e:	81 81       	ldd	r24, Z+1	; 0x01
 240:	21 b3       	in	r18, 0x11	; 17
 242:	98 2f       	mov	r25, r24
 244:	90 95       	com	r25
 246:	29 23       	and	r18, r25
 248:	92 81       	ldd	r25, Z+2	; 0x02
 24a:	98 23       	and	r25, r24
 24c:	82 2f       	mov	r24, r18
 24e:	89 2b       	or	r24, r25
 250:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
			break;
 256:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 262:	08 95       	ret

00000264 <DIO_Write>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write(uint8_t GPIO, uint8_t pins, uint8_t value)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	81 f0       	breq	.+32     	; 0x288 <DIO_Write+0x24>
 268:	28 f0       	brcs	.+10     	; 0x274 <DIO_Write+0x10>
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	b9 f0       	breq	.+46     	; 0x29c <DIO_Write+0x38>
 26e:	83 30       	cpi	r24, 0x03	; 3
 270:	f9 f0       	breq	.+62     	; 0x2b0 <DIO_Write+0x4c>
 272:	28 c0       	rjmp	.+80     	; 0x2c4 <DIO_Write+0x60>
	{
		case GPIOA :
		PORTA_DATA = (pins & value) | (~pins & PORTA_DATA);
 274:	8b b3       	in	r24, 0x1b	; 27
 276:	96 2f       	mov	r25, r22
 278:	90 95       	com	r25
 27a:	89 23       	and	r24, r25
 27c:	46 23       	and	r20, r22
 27e:	48 2b       	or	r20, r24
 280:	4b bb       	out	0x1b, r20	; 27
		errorStatus = E_OK;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
		break;
 286:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & value) | (~pins & PORTB_DATA);
 288:	88 b3       	in	r24, 0x18	; 24
 28a:	96 2f       	mov	r25, r22
 28c:	90 95       	com	r25
 28e:	89 23       	and	r24, r25
 290:	46 23       	and	r20, r22
 292:	48 2b       	or	r20, r24
 294:	48 bb       	out	0x18, r20	; 24
		errorStatus = E_OK;
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
		break;
 29a:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & value) | (~pins & PORTC_DATA);
 29c:	85 b3       	in	r24, 0x15	; 21
 29e:	96 2f       	mov	r25, r22
 2a0:	90 95       	com	r25
 2a2:	89 23       	and	r24, r25
 2a4:	46 23       	and	r20, r22
 2a6:	48 2b       	or	r20, r24
 2a8:	45 bb       	out	0x15, r20	; 21
		errorStatus = E_OK;
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
		break;
 2ae:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & value) | (~pins & PORTD_DATA);
 2b0:	82 b3       	in	r24, 0x12	; 18
 2b2:	96 2f       	mov	r25, r22
 2b4:	90 95       	com	r25
 2b6:	89 23       	and	r24, r25
 2b8:	46 23       	and	r20, r22
 2ba:	48 2b       	or	r20, r24
 2bc:	42 bb       	out	0x12, r20	; 18
		errorStatus = E_OK;
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
		break;
 2c2:	08 95       	ret
		default :
		errorStatus = E_NOK;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	return errorStatus;
}
 2c8:	08 95       	ret

000002ca <DIO_Toggle>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle(uint8_t GPIO, uint8_t pins)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	91 f0       	breq	.+36     	; 0x2f2 <DIO_Toggle+0x28>
 2ce:	28 f0       	brcs	.+10     	; 0x2da <DIO_Toggle+0x10>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	d9 f0       	breq	.+54     	; 0x30a <DIO_Toggle+0x40>
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	29 f1       	breq	.+74     	; 0x322 <DIO_Toggle+0x58>
 2d8:	30 c0       	rjmp	.+96     	; 0x33a <DIO_Toggle+0x70>
	{
		case GPIOA :
		PORTA_DATA = (pins & (~PORTA_DATA)) | (~pins & PORTA_DATA);
 2da:	8b b3       	in	r24, 0x1b	; 27
 2dc:	9b b3       	in	r25, 0x1b	; 27
 2de:	26 2f       	mov	r18, r22
 2e0:	20 95       	com	r18
 2e2:	92 23       	and	r25, r18
 2e4:	80 95       	com	r24
 2e6:	68 23       	and	r22, r24
 2e8:	69 2b       	or	r22, r25
 2ea:	6b bb       	out	0x1b, r22	; 27
		errorStatus = E_OK;
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
		break;
 2f0:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & (~PORTB_DATA)) | (~pins & PORTB_DATA);
 2f2:	88 b3       	in	r24, 0x18	; 24
 2f4:	98 b3       	in	r25, 0x18	; 24
 2f6:	26 2f       	mov	r18, r22
 2f8:	20 95       	com	r18
 2fa:	92 23       	and	r25, r18
 2fc:	80 95       	com	r24
 2fe:	68 23       	and	r22, r24
 300:	69 2b       	or	r22, r25
 302:	68 bb       	out	0x18, r22	; 24
		errorStatus = E_OK;
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
		break;
 308:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & (~PORTC_DATA)) | (~pins & PORTC_DATA);
 30a:	85 b3       	in	r24, 0x15	; 21
 30c:	95 b3       	in	r25, 0x15	; 21
 30e:	26 2f       	mov	r18, r22
 310:	20 95       	com	r18
 312:	92 23       	and	r25, r18
 314:	80 95       	com	r24
 316:	68 23       	and	r22, r24
 318:	69 2b       	or	r22, r25
 31a:	65 bb       	out	0x15, r22	; 21
		errorStatus = E_OK;
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
		break;
 320:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & (~PORTD_DATA)) | (~pins & PORTD_DATA);
 322:	82 b3       	in	r24, 0x12	; 18
 324:	92 b3       	in	r25, 0x12	; 18
 326:	26 2f       	mov	r18, r22
 328:	20 95       	com	r18
 32a:	92 23       	and	r25, r18
 32c:	80 95       	com	r24
 32e:	68 23       	and	r22, r24
 330:	69 2b       	or	r22, r25
 332:	62 bb       	out	0x12, r22	; 18
		errorStatus = E_OK;
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
		break;
 338:	08 95       	ret
		default :
		errorStatus = E_NOK;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	return errorStatus;
}
 33e:	08 95       	ret

00000340 <__vector_12>:
{
	PTR_CALL_BACK = isr_ptr;
}

ISR(SPI_STC_vect)
{
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	2f 93       	push	r18
 34c:	3f 93       	push	r19
 34e:	4f 93       	push	r20
 350:	5f 93       	push	r21
 352:	6f 93       	push	r22
 354:	7f 93       	push	r23
 356:	8f 93       	push	r24
 358:	9f 93       	push	r25
 35a:	af 93       	push	r26
 35c:	bf 93       	push	r27
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
	g_u8_RxFlag = TRUE;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 60 00 	sts	0x0060, r24
	PTR_CALL_BACK();
 368:	e0 91 fc 00 	lds	r30, 0x00FC
 36c:	f0 91 fd 00 	lds	r31, 0x00FD
 370:	09 95       	icall
}
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	7f 91       	pop	r23
 380:	6f 91       	pop	r22
 382:	5f 91       	pop	r21
 384:	4f 91       	pop	r20
 386:	3f 91       	pop	r19
 388:	2f 91       	pop	r18
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <Timer_Init>:
 * Return: The error status of the function.			
 * Description: Initiates the module.
 * 							
 */
ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
 394:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
 396:	89 2b       	or	r24, r25
 398:	09 f4       	brne	.+2      	; 0x39c <Timer_Init+0x8>
 39a:	5c c1       	rjmp	.+696    	; 0x654 <Timer_Init+0x2c0>
	{
		// Check The Timer Channel Number & Init The Corresponding One
		switch(Timer_cfg->Timer_CH_NO)
 39c:	80 81       	ld	r24, Z
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	09 f4       	brne	.+2      	; 0x3a4 <Timer_Init+0x10>
 3a2:	6f c0       	rjmp	.+222    	; 0x482 <Timer_Init+0xee>
 3a4:	20 f0       	brcs	.+8      	; 0x3ae <Timer_Init+0x1a>
 3a6:	82 30       	cpi	r24, 0x02	; 2
 3a8:	09 f4       	brne	.+2      	; 0x3ac <Timer_Init+0x18>
 3aa:	f8 c0       	rjmp	.+496    	; 0x59c <Timer_Init+0x208>
 3ac:	56 c1       	rjmp	.+684    	; 0x65a <Timer_Init+0x2c6>
static ERROR_STATUS Timer0_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR0 =  Timer0_CMP_Mask;
 3ae:	88 e0       	ldi	r24, 0x08	; 8
 3b0:	83 bf       	out	0x33, r24	; 51
		OCR0  =  0x00;
 3b2:	1c be       	out	0x3c, r1	; 60
		TIMSK &= Timer0_Int_CLR_Mask;
 3b4:	89 b7       	in	r24, 0x39	; 57
 3b6:	8c 7f       	andi	r24, 0xFC	; 252
 3b8:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 3ba:	82 81       	ldd	r24, Z+2	; 0x02
 3bc:	88 23       	and	r24, r24
 3be:	19 f0       	breq	.+6      	; 0x3c6 <Timer_Init+0x32>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	21 f0       	breq	.+8      	; 0x3cc <Timer_Init+0x38>
 3c4:	0f c0       	rjmp	.+30     	; 0x3e4 <Timer_Init+0x50>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer0_Polling_Int_Mask;
 3c6:	89 b7       	in	r24, 0x39	; 57
 3c8:	89 bf       	out	0x39, r24	; 57
 3ca:	0c c0       	rjmp	.+24     	; 0x3e4 <Timer_Init+0x50>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer0_Interrupt_CMP_Int_Mask;
 3cc:	89 b7       	in	r24, 0x39	; 57
 3ce:	82 60       	ori	r24, 0x02	; 2
 3d0:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
 3d2:	8f b7       	in	r24, 0x3f	; 63
 3d4:	80 68       	ori	r24, 0x80	; 128
 3d6:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer0_CM = Timer_cfg->Timer_Cbk_ptr;
 3d8:	84 81       	ldd	r24, Z+4	; 0x04
 3da:	95 81       	ldd	r25, Z+5	; 0x05
 3dc:	90 93 6f 00 	sts	0x006F, r25
 3e0:	80 93 6e 00 	sts	0x006E, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 3e4:	81 81       	ldd	r24, Z+1	; 0x01
 3e6:	81 30       	cpi	r24, 0x01	; 1
 3e8:	d9 f1       	breq	.+118    	; 0x460 <Timer_Init+0xcc>
 3ea:	18 f0       	brcs	.+6      	; 0x3f2 <Timer_Init+0x5e>
 3ec:	82 30       	cpi	r24, 0x02	; 2
 3ee:	f1 f1       	breq	.+124    	; 0x46c <Timer_Init+0xd8>
 3f0:	43 c0       	rjmp	.+134    	; 0x478 <Timer_Init+0xe4>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 3f2:	e3 81       	ldd	r30, Z+3	; 0x03
 3f4:	8e 2f       	mov	r24, r30
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	88 30       	cpi	r24, 0x08	; 8
 3fa:	91 05       	cpc	r25, r1
 3fc:	60 f5       	brcc	.+88     	; 0x456 <Timer_Init+0xc2>
 3fe:	fc 01       	movw	r30, r24
 400:	e6 5d       	subi	r30, 0xD6	; 214
 402:	ff 4f       	sbci	r31, 0xFF	; 255
 404:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 408:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_OK;
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer0_Prescaler = TIMER0_PRESCALER_8;
 412:	82 e0       	ldi	r24, 0x02	; 2
 414:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 41e:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_NOK;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer0_Prescaler = TIMER0_PRESCALER_64;
 428:	83 e0       	ldi	r24, 0x03	; 3
 42a:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer0_Prescaler = TIMER0_PRESCALER_128;
 434:	84 e0       	ldi	r24, 0x04	; 4
 436:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 440:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_NOK;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	08 95       	ret
						break;
					case TIMER_PRESCALER_1024 :
						Timer0_Prescaler = TIMER0_PRESCALER_1024;
 44a:	85 e0       	ldi	r24, 0x05	; 5
 44c:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	08 95       	ret
						break;
					default :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 456:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_NOK;
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	08 95       	ret
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_RISING;
 460:	87 e0       	ldi	r24, 0x07	; 7
 462:	80 93 75 00 	sts	0x0075, r24
				errorStatus = E_OK;
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	08 95       	ret
				break;
			case COUNTER_DOWN_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_FALLING;
 46c:	86 e0       	ldi	r24, 0x06	; 6
 46e:	80 93 75 00 	sts	0x0075, r24
				errorStatus = E_OK;
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	08 95       	ret
				break;
			default :
				Timer0_Prescaler = TIMER0_NO_CLOCK;
 478:	10 92 75 00 	sts	0x0075, r1
				errorStatus = E_NOK;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	08 95       	ret
static ERROR_STATUS Timer1_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR1 = Timer1_CMP_Mask;
 482:	88 e0       	ldi	r24, 0x08	; 8
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	9f bd       	out	0x2f, r25	; 47
 488:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0x00;
 48a:	1d bc       	out	0x2d, r1	; 45
 48c:	1c bc       	out	0x2c, r1	; 44
		OCR1A = 0x00;
 48e:	1b bc       	out	0x2b, r1	; 43
 490:	1a bc       	out	0x2a, r1	; 42
		TIMSK &= Timer1_Int_CLR_Mask;
 492:	89 b7       	in	r24, 0x39	; 57
 494:	83 7c       	andi	r24, 0xC3	; 195
 496:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 498:	82 81       	ldd	r24, Z+2	; 0x02
 49a:	88 23       	and	r24, r24
 49c:	19 f0       	breq	.+6      	; 0x4a4 <Timer_Init+0x110>
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	21 f0       	breq	.+8      	; 0x4aa <Timer_Init+0x116>
 4a2:	0f c0       	rjmp	.+30     	; 0x4c2 <Timer_Init+0x12e>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer1_Polling_Int_Mask;
 4a4:	89 b7       	in	r24, 0x39	; 57
 4a6:	89 bf       	out	0x39, r24	; 57
 4a8:	0c c0       	rjmp	.+24     	; 0x4c2 <Timer_Init+0x12e>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer1_OCA_Int_Mask;
 4aa:	89 b7       	in	r24, 0x39	; 57
 4ac:	80 61       	ori	r24, 0x10	; 16
 4ae:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
 4b0:	8f b7       	in	r24, 0x3f	; 63
 4b2:	80 68       	ori	r24, 0x80	; 128
 4b4:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer1_CM = Timer_cfg->Timer_Cbk_ptr;
 4b6:	84 81       	ldd	r24, Z+4	; 0x04
 4b8:	95 81       	ldd	r25, Z+5	; 0x05
 4ba:	90 93 6b 00 	sts	0x006B, r25
 4be:	80 93 6a 00 	sts	0x006A, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 4c2:	81 81       	ldd	r24, Z+1	; 0x01
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	09 f4       	brne	.+2      	; 0x4ca <Timer_Init+0x136>
 4c8:	50 c0       	rjmp	.+160    	; 0x56a <Timer_Init+0x1d6>
 4ca:	20 f0       	brcs	.+8      	; 0x4d4 <Timer_Init+0x140>
 4cc:	82 30       	cpi	r24, 0x02	; 2
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <Timer_Init+0x13e>
 4d0:	55 c0       	rjmp	.+170    	; 0x57c <Timer_Init+0x1e8>
 4d2:	5d c0       	rjmp	.+186    	; 0x58e <Timer_Init+0x1fa>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 4d4:	e3 81       	ldd	r30, Z+3	; 0x03
 4d6:	8e 2f       	mov	r24, r30
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	88 30       	cpi	r24, 0x08	; 8
 4dc:	91 05       	cpc	r25, r1
 4de:	f0 f5       	brcc	.+124    	; 0x55c <Timer_Init+0x1c8>
 4e0:	fc 01       	movw	r30, r24
 4e2:	ee 5c       	subi	r30, 0xCE	; 206
 4e4:	ff 4f       	sbci	r31, 0xFF	; 255
 4e6:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 4ea:	10 92 74 00 	sts	0x0074, r1
 4ee:	10 92 73 00 	sts	0x0073, r1
						errorStatus = E_OK;
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer1_Prescaler = TIMER1_PRESCALER_8;
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	90 93 74 00 	sts	0x0074, r25
 500:	80 93 73 00 	sts	0x0073, r24
						errorStatus = E_OK;
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 50a:	10 92 74 00 	sts	0x0074, r1
 50e:	10 92 73 00 	sts	0x0073, r1
						errorStatus = E_NOK;
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer1_Prescaler = TIMER1_PRESCALER_64;
 518:	83 e0       	ldi	r24, 0x03	; 3
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	90 93 74 00 	sts	0x0074, r25
 520:	80 93 73 00 	sts	0x0073, r24
						errorStatus = E_OK;
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer1_Prescaler = TIMER1_PRESCALER_128;
 52a:	84 e0       	ldi	r24, 0x04	; 4
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	90 93 74 00 	sts	0x0074, r25
 532:	80 93 73 00 	sts	0x0073, r24
						errorStatus = E_OK;
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 53c:	10 92 74 00 	sts	0x0074, r1
 540:	10 92 73 00 	sts	0x0073, r1
						errorStatus = E_NOK;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	08 95       	ret
						break;
					case TIMER_PRESCALER_1024 :
						Timer1_Prescaler = TIMER1_PRESCALER_1024;
 54a:	85 e0       	ldi	r24, 0x05	; 5
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	90 93 74 00 	sts	0x0074, r25
 552:	80 93 73 00 	sts	0x0073, r24
						errorStatus = E_OK;
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	08 95       	ret
						break;
					default :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 55c:	10 92 74 00 	sts	0x0074, r1
 560:	10 92 73 00 	sts	0x0073, r1
						errorStatus = E_NOK;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	08 95       	ret
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_RISING;
 56a:	87 e0       	ldi	r24, 0x07	; 7
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	90 93 74 00 	sts	0x0074, r25
 572:	80 93 73 00 	sts	0x0073, r24
				errorStatus = E_OK;
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	08 95       	ret
				break;
			case COUNTER_DOWN_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_FALLING;
 57c:	86 e0       	ldi	r24, 0x06	; 6
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	90 93 74 00 	sts	0x0074, r25
 584:	80 93 73 00 	sts	0x0073, r24
				errorStatus = E_OK;
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	08 95       	ret
				break;
			default :
				Timer1_Prescaler = TIMER1_NO_CLOCK;
 58e:	10 92 74 00 	sts	0x0074, r1
 592:	10 92 73 00 	sts	0x0073, r1
				errorStatus = E_NOK;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	08 95       	ret
static ERROR_STATUS Timer2_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR2 = Timer2_CMP_Mask;
 59c:	88 e0       	ldi	r24, 0x08	; 8
 59e:	85 bd       	out	0x25, r24	; 37
		TCNT2 = Timer2_TCNT_INIT_Mask;
 5a0:	14 bc       	out	0x24, r1	; 36
		TIMSK &= Timer1_Int_CLR_Mask;
 5a2:	89 b7       	in	r24, 0x39	; 57
 5a4:	83 7c       	andi	r24, 0xC3	; 195
 5a6:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 5a8:	82 81       	ldd	r24, Z+2	; 0x02
 5aa:	88 23       	and	r24, r24
 5ac:	19 f0       	breq	.+6      	; 0x5b4 <Timer_Init+0x220>
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	21 f0       	breq	.+8      	; 0x5ba <Timer_Init+0x226>
 5b2:	0f c0       	rjmp	.+30     	; 0x5d2 <Timer_Init+0x23e>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer2_Polling_Int_Mask;
 5b4:	89 b7       	in	r24, 0x39	; 57
 5b6:	89 bf       	out	0x39, r24	; 57
 5b8:	0c c0       	rjmp	.+24     	; 0x5d2 <Timer_Init+0x23e>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer2_Interrupt_CMP_Int_Mask;
 5ba:	89 b7       	in	r24, 0x39	; 57
 5bc:	80 68       	ori	r24, 0x80	; 128
 5be:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
 5c0:	8f b7       	in	r24, 0x3f	; 63
 5c2:	80 68       	ori	r24, 0x80	; 128
 5c4:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer2_CM = Timer_cfg->Timer_Cbk_ptr;
 5c6:	84 81       	ldd	r24, Z+4	; 0x04
 5c8:	95 81       	ldd	r25, Z+5	; 0x05
 5ca:	90 93 67 00 	sts	0x0067, r25
 5ce:	80 93 66 00 	sts	0x0066, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 5d2:	81 81       	ldd	r24, Z+1	; 0x01
 5d4:	81 11       	cpse	r24, r1
 5d6:	39 c0       	rjmp	.+114    	; 0x64a <Timer_Init+0x2b6>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 5d8:	e3 81       	ldd	r30, Z+3	; 0x03
 5da:	8e 2f       	mov	r24, r30
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	88 30       	cpi	r24, 0x08	; 8
 5e0:	91 05       	cpc	r25, r1
 5e2:	70 f5       	brcc	.+92     	; 0x640 <Timer_Init+0x2ac>
 5e4:	fc 01       	movw	r30, r24
 5e6:	e6 5c       	subi	r30, 0xC6	; 198
 5e8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ea:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
 5ee:	10 92 72 00 	sts	0x0072, r1
						errorStatus = E_OK;
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer2_Prescaler = TIMER2_PRESCALER_8;
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer2_Prescaler = TIMER2_PRESCALER_32;
 604:	83 e0       	ldi	r24, 0x03	; 3
 606:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer2_Prescaler = TIMER2_PRESCALER_64;
 610:	84 e0       	ldi	r24, 0x04	; 4
 612:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer2_Prescaler = TIMER2_PRESCALER_128;
 61c:	85 e0       	ldi	r24, 0x05	; 5
 61e:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer2_Prescaler = TIMER2_PRESCALER_256;
 628:	86 e0       	ldi	r24, 0x06	; 6
 62a:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	08 95       	ret
						break;
						case TIMER_PRESCALER_1024 :
						Timer2_Prescaler = TIMER2_PRESCALER_1024;
 634:	87 e0       	ldi	r24, 0x07	; 7
 636:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	08 95       	ret
						break;
					default :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
 640:	10 92 72 00 	sts	0x0072, r1
						errorStatus = E_NOK;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	08 95       	ret
						break;
				}
				break;
			default :
				Timer2_Prescaler = TIMER2_NO_CLOCK;
 64a:	10 92 72 00 	sts	0x0072, r1
				errorStatus = E_NOK;
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	08 95       	ret
				break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	08 95       	ret
				break;
			case TIMER_CH2 :
				errorStatus = Timer2_Init(Timer_cfg);
				break;
			default :
				errorStatus = E_NOK;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 65e:	08 95       	ret

00000660 <Timer_Start>:
 */

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(Timer_CH_NO)
 660:	81 30       	cpi	r24, 0x01	; 1
 662:	91 f0       	breq	.+36     	; 0x688 <Timer_Start+0x28>
 664:	18 f0       	brcs	.+6      	; 0x66c <Timer_Start+0xc>
 666:	82 30       	cpi	r24, 0x02	; 2
 668:	01 f1       	breq	.+64     	; 0x6aa <Timer_Start+0x4a>
 66a:	2d c0       	rjmp	.+90     	; 0x6c6 <Timer_Start+0x66>
	{
		case TIMER_CH0 :
			if(Timer_Count <= 255)
 66c:	6f 3f       	cpi	r22, 0xFF	; 255
 66e:	71 05       	cpc	r23, r1
 670:	09 f0       	breq	.+2      	; 0x674 <Timer_Start+0x14>
 672:	60 f5       	brcc	.+88     	; 0x6cc <Timer_Start+0x6c>
			{
				TCNT0 = 0x00;
 674:	12 be       	out	0x32, r1	; 50
				OCR0  = Timer_Count;
 676:	6c bf       	out	0x3c, r22	; 60
				TCCR0 |= Timer0_Prescaler;
 678:	93 b7       	in	r25, 0x33	; 51
 67a:	80 91 75 00 	lds	r24, 0x0075
 67e:	89 2b       	or	r24, r25
 680:	83 bf       	out	0x33, r24	; 51
				errorStatus = E_OK;
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	08 95       	ret
			{
				errorStatus = E_NOK;
			}
			break;
		case TIMER_CH1 :
			TCNT1 = 0x0000;
 688:	1d bc       	out	0x2d, r1	; 45
 68a:	1c bc       	out	0x2c, r1	; 44
			OCR1A = Timer_Count;
 68c:	7b bd       	out	0x2b, r23	; 43
 68e:	6a bd       	out	0x2a, r22	; 42
			TCCR1 |= Timer1_Prescaler;
 690:	2e b5       	in	r18, 0x2e	; 46
 692:	3f b5       	in	r19, 0x2f	; 47
 694:	80 91 73 00 	lds	r24, 0x0073
 698:	90 91 74 00 	lds	r25, 0x0074
 69c:	82 2b       	or	r24, r18
 69e:	93 2b       	or	r25, r19
 6a0:	9f bd       	out	0x2f, r25	; 47
 6a2:	8e bd       	out	0x2e, r24	; 46
			errorStatus = E_OK;
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	90 e0       	ldi	r25, 0x00	; 0
			break;
 6a8:	08 95       	ret
		case TIMER_CH2 :
			if(Timer_Count <= 255)
 6aa:	6f 3f       	cpi	r22, 0xFF	; 255
 6ac:	71 05       	cpc	r23, r1
 6ae:	09 f0       	breq	.+2      	; 0x6b2 <Timer_Start+0x52>
 6b0:	80 f4       	brcc	.+32     	; 0x6d2 <Timer_Start+0x72>
			{
				TCNT2 = 0x00;
 6b2:	14 bc       	out	0x24, r1	; 36
				OCR2  = Timer_Count;
 6b4:	63 bd       	out	0x23, r22	; 35
				TCCR2 |= Timer2_Prescaler;
 6b6:	95 b5       	in	r25, 0x25	; 37
 6b8:	80 91 72 00 	lds	r24, 0x0072
 6bc:	89 2b       	or	r24, r25
 6be:	85 bd       	out	0x25, r24	; 37
				errorStatus = E_OK;
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	08 95       	ret
			{
				errorStatus = E_NOK;
			}
			break;
		default :
			errorStatus = E_NOK;
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	08 95       	ret
				TCCR0 |= Timer0_Prescaler;
				errorStatus = E_OK;
			}
			else
			{
				errorStatus = E_NOK;
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	08 95       	ret
				TCCR2 |= Timer2_Prescaler;
				errorStatus = E_OK;
			}
			else
			{
				errorStatus = E_NOK;
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
		default :
			errorStatus = E_NOK;
			break;
	}
	return errorStatus;
}
 6d6:	08 95       	ret

000006d8 <TIMER0_SetCM>:
	Ptr_Timer0_OV = Ptr_ISR;
}

void TIMER0_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer0_CM = Ptr_ISR;
 6d8:	90 93 6f 00 	sts	0x006F, r25
 6dc:	80 93 6e 00 	sts	0x006E, r24
 6e0:	08 95       	ret

000006e2 <TIMER2_SetCM>:
	Ptr_Timer2_OV = Ptr_ISR;
}

void TIMER2_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer2_CM = Ptr_ISR;
 6e2:	90 93 67 00 	sts	0x0067, r25
 6e6:	80 93 66 00 	sts	0x0066, r24
 6ea:	08 95       	ret

000006ec <TIMER1_SetCM>:
	Ptr_Timer1_OV = Ptr_ISR;
}

void TIMER1_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer1_CM = Ptr_ISR;
 6ec:	90 93 6b 00 	sts	0x006B, r25
 6f0:	80 93 6a 00 	sts	0x006A, r24
 6f4:	08 95       	ret

000006f6 <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
 6f6:	1f 92       	push	r1
 6f8:	0f 92       	push	r0
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	0f 92       	push	r0
 6fe:	11 24       	eor	r1, r1
 700:	2f 93       	push	r18
 702:	3f 93       	push	r19
 704:	4f 93       	push	r20
 706:	5f 93       	push	r21
 708:	6f 93       	push	r22
 70a:	7f 93       	push	r23
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
 710:	af 93       	push	r26
 712:	bf 93       	push	r27
 714:	ef 93       	push	r30
 716:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
 718:	e0 91 70 00 	lds	r30, 0x0070
 71c:	f0 91 71 00 	lds	r31, 0x0071
 720:	30 97       	sbiw	r30, 0x00	; 0
 722:	09 f0       	breq	.+2      	; 0x726 <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
 724:	09 95       	icall
	}
}
 726:	ff 91       	pop	r31
 728:	ef 91       	pop	r30
 72a:	bf 91       	pop	r27
 72c:	af 91       	pop	r26
 72e:	9f 91       	pop	r25
 730:	8f 91       	pop	r24
 732:	7f 91       	pop	r23
 734:	6f 91       	pop	r22
 736:	5f 91       	pop	r21
 738:	4f 91       	pop	r20
 73a:	3f 91       	pop	r19
 73c:	2f 91       	pop	r18
 73e:	0f 90       	pop	r0
 740:	0f be       	out	0x3f, r0	; 63
 742:	0f 90       	pop	r0
 744:	1f 90       	pop	r1
 746:	18 95       	reti

00000748 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 748:	1f 92       	push	r1
 74a:	0f 92       	push	r0
 74c:	0f b6       	in	r0, 0x3f	; 63
 74e:	0f 92       	push	r0
 750:	11 24       	eor	r1, r1
 752:	2f 93       	push	r18
 754:	3f 93       	push	r19
 756:	4f 93       	push	r20
 758:	5f 93       	push	r21
 75a:	6f 93       	push	r22
 75c:	7f 93       	push	r23
 75e:	8f 93       	push	r24
 760:	9f 93       	push	r25
 762:	af 93       	push	r26
 764:	bf 93       	push	r27
 766:	ef 93       	push	r30
 768:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
 76a:	e0 91 6e 00 	lds	r30, 0x006E
 76e:	f0 91 6f 00 	lds	r31, 0x006F
 772:	30 97       	sbiw	r30, 0x00	; 0
 774:	09 f0       	breq	.+2      	; 0x778 <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
 776:	09 95       	icall
	}
}
 778:	ff 91       	pop	r31
 77a:	ef 91       	pop	r30
 77c:	bf 91       	pop	r27
 77e:	af 91       	pop	r26
 780:	9f 91       	pop	r25
 782:	8f 91       	pop	r24
 784:	7f 91       	pop	r23
 786:	6f 91       	pop	r22
 788:	5f 91       	pop	r21
 78a:	4f 91       	pop	r20
 78c:	3f 91       	pop	r19
 78e:	2f 91       	pop	r18
 790:	0f 90       	pop	r0
 792:	0f be       	out	0x3f, r0	; 63
 794:	0f 90       	pop	r0
 796:	1f 90       	pop	r1
 798:	18 95       	reti

0000079a <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 79a:	1f 92       	push	r1
 79c:	0f 92       	push	r0
 79e:	0f b6       	in	r0, 0x3f	; 63
 7a0:	0f 92       	push	r0
 7a2:	11 24       	eor	r1, r1
 7a4:	2f 93       	push	r18
 7a6:	3f 93       	push	r19
 7a8:	4f 93       	push	r20
 7aa:	5f 93       	push	r21
 7ac:	6f 93       	push	r22
 7ae:	7f 93       	push	r23
 7b0:	8f 93       	push	r24
 7b2:	9f 93       	push	r25
 7b4:	af 93       	push	r26
 7b6:	bf 93       	push	r27
 7b8:	ef 93       	push	r30
 7ba:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
 7bc:	e0 91 68 00 	lds	r30, 0x0068
 7c0:	f0 91 69 00 	lds	r31, 0x0069
 7c4:	30 97       	sbiw	r30, 0x00	; 0
 7c6:	09 f0       	breq	.+2      	; 0x7ca <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
 7c8:	09 95       	icall
	}
}
 7ca:	ff 91       	pop	r31
 7cc:	ef 91       	pop	r30
 7ce:	bf 91       	pop	r27
 7d0:	af 91       	pop	r26
 7d2:	9f 91       	pop	r25
 7d4:	8f 91       	pop	r24
 7d6:	7f 91       	pop	r23
 7d8:	6f 91       	pop	r22
 7da:	5f 91       	pop	r21
 7dc:	4f 91       	pop	r20
 7de:	3f 91       	pop	r19
 7e0:	2f 91       	pop	r18
 7e2:	0f 90       	pop	r0
 7e4:	0f be       	out	0x3f, r0	; 63
 7e6:	0f 90       	pop	r0
 7e8:	1f 90       	pop	r1
 7ea:	18 95       	reti

000007ec <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 7ec:	1f 92       	push	r1
 7ee:	0f 92       	push	r0
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	0f 92       	push	r0
 7f4:	11 24       	eor	r1, r1
 7f6:	2f 93       	push	r18
 7f8:	3f 93       	push	r19
 7fa:	4f 93       	push	r20
 7fc:	5f 93       	push	r21
 7fe:	6f 93       	push	r22
 800:	7f 93       	push	r23
 802:	8f 93       	push	r24
 804:	9f 93       	push	r25
 806:	af 93       	push	r26
 808:	bf 93       	push	r27
 80a:	ef 93       	push	r30
 80c:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
 80e:	e0 91 66 00 	lds	r30, 0x0066
 812:	f0 91 67 00 	lds	r31, 0x0067
 816:	30 97       	sbiw	r30, 0x00	; 0
 818:	09 f0       	breq	.+2      	; 0x81c <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
 81a:	09 95       	icall
	}
}
 81c:	ff 91       	pop	r31
 81e:	ef 91       	pop	r30
 820:	bf 91       	pop	r27
 822:	af 91       	pop	r26
 824:	9f 91       	pop	r25
 826:	8f 91       	pop	r24
 828:	7f 91       	pop	r23
 82a:	6f 91       	pop	r22
 82c:	5f 91       	pop	r21
 82e:	4f 91       	pop	r20
 830:	3f 91       	pop	r19
 832:	2f 91       	pop	r18
 834:	0f 90       	pop	r0
 836:	0f be       	out	0x3f, r0	; 63
 838:	0f 90       	pop	r0
 83a:	1f 90       	pop	r1
 83c:	18 95       	reti

0000083e <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 83e:	1f 92       	push	r1
 840:	0f 92       	push	r0
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	0f 92       	push	r0
 846:	11 24       	eor	r1, r1
 848:	2f 93       	push	r18
 84a:	3f 93       	push	r19
 84c:	4f 93       	push	r20
 84e:	5f 93       	push	r21
 850:	6f 93       	push	r22
 852:	7f 93       	push	r23
 854:	8f 93       	push	r24
 856:	9f 93       	push	r25
 858:	af 93       	push	r26
 85a:	bf 93       	push	r27
 85c:	ef 93       	push	r30
 85e:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
 860:	e0 91 6c 00 	lds	r30, 0x006C
 864:	f0 91 6d 00 	lds	r31, 0x006D
 868:	30 97       	sbiw	r30, 0x00	; 0
 86a:	09 f0       	breq	.+2      	; 0x86e <__stack+0xf>
	{
		Ptr_Timer1_OV();
 86c:	09 95       	icall
	}
}
 86e:	ff 91       	pop	r31
 870:	ef 91       	pop	r30
 872:	bf 91       	pop	r27
 874:	af 91       	pop	r26
 876:	9f 91       	pop	r25
 878:	8f 91       	pop	r24
 87a:	7f 91       	pop	r23
 87c:	6f 91       	pop	r22
 87e:	5f 91       	pop	r21
 880:	4f 91       	pop	r20
 882:	3f 91       	pop	r19
 884:	2f 91       	pop	r18
 886:	0f 90       	pop	r0
 888:	0f be       	out	0x3f, r0	; 63
 88a:	0f 90       	pop	r0
 88c:	1f 90       	pop	r1
 88e:	18 95       	reti

00000890 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 890:	1f 92       	push	r1
 892:	0f 92       	push	r0
 894:	0f b6       	in	r0, 0x3f	; 63
 896:	0f 92       	push	r0
 898:	11 24       	eor	r1, r1
 89a:	2f 93       	push	r18
 89c:	3f 93       	push	r19
 89e:	4f 93       	push	r20
 8a0:	5f 93       	push	r21
 8a2:	6f 93       	push	r22
 8a4:	7f 93       	push	r23
 8a6:	8f 93       	push	r24
 8a8:	9f 93       	push	r25
 8aa:	af 93       	push	r26
 8ac:	bf 93       	push	r27
 8ae:	ef 93       	push	r30
 8b0:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 8b2:	e0 91 6a 00 	lds	r30, 0x006A
 8b6:	f0 91 6b 00 	lds	r31, 0x006B
 8ba:	30 97       	sbiw	r30, 0x00	; 0
 8bc:	09 f0       	breq	.+2      	; 0x8c0 <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
 8be:	09 95       	icall
	}	
}
 8c0:	ff 91       	pop	r31
 8c2:	ef 91       	pop	r30
 8c4:	bf 91       	pop	r27
 8c6:	af 91       	pop	r26
 8c8:	9f 91       	pop	r25
 8ca:	8f 91       	pop	r24
 8cc:	7f 91       	pop	r23
 8ce:	6f 91       	pop	r22
 8d0:	5f 91       	pop	r21
 8d2:	4f 91       	pop	r20
 8d4:	3f 91       	pop	r19
 8d6:	2f 91       	pop	r18
 8d8:	0f 90       	pop	r0
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	0f 90       	pop	r0
 8de:	1f 90       	pop	r1
 8e0:	18 95       	reti

000008e2 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 8e2:	1f 92       	push	r1
 8e4:	0f 92       	push	r0
 8e6:	0f b6       	in	r0, 0x3f	; 63
 8e8:	0f 92       	push	r0
 8ea:	11 24       	eor	r1, r1
 8ec:	2f 93       	push	r18
 8ee:	3f 93       	push	r19
 8f0:	4f 93       	push	r20
 8f2:	5f 93       	push	r21
 8f4:	6f 93       	push	r22
 8f6:	7f 93       	push	r23
 8f8:	8f 93       	push	r24
 8fa:	9f 93       	push	r25
 8fc:	af 93       	push	r26
 8fe:	bf 93       	push	r27
 900:	ef 93       	push	r30
 902:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 904:	e0 91 6a 00 	lds	r30, 0x006A
 908:	f0 91 6b 00 	lds	r31, 0x006B
 90c:	30 97       	sbiw	r30, 0x00	; 0
 90e:	09 f0       	breq	.+2      	; 0x912 <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 910:	09 95       	icall
	}
}
 912:	ff 91       	pop	r31
 914:	ef 91       	pop	r30
 916:	bf 91       	pop	r27
 918:	af 91       	pop	r26
 91a:	9f 91       	pop	r25
 91c:	8f 91       	pop	r24
 91e:	7f 91       	pop	r23
 920:	6f 91       	pop	r22
 922:	5f 91       	pop	r21
 924:	4f 91       	pop	r20
 926:	3f 91       	pop	r19
 928:	2f 91       	pop	r18
 92a:	0f 90       	pop	r0
 92c:	0f be       	out	0x3f, r0	; 63
 92e:	0f 90       	pop	r0
 930:	1f 90       	pop	r1
 932:	18 95       	reti

00000934 <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
 934:	1f 92       	push	r1
 936:	0f 92       	push	r0
 938:	0f b6       	in	r0, 0x3f	; 63
 93a:	0f 92       	push	r0
 93c:	11 24       	eor	r1, r1
 93e:	2f 93       	push	r18
 940:	3f 93       	push	r19
 942:	4f 93       	push	r20
 944:	5f 93       	push	r21
 946:	6f 93       	push	r22
 948:	7f 93       	push	r23
 94a:	8f 93       	push	r24
 94c:	9f 93       	push	r25
 94e:	af 93       	push	r26
 950:	bf 93       	push	r27
 952:	ef 93       	push	r30
 954:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
 956:	e0 91 76 00 	lds	r30, 0x0076
 95a:	f0 91 77 00 	lds	r31, 0x0077
 95e:	30 97       	sbiw	r30, 0x00	; 0
 960:	09 f0       	breq	.+2      	; 0x964 <__vector_13+0x30>
	{
		Ptr_UART_RX();
 962:	09 95       	icall
	}
}
 964:	ff 91       	pop	r31
 966:	ef 91       	pop	r30
 968:	bf 91       	pop	r27
 96a:	af 91       	pop	r26
 96c:	9f 91       	pop	r25
 96e:	8f 91       	pop	r24
 970:	7f 91       	pop	r23
 972:	6f 91       	pop	r22
 974:	5f 91       	pop	r21
 976:	4f 91       	pop	r20
 978:	3f 91       	pop	r19
 97a:	2f 91       	pop	r18
 97c:	0f 90       	pop	r0
 97e:	0f be       	out	0x3f, r0	; 63
 980:	0f 90       	pop	r0
 982:	1f 90       	pop	r1
 984:	18 95       	reti

00000986 <__vector_15>:

ISR(USART_TXC_vect)
{
 986:	1f 92       	push	r1
 988:	0f 92       	push	r0
 98a:	0f b6       	in	r0, 0x3f	; 63
 98c:	0f 92       	push	r0
 98e:	11 24       	eor	r1, r1
 990:	2f 93       	push	r18
 992:	3f 93       	push	r19
 994:	4f 93       	push	r20
 996:	5f 93       	push	r21
 998:	6f 93       	push	r22
 99a:	7f 93       	push	r23
 99c:	8f 93       	push	r24
 99e:	9f 93       	push	r25
 9a0:	af 93       	push	r26
 9a2:	bf 93       	push	r27
 9a4:	ef 93       	push	r30
 9a6:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
 9a8:	e0 91 78 00 	lds	r30, 0x0078
 9ac:	f0 91 79 00 	lds	r31, 0x0079
 9b0:	30 97       	sbiw	r30, 0x00	; 0
 9b2:	09 f0       	breq	.+2      	; 0x9b6 <__vector_15+0x30>
	{
		Ptr_UART_TX();
 9b4:	09 95       	icall
	}
 9b6:	ff 91       	pop	r31
 9b8:	ef 91       	pop	r30
 9ba:	bf 91       	pop	r27
 9bc:	af 91       	pop	r26
 9be:	9f 91       	pop	r25
 9c0:	8f 91       	pop	r24
 9c2:	7f 91       	pop	r23
 9c4:	6f 91       	pop	r22
 9c6:	5f 91       	pop	r21
 9c8:	4f 91       	pop	r20
 9ca:	3f 91       	pop	r19
 9cc:	2f 91       	pop	r18
 9ce:	0f 90       	pop	r0
 9d0:	0f be       	out	0x3f, r0	; 63
 9d2:	0f 90       	pop	r0
 9d4:	1f 90       	pop	r1
 9d6:	18 95       	reti

000009d8 <SOS_ISR_cbf>:


static void SOS_ISR_cbf(void)
{
	/* Adjust The Tick Time According To The TMU's Time Configuration */
	g_SysTicks++;
 9d8:	80 91 7a 00 	lds	r24, 0x007A
 9dc:	90 91 7b 00 	lds	r25, 0x007B
 9e0:	01 96       	adiw	r24, 0x01	; 1
 9e2:	90 93 7b 00 	sts	0x007B, r25
 9e6:	80 93 7a 00 	sts	0x007A, r24
	
	if(g_SysTicks == g_SOS_TickTime)
 9ea:	20 91 7a 00 	lds	r18, 0x007A
 9ee:	30 91 7b 00 	lds	r19, 0x007B
 9f2:	80 91 7c 00 	lds	r24, 0x007C
 9f6:	90 91 7d 00 	lds	r25, 0x007D
 9fa:	28 17       	cp	r18, r24
 9fc:	39 07       	cpc	r19, r25
 9fe:	39 f4       	brne	.+14     	; 0xa0e <SOS_ISR_cbf+0x36>
	{
		g_TMR_Ticks_Changed = TRUE;
 a00:	81 e0       	ldi	r24, 0x01	; 1
 a02:	80 93 7e 00 	sts	0x007E, r24
		g_SysTicks = FALSE;	
 a06:	10 92 7b 00 	sts	0x007B, r1
 a0a:	10 92 7a 00 	sts	0x007A, r1
 a0e:	08 95       	ret

00000a10 <SOS_Init>:
{
	ERROR_STATUS errorStauts = E_OK;
	uint16_t index = 0;
	
	/*-------------[ Check TMU's Pointer Validity ]-------------*/
	if(a_SOS_s != NULL)
 a10:	00 97       	sbiw	r24, 0x00	; 0
 a12:	09 f4       	brne	.+2      	; 0xa16 <SOS_Init+0x6>
 a14:	5e c0       	rjmp	.+188    	; 0xad2 <SOS_Init+0xc2>
 a16:	fc 01       	movw	r30, r24
	{
		/*-------------[ TMU Initialization ]-------------*/
		g_SOS.Timer_ID  = a_SOS_s->Timer_ID;
 a18:	a1 e6       	ldi	r26, 0x61	; 97
 a1a:	b0 e0       	ldi	r27, 0x00	; 0
 a1c:	81 81       	ldd	r24, Z+1	; 0x01
 a1e:	11 96       	adiw	r26, 0x01	; 1
 a20:	8c 93       	st	X, r24
 a22:	11 97       	sbiw	r26, 0x01	; 1
		g_SOS.Tick_Time = a_SOS_s->Tick_Time;
 a24:	80 81       	ld	r24, Z
 a26:	8c 93       	st	X, r24
		g_SOS.Timer_Cbk_ptr = SOS_ISR_cbf;
 a28:	2c ee       	ldi	r18, 0xEC	; 236
 a2a:	34 e0       	ldi	r19, 0x04	; 4
 a2c:	14 96       	adiw	r26, 0x04	; 4
 a2e:	3c 93       	st	X, r19
 a30:	2e 93       	st	-X, r18
 a32:	13 97       	sbiw	r26, 0x03	; 3
		g_SOS.State    = INACTIVE;
 a34:	12 96       	adiw	r26, 0x02	; 2
 a36:	1c 92       	st	X, r1
		g_SOS_TickTime = g_SOS.Tick_Time;
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	90 93 7d 00 	sts	0x007D, r25
 a3e:	80 93 7c 00 	sts	0x007C, r24
		
		/*-------------[ Timer Initialization ]-------------*/
		g_SOS_TMR.Timer_Mode = TIMER_MODE;
 a42:	a5 ee       	ldi	r26, 0xE5	; 229
 a44:	b0 e0       	ldi	r27, 0x00	; 0
 a46:	11 96       	adiw	r26, 0x01	; 1
 a48:	1c 92       	st	X, r1
 a4a:	11 97       	sbiw	r26, 0x01	; 1
		g_SOS_TMR.Timer_Prescaler = TIMER_PRESCALER_64;
 a4c:	84 e0       	ldi	r24, 0x04	; 4
 a4e:	13 96       	adiw	r26, 0x03	; 3
 a50:	8c 93       	st	X, r24
 a52:	13 97       	sbiw	r26, 0x03	; 3
		g_SOS_TMR.Timer_Polling_Or_Interrupt = TIMER_INTERRUPT_MODE;
 a54:	81 e0       	ldi	r24, 0x01	; 1
 a56:	12 96       	adiw	r26, 0x02	; 2
 a58:	8c 93       	st	X, r24
 a5a:	12 97       	sbiw	r26, 0x02	; 2
		g_SOS_TMR.Timer_Cbk_ptr = g_SOS.Timer_Cbk_ptr;
 a5c:	15 96       	adiw	r26, 0x05	; 5
 a5e:	3c 93       	st	X, r19
 a60:	2e 93       	st	-X, r18
 a62:	14 97       	sbiw	r26, 0x04	; 4
		
		/* Select The Timer Channel & Set It's CallBack Function */
		switch(a_SOS_s->Timer_ID)
 a64:	81 81       	ldd	r24, Z+1	; 0x01
 a66:	81 30       	cpi	r24, 0x01	; 1
 a68:	59 f0       	breq	.+22     	; 0xa80 <SOS_Init+0x70>
 a6a:	18 f0       	brcs	.+6      	; 0xa72 <SOS_Init+0x62>
 a6c:	82 30       	cpi	r24, 0x02	; 2
 a6e:	81 f0       	breq	.+32     	; 0xa90 <SOS_Init+0x80>
 a70:	33 c0       	rjmp	.+102    	; 0xad8 <SOS_Init+0xc8>
		{
			case TIMER_CH0:
				g_SOS_TMR.Timer_CH_NO = TIMER_CH0;
 a72:	10 92 e5 00 	sts	0x00E5, r1
				TIMER0_SetCM(SOS_ISR_cbf);
 a76:	8c ee       	ldi	r24, 0xEC	; 236
 a78:	94 e0       	ldi	r25, 0x04	; 4
 a7a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <TIMER0_SetCM>
				break;
 a7e:	0f c0       	rjmp	.+30     	; 0xa9e <SOS_Init+0x8e>
			case TIMER_CH1:
				g_SOS_TMR.Timer_CH_NO = TIMER_CH1;
 a80:	81 e0       	ldi	r24, 0x01	; 1
 a82:	80 93 e5 00 	sts	0x00E5, r24
				TIMER1_SetCM(SOS_ISR_cbf);
 a86:	8c ee       	ldi	r24, 0xEC	; 236
 a88:	94 e0       	ldi	r25, 0x04	; 4
 a8a:	0e 94 76 03 	call	0x6ec	; 0x6ec <TIMER1_SetCM>
				break;
 a8e:	07 c0       	rjmp	.+14     	; 0xa9e <SOS_Init+0x8e>
			case TIMER_CH2:
				g_SOS_TMR.Timer_CH_NO = TIMER_CH2;
 a90:	82 e0       	ldi	r24, 0x02	; 2
 a92:	80 93 e5 00 	sts	0x00E5, r24
				TIMER2_SetCM(SOS_ISR_cbf);
 a96:	8c ee       	ldi	r24, 0xEC	; 236
 a98:	94 e0       	ldi	r25, 0x04	; 4
 a9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <TIMER2_SetCM>
				errorStauts = TMU_ERROR + INVALID_IN;
				return errorStauts;
		}
		
		/* Apply The Settings & Start The TMU Timer Hardware Module */
		Timer_Init(&g_SOS_TMR);
 a9e:	85 ee       	ldi	r24, 0xE5	; 229
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 ca 01 	call	0x394	; 0x394 <Timer_Init>
		Timer_Start(g_SOS_TMR.Timer_CH_NO, TMR_Ticks);	
 aa6:	6a ef       	ldi	r22, 0xFA	; 250
 aa8:	70 e0       	ldi	r23, 0x00	; 0
 aaa:	80 91 e5 00 	lds	r24, 0x00E5
 aae:	0e 94 30 03 	call	0x660	; 0x660 <Timer_Start>
 ab2:	e2 e9       	ldi	r30, 0x92	; 146
 ab4:	f0 e0       	ldi	r31, 0x00	; 0
 ab6:	81 ef       	ldi	r24, 0xF1	; 241
 ab8:	90 e0       	ldi	r25, 0x00	; 0
		
		/*  Initialize The Request Buffer  */
		for(index = 0; index < REQUEST_BUFFER_LEN; index++)
		{
			g_RequestBuffer[index].State = INACTIVE;
 aba:	10 82       	st	Z, r1
 abc:	df 01       	movw	r26, r30
 abe:	1c 97       	sbiw	r26, 0x0c	; 12
			g_RequestBuffer[index].Task_Ptr = NULL;
 ac0:	1d 92       	st	X+, r1
 ac2:	1c 92       	st	X, r1
 ac4:	73 96       	adiw	r30, 0x13	; 19
		/* Apply The Settings & Start The TMU Timer Hardware Module */
		Timer_Init(&g_SOS_TMR);
		Timer_Start(g_SOS_TMR.Timer_CH_NO, TMR_Ticks);	
		
		/*  Initialize The Request Buffer  */
		for(index = 0; index < REQUEST_BUFFER_LEN; index++)
 ac6:	e8 17       	cp	r30, r24
 ac8:	f9 07       	cpc	r31, r25
 aca:	b9 f7       	brne	.-18     	; 0xaba <SOS_Init+0xaa>
	else
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
	}
	return errorStauts;
 acc:	80 e0       	ldi	r24, 0x00	; 0
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	08 95       	ret
	}
	/*-------------[ In Case Of TMU's Null Pointer ]-------------*/
	else
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
 ad2:	89 ec       	ldi	r24, 0xC9	; 201
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	08 95       	ret
				g_SOS_TMR.Timer_CH_NO = TIMER_CH2;
				TIMER2_SetCM(SOS_ISR_cbf);
				break;
			default:
				errorStauts = TMU_ERROR + INVALID_IN;
				return errorStauts;
 ad8:	8c ec       	ldi	r24, 0xCC	; 204
 ada:	90 e0       	ldi	r25, 0x00	; 0
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
	}
	return errorStauts;
}
 adc:	08 95       	ret

00000ade <Start_Task>:


ERROR_STATUS Start_Task(FunPtr a_TaskFun, uint16_t a_TaskID, uint8_t a_Periodic_OneShot, uint32_t a_Time, uint8_t a_Periority, FunPtr PreHook, FunPtr PostHook)
{
 ade:	af 92       	push	r10
 ae0:	bf 92       	push	r11
 ae2:	cf 92       	push	r12
 ae4:	df 92       	push	r13
 ae6:	ef 92       	push	r14
 ae8:	0f 93       	push	r16
 aea:	1f 93       	push	r17
 aec:	cf 93       	push	r28
 aee:	df 93       	push	r29
 af0:	fc 01       	movw	r30, r24
	a_NewTask.Periodicity = a_Periodic_OneShot;
	a_NewTask.Periority = a_Periority;
	a_NewTask.Count = ZERO;
	a_NewTask.State = ACTIVE;
	
	if(g_SOS.State == INACTIVE || g_SOS.State == ACTIVE)
 af2:	90 91 63 00 	lds	r25, 0x0063
 af6:	92 30       	cpi	r25, 0x02	; 2
 af8:	08 f0       	brcs	.+2      	; 0xafc <Start_Task+0x1e>
 afa:	9a c0       	rjmp	.+308    	; 0xc30 <Start_Task+0x152>
	{
		/*-------------[ Check All CBF Pointers Validity ]-------------*/
		if(a_TaskFun != NULL && PreHook != NULL && PostHook != NULL)
 afc:	30 97       	sbiw	r30, 0x00	; 0
 afe:	09 f4       	brne	.+2      	; 0xb02 <Start_Task+0x24>
 b00:	9a c0       	rjmp	.+308    	; 0xc36 <Start_Task+0x158>
 b02:	cd 28       	or	r12, r13
 b04:	09 f4       	brne	.+2      	; 0xb08 <Start_Task+0x2a>
 b06:	9a c0       	rjmp	.+308    	; 0xc3c <Start_Task+0x15e>
 b08:	ab 28       	or	r10, r11
 b0a:	09 f4       	brne	.+2      	; 0xb0e <Start_Task+0x30>
 b0c:	9a c0       	rjmp	.+308    	; 0xc42 <Start_Task+0x164>
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
 b0e:	80 91 7f 00 	lds	r24, 0x007F
 b12:	90 91 80 00 	lds	r25, 0x0080
 b16:	05 97       	sbiw	r24, 0x05	; 5
 b18:	49 f0       	breq	.+18     	; 0xb2c <Start_Task+0x4e>
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
 b1a:	80 91 97 00 	lds	r24, 0x0097
 b1e:	90 91 98 00 	lds	r25, 0x0098
 b22:	86 17       	cp	r24, r22
 b24:	97 07       	cpc	r25, r23
 b26:	09 f0       	breq	.+2      	; 0xb2a <Start_Task+0x4c>
 b28:	42 c0       	rjmp	.+132    	; 0xbae <Start_Task+0xd0>
 b2a:	8e c0       	rjmp	.+284    	; 0xc48 <Start_Task+0x16a>
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Task & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].State == INACTIVE)
 b2c:	80 91 92 00 	lds	r24, 0x0092
 b30:	88 23       	and	r24, r24
 b32:	41 f0       	breq	.+16     	; 0xb44 <Start_Task+0x66>
 b34:	a5 ea       	ldi	r26, 0xA5	; 165
 b36:	b0 e0       	ldi	r27, 0x00	; 0
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Task & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
 b38:	81 e0       	ldi	r24, 0x01	; 1
 b3a:	90 e0       	ldi	r25, 0x00	; 0
				{
					if(g_RequestBuffer[index].State == INACTIVE)
 b3c:	5c 91       	ld	r21, X
 b3e:	51 11       	cpse	r21, r1
 b40:	2e c0       	rjmp	.+92     	; 0xb9e <Start_Task+0xc0>
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <Start_Task+0x6a>
 b44:	80 e0       	ldi	r24, 0x00	; 0
 b46:	90 e0       	ldi	r25, 0x00	; 0
					{
						g_RequestBuffer[index] = a_NewTask;
 b48:	53 e1       	ldi	r21, 0x13	; 19
 b4a:	58 9f       	mul	r21, r24
 b4c:	d0 01       	movw	r26, r0
 b4e:	59 9f       	mul	r21, r25
 b50:	b0 0d       	add	r27, r0
 b52:	11 24       	eor	r1, r1
 b54:	aa 57       	subi	r26, 0x7A	; 122
 b56:	bf 4f       	sbci	r27, 0xFF	; 255
 b58:	11 96       	adiw	r26, 0x01	; 1
 b5a:	fc 93       	st	X, r31
 b5c:	ee 93       	st	-X, r30
 b5e:	16 96       	adiw	r26, 0x06	; 6
 b60:	ec 92       	st	X, r14
 b62:	16 97       	sbiw	r26, 0x06	; 6
 b64:	17 96       	adiw	r26, 0x07	; 7
 b66:	4c 93       	st	X, r20
 b68:	17 97       	sbiw	r26, 0x07	; 7
 b6a:	18 96       	adiw	r26, 0x08	; 8
 b6c:	0d 93       	st	X+, r16
 b6e:	1d 93       	st	X+, r17
 b70:	2d 93       	st	X+, r18
 b72:	3c 93       	st	X, r19
 b74:	1b 97       	sbiw	r26, 0x0b	; 11
 b76:	21 e0       	ldi	r18, 0x01	; 1
 b78:	1c 96       	adiw	r26, 0x0c	; 12
 b7a:	2c 93       	st	X, r18
 b7c:	1c 97       	sbiw	r26, 0x0c	; 12
 b7e:	1d 96       	adiw	r26, 0x0d	; 13
 b80:	1d 92       	st	X+, r1
 b82:	1d 92       	st	X+, r1
 b84:	1d 92       	st	X+, r1
 b86:	1c 92       	st	X, r1
 b88:	50 97       	sbiw	r26, 0x10	; 16
 b8a:	52 96       	adiw	r26, 0x12	; 18
 b8c:	7c 93       	st	X, r23
 b8e:	6e 93       	st	-X, r22
 b90:	51 97       	sbiw	r26, 0x11	; 17
						break;
					}
				}
				/*  If All Tasks In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
 b92:	05 97       	sbiw	r24, 0x05	; 5
 b94:	09 f4       	brne	.+2      	; 0xb98 <Start_Task+0xba>
 b96:	5b c0       	rjmp	.+182    	; 0xc4e <Start_Task+0x170>
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
 b98:	80 e0       	ldi	r24, 0x00	; 0
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	5d c0       	rjmp	.+186    	; 0xc58 <Start_Task+0x17a>
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Task & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
 b9e:	01 96       	adiw	r24, 0x01	; 1
 ba0:	53 96       	adiw	r26, 0x13	; 19
 ba2:	85 30       	cpi	r24, 0x05	; 5
 ba4:	91 05       	cpc	r25, r1
 ba6:	51 f6       	brne	.-108    	; 0xb3c <Start_Task+0x5e>
				}
				/*  If All Tasks In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
				{
					a_errorStatus = TMU_ERROR + FULL_BUFFER;
					return a_errorStatus;
 ba8:	8f ec       	ldi	r24, 0xCF	; 207
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	55 c0       	rjmp	.+170    	; 0xc58 <Start_Task+0x17a>
 bae:	aa ea       	ldi	r26, 0xAA	; 170
 bb0:	b0 e0       	ldi	r27, 0x00	; 0
 bb2:	c6 ef       	ldi	r28, 0xF6	; 246
 bb4:	d0 e0       	ldi	r29, 0x00	; 0
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
 bb6:	8d 91       	ld	r24, X+
 bb8:	9c 91       	ld	r25, X
 bba:	11 97       	sbiw	r26, 0x01	; 1
 bbc:	86 17       	cp	r24, r22
 bbe:	97 07       	cpc	r25, r23
 bc0:	09 f4       	brne	.+2      	; 0xbc4 <Start_Task+0xe6>
 bc2:	48 c0       	rjmp	.+144    	; 0xc54 <Start_Task+0x176>
 bc4:	53 96       	adiw	r26, 0x13	; 19
			}
			/*  If There Still Space In The Request Buffer  */
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
 bc6:	ac 17       	cp	r26, r28
 bc8:	bd 07       	cpc	r27, r29
 bca:	a9 f7       	brne	.-22     	; 0xbb6 <Start_Task+0xd8>
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
					}
				}
				/* Add The New Consumer To The Request Buffer */
				g_RequestBuffer[g_ReqBuffer_Index++] = a_NewTask;				
 bcc:	80 91 7f 00 	lds	r24, 0x007F
 bd0:	90 91 80 00 	lds	r25, 0x0080
 bd4:	dc 01       	movw	r26, r24
 bd6:	11 96       	adiw	r26, 0x01	; 1
 bd8:	b0 93 80 00 	sts	0x0080, r27
 bdc:	a0 93 7f 00 	sts	0x007F, r26
 be0:	53 e1       	ldi	r21, 0x13	; 19
 be2:	58 9f       	mul	r21, r24
 be4:	d0 01       	movw	r26, r0
 be6:	59 9f       	mul	r21, r25
 be8:	b0 0d       	add	r27, r0
 bea:	11 24       	eor	r1, r1
 bec:	aa 57       	subi	r26, 0x7A	; 122
 bee:	bf 4f       	sbci	r27, 0xFF	; 255
 bf0:	11 96       	adiw	r26, 0x01	; 1
 bf2:	fc 93       	st	X, r31
 bf4:	ee 93       	st	-X, r30
 bf6:	16 96       	adiw	r26, 0x06	; 6
 bf8:	ec 92       	st	X, r14
 bfa:	16 97       	sbiw	r26, 0x06	; 6
 bfc:	17 96       	adiw	r26, 0x07	; 7
 bfe:	4c 93       	st	X, r20
 c00:	17 97       	sbiw	r26, 0x07	; 7
 c02:	18 96       	adiw	r26, 0x08	; 8
 c04:	0d 93       	st	X+, r16
 c06:	1d 93       	st	X+, r17
 c08:	2d 93       	st	X+, r18
 c0a:	3c 93       	st	X, r19
 c0c:	1b 97       	sbiw	r26, 0x0b	; 11
 c0e:	81 e0       	ldi	r24, 0x01	; 1
 c10:	1c 96       	adiw	r26, 0x0c	; 12
 c12:	8c 93       	st	X, r24
 c14:	1c 97       	sbiw	r26, 0x0c	; 12
 c16:	1d 96       	adiw	r26, 0x0d	; 13
 c18:	1d 92       	st	X+, r1
 c1a:	1d 92       	st	X+, r1
 c1c:	1d 92       	st	X+, r1
 c1e:	1c 92       	st	X, r1
 c20:	50 97       	sbiw	r26, 0x10	; 16
 c22:	52 96       	adiw	r26, 0x12	; 18
 c24:	7c 93       	st	X, r23
 c26:	6e 93       	st	-X, r22
 c28:	51 97       	sbiw	r26, 0x11	; 17
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
 c2a:	80 e0       	ldi	r24, 0x00	; 0
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	14 c0       	rjmp	.+40     	; 0xc58 <Start_Task+0x17a>
	}
	/*-------------[ In Case The TMU IS Not Active (Not Initialized Yet) ]-------------*/
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
 c30:	8a ec       	ldi	r24, 0xCA	; 202
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	11 c0       	rjmp	.+34     	; 0xc58 <Start_Task+0x17a>
		}
		/*-------------[ In Case Of Consumer's Null Pointer CBF ]-------------*/
		else
		{
			a_errorStatus = TMU_ERROR + NULL_PTR;
			return a_errorStatus;
 c36:	89 ec       	ldi	r24, 0xC9	; 201
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	0e c0       	rjmp	.+28     	; 0xc58 <Start_Task+0x17a>
 c3c:	89 ec       	ldi	r24, 0xC9	; 201
 c3e:	90 e0       	ldi	r25, 0x00	; 0
 c40:	0b c0       	rjmp	.+22     	; 0xc58 <Start_Task+0x17a>
 c42:	89 ec       	ldi	r24, 0xC9	; 201
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	08 c0       	rjmp	.+16     	; 0xc58 <Start_Task+0x17a>
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
					{
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
 c48:	8e ec       	ldi	r24, 0xCE	; 206
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	05 c0       	rjmp	.+10     	; 0xc58 <Start_Task+0x17a>
				}
				/*  If All Tasks In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
				{
					a_errorStatus = TMU_ERROR + FULL_BUFFER;
					return a_errorStatus;
 c4e:	8f ec       	ldi	r24, 0xCF	; 207
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	02 c0       	rjmp	.+4      	; 0xc58 <Start_Task+0x17a>
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
					{
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
 c54:	8e ec       	ldi	r24, 0xCE	; 206
 c56:	90 e0       	ldi	r25, 0x00	; 0
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
}
 c58:	df 91       	pop	r29
 c5a:	cf 91       	pop	r28
 c5c:	1f 91       	pop	r17
 c5e:	0f 91       	pop	r16
 c60:	ef 90       	pop	r14
 c62:	df 90       	pop	r13
 c64:	cf 90       	pop	r12
 c66:	bf 90       	pop	r11
 c68:	af 90       	pop	r10
 c6a:	08 95       	ret

00000c6c <SOS_Run>:
	return errorStatus;
}


void SOS_Run(void)
{
 c6c:	af 92       	push	r10
 c6e:	bf 92       	push	r11
 c70:	cf 92       	push	r12
 c72:	df 92       	push	r13
 c74:	ef 92       	push	r14
 c76:	ff 92       	push	r15
 c78:	0f 93       	push	r16
 c7a:	1f 93       	push	r17
 c7c:	cf 93       	push	r28
 c7e:	df 93       	push	r29
	uint8_t a_u8_ReadyIndex = ZERO, a_counter = ZERO;
	sint8_t a_temp;
	FunPtr a_TaskFunc, a_Task_PreHook, a_Task_PostHook;
	
	/*-------------[ Every TMU Tick, Go Through The Request Buffer ]-------------*/
	if(g_TMR_Ticks_Changed)
 c80:	80 91 7e 00 	lds	r24, 0x007E
 c84:	88 23       	and	r24, r24
 c86:	09 f4       	brne	.+2      	; 0xc8a <SOS_Run+0x1e>
 c88:	c9 c0       	rjmp	.+402    	; 0xe1c <SOS_Run+0x1b0>
	{
		/* Initialize The Ready Tasks Buffer */
		for(a_u16_index = ZERO; a_u16_index < REQUEST_BUFFER_LEN; a_u16_index++)
		{
			g_ReadyTasks[a_u16_index] = -1;
 c8a:	e1 e8       	ldi	r30, 0x81	; 129
 c8c:	f0 e0       	ldi	r31, 0x00	; 0
 c8e:	8f ef       	ldi	r24, 0xFF	; 255
 c90:	80 83       	st	Z, r24
 c92:	81 83       	std	Z+1, r24	; 0x01
 c94:	82 83       	std	Z+2, r24	; 0x02
 c96:	83 83       	std	Z+3, r24	; 0x03
 c98:	84 83       	std	Z+4, r24	; 0x04
 c9a:	c6 e8       	ldi	r28, 0x86	; 134
 c9c:	d0 e0       	ldi	r29, 0x00	; 0
 c9e:	02 e9       	ldi	r16, 0x92	; 146
 ca0:	10 e0       	ldi	r17, 0x00	; 0
 ca2:	f1 2c       	mov	r15, r1
 ca4:	e1 2c       	mov	r14, r1
		}
		
		/* Go Through The Tasks Request Buffer To Add All Ready Tasks To Be Executed */
		for(a_u16_index = ZERO; a_u16_index < REQUEST_BUFFER_LEN; a_u16_index++)
		{
			g_RequestBuffer[a_u16_index].Count += g_SOS_TickTime;
 ca6:	40 91 7c 00 	lds	r20, 0x007C
 caa:	50 91 7d 00 	lds	r21, 0x007D
 cae:	8d 85       	ldd	r24, Y+13	; 0x0d
 cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
 cb2:	af 85       	ldd	r26, Y+15	; 0x0f
 cb4:	b8 89       	ldd	r27, Y+16	; 0x10
 cb6:	84 0f       	add	r24, r20
 cb8:	95 1f       	adc	r25, r21
 cba:	a1 1d       	adc	r26, r1
 cbc:	b1 1d       	adc	r27, r1
 cbe:	8d 87       	std	Y+13, r24	; 0x0d
 cc0:	9e 87       	std	Y+14, r25	; 0x0e
 cc2:	af 87       	std	Y+15, r26	; 0x0f
 cc4:	b8 8b       	std	Y+16, r27	; 0x10
			
			/*-------------[ IF Consumer's Due Time Is Met!  ]-------------*/
			if(g_RequestBuffer[a_u16_index].Count >= g_RequestBuffer[a_u16_index].Time)
 cc6:	48 85       	ldd	r20, Y+8	; 0x08
 cc8:	59 85       	ldd	r21, Y+9	; 0x09
 cca:	6a 85       	ldd	r22, Y+10	; 0x0a
 ccc:	7b 85       	ldd	r23, Y+11	; 0x0b
 cce:	84 17       	cp	r24, r20
 cd0:	95 07       	cpc	r25, r21
 cd2:	a6 07       	cpc	r26, r22
 cd4:	b7 07       	cpc	r27, r23
 cd6:	b0 f1       	brcs	.+108    	; 0xd44 <SOS_Run+0xd8>
			{
				a_TaskFunc      = g_RequestBuffer[a_u16_index].Task_Ptr;
 cd8:	a8 80       	ld	r10, Y
 cda:	b9 80       	ldd	r11, Y+1	; 0x01
				a_Task_PreHook  = g_RequestBuffer[a_u16_index].Pre_Hook;
 cdc:	4a 81       	ldd	r20, Y+2	; 0x02
 cde:	5b 81       	ldd	r21, Y+3	; 0x03
				a_Task_PostHook = g_RequestBuffer[a_u16_index].Post_Hook;
 ce0:	cc 80       	ldd	r12, Y+4	; 0x04
 ce2:	dd 80       	ldd	r13, Y+5	; 0x05
 ce4:	f8 01       	movw	r30, r16
 ce6:	d8 01       	movw	r26, r16
 ce8:	15 97       	sbiw	r26, 0x05	; 5
				
				/* IF The Consumer Function IS Periodic */
				if(g_RequestBuffer[a_u16_index].Periodicity == PERIODIC && g_RequestBuffer[a_u16_index].State == ACTIVE)
 cea:	8c 91       	ld	r24, X
 cec:	81 30       	cpi	r24, 0x01	; 1
 cee:	f1 f4       	brne	.+60     	; 0xd2c <SOS_Run+0xc0>
 cf0:	80 81       	ld	r24, Z
 cf2:	81 30       	cpi	r24, 0x01	; 1
 cf4:	39 f5       	brne	.+78     	; 0xd44 <SOS_Run+0xd8>
				{
					g_RequestBuffer[a_u16_index].Count = ZERO;
 cf6:	1d 86       	std	Y+13, r1	; 0x0d
 cf8:	1e 86       	std	Y+14, r1	; 0x0e
 cfa:	1f 86       	std	Y+15, r1	; 0x0f
 cfc:	18 8a       	std	Y+16, r1	; 0x10
					g_ReadyTasks[a_u8_ReadyIndex++] = a_u16_index;
 cfe:	8e 0d       	add	r24, r14
 d00:	ee 2d       	mov	r30, r14
 d02:	f0 e0       	ldi	r31, 0x00	; 0
 d04:	ef 57       	subi	r30, 0x7F	; 127
 d06:	ff 4f       	sbci	r31, 0xFF	; 255
 d08:	f0 82       	st	Z, r15
					TCNT2 = g_ReadyTasks[a_u8_ReadyIndex-1];
 d0a:	e8 2f       	mov	r30, r24
 d0c:	f0 e0       	ldi	r31, 0x00	; 0
 d0e:	e0 58       	subi	r30, 0x80	; 128
 d10:	ff 4f       	sbci	r31, 0xFF	; 255
 d12:	90 81       	ld	r25, Z
 d14:	94 bd       	out	0x24, r25	; 36
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 d16:	ff e3       	ldi	r31, 0x3F	; 63
 d18:	2d e0       	ldi	r18, 0x0D	; 13
 d1a:	33 e0       	ldi	r19, 0x03	; 3
 d1c:	f1 50       	subi	r31, 0x01	; 1
 d1e:	20 40       	sbci	r18, 0x00	; 0
 d20:	30 40       	sbci	r19, 0x00	; 0
 d22:	e1 f7       	brne	.-8      	; 0xd1c <SOS_Run+0xb0>
 d24:	00 c0       	rjmp	.+0      	; 0xd26 <SOS_Run+0xba>
 d26:	00 00       	nop
				
				/* IF The Consumer Function IS Periodic */
				if(g_RequestBuffer[a_u16_index].Periodicity == PERIODIC && g_RequestBuffer[a_u16_index].State == ACTIVE)
				{
					g_RequestBuffer[a_u16_index].Count = ZERO;
					g_ReadyTasks[a_u8_ReadyIndex++] = a_u16_index;
 d28:	e8 2e       	mov	r14, r24
 d2a:	0c c0       	rjmp	.+24     	; 0xd44 <SOS_Run+0xd8>
					TCNT2 = g_ReadyTasks[a_u8_ReadyIndex-1];
					_delay_ms(1000);
				}
				
				/* Else IF The Consumer Function IS OneShot (Non-Periodic) */
				else if (g_RequestBuffer[a_u16_index].Periodicity == ONESHOT && g_RequestBuffer[a_u16_index].State == ACTIVE)
 d2c:	81 11       	cpse	r24, r1
 d2e:	0a c0       	rjmp	.+20     	; 0xd44 <SOS_Run+0xd8>
 d30:	80 81       	ld	r24, Z
 d32:	81 30       	cpi	r24, 0x01	; 1
 d34:	39 f4       	brne	.+14     	; 0xd44 <SOS_Run+0xd8>
				{
					g_RequestBuffer[a_u16_index].State = INACTIVE;
 d36:	10 82       	st	Z, r1
					a_Task_PreHook();
 d38:	fa 01       	movw	r30, r20
 d3a:	09 95       	icall
					a_TaskFunc();
 d3c:	f5 01       	movw	r30, r10
 d3e:	09 95       	icall
					a_Task_PostHook();
 d40:	f6 01       	movw	r30, r12
 d42:	09 95       	icall
 d44:	63 96       	adiw	r28, 0x13	; 19
 d46:	f3 94       	inc	r15
 d48:	0d 5e       	subi	r16, 0xED	; 237
 d4a:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			g_ReadyTasks[a_u16_index] = -1;
		}
		
		/* Go Through The Tasks Request Buffer To Add All Ready Tasks To Be Executed */
		for(a_u16_index = ZERO; a_u16_index < REQUEST_BUFFER_LEN; a_u16_index++)
 d4c:	f5 e0       	ldi	r31, 0x05	; 5
 d4e:	ff 12       	cpse	r15, r31
 d50:	aa cf       	rjmp	.-172    	; 0xca6 <SOS_Run+0x3a>
					a_Task_PostHook();
				}
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_u16_index = ZERO; g_ReadyTasks[a_u16_index] != -1; a_u16_index++)
 d52:	80 91 81 00 	lds	r24, 0x0081
 d56:	8f 3f       	cpi	r24, 0xFF	; 255
 d58:	09 f4       	brne	.+2      	; 0xd5c <SOS_Run+0xf0>
 d5a:	5e c0       	rjmp	.+188    	; 0xe18 <SOS_Run+0x1ac>
 d5c:	0f 2e       	mov	r0, r31
 d5e:	f1 e8       	ldi	r31, 0x81	; 129
 d60:	cf 2e       	mov	r12, r31
 d62:	f0 e0       	ldi	r31, 0x00	; 0
 d64:	df 2e       	mov	r13, r31
 d66:	f0 2d       	mov	r31, r0
 d68:	b6 01       	movw	r22, r12
 d6a:	e6 01       	movw	r28, r12
 d6c:	ff 24       	eor	r15, r15
 d6e:	f3 94       	inc	r15
		{
			for (a_counter = a_u16_index + 1; g_ReadyTasks[a_u16_index] != -1; a_counter++)
			{
				if(g_RequestBuffer[g_ReadyTasks[a_u16_index]].Periority > g_RequestBuffer[g_ReadyTasks[a_counter]].Periority)
 d70:	03 e1       	ldi	r16, 0x13	; 19
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_u16_index = ZERO; g_ReadyTasks[a_u16_index] != -1; a_u16_index++)
		{
			for (a_counter = a_u16_index + 1; g_ReadyTasks[a_u16_index] != -1; a_counter++)
 d72:	fb 01       	movw	r30, r22
 d74:	21 91       	ld	r18, Z+
 d76:	bf 01       	movw	r22, r30
 d78:	2f 3f       	cpi	r18, 0xFF	; 255
 d7a:	f9 f0       	breq	.+62     	; 0xdba <SOS_Run+0x14e>
 d7c:	3f 2d       	mov	r19, r15
			{
				if(g_RequestBuffer[g_ReadyTasks[a_u16_index]].Periority > g_RequestBuffer[g_ReadyTasks[a_counter]].Periority)
 d7e:	83 2f       	mov	r24, r19
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	fc 01       	movw	r30, r24
 d84:	ef 57       	subi	r30, 0x7F	; 127
 d86:	ff 4f       	sbci	r31, 0xFF	; 255
 d88:	10 81       	ld	r17, Z
 d8a:	20 03       	mulsu	r18, r16
 d8c:	d0 01       	movw	r26, r0
 d8e:	11 24       	eor	r1, r1
 d90:	aa 57       	subi	r26, 0x7A	; 122
 d92:	bf 4f       	sbci	r27, 0xFF	; 255
 d94:	10 03       	mulsu	r17, r16
 d96:	f0 01       	movw	r30, r0
 d98:	11 24       	eor	r1, r1
 d9a:	ea 57       	subi	r30, 0x7A	; 122
 d9c:	ff 4f       	sbci	r31, 0xFF	; 255
 d9e:	16 96       	adiw	r26, 0x06	; 6
 da0:	ac 91       	ld	r26, X
 da2:	e6 81       	ldd	r30, Z+6	; 0x06
 da4:	ea 17       	cp	r30, r26
 da6:	28 f4       	brcc	.+10     	; 0xdb2 <SOS_Run+0x146>
				{
					a_temp = g_ReadyTasks[a_u16_index];
					g_ReadyTasks[a_u16_index] = g_ReadyTasks[a_counter];
 da8:	18 83       	st	Y, r17
					g_ReadyTasks[a_counter] = a_temp;
 daa:	fc 01       	movw	r30, r24
 dac:	ef 57       	subi	r30, 0x7F	; 127
 dae:	ff 4f       	sbci	r31, 0xFF	; 255
 db0:	20 83       	st	Z, r18
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_u16_index = ZERO; g_ReadyTasks[a_u16_index] != -1; a_u16_index++)
		{
			for (a_counter = a_u16_index + 1; g_ReadyTasks[a_u16_index] != -1; a_counter++)
 db2:	3f 5f       	subi	r19, 0xFF	; 255
 db4:	28 81       	ld	r18, Y
 db6:	2f 3f       	cpi	r18, 0xFF	; 255
 db8:	11 f7       	brne	.-60     	; 0xd7e <SOS_Run+0x112>
 dba:	21 96       	adiw	r28, 0x01	; 1
 dbc:	f3 94       	inc	r15
					a_Task_PostHook();
				}
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_u16_index = ZERO; g_ReadyTasks[a_u16_index] != -1; a_u16_index++)
 dbe:	fb 01       	movw	r30, r22
 dc0:	80 81       	ld	r24, Z
 dc2:	8f 3f       	cpi	r24, 0xFF	; 255
 dc4:	b1 f6       	brne	.-84     	; 0xd72 <SOS_Run+0x106>
					g_ReadyTasks[a_counter] = a_temp;
				}					
			}
		}
		/* Execute The Ready Tasks One By One (In Priority Order) */
		for(a_u16_index = ZERO; g_ReadyTasks[a_u16_index] != -1; a_u16_index++)
 dc6:	20 91 81 00 	lds	r18, 0x0081
 dca:	2f 3f       	cpi	r18, 0xFF	; 255
 dcc:	29 f1       	breq	.+74     	; 0xe18 <SOS_Run+0x1ac>
		{
			g_RequestBuffer[g_ReadyTasks[a_u16_index]].Pre_Hook();
 dce:	13 e1       	ldi	r17, 0x13	; 19
 dd0:	21 03       	mulsu	r18, r17
 dd2:	f0 01       	movw	r30, r0
 dd4:	11 24       	eor	r1, r1
 dd6:	ea 57       	subi	r30, 0x7A	; 122
 dd8:	ff 4f       	sbci	r31, 0xFF	; 255
 dda:	02 80       	ldd	r0, Z+2	; 0x02
 ddc:	f3 81       	ldd	r31, Z+3	; 0x03
 dde:	e0 2d       	mov	r30, r0
 de0:	09 95       	icall
 de2:	e6 01       	movw	r28, r12
			g_RequestBuffer[g_ReadyTasks[a_u16_index]].Task_Ptr();
 de4:	f6 01       	movw	r30, r12
 de6:	21 91       	ld	r18, Z+
 de8:	6f 01       	movw	r12, r30
 dea:	21 03       	mulsu	r18, r17
 dec:	f0 01       	movw	r30, r0
 dee:	11 24       	eor	r1, r1
 df0:	ea 57       	subi	r30, 0x7A	; 122
 df2:	ff 4f       	sbci	r31, 0xFF	; 255
 df4:	01 90       	ld	r0, Z+
 df6:	f0 81       	ld	r31, Z
 df8:	e0 2d       	mov	r30, r0
 dfa:	09 95       	icall
			g_RequestBuffer[g_ReadyTasks[a_u16_index]].Post_Hook();
 dfc:	28 81       	ld	r18, Y
 dfe:	21 03       	mulsu	r18, r17
 e00:	f0 01       	movw	r30, r0
 e02:	11 24       	eor	r1, r1
 e04:	ea 57       	subi	r30, 0x7A	; 122
 e06:	ff 4f       	sbci	r31, 0xFF	; 255
 e08:	04 80       	ldd	r0, Z+4	; 0x04
 e0a:	f5 81       	ldd	r31, Z+5	; 0x05
 e0c:	e0 2d       	mov	r30, r0
 e0e:	09 95       	icall
					g_ReadyTasks[a_counter] = a_temp;
				}					
			}
		}
		/* Execute The Ready Tasks One By One (In Priority Order) */
		for(a_u16_index = ZERO; g_ReadyTasks[a_u16_index] != -1; a_u16_index++)
 e10:	f6 01       	movw	r30, r12
 e12:	20 81       	ld	r18, Z
 e14:	2f 3f       	cpi	r18, 0xFF	; 255
 e16:	e1 f6       	brne	.-72     	; 0xdd0 <SOS_Run+0x164>
			g_RequestBuffer[g_ReadyTasks[a_u16_index]].Pre_Hook();
			g_RequestBuffer[g_ReadyTasks[a_u16_index]].Task_Ptr();
			g_RequestBuffer[g_ReadyTasks[a_u16_index]].Post_Hook();
		}		
		
		g_TMR_Ticks_Changed = FALSE;
 e18:	10 92 7e 00 	sts	0x007E, r1
	}
}
 e1c:	df 91       	pop	r29
 e1e:	cf 91       	pop	r28
 e20:	1f 91       	pop	r17
 e22:	0f 91       	pop	r16
 e24:	ff 90       	pop	r15
 e26:	ef 90       	pop	r14
 e28:	df 90       	pop	r13
 e2a:	cf 90       	pop	r12
 e2c:	bf 90       	pop	r11
 e2e:	af 90       	pop	r10
 e30:	08 95       	ret

00000e32 <__tablejump2__>:
 e32:	ee 0f       	add	r30, r30
 e34:	ff 1f       	adc	r31, r31
 e36:	05 90       	lpm	r0, Z+
 e38:	f4 91       	lpm	r31, Z
 e3a:	e0 2d       	mov	r30, r0
 e3c:	09 94       	ijmp

00000e3e <_exit>:
 e3e:	f8 94       	cli

00000e40 <__stop_program>:
 e40:	ff cf       	rjmp	.-2      	; 0xe40 <__stop_program>
