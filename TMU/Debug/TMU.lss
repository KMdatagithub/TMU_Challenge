
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000acc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000acc  00000b60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000067  00800062  00800062  00000b62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e06  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a9  00000000  00000000  00002bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077e  00000000  00000000  00003597  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e4  00000000  00000000  00003d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000996  00000000  00000000  000043fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bba  00000000  00000000  00004d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  0000694c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_4>
  14:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_7>
  20:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_8>
  24:	0c 94 48 02 	jmp	0x490	; 0x490 <__vector_9>
  28:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_10>
  2c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_11>
  30:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_12>
  34:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3c       	cpi	r26, 0xC9	; 201
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  8a:	0c 94 64 05 	jmp	0xac8	; 0xac8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <omgplzzz>:
	
/* TX Completion Notification Routine */
void omgplzzz(enum_BcmStatus st)
{
	/* Debug Point */
	TCNT1L = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8c bd       	out	0x2c, r24	; 44
	/* Debug Point */
	
	g_UART_TXindex = ZERO;
  96:	10 92 62 00 	sts	0x0062, r1
	BCM_DeInit(&BCM1);
  9a:	82 e9       	ldi	r24, 0x92	; 146
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 22 05 	call	0xa44	; 0xa44 <BCM_DeInit>
	BCM1.BCM_CH_ID = 1;
  a2:	e2 e9       	ldi	r30, 0x92	; 146
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	81 83       	std	Z+1, r24	; 0x01
	BCM1.Mode = BCM_Tx_Mode;
  aa:	10 82       	st	Z, r1
	BCM1.Protocol = SPI_Protocol;
  ac:	82 83       	std	Z+2, r24	; 0x02
	BCM_Init(&BCM1);
  ae:	cf 01       	movw	r24, r30
  b0:	0e 94 9e 04 	call	0x93c	; 0x93c <BCM_Init>
  b4:	08 95       	ret

000000b6 <UART_ISR_cbf>:
}


void UART_ISR_cbf(void)
{
  b6:	cf 93       	push	r28
	txBuffer[g_UART_TXindex++] = UART_Read();
  b8:	c0 91 62 00 	lds	r28, 0x0062
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	8c 0f       	add	r24, r28
  c0:	80 93 62 00 	sts	0x0062, r24
  c4:	0e 94 2f 03 	call	0x65e	; 0x65e <UART_Read>
  c8:	ec 2f       	mov	r30, r28
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	eb 56       	subi	r30, 0x6B	; 107
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	80 83       	st	Z, r24
	if(txBuffer[g_UART_TXindex-1] == 0x0D)
  d2:	e0 91 62 00 	lds	r30, 0x0062
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ec 56       	subi	r30, 0x6C	; 108
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	80 81       	ld	r24, Z
  de:	8d 30       	cpi	r24, 0x0D	; 13
  e0:	59 f4       	brne	.+22     	; 0xf8 <UART_ISR_cbf+0x42>
	{
		BCM_Send(txBuffer, g_UART_TXindex, &BCM1, omgplzzz);
  e2:	60 91 62 00 	lds	r22, 0x0062
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	29 e4       	ldi	r18, 0x49	; 73
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	42 e9       	ldi	r20, 0x92	; 146
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	85 e9       	ldi	r24, 0x95	; 149
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 26 05 	call	0xa4c	; 0xa4c <BCM_Send>
	}
}
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <main>:

int main(void)
{
	/*-------------[ BCM Initialization ]-------------*/
	BCM1.BCM_CH_ID = 1;
  fc:	e2 e9       	ldi	r30, 0x92	; 146
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	81 83       	std	Z+1, r24	; 0x01
	BCM1.Mode = BCM_Tx_Mode;
 104:	10 82       	st	Z, r1
	BCM1.Protocol = SPI_Protocol;
 106:	82 83       	std	Z+2, r24	; 0x02
	BCM_Init(&BCM1);
 108:	cf 01       	movw	r24, r30
 10a:	0e 94 9e 04 	call	0x93c	; 0x93c <BCM_Init>
		
	/*-------------[ UART Initialization ]-------------*/
	UART1.baudrate   = 9600;
 10e:	e7 e8       	ldi	r30, 0x87	; 135
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	95 e2       	ldi	r25, 0x25	; 37
 116:	a0 e0       	ldi	r26, 0x00	; 0
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	87 83       	std	Z+7, r24	; 0x07
 11c:	90 87       	std	Z+8, r25	; 0x08
 11e:	a1 87       	std	Z+9, r26	; 0x09
 120:	b2 87       	std	Z+10, r27	; 0x0a
	UART1.dataBits   = UART_Bits_8;
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	81 83       	std	Z+1, r24	; 0x01
	UART1.stopBits   = StopBits_1;
 126:	14 82       	std	Z+4, r1	; 0x04
	UART1.parity     = No_Parity;
 128:	12 82       	std	Z+2, r1	; 0x02
	UART1.sampleEdge = RisingEdg;
 12a:	15 82       	std	Z+5, r1	; 0x05
	UART1.uartSync   = UART_Async;
 12c:	13 82       	std	Z+3, r1	; 0x03
	UART1.mode       = UART_RX;
 12e:	80 e1       	ldi	r24, 0x10	; 16
 130:	80 83       	st	Z, r24
	UART1.uartInterrupts = OnRx;
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	86 83       	std	Z+6, r24	; 0x06
	UART_SetRX(UART_ISR_cbf);
 136:	8b e5       	ldi	r24, 0x5B	; 91
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 3a 03 	call	0x674	; 0x674 <UART_SetRX>
	UART_Init(&UART1);
 13e:	87 e8       	ldi	r24, 0x87	; 135
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 c3 02 	call	0x586	; 0x586 <UART_Init>
	
	/*-------------[ SUPER LOOP ]-------------*/
	while (1) 
    {
		BCM_Tx_Dispatcher();
 146:	0e 94 2b 04 	call	0x856	; 0x856 <BCM_Tx_Dispatcher>
    }
 14a:	fd cf       	rjmp	.-6      	; 0x146 <main+0x4a>

0000014c <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
 14c:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
 14e:	89 2b       	or	r24, r25
 150:	c9 f1       	breq	.+114    	; 0x1c4 <DIO_init+0x78>
	{
		switch(DIO_info->GPIO)
 152:	80 81       	ld	r24, Z
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	91 f0       	breq	.+36     	; 0x17c <DIO_init+0x30>
 158:	28 f0       	brcs	.+10     	; 0x164 <DIO_init+0x18>
 15a:	82 30       	cpi	r24, 0x02	; 2
 15c:	d9 f0       	breq	.+54     	; 0x194 <DIO_init+0x48>
 15e:	83 30       	cpi	r24, 0x03	; 3
 160:	29 f1       	breq	.+74     	; 0x1ac <DIO_init+0x60>
 162:	32 c0       	rjmp	.+100    	; 0x1c8 <DIO_init+0x7c>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
 164:	81 81       	ldd	r24, Z+1	; 0x01
 166:	2a b3       	in	r18, 0x1a	; 26
 168:	98 2f       	mov	r25, r24
 16a:	90 95       	com	r25
 16c:	29 23       	and	r18, r25
 16e:	92 81       	ldd	r25, Z+2	; 0x02
 170:	98 23       	and	r25, r24
 172:	82 2f       	mov	r24, r18
 174:	89 2b       	or	r24, r25
 176:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
 178:	80 e0       	ldi	r24, 0x00	; 0
			break;
 17a:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
 17c:	81 81       	ldd	r24, Z+1	; 0x01
 17e:	27 b3       	in	r18, 0x17	; 23
 180:	98 2f       	mov	r25, r24
 182:	90 95       	com	r25
 184:	29 23       	and	r18, r25
 186:	92 81       	ldd	r25, Z+2	; 0x02
 188:	98 23       	and	r25, r24
 18a:	82 2f       	mov	r24, r18
 18c:	89 2b       	or	r24, r25
 18e:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
 190:	80 e0       	ldi	r24, 0x00	; 0
			break;
 192:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
 194:	81 81       	ldd	r24, Z+1	; 0x01
 196:	24 b3       	in	r18, 0x14	; 20
 198:	98 2f       	mov	r25, r24
 19a:	90 95       	com	r25
 19c:	29 23       	and	r18, r25
 19e:	92 81       	ldd	r25, Z+2	; 0x02
 1a0:	98 23       	and	r25, r24
 1a2:	82 2f       	mov	r24, r18
 1a4:	89 2b       	or	r24, r25
 1a6:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1aa:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
 1ac:	81 81       	ldd	r24, Z+1	; 0x01
 1ae:	21 b3       	in	r18, 0x11	; 17
 1b0:	98 2f       	mov	r25, r24
 1b2:	90 95       	com	r25
 1b4:	29 23       	and	r18, r25
 1b6:	92 81       	ldd	r25, Z+2	; 0x02
 1b8:	98 23       	and	r25, r24
 1ba:	82 2f       	mov	r24, r18
 1bc:	89 2b       	or	r24, r25
 1be:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1c2:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 1ca:	08 95       	ret

000001cc <_SPIInitMaster>:
#include "SPI__.h"

 void (*PTR_CALL_BACK)(void);
 volatile uint8_t g_u8_RxFlag = TRUE;

extern void _SPIInitMaster(SPI_cfg_s * a_SPI_cfg){
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	00 d0       	rcall	.+0      	; 0x1d2 <_SPIInitMaster+0x6>
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <_SPIInitMaster+0x8>
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <_SPIInitMaster+0xa>
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	fc 01       	movw	r30, r24
		DIO_Cfg_s SPI_output_pins ;
		
	
	
		/* clear status register */
		SPSR = ZERO ;
 1dc:	1e b8       	out	0x0e, r1	; 14
		
		/* clear control mode */
		
		SPCR = ZERO ;
 1de:	1d b8       	out	0x0d, r1	; 13
		
		/* master or slave bit 4 */
		SPCR |= Master_SPI ; 
 1e0:	6c 9a       	sbi	0x0d, 4	; 13
		
		/*set clock*/
		 
		SPCR|= a_SPI_cfg-> clockSPI ;
 1e2:	9d b1       	in	r25, 0x0d	; 13
 1e4:	80 81       	ld	r24, Z
 1e6:	89 2b       	or	r24, r25
 1e8:	8d b9       	out	0x0d, r24	; 13
		
		/* data order update */
		
		SPCR|= a_SPI_cfg-> dataorder ;
 1ea:	9d b1       	in	r25, 0x0d	; 13
 1ec:	82 81       	ldd	r24, Z+2	; 0x02
 1ee:	89 2b       	or	r24, r25
 1f0:	8d b9       	out	0x0d, r24	; 13
		
		/* set phase bit2 and polarity bit3 */
		
		 SPCR |= a_SPI_cfg-> phasePolarityMode;
 1f2:	9d b1       	in	r25, 0x0d	; 13
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	89 2b       	or	r24, r25
 1f8:	8d b9       	out	0x0d, r24	; 13
		
		/* set interrupt  */
		
		SPCR |= INTERRUPT_SPI ;
 1fa:	6f 9a       	sbi	0x0d, 7	; 13
		
		/*set interrupt call back function */
		
		PTR_CALL_BACK = a_SPI_cfg->ptr_call_back ;
 1fc:	83 81       	ldd	r24, Z+3	; 0x03
 1fe:	94 81       	ldd	r25, Z+4	; 0x04
 200:	90 93 c8 00 	sts	0x00C8, r25
 204:	80 93 c7 00 	sts	0x00C7, r24
	//SS   bit4 OUTPUT
	//MOSI bit5 OUTPUT
	//MISO bit6 INPUT
	//SCK  bit7 OUTPUT

	SPI_input_pins.GPIO = SPI_PORT ;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	89 83       	std	Y+1, r24	; 0x01
	SPI_input_pins.pins = MISO_PIN ;
 20c:	90 e4       	ldi	r25, 0x40	; 64
 20e:	9a 83       	std	Y+2, r25	; 0x02
	SPI_input_pins.dir = INPUT ;
 210:	1b 82       	std	Y+3, r1	; 0x03
	
	SPI_output_pins.GPIO = SPI_PORT ;
 212:	8c 83       	std	Y+4, r24	; 0x04
	SPI_output_pins.pins =  SCK_PIN|MOSI_PIN|SS_PIN ;
 214:	80 eb       	ldi	r24, 0xB0	; 176
 216:	8d 83       	std	Y+5, r24	; 0x05
	SPI_output_pins.dir = OUTPUT ;
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	8e 83       	std	Y+6, r24	; 0x06
	
	DIO_init(&SPI_output_pins);
 21c:	ce 01       	movw	r24, r28
 21e:	04 96       	adiw	r24, 0x04	; 4
 220:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_init>
	DIO_init(&SPI_input_pins);
 224:	ce 01       	movw	r24, r28
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_init>
	
		
	/// enable SPI bit 6
	
	sei();
 22c:	78 94       	sei
	SPCR |= Enable_SPI ;
 22e:	6e 9a       	sbi	0x0d, 6	; 13
	
}
 230:	26 96       	adiw	r28, 0x06	; 6
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <_SPIInitSlave>:

extern void _SPIInitSlave(SPI_cfg_s * a_SPI_cfg ){
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <_SPIInitSlave+0x6>
 248:	00 d0       	rcall	.+0      	; 0x24a <_SPIInitSlave+0x8>
 24a:	00 d0       	rcall	.+0      	; 0x24c <_SPIInitSlave+0xa>
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	fc 01       	movw	r30, r24
	DIO_Cfg_s SPI_output_pins ;
			
			
	
	//// clear status register
	SPSR = ZERO ;
 252:	1e b8       	out	0x0e, r1	; 14
	
	/// clear control mode
	
	SPCR = ZERO ;
 254:	1d b8       	out	0x0d, r1	; 13
	
	
	// master or slave bit 4
	SPCR |= Slave_SPI ;
 256:	8d b1       	in	r24, 0x0d	; 13
 258:	8d b9       	out	0x0d, r24	; 13
	
	/// data order update
	
	SPCR|=a_SPI_cfg-> dataorder ;
 25a:	9d b1       	in	r25, 0x0d	; 13
 25c:	82 81       	ldd	r24, Z+2	; 0x02
 25e:	89 2b       	or	r24, r25
 260:	8d b9       	out	0x0d, r24	; 13
	
	//set clock
	
	SPCR |= a_SPI_cfg-> clockSPI ;
 262:	9d b1       	in	r25, 0x0d	; 13
 264:	80 81       	ld	r24, Z
 266:	89 2b       	or	r24, r25
 268:	8d b9       	out	0x0d, r24	; 13
	
	// set phase and polarity
	SPCR |=a_SPI_cfg -> phasePolarityMode ;
 26a:	9d b1       	in	r25, 0x0d	; 13
 26c:	81 81       	ldd	r24, Z+1	; 0x01
 26e:	89 2b       	or	r24, r25
 270:	8d b9       	out	0x0d, r24	; 13
	
	/* set interrupt  */
	SPCR |= INTERRUPT_SPI ;
 272:	6f 9a       	sbi	0x0d, 7	; 13
	
	/*set interrupt call back function */
		
	PTR_CALL_BACK = a_SPI_cfg->ptr_call_back ;
 274:	83 81       	ldd	r24, Z+3	; 0x03
 276:	94 81       	ldd	r25, Z+4	; 0x04
 278:	90 93 c8 00 	sts	0x00C8, r25
 27c:	80 93 c7 00 	sts	0x00C7, r24
	//SS   bit4 INPUT
	//MOSI bit5 INPUT
	//MISO bit6 OUTPUT
	//SCK  bit7 INPUT

	SPI_input_pins.GPIO = SPI_PORT ;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	89 83       	std	Y+1, r24	; 0x01
	SPI_input_pins.pins =  SCK_PIN|MOSI_PIN|SS_PIN ;
 284:	90 eb       	ldi	r25, 0xB0	; 176
 286:	9a 83       	std	Y+2, r25	; 0x02
	SPI_input_pins.dir = INPUT ;
 288:	1b 82       	std	Y+3, r1	; 0x03

	SPI_output_pins.GPIO = SPI_PORT ;
 28a:	8c 83       	std	Y+4, r24	; 0x04
	SPI_output_pins.pins = MISO_PIN ;
 28c:	80 e4       	ldi	r24, 0x40	; 64
 28e:	8d 83       	std	Y+5, r24	; 0x05
	SPI_output_pins.dir = OUTPUT ;
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	8e 83       	std	Y+6, r24	; 0x06


	DIO_init(&SPI_output_pins);
 294:	ce 01       	movw	r24, r28
 296:	04 96       	adiw	r24, 0x04	; 4
 298:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_init>
	DIO_init(&SPI_input_pins);
 29c:	ce 01       	movw	r24, r28
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_init>
	

	/// enable SPI bit 6
	sei();
 2a4:	78 94       	sei
	
	SPCR |= Enable_SPI ;
 2a6:	6e 9a       	sbi	0x0d, 6	; 13
	
		
	
}
 2a8:	26 96       	adiw	r28, 0x06	; 6
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <_SPISend>:
}

extern ERROR_STATUS _SPISend(uint8_t data)
{
	uint8_t state = E_NOK;	
	if(g_u8_RxFlag == TRUE)
 2ba:	90 91 60 00 	lds	r25, 0x0060
 2be:	91 30       	cpi	r25, 0x01	; 1
 2c0:	29 f4       	brne	.+10     	; 0x2cc <_SPISend+0x12>
	{
		SPDR = data;
 2c2:	8f b9       	out	0x0f, r24	; 15
		g_u8_RxFlag = FALSE;	
 2c4:	10 92 60 00 	sts	0x0060, r1
		state = E_OK;
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	08 95       	ret
	g_u8_RxFlag = FALSE ;
}

extern ERROR_STATUS _SPISend(uint8_t data)
{
	uint8_t state = E_NOK;	
 2cc:	81 e0       	ldi	r24, 0x01	; 1
		SPDR = data;
		g_u8_RxFlag = FALSE;	
		state = E_OK;
	}
	return state;
}
 2ce:	08 95       	ret

000002d0 <_SPIRead>:

extern ERROR_STATUS _SPIRead(uint8_t* data)
{
 2d0:	fc 01       	movw	r30, r24
	uint8_t state = E_NOK;
	if(g_u8_RxFlag == TRUE)
 2d2:	90 91 60 00 	lds	r25, 0x0060
 2d6:	91 30       	cpi	r25, 0x01	; 1
 2d8:	31 f4       	brne	.+12     	; 0x2e6 <_SPIRead+0x16>
	{
		*data = SPDR;
 2da:	8f b1       	in	r24, 0x0f	; 15
 2dc:	80 83       	st	Z, r24
		g_u8_RxFlag = FALSE;
 2de:	10 92 60 00 	sts	0x0060, r1
		state = E_OK;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret
	return state;
}

extern ERROR_STATUS _SPIRead(uint8_t* data)
{
	uint8_t state = E_NOK;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
		*data = SPDR;
		g_u8_RxFlag = FALSE;
		state = E_OK;
	}
	return state;
}
 2e8:	08 95       	ret

000002ea <SPI_SetCBF>:


void SPI_SetCBF(FunPtr isr_ptr)
{
	PTR_CALL_BACK = isr_ptr;
 2ea:	90 93 c8 00 	sts	0x00C8, r25
 2ee:	80 93 c7 00 	sts	0x00C7, r24
 2f2:	08 95       	ret

000002f4 <__vector_12>:
}

ISR(SPI_STC_vect)
{
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	4f 93       	push	r20
 304:	5f 93       	push	r21
 306:	6f 93       	push	r22
 308:	7f 93       	push	r23
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	af 93       	push	r26
 310:	bf 93       	push	r27
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
	g_u8_RxFlag = TRUE;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 93 60 00 	sts	0x0060, r24
	PTR_CALL_BACK();
 31c:	e0 91 c7 00 	lds	r30, 0x00C7
 320:	f0 91 c8 00 	lds	r31, 0x00C8
 324:	09 95       	icall
}
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	bf 91       	pop	r27
 32c:	af 91       	pop	r26
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	7f 91       	pop	r23
 334:	6f 91       	pop	r22
 336:	5f 91       	pop	r21
 338:	4f 91       	pop	r20
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	2f 93       	push	r18
 354:	3f 93       	push	r19
 356:	4f 93       	push	r20
 358:	5f 93       	push	r21
 35a:	6f 93       	push	r22
 35c:	7f 93       	push	r23
 35e:	8f 93       	push	r24
 360:	9f 93       	push	r25
 362:	af 93       	push	r26
 364:	bf 93       	push	r27
 366:	ef 93       	push	r30
 368:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
 36a:	e0 91 6d 00 	lds	r30, 0x006D
 36e:	f0 91 6e 00 	lds	r31, 0x006E
 372:	30 97       	sbiw	r30, 0x00	; 0
 374:	09 f0       	breq	.+2      	; 0x378 <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
 376:	09 95       	icall
	}
}
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	7f 91       	pop	r23
 386:	6f 91       	pop	r22
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	2f 93       	push	r18
 3a6:	3f 93       	push	r19
 3a8:	4f 93       	push	r20
 3aa:	5f 93       	push	r21
 3ac:	6f 93       	push	r22
 3ae:	7f 93       	push	r23
 3b0:	8f 93       	push	r24
 3b2:	9f 93       	push	r25
 3b4:	af 93       	push	r26
 3b6:	bf 93       	push	r27
 3b8:	ef 93       	push	r30
 3ba:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
 3bc:	e0 91 6b 00 	lds	r30, 0x006B
 3c0:	f0 91 6c 00 	lds	r31, 0x006C
 3c4:	30 97       	sbiw	r30, 0x00	; 0
 3c6:	09 f0       	breq	.+2      	; 0x3ca <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
 3c8:	09 95       	icall
	}
}
 3ca:	ff 91       	pop	r31
 3cc:	ef 91       	pop	r30
 3ce:	bf 91       	pop	r27
 3d0:	af 91       	pop	r26
 3d2:	9f 91       	pop	r25
 3d4:	8f 91       	pop	r24
 3d6:	7f 91       	pop	r23
 3d8:	6f 91       	pop	r22
 3da:	5f 91       	pop	r21
 3dc:	4f 91       	pop	r20
 3de:	3f 91       	pop	r19
 3e0:	2f 91       	pop	r18
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
 40e:	e0 91 65 00 	lds	r30, 0x0065
 412:	f0 91 66 00 	lds	r31, 0x0066
 416:	30 97       	sbiw	r30, 0x00	; 0
 418:	09 f0       	breq	.+2      	; 0x41c <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
 41a:	09 95       	icall
	}
}
 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	bf 91       	pop	r27
 422:	af 91       	pop	r26
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	7f 91       	pop	r23
 42a:	6f 91       	pop	r22
 42c:	5f 91       	pop	r21
 42e:	4f 91       	pop	r20
 430:	3f 91       	pop	r19
 432:	2f 91       	pop	r18
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 43e:	1f 92       	push	r1
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	0f 92       	push	r0
 446:	11 24       	eor	r1, r1
 448:	2f 93       	push	r18
 44a:	3f 93       	push	r19
 44c:	4f 93       	push	r20
 44e:	5f 93       	push	r21
 450:	6f 93       	push	r22
 452:	7f 93       	push	r23
 454:	8f 93       	push	r24
 456:	9f 93       	push	r25
 458:	af 93       	push	r26
 45a:	bf 93       	push	r27
 45c:	ef 93       	push	r30
 45e:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
 460:	e0 91 63 00 	lds	r30, 0x0063
 464:	f0 91 64 00 	lds	r31, 0x0064
 468:	30 97       	sbiw	r30, 0x00	; 0
 46a:	09 f0       	breq	.+2      	; 0x46e <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
 46c:	09 95       	icall
	}
}
 46e:	ff 91       	pop	r31
 470:	ef 91       	pop	r30
 472:	bf 91       	pop	r27
 474:	af 91       	pop	r26
 476:	9f 91       	pop	r25
 478:	8f 91       	pop	r24
 47a:	7f 91       	pop	r23
 47c:	6f 91       	pop	r22
 47e:	5f 91       	pop	r21
 480:	4f 91       	pop	r20
 482:	3f 91       	pop	r19
 484:	2f 91       	pop	r18
 486:	0f 90       	pop	r0
 488:	0f be       	out	0x3f, r0	; 63
 48a:	0f 90       	pop	r0
 48c:	1f 90       	pop	r1
 48e:	18 95       	reti

00000490 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 490:	1f 92       	push	r1
 492:	0f 92       	push	r0
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	0f 92       	push	r0
 498:	11 24       	eor	r1, r1
 49a:	2f 93       	push	r18
 49c:	3f 93       	push	r19
 49e:	4f 93       	push	r20
 4a0:	5f 93       	push	r21
 4a2:	6f 93       	push	r22
 4a4:	7f 93       	push	r23
 4a6:	8f 93       	push	r24
 4a8:	9f 93       	push	r25
 4aa:	af 93       	push	r26
 4ac:	bf 93       	push	r27
 4ae:	ef 93       	push	r30
 4b0:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
 4b2:	e0 91 69 00 	lds	r30, 0x0069
 4b6:	f0 91 6a 00 	lds	r31, 0x006A
 4ba:	30 97       	sbiw	r30, 0x00	; 0
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <__vector_9+0x30>
	{
		Ptr_Timer1_OV();
 4be:	09 95       	icall
	}
}
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	bf 91       	pop	r27
 4c6:	af 91       	pop	r26
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	7f 91       	pop	r23
 4ce:	6f 91       	pop	r22
 4d0:	5f 91       	pop	r21
 4d2:	4f 91       	pop	r20
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 4e2:	1f 92       	push	r1
 4e4:	0f 92       	push	r0
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	0f 92       	push	r0
 4ea:	11 24       	eor	r1, r1
 4ec:	2f 93       	push	r18
 4ee:	3f 93       	push	r19
 4f0:	4f 93       	push	r20
 4f2:	5f 93       	push	r21
 4f4:	6f 93       	push	r22
 4f6:	7f 93       	push	r23
 4f8:	8f 93       	push	r24
 4fa:	9f 93       	push	r25
 4fc:	af 93       	push	r26
 4fe:	bf 93       	push	r27
 500:	ef 93       	push	r30
 502:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 504:	e0 91 67 00 	lds	r30, 0x0067
 508:	f0 91 68 00 	lds	r31, 0x0068
 50c:	30 97       	sbiw	r30, 0x00	; 0
 50e:	09 f0       	breq	.+2      	; 0x512 <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
 510:	09 95       	icall
	}	
}
 512:	ff 91       	pop	r31
 514:	ef 91       	pop	r30
 516:	bf 91       	pop	r27
 518:	af 91       	pop	r26
 51a:	9f 91       	pop	r25
 51c:	8f 91       	pop	r24
 51e:	7f 91       	pop	r23
 520:	6f 91       	pop	r22
 522:	5f 91       	pop	r21
 524:	4f 91       	pop	r20
 526:	3f 91       	pop	r19
 528:	2f 91       	pop	r18
 52a:	0f 90       	pop	r0
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	0f 90       	pop	r0
 530:	1f 90       	pop	r1
 532:	18 95       	reti

00000534 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 534:	1f 92       	push	r1
 536:	0f 92       	push	r0
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	0f 92       	push	r0
 53c:	11 24       	eor	r1, r1
 53e:	2f 93       	push	r18
 540:	3f 93       	push	r19
 542:	4f 93       	push	r20
 544:	5f 93       	push	r21
 546:	6f 93       	push	r22
 548:	7f 93       	push	r23
 54a:	8f 93       	push	r24
 54c:	9f 93       	push	r25
 54e:	af 93       	push	r26
 550:	bf 93       	push	r27
 552:	ef 93       	push	r30
 554:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 556:	e0 91 67 00 	lds	r30, 0x0067
 55a:	f0 91 68 00 	lds	r31, 0x0068
 55e:	30 97       	sbiw	r30, 0x00	; 0
 560:	09 f0       	breq	.+2      	; 0x564 <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 562:	09 95       	icall
	}
}
 564:	ff 91       	pop	r31
 566:	ef 91       	pop	r30
 568:	bf 91       	pop	r27
 56a:	af 91       	pop	r26
 56c:	9f 91       	pop	r25
 56e:	8f 91       	pop	r24
 570:	7f 91       	pop	r23
 572:	6f 91       	pop	r22
 574:	5f 91       	pop	r21
 576:	4f 91       	pop	r20
 578:	3f 91       	pop	r19
 57a:	2f 91       	pop	r18
 57c:	0f 90       	pop	r0
 57e:	0f be       	out	0x3f, r0	; 63
 580:	0f 90       	pop	r0
 582:	1f 90       	pop	r1
 584:	18 95       	reti

00000586 <UART_Init>:
FunPtr Ptr_UART_TX = NULL;
FunPtr Ptr_UART_RX = NULL;


void UART_Init(UART_cfg* uart_cfg)
{
 586:	cf 92       	push	r12
 588:	df 92       	push	r13
 58a:	ef 92       	push	r14
 58c:	ff 92       	push	r15
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	ec 01       	movw	r28, r24
	uint8_t uart_control = 0x80;
	// Set The UART Baud Rate
	UBRRL = ((F_cpu/(16*uart_cfg->baudrate)) - 1);
 594:	8f 81       	ldd	r24, Y+7	; 0x07
 596:	98 85       	ldd	r25, Y+8	; 0x08
 598:	a9 85       	ldd	r26, Y+9	; 0x09
 59a:	ba 85       	ldd	r27, Y+10	; 0x0a
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	aa 1f       	adc	r26, r26
 5a2:	bb 1f       	adc	r27, r27
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	aa 1f       	adc	r26, r26
 5aa:	bb 1f       	adc	r27, r27
 5ac:	9c 01       	movw	r18, r24
 5ae:	ad 01       	movw	r20, r26
 5b0:	22 0f       	add	r18, r18
 5b2:	33 1f       	adc	r19, r19
 5b4:	44 1f       	adc	r20, r20
 5b6:	55 1f       	adc	r21, r21
 5b8:	22 0f       	add	r18, r18
 5ba:	33 1f       	adc	r19, r19
 5bc:	44 1f       	adc	r20, r20
 5be:	55 1f       	adc	r21, r21
 5c0:	0f 2e       	mov	r0, r31
 5c2:	c1 2c       	mov	r12, r1
 5c4:	f4 e2       	ldi	r31, 0x24	; 36
 5c6:	df 2e       	mov	r13, r31
 5c8:	f4 ef       	ldi	r31, 0xF4	; 244
 5ca:	ef 2e       	mov	r14, r31
 5cc:	f1 2c       	mov	r15, r1
 5ce:	f0 2d       	mov	r31, r0
 5d0:	c7 01       	movw	r24, r14
 5d2:	b6 01       	movw	r22, r12
 5d4:	0e 94 42 05 	call	0xa84	; 0xa84 <__udivmodsi4>
 5d8:	21 50       	subi	r18, 0x01	; 1
 5da:	29 b9       	out	0x09, r18	; 9
	UBRRH = ((F_cpu/(16*uart_cfg->baudrate)) - 1)>>8;
 5dc:	8f 81       	ldd	r24, Y+7	; 0x07
 5de:	98 85       	ldd	r25, Y+8	; 0x08
 5e0:	a9 85       	ldd	r26, Y+9	; 0x09
 5e2:	ba 85       	ldd	r27, Y+10	; 0x0a
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	aa 1f       	adc	r26, r26
 5ea:	bb 1f       	adc	r27, r27
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	aa 1f       	adc	r26, r26
 5f2:	bb 1f       	adc	r27, r27
 5f4:	9c 01       	movw	r18, r24
 5f6:	ad 01       	movw	r20, r26
 5f8:	22 0f       	add	r18, r18
 5fa:	33 1f       	adc	r19, r19
 5fc:	44 1f       	adc	r20, r20
 5fe:	55 1f       	adc	r21, r21
 600:	22 0f       	add	r18, r18
 602:	33 1f       	adc	r19, r19
 604:	44 1f       	adc	r20, r20
 606:	55 1f       	adc	r21, r21
 608:	c7 01       	movw	r24, r14
 60a:	b6 01       	movw	r22, r12
 60c:	0e 94 42 05 	call	0xa84	; 0xa84 <__udivmodsi4>
 610:	da 01       	movw	r26, r20
 612:	c9 01       	movw	r24, r18
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	a1 09       	sbc	r26, r1
 618:	b1 09       	sbc	r27, r1
 61a:	89 2f       	mov	r24, r25
 61c:	9a 2f       	mov	r25, r26
 61e:	ab 2f       	mov	r26, r27
 620:	bb 27       	eor	r27, r27
 622:	80 bd       	out	0x20, r24	; 32
	// Set The UART Mode OF Operation
	UCSRB |= (uart_cfg->mode | uart_cfg->uartInterrupts);
 624:	9a b1       	in	r25, 0x0a	; 10
 626:	88 81       	ld	r24, Y
 628:	89 2b       	or	r24, r25
 62a:	9e 81       	ldd	r25, Y+6	; 0x06
 62c:	89 2b       	or	r24, r25
 62e:	8a b9       	out	0x0a, r24	; 10
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
	UCSRC |= uart_control;
 630:	20 b5       	in	r18, 0x20	; 32
	// Set The UART Data Sampling Edge
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
 632:	8b 81       	ldd	r24, Y+3	; 0x03
 634:	9d 81       	ldd	r25, Y+5	; 0x05
 636:	89 2b       	or	r24, r25
 638:	80 68       	ori	r24, 0x80	; 128
 63a:	99 81       	ldd	r25, Y+1	; 0x01
 63c:	89 2b       	or	r24, r25
 63e:	9a 81       	ldd	r25, Y+2	; 0x02
 640:	89 2b       	or	r24, r25
 642:	9c 81       	ldd	r25, Y+4	; 0x04
 644:	89 2b       	or	r24, r25
	UCSRC |= uart_control;
 646:	82 2b       	or	r24, r18
 648:	80 bd       	out	0x20, r24	; 32
	SREG  |= (0x80);
 64a:	8f b7       	in	r24, 0x3f	; 63
 64c:	80 68       	ori	r24, 0x80	; 128
 64e:	8f bf       	out	0x3f, r24	; 63
}
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	ff 90       	pop	r15
 656:	ef 90       	pop	r14
 658:	df 90       	pop	r13
 65a:	cf 90       	pop	r12
 65c:	08 95       	ret

0000065e <UART_Read>:

uint8_t UART_Read(void)
{
	return UDR;
 65e:	8c b1       	in	r24, 0x0c	; 12
}
 660:	08 95       	ret

00000662 <UART_Write>:

void UART_Write(uint8_t data)
{
	// Wait For Empty Transmit Buffer
	while(!(UCSRA & (1<<5)));
 662:	5d 9b       	sbis	0x0b, 5	; 11
 664:	fe cf       	rjmp	.-4      	; 0x662 <UART_Write>
	// Write The Data To The Buffer & Send!
	UDR = data;
 666:	8c b9       	out	0x0c, r24	; 12
 668:	08 95       	ret

0000066a <UART_SetTX>:
/*-----------[ Timers Set CallBack Functions ]-----------*/
/*=======================================================*/

void UART_SetTX(FunPtr Ptr_ISR)
{
	Ptr_UART_TX = Ptr_ISR;
 66a:	90 93 72 00 	sts	0x0072, r25
 66e:	80 93 71 00 	sts	0x0071, r24
 672:	08 95       	ret

00000674 <UART_SetRX>:
}

void UART_SetRX(FunPtr Ptr_ISR)
{
	Ptr_UART_RX = Ptr_ISR;
 674:	90 93 70 00 	sts	0x0070, r25
 678:	80 93 6f 00 	sts	0x006F, r24
 67c:	08 95       	ret

0000067e <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
 67e:	1f 92       	push	r1
 680:	0f 92       	push	r0
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	0f 92       	push	r0
 686:	11 24       	eor	r1, r1
 688:	2f 93       	push	r18
 68a:	3f 93       	push	r19
 68c:	4f 93       	push	r20
 68e:	5f 93       	push	r21
 690:	6f 93       	push	r22
 692:	7f 93       	push	r23
 694:	8f 93       	push	r24
 696:	9f 93       	push	r25
 698:	af 93       	push	r26
 69a:	bf 93       	push	r27
 69c:	ef 93       	push	r30
 69e:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
 6a0:	e0 91 6f 00 	lds	r30, 0x006F
 6a4:	f0 91 70 00 	lds	r31, 0x0070
 6a8:	30 97       	sbiw	r30, 0x00	; 0
 6aa:	09 f0       	breq	.+2      	; 0x6ae <__vector_13+0x30>
	{
		Ptr_UART_RX();
 6ac:	09 95       	icall
	}
}
 6ae:	ff 91       	pop	r31
 6b0:	ef 91       	pop	r30
 6b2:	bf 91       	pop	r27
 6b4:	af 91       	pop	r26
 6b6:	9f 91       	pop	r25
 6b8:	8f 91       	pop	r24
 6ba:	7f 91       	pop	r23
 6bc:	6f 91       	pop	r22
 6be:	5f 91       	pop	r21
 6c0:	4f 91       	pop	r20
 6c2:	3f 91       	pop	r19
 6c4:	2f 91       	pop	r18
 6c6:	0f 90       	pop	r0
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	0f 90       	pop	r0
 6cc:	1f 90       	pop	r1
 6ce:	18 95       	reti

000006d0 <__vector_15>:

ISR(USART_TXC_vect)
{
 6d0:	1f 92       	push	r1
 6d2:	0f 92       	push	r0
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	0f 92       	push	r0
 6d8:	11 24       	eor	r1, r1
 6da:	2f 93       	push	r18
 6dc:	3f 93       	push	r19
 6de:	4f 93       	push	r20
 6e0:	5f 93       	push	r21
 6e2:	6f 93       	push	r22
 6e4:	7f 93       	push	r23
 6e6:	8f 93       	push	r24
 6e8:	9f 93       	push	r25
 6ea:	af 93       	push	r26
 6ec:	bf 93       	push	r27
 6ee:	ef 93       	push	r30
 6f0:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
 6f2:	e0 91 71 00 	lds	r30, 0x0071
 6f6:	f0 91 72 00 	lds	r31, 0x0072
 6fa:	30 97       	sbiw	r30, 0x00	; 0
 6fc:	09 f0       	breq	.+2      	; 0x700 <__vector_15+0x30>
	{
		Ptr_UART_TX();
 6fe:	09 95       	icall
	}
 700:	ff 91       	pop	r31
 702:	ef 91       	pop	r30
 704:	bf 91       	pop	r27
 706:	af 91       	pop	r26
 708:	9f 91       	pop	r25
 70a:	8f 91       	pop	r24
 70c:	7f 91       	pop	r23
 70e:	6f 91       	pop	r22
 710:	5f 91       	pop	r21
 712:	4f 91       	pop	r20
 714:	3f 91       	pop	r19
 716:	2f 91       	pop	r18
 718:	0f 90       	pop	r0
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	0f 90       	pop	r0
 71e:	1f 90       	pop	r1
 720:	18 95       	reti

00000722 <BCM_Tx_ISR_cbf>:
/*===================================================================================*/

/*------------[ BCM CallBacks]------------*/
/* BCM Transmit ISR Call-Back Function */
static void BCM_Tx_ISR_cbf(void)
{	if (g_BCM_EXcfg.FSM_State == SendingByte_State)
 722:	80 91 7b 00 	lds	r24, 0x007B
 726:	82 30       	cpi	r24, 0x02	; 2
 728:	49 f4       	brne	.+18     	; 0x73c <BCM_Tx_ISR_cbf+0x1a>
	{
		g_BCM_EXcfg.Count++;
 72a:	e7 e7       	ldi	r30, 0x77	; 119
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	84 85       	ldd	r24, Z+12	; 0x0c
 730:	95 85       	ldd	r25, Z+13	; 0x0d
 732:	01 96       	adiw	r24, 0x01	; 1
 734:	95 87       	std	Z+13, r25	; 0x0d
 736:	84 87       	std	Z+12, r24	; 0x0c
		g_BCM_EXcfg.FSM_State = SendComplete_State;
 738:	83 e0       	ldi	r24, 0x03	; 3
 73a:	84 83       	std	Z+4, r24	; 0x04
 73c:	08 95       	ret

0000073e <BCM_Rx_ISR_cbf>:
	}
}

/* BCM Receive ISR Call-Back Function */
static void BCM_Rx_ISR_cbf(void)
{
 73e:	cf 93       	push	r28
 740:	df 93       	push	r29
 742:	1f 92       	push	r1
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
	uint8_t a_RX_Byte;
	switch(g_BCM_EXcfg.Protocol)
 748:	80 91 79 00 	lds	r24, 0x0079
 74c:	88 23       	and	r24, r24
 74e:	19 f0       	breq	.+6      	; 0x756 <BCM_Rx_ISR_cbf+0x18>
 750:	81 30       	cpi	r24, 0x01	; 1
 752:	29 f0       	breq	.+10     	; 0x75e <BCM_Rx_ISR_cbf+0x20>
 754:	08 c0       	rjmp	.+16     	; 0x766 <BCM_Rx_ISR_cbf+0x28>
	{
		case UART_Protocol:
		{
			a_RX_Byte = UART_Read();
 756:	0e 94 2f 03 	call	0x65e	; 0x65e <UART_Read>
 75a:	89 83       	std	Y+1, r24	; 0x01
			break;
 75c:	04 c0       	rjmp	.+8      	; 0x766 <BCM_Rx_ISR_cbf+0x28>
		}
		case SPI_Protocol:
		{
			_SPIRead(&a_RX_Byte);
 75e:	ce 01       	movw	r24, r28
 760:	01 96       	adiw	r24, 0x01	; 1
 762:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_SPIRead>
		default:
			break;
	}
	
	/* Debug Point */
	TCNT2 = a_RX_Byte;
 766:	89 81       	ldd	r24, Y+1	; 0x01
 768:	84 bd       	out	0x24, r24	; 36
	/* Debug Point */
	
	/* Read & Check The BCM Received ID */
	if(g_BCM_EXcfg.Count == 0)
 76a:	80 91 83 00 	lds	r24, 0x0083
 76e:	90 91 84 00 	lds	r25, 0x0084
 772:	00 97       	sbiw	r24, 0x00	; 0
 774:	b1 f4       	brne	.+44     	; 0x7a2 <BCM_Rx_ISR_cbf+0x64>
	{
		g_Rx_ID = a_RX_Byte;
 776:	89 81       	ldd	r24, Y+1	; 0x01
 778:	80 93 76 00 	sts	0x0076, r24
	
		if(g_Rx_ID == BCM_ID)
 77c:	90 91 76 00 	lds	r25, 0x0076
 780:	91 34       	cpi	r25, 0x41	; 65
 782:	61 f4       	brne	.+24     	; 0x79c <BCM_Rx_ISR_cbf+0x5e>
		{
			/* Debug Point */
			TCNT0 = a_RX_Byte;
 784:	82 bf       	out	0x32, r24	; 50
			/* Debug Point */
			
			g_ID_State = S_OK;
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	80 93 75 00 	sts	0x0075, r24
			g_BCM_EXcfg.Count++;
 78c:	e7 e7       	ldi	r30, 0x77	; 119
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	84 85       	ldd	r24, Z+12	; 0x0c
 792:	95 85       	ldd	r25, Z+13	; 0x0d
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	95 87       	std	Z+13, r25	; 0x0d
 798:	84 87       	std	Z+12, r24	; 0x0c
 79a:	59 c0       	rjmp	.+178    	; 0x84e <BCM_Rx_ISR_cbf+0x110>
		}
		else
		{
			g_ID_State = S_NOK;
 79c:	10 92 75 00 	sts	0x0075, r1
 7a0:	56 c0       	rjmp	.+172    	; 0x84e <BCM_Rx_ISR_cbf+0x110>
	}
	/*-------------------[ ID IS CHECKED ]------------------*/
	/*------------------------------------------------------*/
	/*-------------------[ Save & CHECK MSG Len ]------------------*/
	/* Read & Check The BCM Received Data Length */
	else if(g_BCM_EXcfg.Count == 1)
 7a2:	81 30       	cpi	r24, 0x01	; 1
 7a4:	91 05       	cpc	r25, r1
 7a6:	41 f5       	brne	.+80     	; 0x7f8 <BCM_Rx_ISR_cbf+0xba>
	{
		if(a_RX_Byte > g_BCM_EXcfg.Buf_Len)
 7a8:	89 81       	ldd	r24, Y+1	; 0x01
 7aa:	48 2f       	mov	r20, r24
 7ac:	50 e0       	ldi	r21, 0x00	; 0
 7ae:	20 91 7f 00 	lds	r18, 0x007F
 7b2:	30 91 80 00 	lds	r19, 0x0080
 7b6:	24 17       	cp	r18, r20
 7b8:	35 07       	cpc	r19, r21
 7ba:	78 f4       	brcc	.+30     	; 0x7da <BCM_Rx_ISR_cbf+0x9c>
		{
			g_LEN_State = S_NOK;
 7bc:	10 92 74 00 	sts	0x0074, r1
			g_BCM_EXcfg.FSM_State = IDLE_State;
 7c0:	e7 e7       	ldi	r30, 0x77	; 119
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	84 83       	std	Z+4, r24	; 0x04
			g_BCM_EXcfg.Count = ZERO;
 7c8:	15 86       	std	Z+13, r1	; 0x0d
 7ca:	14 86       	std	Z+12, r1	; 0x0c
			g_BCM_EXcfg.BCM_notify_cbf(g_LEN_State);
 7cc:	80 91 74 00 	lds	r24, 0x0074
 7d0:	06 84       	ldd	r0, Z+14	; 0x0e
 7d2:	f7 85       	ldd	r31, Z+15	; 0x0f
 7d4:	e0 2d       	mov	r30, r0
 7d6:	09 95       	icall
 7d8:	3a c0       	rjmp	.+116    	; 0x84e <BCM_Rx_ISR_cbf+0x110>
		}
		else
		{
			/* Debug Point */
			TCNT0 = a_RX_Byte;
 7da:	82 bf       	out	0x32, r24	; 50
			/* Debug Point */
			
			g_BCM_EXcfg.MSG_Len = a_RX_Byte;
 7dc:	e7 e7       	ldi	r30, 0x77	; 119
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	89 81       	ldd	r24, Y+1	; 0x01
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	93 87       	std	Z+11, r25	; 0x0b
 7e6:	82 87       	std	Z+10, r24	; 0x0a
			g_BCM_EXcfg.Count++;
 7e8:	84 85       	ldd	r24, Z+12	; 0x0c
 7ea:	95 85       	ldd	r25, Z+13	; 0x0d
 7ec:	01 96       	adiw	r24, 0x01	; 1
 7ee:	95 87       	std	Z+13, r25	; 0x0d
 7f0:	84 87       	std	Z+12, r24	; 0x0c
			g_BCM_EXcfg.FSM_State = ReceivingByte_State;
 7f2:	84 e0       	ldi	r24, 0x04	; 4
 7f4:	84 83       	std	Z+4, r24	; 0x04
 7f6:	2b c0       	rjmp	.+86     	; 0x84e <BCM_Rx_ISR_cbf+0x110>
		}
	}
	else if(g_BCM_EXcfg.Count-2 < g_BCM_EXcfg.MSG_Len)
 7f8:	9c 01       	movw	r18, r24
 7fa:	22 50       	subi	r18, 0x02	; 2
 7fc:	31 09       	sbc	r19, r1
 7fe:	40 91 81 00 	lds	r20, 0x0081
 802:	50 91 82 00 	lds	r21, 0x0082
 806:	24 17       	cp	r18, r20
 808:	35 07       	cpc	r19, r21
 80a:	a8 f4       	brcc	.+42     	; 0x836 <BCM_Rx_ISR_cbf+0xf8>
	{
		g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2] = a_RX_Byte;
 80c:	89 81       	ldd	r24, Y+1	; 0x01
 80e:	e7 e7       	ldi	r30, 0x77	; 119
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	46 81       	ldd	r20, Z+6	; 0x06
 814:	57 81       	ldd	r21, Z+7	; 0x07
 816:	da 01       	movw	r26, r20
 818:	a2 0f       	add	r26, r18
 81a:	b3 1f       	adc	r27, r19
 81c:	8c 93       	st	X, r24
		g_CS_Calculated += a_RX_Byte;
 81e:	90 91 73 00 	lds	r25, 0x0073
 822:	89 81       	ldd	r24, Y+1	; 0x01
 824:	89 0f       	add	r24, r25
 826:	80 93 73 00 	sts	0x0073, r24
		g_BCM_EXcfg.Count++;
 82a:	84 85       	ldd	r24, Z+12	; 0x0c
 82c:	95 85       	ldd	r25, Z+13	; 0x0d
 82e:	01 96       	adiw	r24, 0x01	; 1
 830:	95 87       	std	Z+13, r25	; 0x0d
 832:	84 87       	std	Z+12, r24	; 0x0c
 834:	0c c0       	rjmp	.+24     	; 0x84e <BCM_Rx_ISR_cbf+0x110>
	}
	else if(g_BCM_EXcfg.Count-2 == g_BCM_EXcfg.MSG_Len)
 836:	24 17       	cp	r18, r20
 838:	35 07       	cpc	r19, r21
 83a:	49 f4       	brne	.+18     	; 0x84e <BCM_Rx_ISR_cbf+0x110>
	{
		g_BCM_EXcfg.CheckSum = a_RX_Byte;
 83c:	e7 e7       	ldi	r30, 0x77	; 119
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	29 81       	ldd	r18, Y+1	; 0x01
 842:	25 83       	std	Z+5, r18	; 0x05
		g_BCM_EXcfg.Count++;
 844:	01 96       	adiw	r24, 0x01	; 1
 846:	95 87       	std	Z+13, r25	; 0x0d
 848:	84 87       	std	Z+12, r24	; 0x0c
		g_BCM_EXcfg.FSM_State = ReceiveComplete_State;
 84a:	85 e0       	ldi	r24, 0x05	; 5
 84c:	84 83       	std	Z+4, r24	; 0x04
	}
	else
	{	}
}
 84e:	0f 90       	pop	r0
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	08 95       	ret

00000856 <BCM_Tx_Dispatcher>:
		}
	}
}

/* TX Dispatcher */
void BCM_Tx_Dispatcher(void){
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
	
	switch(g_BCM_EXcfg.FSM_State)
 85a:	80 91 7b 00 	lds	r24, 0x007B
 85e:	83 30       	cpi	r24, 0x03	; 3
 860:	09 f0       	breq	.+2      	; 0x864 <__stack+0x5>
 862:	69 c0       	rjmp	.+210    	; 0x936 <__stack+0xd7>
		case IDLE_State :
			break;
		case SendingByte_State :
			break;
		case SendComplete_State :
		if(g_BCM_EXcfg.Count == 1)
 864:	80 91 83 00 	lds	r24, 0x0083
 868:	90 91 84 00 	lds	r25, 0x0084
 86c:	81 30       	cpi	r24, 0x01	; 1
 86e:	91 05       	cpc	r25, r1
 870:	a1 f4       	brne	.+40     	; 0x89a <__stack+0x3b>
		{
			switch(g_BCM_EXcfg.Protocol){
 872:	80 91 79 00 	lds	r24, 0x0079
 876:	88 23       	and	r24, r24
 878:	19 f0       	breq	.+6      	; 0x880 <__stack+0x21>
 87a:	81 30       	cpi	r24, 0x01	; 1
 87c:	31 f0       	breq	.+12     	; 0x88a <__stack+0x2b>
 87e:	09 c0       	rjmp	.+18     	; 0x892 <__stack+0x33>
				case UART_Protocol :
				UART_Write(g_BCM_EXcfg.Buf_Len);
 880:	80 91 7f 00 	lds	r24, 0x007F
 884:	0e 94 31 03 	call	0x662	; 0x662 <UART_Write>
				break;
 888:	04 c0       	rjmp	.+8      	; 0x892 <__stack+0x33>
				case  SPI_Protocol :
				_SPISend(g_BCM_EXcfg.Buf_Len);
 88a:	80 91 7f 00 	lds	r24, 0x007F
 88e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_SPISend>
				break;
			}
			g_BCM_EXcfg.FSM_State = SendingByte_State ;
 892:	82 e0       	ldi	r24, 0x02	; 2
 894:	80 93 7b 00 	sts	0x007B, r24
 898:	4e c0       	rjmp	.+156    	; 0x936 <__stack+0xd7>
			
		}
		else if (g_BCM_EXcfg.Count <= g_BCM_EXcfg.Buf_Len+1)
 89a:	20 91 7f 00 	lds	r18, 0x007F
 89e:	30 91 80 00 	lds	r19, 0x0080
 8a2:	a9 01       	movw	r20, r18
 8a4:	4f 5f       	subi	r20, 0xFF	; 255
 8a6:	5f 4f       	sbci	r21, 0xFF	; 255
 8a8:	48 17       	cp	r20, r24
 8aa:	59 07       	cpc	r21, r25
 8ac:	18 f1       	brcs	.+70     	; 0x8f4 <__stack+0x95>
		{
			g_BCM_EXcfg.CheckSum +=g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2];
 8ae:	a7 e7       	ldi	r26, 0x77	; 119
 8b0:	b0 e0       	ldi	r27, 0x00	; 0
 8b2:	02 97       	sbiw	r24, 0x02	; 2
 8b4:	16 96       	adiw	r26, 0x06	; 6
 8b6:	ed 91       	ld	r30, X+
 8b8:	fc 91       	ld	r31, X
 8ba:	17 97       	sbiw	r26, 0x07	; 7
 8bc:	e8 0f       	add	r30, r24
 8be:	f9 1f       	adc	r31, r25
 8c0:	90 81       	ld	r25, Z
 8c2:	15 96       	adiw	r26, 0x05	; 5
 8c4:	8c 91       	ld	r24, X
 8c6:	15 97       	sbiw	r26, 0x05	; 5
 8c8:	89 0f       	add	r24, r25
 8ca:	15 96       	adiw	r26, 0x05	; 5
 8cc:	8c 93       	st	X, r24
 8ce:	15 97       	sbiw	r26, 0x05	; 5
			
			switch(g_BCM_EXcfg.Protocol){
 8d0:	12 96       	adiw	r26, 0x02	; 2
 8d2:	8c 91       	ld	r24, X
 8d4:	88 23       	and	r24, r24
 8d6:	19 f0       	breq	.+6      	; 0x8de <__stack+0x7f>
 8d8:	81 30       	cpi	r24, 0x01	; 1
 8da:	29 f0       	breq	.+10     	; 0x8e6 <__stack+0x87>
 8dc:	07 c0       	rjmp	.+14     	; 0x8ec <__stack+0x8d>
				case UART_Protocol :
				UART_Write(g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2]);
 8de:	80 81       	ld	r24, Z
 8e0:	0e 94 31 03 	call	0x662	; 0x662 <UART_Write>
				break;
 8e4:	03 c0       	rjmp	.+6      	; 0x8ec <__stack+0x8d>
				case  SPI_Protocol :
				_SPISend(g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2]);	
 8e6:	80 81       	ld	r24, Z
 8e8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_SPISend>
				break;
			}
			g_BCM_EXcfg.FSM_State = SendingByte_State ;
 8ec:	82 e0       	ldi	r24, 0x02	; 2
 8ee:	80 93 7b 00 	sts	0x007B, r24
 8f2:	21 c0       	rjmp	.+66     	; 0x936 <__stack+0xd7>

			}else if (g_BCM_EXcfg.Count == g_BCM_EXcfg.Buf_Len+2){
 8f4:	2e 5f       	subi	r18, 0xFE	; 254
 8f6:	3f 4f       	sbci	r19, 0xFF	; 255
 8f8:	82 17       	cp	r24, r18
 8fa:	93 07       	cpc	r25, r19
 8fc:	a1 f4       	brne	.+40     	; 0x926 <__stack+0xc7>
			switch(g_BCM_EXcfg.Protocol){
 8fe:	80 91 79 00 	lds	r24, 0x0079
 902:	88 23       	and	r24, r24
 904:	19 f0       	breq	.+6      	; 0x90c <__stack+0xad>
 906:	81 30       	cpi	r24, 0x01	; 1
 908:	31 f0       	breq	.+12     	; 0x916 <__stack+0xb7>
 90a:	09 c0       	rjmp	.+18     	; 0x91e <__stack+0xbf>
				
				case UART_Protocol :
				UART_Write(g_BCM_EXcfg.CheckSum);
 90c:	80 91 7c 00 	lds	r24, 0x007C
 910:	0e 94 31 03 	call	0x662	; 0x662 <UART_Write>
				break;
 914:	04 c0       	rjmp	.+8      	; 0x91e <__stack+0xbf>
				case  SPI_Protocol :
				_SPISend(g_BCM_EXcfg.CheckSum);
 916:	80 91 7c 00 	lds	r24, 0x007C
 91a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_SPISend>
				break;
			}
			g_BCM_EXcfg.FSM_State = SendingByte_State ;
 91e:	82 e0       	ldi	r24, 0x02	; 2
 920:	80 93 7b 00 	sts	0x007B, r24
 924:	08 c0       	rjmp	.+16     	; 0x936 <__stack+0xd7>
			
			}else{
				g_BCM_EXcfg.BCM_notify_cbf(10);
 926:	c7 e7       	ldi	r28, 0x77	; 119
 928:	d0 e0       	ldi	r29, 0x00	; 0
 92a:	ee 85       	ldd	r30, Y+14	; 0x0e
 92c:	ff 85       	ldd	r31, Y+15	; 0x0f
 92e:	8a e0       	ldi	r24, 0x0A	; 10
 930:	09 95       	icall
			g_BCM_EXcfg.FSM_State = IDLE_State ;
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	8c 83       	std	Y+4, r24	; 0x04
		}
		break;
		case OFF_State :
		break;
	}	
}
 936:	df 91       	pop	r29
 938:	cf 91       	pop	r28
 93a:	08 95       	ret

0000093c <BCM_Init>:
/*------------------------------------*/

/* BCM Initialization Routine */
ERROR_STATUS BCM_Init(BCM_cfg_s* a_BCM)
{
 93c:	cf 93       	push	r28
 93e:	df 93       	push	r29
 940:	cd b7       	in	r28, 0x3d	; 61
 942:	de b7       	in	r29, 0x3e	; 62
 944:	60 97       	sbiw	r28, 0x10	; 16
 946:	0f b6       	in	r0, 0x3f	; 63
 948:	f8 94       	cli
 94a:	de bf       	out	0x3e, r29	; 62
 94c:	0f be       	out	0x3f, r0	; 63
 94e:	cd bf       	out	0x3d, r28	; 61
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	UART_cfg  a_BCM_UART;
	SPI_cfg_s a_BCM_SPI; 
	
	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_BCM != NULL)
 950:	00 97       	sbiw	r24, 0x00	; 0
 952:	09 f4       	brne	.+2      	; 0x956 <BCM_Init+0x1a>
 954:	69 c0       	rjmp	.+210    	; 0xa28 <BCM_Init+0xec>
 956:	dc 01       	movw	r26, r24
	{
		/*--------[ Add The BCM CFG To The Working List ]--------*/
		g_BCM_EXcfg.BCM_CH_ID = a_BCM->BCM_CH_ID;
 958:	11 96       	adiw	r26, 0x01	; 1
 95a:	8c 91       	ld	r24, X
 95c:	11 97       	sbiw	r26, 0x01	; 1
 95e:	e7 e7       	ldi	r30, 0x77	; 119
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	81 83       	std	Z+1, r24	; 0x01
		g_BCM_EXcfg.Mode      = a_BCM->Mode;
 964:	9c 91       	ld	r25, X
 966:	90 83       	st	Z, r25
		g_BCM_EXcfg.Protocol  = a_BCM->Protocol;
 968:	12 96       	adiw	r26, 0x02	; 2
 96a:	8c 91       	ld	r24, X
 96c:	82 83       	std	Z+2, r24	; 0x02
		g_BCM_EXcfg.FSM_State = IDLE_State;
 96e:	21 e0       	ldi	r18, 0x01	; 1
 970:	24 83       	std	Z+4, r18	; 0x04
		g_BCM_EXcfg.Count     = ZERO;
 972:	15 86       	std	Z+13, r1	; 0x0d
 974:	14 86       	std	Z+12, r1	; 0x0c
		g_BCM_EXcfg.CheckSum  = ZERO;
 976:	15 82       	std	Z+5, r1	; 0x05
		g_BCM_EXcfg.Buf_Len   = ZERO;
 978:	11 86       	std	Z+9, r1	; 0x09
 97a:	10 86       	std	Z+8, r1	; 0x08
		g_BCM_EXcfg.MSG_Len   = ZERO;
 97c:	13 86       	std	Z+11, r1	; 0x0b
 97e:	12 86       	std	Z+10, r1	; 0x0a
		
		/*--------[ Check The BCM HW Communication Protocol ]--------*/
		switch(g_BCM_EXcfg.Protocol)
 980:	88 23       	and	r24, r24
 982:	19 f0       	breq	.+6      	; 0x98a <BCM_Init+0x4e>
 984:	81 30       	cpi	r24, 0x01	; 1
 986:	59 f1       	breq	.+86     	; 0x9de <BCM_Init+0xa2>
 988:	51 c0       	rjmp	.+162    	; 0xa2c <BCM_Init+0xf0>
		{
			/*----------------------[ UART CASE START ]---------------------*/
			case UART_Protocol:
			{
				a_BCM_UART.baudrate   = BCM_UART_BaudRate;
 98a:	40 e8       	ldi	r20, 0x80	; 128
 98c:	55 e2       	ldi	r21, 0x25	; 37
 98e:	60 e0       	ldi	r22, 0x00	; 0
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	48 87       	std	Y+8, r20	; 0x08
 994:	59 87       	std	Y+9, r21	; 0x09
 996:	6a 87       	std	Y+10, r22	; 0x0a
 998:	7b 87       	std	Y+11, r23	; 0x0b
				a_BCM_UART.dataBits   = UART_Bits_8;
 99a:	86 e0       	ldi	r24, 0x06	; 6
 99c:	8a 83       	std	Y+2, r24	; 0x02
				a_BCM_UART.stopBits   = StopBits_1;
 99e:	1d 82       	std	Y+5, r1	; 0x05
				a_BCM_UART.parity     = No_Parity;
 9a0:	1b 82       	std	Y+3, r1	; 0x03
				a_BCM_UART.sampleEdge = RisingEdg;
 9a2:	1e 82       	std	Y+6, r1	; 0x06
				a_BCM_UART.uartSync   = UART_Async;
 9a4:	1c 82       	std	Y+4, r1	; 0x04
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
 9a6:	99 23       	and	r25, r25
 9a8:	19 f0       	breq	.+6      	; 0x9b0 <BCM_Init+0x74>
 9aa:	91 30       	cpi	r25, 0x01	; 1
 9ac:	51 f0       	breq	.+20     	; 0x9c2 <BCM_Init+0x86>
 9ae:	11 c0       	rjmp	.+34     	; 0x9d2 <BCM_Init+0x96>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_UART.mode = UART_TX;
 9b0:	88 e0       	ldi	r24, 0x08	; 8
 9b2:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnTx;
 9b4:	80 e4       	ldi	r24, 0x40	; 64
 9b6:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						UART_SetTX(BCM_Tx_ISR_cbf);
 9b8:	81 e9       	ldi	r24, 0x91	; 145
 9ba:	93 e0       	ldi	r25, 0x03	; 3
 9bc:	0e 94 35 03 	call	0x66a	; 0x66a <UART_SetTX>
						break;
 9c0:	08 c0       	rjmp	.+16     	; 0x9d2 <BCM_Init+0x96>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_UART.mode = UART_RX;
 9c2:	80 e1       	ldi	r24, 0x10	; 16
 9c4:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnRx;
 9c6:	80 e8       	ldi	r24, 0x80	; 128
 9c8:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						UART_SetRX(BCM_Rx_ISR_cbf);
 9ca:	8f e9       	ldi	r24, 0x9F	; 159
 9cc:	93 e0       	ldi	r25, 0x03	; 3
 9ce:	0e 94 3a 03 	call	0x674	; 0x674 <UART_SetRX>
					}
					default:
						break;
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
 9d2:	ce 01       	movw	r24, r28
 9d4:	01 96       	adiw	r24, 0x01	; 1
 9d6:	0e 94 c3 02 	call	0x586	; 0x586 <UART_Init>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 9da:	8c e3       	ldi	r24, 0x3C	; 60
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
				
				errorStatus = BCM_ERROR + E_OK;
				break;
 9dc:	2a c0       	rjmp	.+84     	; 0xa32 <BCM_Init+0xf6>
			/*----------------------[ UART CASE END ]---------------------*/
			/*------------------------------------------------------------*/
			/*----------------------[ SPI CASE START ]--------------------*/
			case SPI_Protocol:
			{
				a_BCM_SPI.clockSPI = Fosc128;
 9de:	83 e0       	ldi	r24, 0x03	; 3
 9e0:	8c 87       	std	Y+12, r24	; 0x0c
				a_BCM_SPI.dataorder = MSB;
 9e2:	1e 86       	std	Y+14, r1	; 0x0e
				a_BCM_SPI.phasePolarityMode = mode0;
 9e4:	1d 86       	std	Y+13, r1	; 0x0d
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
 9e6:	99 23       	and	r25, r25
 9e8:	19 f0       	breq	.+6      	; 0x9f0 <BCM_Init+0xb4>
 9ea:	91 30       	cpi	r25, 0x01	; 1
 9ec:	79 f0       	breq	.+30     	; 0xa0c <BCM_Init+0xd0>
 9ee:	20 c0       	rjmp	.+64     	; 0xa30 <BCM_Init+0xf4>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_SPI.ptr_call_back = BCM_Tx_ISR_cbf;
 9f0:	81 e9       	ldi	r24, 0x91	; 145
 9f2:	93 e0       	ldi	r25, 0x03	; 3
 9f4:	98 8b       	std	Y+16, r25	; 0x10
 9f6:	8f 87       	std	Y+15, r24	; 0x0f
						_SPIInitMaster(&a_BCM_SPI);
 9f8:	ce 01       	movw	r24, r28
 9fa:	0c 96       	adiw	r24, 0x0c	; 12
 9fc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_SPIInitMaster>
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Tx_ISR_cbf);
 a00:	81 e9       	ldi	r24, 0x91	; 145
 a02:	93 e0       	ldi	r25, 0x03	; 3
 a04:	0e 94 75 01 	call	0x2ea	; 0x2ea <SPI_SetCBF>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 a08:	8c e3       	ldi	r24, 0x3C	; 60
					{
						a_BCM_SPI.ptr_call_back = BCM_Tx_ISR_cbf;
						_SPIInitMaster(&a_BCM_SPI);
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Tx_ISR_cbf);
						break;
 a0a:	13 c0       	rjmp	.+38     	; 0xa32 <BCM_Init+0xf6>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_SPI.ptr_call_back = BCM_Rx_ISR_cbf;
 a0c:	8f e9       	ldi	r24, 0x9F	; 159
 a0e:	93 e0       	ldi	r25, 0x03	; 3
 a10:	98 8b       	std	Y+16, r25	; 0x10
 a12:	8f 87       	std	Y+15, r24	; 0x0f
						_SPIInitSlave(&a_BCM_SPI);
 a14:	ce 01       	movw	r24, r28
 a16:	0c 96       	adiw	r24, 0x0c	; 12
 a18:	0e 94 21 01 	call	0x242	; 0x242 <_SPIInitSlave>
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Rx_ISR_cbf);
 a1c:	8f e9       	ldi	r24, 0x9F	; 159
 a1e:	93 e0       	ldi	r25, 0x03	; 3
 a20:	0e 94 75 01 	call	0x2ea	; 0x2ea <SPI_SetCBF>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 a24:	8c e3       	ldi	r24, 0x3C	; 60
					{
						a_BCM_SPI.ptr_call_back = BCM_Rx_ISR_cbf;
						_SPIInitSlave(&a_BCM_SPI);
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Rx_ISR_cbf);
						break;
 a26:	05 c0       	rjmp	.+10     	; 0xa32 <BCM_Init+0xf6>
	}
	/*-------------[ In Case Of BCM's Null Pointer ]-------------*/
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
 a28:	8d e3       	ldi	r24, 0x3D	; 61
 a2a:	03 c0       	rjmp	.+6      	; 0xa32 <BCM_Init+0xf6>
				break;
			}
			/*----------------------[ SPI CASE END ]---------------------*/
			default:
				errorStatus = BCM_ERROR + INVALID_IN;
				return errorStatus;
 a2c:	80 e4       	ldi	r24, 0x40	; 64
 a2e:	01 c0       	rjmp	.+2      	; 0xa32 <BCM_Init+0xf6>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 a30:	8c e3       	ldi	r24, 0x3C	; 60
}
 a32:	60 96       	adiw	r28, 0x10	; 16
 a34:	0f b6       	in	r0, 0x3f	; 63
 a36:	f8 94       	cli
 a38:	de bf       	out	0x3e, r29	; 62
 a3a:	0f be       	out	0x3f, r0	; 63
 a3c:	cd bf       	out	0x3d, r28	; 61
 a3e:	df 91       	pop	r29
 a40:	cf 91       	pop	r28
 a42:	08 95       	ret

00000a44 <BCM_DeInit>:
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	
	/*--------[ Search For That BCM CFG In The Working List ]--------*/

	/*--------[ Set That BCM To OFF ]--------*/
	g_BCM_EXcfg.FSM_State = OFF_State;
 a44:	10 92 7b 00 	sts	0x007B, r1
	
	
	errorStatus= BCM_ERROR + E_OK;

	return errorStatus;
}
 a48:	8c e3       	ldi	r24, 0x3C	; 60
 a4a:	08 95       	ret

00000a4c <BCM_Send>:

ERROR_STATUS BCM_Send(uint8_t* Buffer, uint16_t Buf_Len, BCM_cfg_s* My_BCM, Notify_FunPtr Notify_Ptr ){
	
	/* lock the buffer so user can't chance on it  */
	
	g_BCM_EXcfg.Lock_State = Buffer_Locked ;
 a4c:	e7 e7       	ldi	r30, 0x77	; 119
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	41 e0       	ldi	r20, 0x01	; 1
 a52:	43 83       	std	Z+3, r20	; 0x03
	
	/*set the buffer address, length, and notification function*/
	
	g_BCM_EXcfg.Buffer = Buffer;
 a54:	97 83       	std	Z+7, r25	; 0x07
 a56:	86 83       	std	Z+6, r24	; 0x06
	g_BCM_EXcfg.Buf_Len = Buf_Len;
 a58:	71 87       	std	Z+9, r23	; 0x09
 a5a:	60 87       	std	Z+8, r22	; 0x08
	g_BCM_EXcfg.BCM_notify_cbf = Notify_Ptr;
 a5c:	37 87       	std	Z+15, r19	; 0x0f
 a5e:	26 87       	std	Z+14, r18	; 0x0e
	
	switch(g_BCM_EXcfg.Protocol){
 a60:	82 81       	ldd	r24, Z+2	; 0x02
 a62:	88 23       	and	r24, r24
 a64:	19 f0       	breq	.+6      	; 0xa6c <BCM_Send+0x20>
 a66:	81 30       	cpi	r24, 0x01	; 1
 a68:	29 f0       	breq	.+10     	; 0xa74 <BCM_Send+0x28>
 a6a:	07 c0       	rjmp	.+14     	; 0xa7a <BCM_Send+0x2e>
		
		case UART_Protocol :
			UART_Write(BCM_ID);
 a6c:	81 e4       	ldi	r24, 0x41	; 65
 a6e:	0e 94 31 03 	call	0x662	; 0x662 <UART_Write>
		break;
 a72:	03 c0       	rjmp	.+6      	; 0xa7a <BCM_Send+0x2e>
		case  SPI_Protocol :
			_SPISend(BCM_ID);
 a74:	81 e4       	ldi	r24, 0x41	; 65
 a76:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_SPISend>
		break;
		
	}
	g_BCM_EXcfg.FSM_State = SendingByte_State ;	
 a7a:	82 e0       	ldi	r24, 0x02	; 2
 a7c:	80 93 7b 00 	sts	0x007B, r24
	return 0 ;
}
 a80:	80 e0       	ldi	r24, 0x00	; 0
 a82:	08 95       	ret

00000a84 <__udivmodsi4>:
 a84:	a1 e2       	ldi	r26, 0x21	; 33
 a86:	1a 2e       	mov	r1, r26
 a88:	aa 1b       	sub	r26, r26
 a8a:	bb 1b       	sub	r27, r27
 a8c:	fd 01       	movw	r30, r26
 a8e:	0d c0       	rjmp	.+26     	; 0xaaa <__udivmodsi4_ep>

00000a90 <__udivmodsi4_loop>:
 a90:	aa 1f       	adc	r26, r26
 a92:	bb 1f       	adc	r27, r27
 a94:	ee 1f       	adc	r30, r30
 a96:	ff 1f       	adc	r31, r31
 a98:	a2 17       	cp	r26, r18
 a9a:	b3 07       	cpc	r27, r19
 a9c:	e4 07       	cpc	r30, r20
 a9e:	f5 07       	cpc	r31, r21
 aa0:	20 f0       	brcs	.+8      	; 0xaaa <__udivmodsi4_ep>
 aa2:	a2 1b       	sub	r26, r18
 aa4:	b3 0b       	sbc	r27, r19
 aa6:	e4 0b       	sbc	r30, r20
 aa8:	f5 0b       	sbc	r31, r21

00000aaa <__udivmodsi4_ep>:
 aaa:	66 1f       	adc	r22, r22
 aac:	77 1f       	adc	r23, r23
 aae:	88 1f       	adc	r24, r24
 ab0:	99 1f       	adc	r25, r25
 ab2:	1a 94       	dec	r1
 ab4:	69 f7       	brne	.-38     	; 0xa90 <__udivmodsi4_loop>
 ab6:	60 95       	com	r22
 ab8:	70 95       	com	r23
 aba:	80 95       	com	r24
 abc:	90 95       	com	r25
 abe:	9b 01       	movw	r18, r22
 ac0:	ac 01       	movw	r20, r24
 ac2:	bd 01       	movw	r22, r26
 ac4:	cf 01       	movw	r24, r30
 ac6:	08 95       	ret

00000ac8 <_exit>:
 ac8:	f8 94       	cli

00000aca <__stop_program>:
 aca:	ff cf       	rjmp	.-2      	; 0xaca <__stop_program>
