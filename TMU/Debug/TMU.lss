
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000af8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000af8  00000b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009a  00800062  00800062  00000b8e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b8e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000243c  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd4  00000000  00000000  00003270  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001205  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000724  00000000  00000000  0000524c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b5d  00000000  00000000  00005970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bdb  00000000  00000000  000064cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__vector_4>
  14:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_7>
  20:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_8>
  24:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__vector_9>
  28:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_10>
  2c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_11>
  30:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_12>
  34:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 87 03 	jmp	0x70e	; 0x70e <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3f       	cpi	r26, 0xFC	; 252
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  8a:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <txnotify>:
	UART_Init(&UART1);
	
	/*-------------[ SUPER LOOP ]-------------*/
	while (1)
	{
		BCM_Rx_Dispatcher();
  92:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <BCM_sending>
  96:	85 e0       	ldi	r24, 0x05	; 5
  98:	84 bd       	out	0x24, r24	; 36
  9a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
  9e:	83 e9       	ldi	r24, 0x93	; 147
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 38 05 	call	0xa70	; 0xa70 <BCM_DeInit>
  a6:	e3 e9       	ldi	r30, 0x93	; 147
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	81 83       	std	Z+1, r24	; 0x01
  ae:	10 82       	st	Z, r1
  b0:	82 83       	std	Z+2, r24	; 0x02
  b2:	cf 01       	movw	r24, r30
  b4:	0e 94 b4 04 	call	0x968	; 0x968 <BCM_Init>
  b8:	08 95       	ret

000000ba <UART_ISR_RXcbf>:
  ba:	cf 93       	push	r28
  bc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <BCM_sending>
  c0:	81 11       	cpse	r24, r1
  c2:	37 c0       	rjmp	.+110    	; 0x132 <UART_ISR_RXcbf+0x78>
  c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  c8:	83 33       	cpi	r24, 0x33	; 51
  ca:	18 f5       	brcc	.+70     	; 0x112 <UART_ISR_RXcbf+0x58>
  cc:	c0 91 62 00 	lds	r28, 0x0062	; 0x800062 <__data_end>
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	8c 0f       	add	r24, r28
  d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
  d8:	0e 94 4e 03 	call	0x69c	; 0x69c <UART_Read>
  dc:	ec 2f       	mov	r30, r28
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	e8 53       	subi	r30, 0x38	; 56
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	80 83       	st	Z, r24
  e6:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	e9 53       	subi	r30, 0x39	; 57
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	80 81       	ld	r24, Z
  f2:	8d 30       	cpi	r24, 0x0D	; 13
  f4:	f1 f4       	brne	.+60     	; 0x132 <UART_ISR_RXcbf+0x78>
  f6:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	29 e4       	ldi	r18, 0x49	; 73
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	43 e9       	ldi	r20, 0x93	; 147
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	88 ec       	ldi	r24, 0xC8	; 200
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 3c 05 	call	0xa78	; 0xa78 <BCM_Send>
 10c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 110:	10 c0       	rjmp	.+32     	; 0x132 <UART_ISR_RXcbf+0x78>
 112:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	29 e4       	ldi	r18, 0x49	; 73
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	43 e9       	ldi	r20, 0x93	; 147
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	88 ec       	ldi	r24, 0xC8	; 200
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 3c 05 	call	0xa78	; 0xa78 <BCM_Send>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <BCM_sending>
 12e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <ECU1_Application>:
 136:	e3 e9       	ldi	r30, 0x93	; 147
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	81 83       	std	Z+1, r24	; 0x01
 13e:	10 82       	st	Z, r1
 140:	82 83       	std	Z+2, r24	; 0x02
 142:	cf 01       	movw	r24, r30
 144:	0e 94 b4 04 	call	0x968	; 0x968 <BCM_Init>
 148:	e8 e8       	ldi	r30, 0x88	; 136
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 e8       	ldi	r24, 0x80	; 128
 14e:	95 e2       	ldi	r25, 0x25	; 37
 150:	a0 e0       	ldi	r26, 0x00	; 0
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	87 83       	std	Z+7, r24	; 0x07
 156:	90 87       	std	Z+8, r25	; 0x08
 158:	a1 87       	std	Z+9, r26	; 0x09
 15a:	b2 87       	std	Z+10, r27	; 0x0a
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	81 83       	std	Z+1, r24	; 0x01
 160:	14 82       	std	Z+4, r1	; 0x04
 162:	12 82       	std	Z+2, r1	; 0x02
 164:	15 82       	std	Z+5, r1	; 0x05
 166:	13 82       	std	Z+3, r1	; 0x03
 168:	80 e1       	ldi	r24, 0x10	; 16
 16a:	80 83       	st	Z, r24
 16c:	80 e8       	ldi	r24, 0x80	; 128
 16e:	86 83       	std	Z+6, r24	; 0x06
 170:	8d e5       	ldi	r24, 0x5D	; 93
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 59 03 	call	0x6b2	; 0x6b2 <UART_SetRX>
 178:	88 e8       	ldi	r24, 0x88	; 136
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <UART_Init>
 180:	0e 94 41 04 	call	0x882	; 0x882 <BCM_Tx_Dispatcher>
 184:	fd cf       	rjmp	.-6      	; 0x180 <ECU1_Application+0x4a>

00000186 <main>:
}

int main(void)
{
//	ECU2_Application();
	ECU1_Application();
 186:	0e 94 9b 00 	call	0x136	; 0x136 <ECU1_Application>

0000018a <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
 18a:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
 18c:	89 2b       	or	r24, r25
 18e:	c9 f1       	breq	.+114    	; 0x202 <DIO_init+0x78>
	{
		switch(DIO_info->GPIO)
 190:	80 81       	ld	r24, Z
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	91 f0       	breq	.+36     	; 0x1ba <DIO_init+0x30>
 196:	28 f0       	brcs	.+10     	; 0x1a2 <DIO_init+0x18>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	d9 f0       	breq	.+54     	; 0x1d2 <DIO_init+0x48>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	29 f1       	breq	.+74     	; 0x1ea <DIO_init+0x60>
 1a0:	32 c0       	rjmp	.+100    	; 0x206 <DIO_init+0x7c>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
 1a2:	21 81       	ldd	r18, Z+1	; 0x01
 1a4:	9a b3       	in	r25, 0x1a	; 26
 1a6:	82 81       	ldd	r24, Z+2	; 0x02
 1a8:	32 2f       	mov	r19, r18
 1aa:	38 23       	and	r19, r24
 1ac:	82 2f       	mov	r24, r18
 1ae:	80 95       	com	r24
 1b0:	89 23       	and	r24, r25
 1b2:	83 2b       	or	r24, r19
 1b4:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
 1b6:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1b8:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
 1ba:	21 81       	ldd	r18, Z+1	; 0x01
 1bc:	97 b3       	in	r25, 0x17	; 23
 1be:	82 81       	ldd	r24, Z+2	; 0x02
 1c0:	32 2f       	mov	r19, r18
 1c2:	38 23       	and	r19, r24
 1c4:	82 2f       	mov	r24, r18
 1c6:	80 95       	com	r24
 1c8:	89 23       	and	r24, r25
 1ca:	83 2b       	or	r24, r19
 1cc:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
 1ce:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1d0:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
 1d2:	21 81       	ldd	r18, Z+1	; 0x01
 1d4:	94 b3       	in	r25, 0x14	; 20
 1d6:	82 81       	ldd	r24, Z+2	; 0x02
 1d8:	32 2f       	mov	r19, r18
 1da:	38 23       	and	r19, r24
 1dc:	82 2f       	mov	r24, r18
 1de:	80 95       	com	r24
 1e0:	89 23       	and	r24, r25
 1e2:	83 2b       	or	r24, r19
 1e4:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1e8:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
 1ea:	21 81       	ldd	r18, Z+1	; 0x01
 1ec:	91 b3       	in	r25, 0x11	; 17
 1ee:	82 81       	ldd	r24, Z+2	; 0x02
 1f0:	32 2f       	mov	r19, r18
 1f2:	38 23       	and	r19, r24
 1f4:	82 2f       	mov	r24, r18
 1f6:	80 95       	com	r24
 1f8:	89 23       	and	r24, r25
 1fa:	83 2b       	or	r24, r19
 1fc:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
			break;
 200:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
 206:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 208:	08 95       	ret

0000020a <_SPIInitMaster>:
	SPDR = *data;
	while (!g_u8_RxFlag);
	*data = SPDR;	
	
	g_u8_RxFlag = FALSE ;
}
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	00 d0       	rcall	.+0      	; 0x210 <_SPIInitMaster+0x6>
 210:	00 d0       	rcall	.+0      	; 0x212 <_SPIInitMaster+0x8>
 212:	00 d0       	rcall	.+0      	; 0x214 <_SPIInitMaster+0xa>
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	fc 01       	movw	r30, r24
 21a:	1e b8       	out	0x0e, r1	; 14
 21c:	1d b8       	out	0x0d, r1	; 13
 21e:	6c 9a       	sbi	0x0d, 4	; 13
 220:	9d b1       	in	r25, 0x0d	; 13
 222:	80 81       	ld	r24, Z
 224:	89 2b       	or	r24, r25
 226:	8d b9       	out	0x0d, r24	; 13
 228:	9d b1       	in	r25, 0x0d	; 13
 22a:	82 81       	ldd	r24, Z+2	; 0x02
 22c:	89 2b       	or	r24, r25
 22e:	8d b9       	out	0x0d, r24	; 13
 230:	9d b1       	in	r25, 0x0d	; 13
 232:	81 81       	ldd	r24, Z+1	; 0x01
 234:	89 2b       	or	r24, r25
 236:	8d b9       	out	0x0d, r24	; 13
 238:	6f 9a       	sbi	0x0d, 7	; 13
 23a:	83 81       	ldd	r24, Z+3	; 0x03
 23c:	94 81       	ldd	r25, Z+4	; 0x04
 23e:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <PTR_CALL_BACK+0x1>
 242:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <PTR_CALL_BACK>
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	89 83       	std	Y+1, r24	; 0x01
 24a:	90 e4       	ldi	r25, 0x40	; 64
 24c:	9a 83       	std	Y+2, r25	; 0x02
 24e:	1b 82       	std	Y+3, r1	; 0x03
 250:	8c 83       	std	Y+4, r24	; 0x04
 252:	80 eb       	ldi	r24, 0xB0	; 176
 254:	8d 83       	std	Y+5, r24	; 0x05
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	8e 83       	std	Y+6, r24	; 0x06
 25a:	ce 01       	movw	r24, r28
 25c:	04 96       	adiw	r24, 0x04	; 4
 25e:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_init>
 262:	ce 01       	movw	r24, r28
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_init>
 26a:	78 94       	sei
 26c:	6e 9a       	sbi	0x0d, 6	; 13
 26e:	26 96       	adiw	r28, 0x06	; 6
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <_SPIInitSlave>:
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	00 d0       	rcall	.+0      	; 0x286 <_SPIInitSlave+0x6>
 286:	00 d0       	rcall	.+0      	; 0x288 <_SPIInitSlave+0x8>
 288:	00 d0       	rcall	.+0      	; 0x28a <_SPIInitSlave+0xa>
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	fc 01       	movw	r30, r24
 290:	1e b8       	out	0x0e, r1	; 14
 292:	1d b8       	out	0x0d, r1	; 13
 294:	8d b1       	in	r24, 0x0d	; 13
 296:	8d b9       	out	0x0d, r24	; 13
 298:	9d b1       	in	r25, 0x0d	; 13
 29a:	82 81       	ldd	r24, Z+2	; 0x02
 29c:	89 2b       	or	r24, r25
 29e:	8d b9       	out	0x0d, r24	; 13
 2a0:	9d b1       	in	r25, 0x0d	; 13
 2a2:	80 81       	ld	r24, Z
 2a4:	89 2b       	or	r24, r25
 2a6:	8d b9       	out	0x0d, r24	; 13
 2a8:	9d b1       	in	r25, 0x0d	; 13
 2aa:	81 81       	ldd	r24, Z+1	; 0x01
 2ac:	89 2b       	or	r24, r25
 2ae:	8d b9       	out	0x0d, r24	; 13
 2b0:	6f 9a       	sbi	0x0d, 7	; 13
 2b2:	83 81       	ldd	r24, Z+3	; 0x03
 2b4:	94 81       	ldd	r25, Z+4	; 0x04
 2b6:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <PTR_CALL_BACK+0x1>
 2ba:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <PTR_CALL_BACK>
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	89 83       	std	Y+1, r24	; 0x01
 2c2:	90 eb       	ldi	r25, 0xB0	; 176
 2c4:	9a 83       	std	Y+2, r25	; 0x02
 2c6:	1b 82       	std	Y+3, r1	; 0x03
 2c8:	8c 83       	std	Y+4, r24	; 0x04
 2ca:	80 e4       	ldi	r24, 0x40	; 64
 2cc:	8d 83       	std	Y+5, r24	; 0x05
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	8e 83       	std	Y+6, r24	; 0x06
 2d2:	ce 01       	movw	r24, r28
 2d4:	04 96       	adiw	r24, 0x04	; 4
 2d6:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_init>
 2da:	ce 01       	movw	r24, r28
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_init>
 2e2:	78 94       	sei
 2e4:	6e 9a       	sbi	0x0d, 6	; 13
 2e6:	26 96       	adiw	r28, 0x06	; 6
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <_SPISend>:

extern ERROR_STATUS _SPISend(uint8_t data)
{
	uint8_t state = E_NOK;	
	if(g_u8_RxFlag == TRUE)
 2f8:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2fc:	91 30       	cpi	r25, 0x01	; 1
 2fe:	29 f4       	brne	.+10     	; 0x30a <_SPISend+0x12>
	{
		SPDR = data;
 300:	8f b9       	out	0x0f, r24	; 15
		g_u8_RxFlag = FALSE;	
 302:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		state = E_OK;
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	08 95       	ret
	g_u8_RxFlag = FALSE ;
}

extern ERROR_STATUS _SPISend(uint8_t data)
{
	uint8_t state = E_NOK;	
 30a:	81 e0       	ldi	r24, 0x01	; 1
		SPDR = data;
		g_u8_RxFlag = FALSE;	
		state = E_OK;
	}
	return state;
}
 30c:	08 95       	ret

0000030e <_SPIRead>:

extern ERROR_STATUS _SPIRead(uint8_t* data)
{
 30e:	fc 01       	movw	r30, r24
	uint8_t state = E_NOK;
	if(g_u8_RxFlag == TRUE)
 310:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 314:	91 30       	cpi	r25, 0x01	; 1
 316:	31 f4       	brne	.+12     	; 0x324 <_SPIRead+0x16>
	{
		*data = SPDR;
 318:	8f b1       	in	r24, 0x0f	; 15
 31a:	80 83       	st	Z, r24
		g_u8_RxFlag = FALSE;
 31c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		state = E_OK;
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	08 95       	ret
	return state;
}

extern ERROR_STATUS _SPIRead(uint8_t* data)
{
	uint8_t state = E_NOK;
 324:	81 e0       	ldi	r24, 0x01	; 1
		*data = SPDR;
		g_u8_RxFlag = FALSE;
		state = E_OK;
	}
	return state;
}
 326:	08 95       	ret

00000328 <SPI_SetCBF>:


void SPI_SetCBF(FunPtr isr_ptr)
{
	PTR_CALL_BACK = isr_ptr;
 328:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <PTR_CALL_BACK+0x1>
 32c:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <PTR_CALL_BACK>
 330:	08 95       	ret

00000332 <__vector_12>:
}

ISR(SPI_STC_vect)
{
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	2f 93       	push	r18
 33e:	3f 93       	push	r19
 340:	4f 93       	push	r20
 342:	5f 93       	push	r21
 344:	6f 93       	push	r22
 346:	7f 93       	push	r23
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	af 93       	push	r26
 34e:	bf 93       	push	r27
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
	g_u8_RxFlag = TRUE;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	PTR_CALL_BACK();
 35a:	e0 91 fa 00 	lds	r30, 0x00FA	; 0x8000fa <PTR_CALL_BACK>
 35e:	f0 91 fb 00 	lds	r31, 0x00FB	; 0x8000fb <PTR_CALL_BACK+0x1>
 362:	09 95       	icall
}
 364:	ff 91       	pop	r31
 366:	ef 91       	pop	r30
 368:	bf 91       	pop	r27
 36a:	af 91       	pop	r26
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	7f 91       	pop	r23
 372:	6f 91       	pop	r22
 374:	5f 91       	pop	r21
 376:	4f 91       	pop	r20
 378:	3f 91       	pop	r19
 37a:	2f 91       	pop	r18
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	2f 93       	push	r18
 392:	3f 93       	push	r19
 394:	4f 93       	push	r20
 396:	5f 93       	push	r21
 398:	6f 93       	push	r22
 39a:	7f 93       	push	r23
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
 3a8:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <Ptr_Timer0_OV>
 3ac:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <Ptr_Timer0_OV+0x1>
 3b0:	30 97       	sbiw	r30, 0x00	; 0
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
 3b4:	09 95       	icall
	}
}
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	bf 91       	pop	r27
 3bc:	af 91       	pop	r26
 3be:	9f 91       	pop	r25
 3c0:	8f 91       	pop	r24
 3c2:	7f 91       	pop	r23
 3c4:	6f 91       	pop	r22
 3c6:	5f 91       	pop	r21
 3c8:	4f 91       	pop	r20
 3ca:	3f 91       	pop	r19
 3cc:	2f 91       	pop	r18
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
 3fa:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <Ptr_Timer0_CM>
 3fe:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <Ptr_Timer0_CM+0x1>
 402:	30 97       	sbiw	r30, 0x00	; 0
 404:	09 f0       	breq	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		Ptr_Timer0_CM();
 406:	09 95       	icall
	}
}
 408:	ff 91       	pop	r31
 40a:	ef 91       	pop	r30
 40c:	bf 91       	pop	r27
 40e:	af 91       	pop	r26
 410:	9f 91       	pop	r25
 412:	8f 91       	pop	r24
 414:	7f 91       	pop	r23
 416:	6f 91       	pop	r22
 418:	5f 91       	pop	r21
 41a:	4f 91       	pop	r20
 41c:	3f 91       	pop	r19
 41e:	2f 91       	pop	r18
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	2f 93       	push	r18
 436:	3f 93       	push	r19
 438:	4f 93       	push	r20
 43a:	5f 93       	push	r21
 43c:	6f 93       	push	r22
 43e:	7f 93       	push	r23
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	af 93       	push	r26
 446:	bf 93       	push	r27
 448:	ef 93       	push	r30
 44a:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
 44c:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <Ptr_Timer2_OV>
 450:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <Ptr_Timer2_OV+0x1>
 454:	30 97       	sbiw	r30, 0x00	; 0
 456:	09 f0       	breq	.+2      	; 0x45a <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
 458:	09 95       	icall
	}
}
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	bf 91       	pop	r27
 460:	af 91       	pop	r26
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	7f 91       	pop	r23
 468:	6f 91       	pop	r22
 46a:	5f 91       	pop	r21
 46c:	4f 91       	pop	r20
 46e:	3f 91       	pop	r19
 470:	2f 91       	pop	r18
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 47c:	1f 92       	push	r1
 47e:	0f 92       	push	r0
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	0f 92       	push	r0
 484:	11 24       	eor	r1, r1
 486:	2f 93       	push	r18
 488:	3f 93       	push	r19
 48a:	4f 93       	push	r20
 48c:	5f 93       	push	r21
 48e:	6f 93       	push	r22
 490:	7f 93       	push	r23
 492:	8f 93       	push	r24
 494:	9f 93       	push	r25
 496:	af 93       	push	r26
 498:	bf 93       	push	r27
 49a:	ef 93       	push	r30
 49c:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
 49e:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <Ptr_Timer2_CM>
 4a2:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <Ptr_Timer2_CM+0x1>
 4a6:	30 97       	sbiw	r30, 0x00	; 0
 4a8:	09 f0       	breq	.+2      	; 0x4ac <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
 4aa:	09 95       	icall
	}
}
 4ac:	ff 91       	pop	r31
 4ae:	ef 91       	pop	r30
 4b0:	bf 91       	pop	r27
 4b2:	af 91       	pop	r26
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	7f 91       	pop	r23
 4ba:	6f 91       	pop	r22
 4bc:	5f 91       	pop	r21
 4be:	4f 91       	pop	r20
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 4ce:	1f 92       	push	r1
 4d0:	0f 92       	push	r0
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	0f 92       	push	r0
 4d6:	11 24       	eor	r1, r1
 4d8:	2f 93       	push	r18
 4da:	3f 93       	push	r19
 4dc:	4f 93       	push	r20
 4de:	5f 93       	push	r21
 4e0:	6f 93       	push	r22
 4e2:	7f 93       	push	r23
 4e4:	8f 93       	push	r24
 4e6:	9f 93       	push	r25
 4e8:	af 93       	push	r26
 4ea:	bf 93       	push	r27
 4ec:	ef 93       	push	r30
 4ee:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
 4f0:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <Ptr_Timer1_OV>
 4f4:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <Ptr_Timer1_OV+0x1>
 4f8:	30 97       	sbiw	r30, 0x00	; 0
 4fa:	09 f0       	breq	.+2      	; 0x4fe <__vector_9+0x30>
	{
		Ptr_Timer1_OV();
 4fc:	09 95       	icall
	}
}
 4fe:	ff 91       	pop	r31
 500:	ef 91       	pop	r30
 502:	bf 91       	pop	r27
 504:	af 91       	pop	r26
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	7f 91       	pop	r23
 50c:	6f 91       	pop	r22
 50e:	5f 91       	pop	r21
 510:	4f 91       	pop	r20
 512:	3f 91       	pop	r19
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 520:	1f 92       	push	r1
 522:	0f 92       	push	r0
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	0f 92       	push	r0
 528:	11 24       	eor	r1, r1
 52a:	2f 93       	push	r18
 52c:	3f 93       	push	r19
 52e:	4f 93       	push	r20
 530:	5f 93       	push	r21
 532:	6f 93       	push	r22
 534:	7f 93       	push	r23
 536:	8f 93       	push	r24
 538:	9f 93       	push	r25
 53a:	af 93       	push	r26
 53c:	bf 93       	push	r27
 53e:	ef 93       	push	r30
 540:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 542:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <Ptr_Timer1_CM>
 546:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <Ptr_Timer1_CM+0x1>
 54a:	30 97       	sbiw	r30, 0x00	; 0
 54c:	09 f0       	breq	.+2      	; 0x550 <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
 54e:	09 95       	icall
	}	
}
 550:	ff 91       	pop	r31
 552:	ef 91       	pop	r30
 554:	bf 91       	pop	r27
 556:	af 91       	pop	r26
 558:	9f 91       	pop	r25
 55a:	8f 91       	pop	r24
 55c:	7f 91       	pop	r23
 55e:	6f 91       	pop	r22
 560:	5f 91       	pop	r21
 562:	4f 91       	pop	r20
 564:	3f 91       	pop	r19
 566:	2f 91       	pop	r18
 568:	0f 90       	pop	r0
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	0f 90       	pop	r0
 56e:	1f 90       	pop	r1
 570:	18 95       	reti

00000572 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 572:	1f 92       	push	r1
 574:	0f 92       	push	r0
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	2f 93       	push	r18
 57e:	3f 93       	push	r19
 580:	4f 93       	push	r20
 582:	5f 93       	push	r21
 584:	6f 93       	push	r22
 586:	7f 93       	push	r23
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
 58c:	af 93       	push	r26
 58e:	bf 93       	push	r27
 590:	ef 93       	push	r30
 592:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 594:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <Ptr_Timer1_CM>
 598:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <Ptr_Timer1_CM+0x1>
 59c:	30 97       	sbiw	r30, 0x00	; 0
 59e:	09 f0       	breq	.+2      	; 0x5a2 <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 5a0:	09 95       	icall
	}
}
 5a2:	ff 91       	pop	r31
 5a4:	ef 91       	pop	r30
 5a6:	bf 91       	pop	r27
 5a8:	af 91       	pop	r26
 5aa:	9f 91       	pop	r25
 5ac:	8f 91       	pop	r24
 5ae:	7f 91       	pop	r23
 5b0:	6f 91       	pop	r22
 5b2:	5f 91       	pop	r21
 5b4:	4f 91       	pop	r20
 5b6:	3f 91       	pop	r19
 5b8:	2f 91       	pop	r18
 5ba:	0f 90       	pop	r0
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	0f 90       	pop	r0
 5c0:	1f 90       	pop	r1
 5c2:	18 95       	reti

000005c4 <UART_Init>:
void UART_Write_String(uint8_t* str)
{
	uint16_t i=0;
	while(str[i] != '\0')
		UART_Write(str[i++]);
}
 5c4:	cf 92       	push	r12
 5c6:	df 92       	push	r13
 5c8:	ef 92       	push	r14
 5ca:	ff 92       	push	r15
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	ec 01       	movw	r28, r24
 5d2:	8f 81       	ldd	r24, Y+7	; 0x07
 5d4:	98 85       	ldd	r25, Y+8	; 0x08
 5d6:	a9 85       	ldd	r26, Y+9	; 0x09
 5d8:	ba 85       	ldd	r27, Y+10	; 0x0a
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	aa 1f       	adc	r26, r26
 5e0:	bb 1f       	adc	r27, r27
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	aa 1f       	adc	r26, r26
 5e8:	bb 1f       	adc	r27, r27
 5ea:	9c 01       	movw	r18, r24
 5ec:	ad 01       	movw	r20, r26
 5ee:	22 0f       	add	r18, r18
 5f0:	33 1f       	adc	r19, r19
 5f2:	44 1f       	adc	r20, r20
 5f4:	55 1f       	adc	r21, r21
 5f6:	22 0f       	add	r18, r18
 5f8:	33 1f       	adc	r19, r19
 5fa:	44 1f       	adc	r20, r20
 5fc:	55 1f       	adc	r21, r21
 5fe:	0f 2e       	mov	r0, r31
 600:	c1 2c       	mov	r12, r1
 602:	f4 e2       	ldi	r31, 0x24	; 36
 604:	df 2e       	mov	r13, r31
 606:	f4 ef       	ldi	r31, 0xF4	; 244
 608:	ef 2e       	mov	r14, r31
 60a:	f1 2c       	mov	r15, r1
 60c:	f0 2d       	mov	r31, r0
 60e:	c7 01       	movw	r24, r14
 610:	b6 01       	movw	r22, r12
 612:	0e 94 58 05 	call	0xab0	; 0xab0 <__udivmodsi4>
 616:	21 50       	subi	r18, 0x01	; 1
 618:	29 b9       	out	0x09, r18	; 9
 61a:	8f 81       	ldd	r24, Y+7	; 0x07
 61c:	98 85       	ldd	r25, Y+8	; 0x08
 61e:	a9 85       	ldd	r26, Y+9	; 0x09
 620:	ba 85       	ldd	r27, Y+10	; 0x0a
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	aa 1f       	adc	r26, r26
 628:	bb 1f       	adc	r27, r27
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	aa 1f       	adc	r26, r26
 630:	bb 1f       	adc	r27, r27
 632:	9c 01       	movw	r18, r24
 634:	ad 01       	movw	r20, r26
 636:	22 0f       	add	r18, r18
 638:	33 1f       	adc	r19, r19
 63a:	44 1f       	adc	r20, r20
 63c:	55 1f       	adc	r21, r21
 63e:	22 0f       	add	r18, r18
 640:	33 1f       	adc	r19, r19
 642:	44 1f       	adc	r20, r20
 644:	55 1f       	adc	r21, r21
 646:	c7 01       	movw	r24, r14
 648:	b6 01       	movw	r22, r12
 64a:	0e 94 58 05 	call	0xab0	; 0xab0 <__udivmodsi4>
 64e:	da 01       	movw	r26, r20
 650:	c9 01       	movw	r24, r18
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	a1 09       	sbc	r26, r1
 656:	b1 09       	sbc	r27, r1
 658:	89 2f       	mov	r24, r25
 65a:	9a 2f       	mov	r25, r26
 65c:	ab 2f       	mov	r26, r27
 65e:	bb 27       	eor	r27, r27
 660:	80 bd       	out	0x20, r24	; 32
 662:	9a b1       	in	r25, 0x0a	; 10
 664:	88 81       	ld	r24, Y
 666:	89 2b       	or	r24, r25
 668:	9e 81       	ldd	r25, Y+6	; 0x06
 66a:	89 2b       	or	r24, r25
 66c:	8a b9       	out	0x0a, r24	; 10
 66e:	20 b5       	in	r18, 0x20	; 32
 670:	8b 81       	ldd	r24, Y+3	; 0x03
 672:	9d 81       	ldd	r25, Y+5	; 0x05
 674:	89 2b       	or	r24, r25
 676:	80 68       	ori	r24, 0x80	; 128
 678:	99 81       	ldd	r25, Y+1	; 0x01
 67a:	89 2b       	or	r24, r25
 67c:	9a 81       	ldd	r25, Y+2	; 0x02
 67e:	89 2b       	or	r24, r25
 680:	9c 81       	ldd	r25, Y+4	; 0x04
 682:	89 2b       	or	r24, r25
 684:	82 2b       	or	r24, r18
 686:	80 bd       	out	0x20, r24	; 32
 688:	8f b7       	in	r24, 0x3f	; 63
 68a:	80 68       	ori	r24, 0x80	; 128
 68c:	8f bf       	out	0x3f, r24	; 63
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	ff 90       	pop	r15
 694:	ef 90       	pop	r14
 696:	df 90       	pop	r13
 698:	cf 90       	pop	r12
 69a:	08 95       	ret

0000069c <UART_Read>:
 69c:	8c b1       	in	r24, 0x0c	; 12
 69e:	08 95       	ret

000006a0 <UART_Write>:
 6a0:	5d 9b       	sbis	0x0b, 5	; 11
 6a2:	fe cf       	rjmp	.-4      	; 0x6a0 <UART_Write>
 6a4:	8c b9       	out	0x0c, r24	; 12
 6a6:	08 95       	ret

000006a8 <UART_SetTX>:
/*-----------[ Timers Set CallBack Functions ]-----------*/
/*=======================================================*/

void UART_SetTX(FunPtr Ptr_ISR)
{
	Ptr_UART_TX = Ptr_ISR;
 6a8:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <Ptr_UART_TX+0x1>
 6ac:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Ptr_UART_TX>
 6b0:	08 95       	ret

000006b2 <UART_SetRX>:
}

void UART_SetRX(FunPtr Ptr_ISR)
{
	Ptr_UART_RX = Ptr_ISR;
 6b2:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <Ptr_UART_RX+0x1>
 6b6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Ptr_UART_RX>
 6ba:	08 95       	ret

000006bc <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
 6bc:	1f 92       	push	r1
 6be:	0f 92       	push	r0
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	0f 92       	push	r0
 6c4:	11 24       	eor	r1, r1
 6c6:	2f 93       	push	r18
 6c8:	3f 93       	push	r19
 6ca:	4f 93       	push	r20
 6cc:	5f 93       	push	r21
 6ce:	6f 93       	push	r22
 6d0:	7f 93       	push	r23
 6d2:	8f 93       	push	r24
 6d4:	9f 93       	push	r25
 6d6:	af 93       	push	r26
 6d8:	bf 93       	push	r27
 6da:	ef 93       	push	r30
 6dc:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
 6de:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <Ptr_UART_RX>
 6e2:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <Ptr_UART_RX+0x1>
 6e6:	30 97       	sbiw	r30, 0x00	; 0
 6e8:	09 f0       	breq	.+2      	; 0x6ec <__vector_13+0x30>
	{
		Ptr_UART_RX();
 6ea:	09 95       	icall
	}
}
 6ec:	ff 91       	pop	r31
 6ee:	ef 91       	pop	r30
 6f0:	bf 91       	pop	r27
 6f2:	af 91       	pop	r26
 6f4:	9f 91       	pop	r25
 6f6:	8f 91       	pop	r24
 6f8:	7f 91       	pop	r23
 6fa:	6f 91       	pop	r22
 6fc:	5f 91       	pop	r21
 6fe:	4f 91       	pop	r20
 700:	3f 91       	pop	r19
 702:	2f 91       	pop	r18
 704:	0f 90       	pop	r0
 706:	0f be       	out	0x3f, r0	; 63
 708:	0f 90       	pop	r0
 70a:	1f 90       	pop	r1
 70c:	18 95       	reti

0000070e <__vector_15>:

ISR(USART_TXC_vect)
{
 70e:	1f 92       	push	r1
 710:	0f 92       	push	r0
 712:	0f b6       	in	r0, 0x3f	; 63
 714:	0f 92       	push	r0
 716:	11 24       	eor	r1, r1
 718:	2f 93       	push	r18
 71a:	3f 93       	push	r19
 71c:	4f 93       	push	r20
 71e:	5f 93       	push	r21
 720:	6f 93       	push	r22
 722:	7f 93       	push	r23
 724:	8f 93       	push	r24
 726:	9f 93       	push	r25
 728:	af 93       	push	r26
 72a:	bf 93       	push	r27
 72c:	ef 93       	push	r30
 72e:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
 730:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <Ptr_UART_TX>
 734:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <Ptr_UART_TX+0x1>
 738:	30 97       	sbiw	r30, 0x00	; 0
 73a:	09 f0       	breq	.+2      	; 0x73e <__vector_15+0x30>
	{
		Ptr_UART_TX();
 73c:	09 95       	icall
	}
 73e:	ff 91       	pop	r31
 740:	ef 91       	pop	r30
 742:	bf 91       	pop	r27
 744:	af 91       	pop	r26
 746:	9f 91       	pop	r25
 748:	8f 91       	pop	r24
 74a:	7f 91       	pop	r23
 74c:	6f 91       	pop	r22
 74e:	5f 91       	pop	r21
 750:	4f 91       	pop	r20
 752:	3f 91       	pop	r19
 754:	2f 91       	pop	r18
 756:	0f 90       	pop	r0
 758:	0f be       	out	0x3f, r0	; 63
 75a:	0f 90       	pop	r0
 75c:	1f 90       	pop	r1
 75e:	18 95       	reti

00000760 <BCM_Tx_ISR_cbf>:
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
}
 760:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <g_BCM_EXcfg+0x4>
 764:	82 30       	cpi	r24, 0x02	; 2
 766:	49 f4       	brne	.+18     	; 0x77a <BCM_Tx_ISR_cbf+0x1a>
 768:	e8 e7       	ldi	r30, 0x78	; 120
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	84 85       	ldd	r24, Z+12	; 0x0c
 76e:	95 85       	ldd	r25, Z+13	; 0x0d
 770:	01 96       	adiw	r24, 0x01	; 1
 772:	95 87       	std	Z+13, r25	; 0x0d
 774:	84 87       	std	Z+12, r24	; 0x0c
 776:	83 e0       	ldi	r24, 0x03	; 3
 778:	84 83       	std	Z+4, r24	; 0x04
 77a:	08 95       	ret

0000077c <BCM_Rx_ISR_cbf>:
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	1f 92       	push	r1
 782:	cd b7       	in	r28, 0x3d	; 61
 784:	de b7       	in	r29, 0x3e	; 62
 786:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <g_BCM_EXcfg+0x2>
 78a:	88 23       	and	r24, r24
 78c:	19 f0       	breq	.+6      	; 0x794 <BCM_Rx_ISR_cbf+0x18>
 78e:	81 30       	cpi	r24, 0x01	; 1
 790:	29 f0       	breq	.+10     	; 0x79c <BCM_Rx_ISR_cbf+0x20>
 792:	08 c0       	rjmp	.+16     	; 0x7a4 <BCM_Rx_ISR_cbf+0x28>
 794:	0e 94 4e 03 	call	0x69c	; 0x69c <UART_Read>
 798:	89 83       	std	Y+1, r24	; 0x01
 79a:	04 c0       	rjmp	.+8      	; 0x7a4 <BCM_Rx_ISR_cbf+0x28>
 79c:	ce 01       	movw	r24, r28
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	0e 94 87 01 	call	0x30e	; 0x30e <_SPIRead>
 7a4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <g_BCM_EXcfg+0xc>
 7a8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <g_BCM_EXcfg+0xd>
 7ac:	00 97       	sbiw	r24, 0x00	; 0
 7ae:	a1 f4       	brne	.+40     	; 0x7d8 <BCM_Rx_ISR_cbf+0x5c>
 7b0:	89 81       	ldd	r24, Y+1	; 0x01
 7b2:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <g_Rx_ID>
 7b6:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <g_Rx_ID>
 7ba:	81 34       	cpi	r24, 0x41	; 65
 7bc:	51 f4       	brne	.+20     	; 0x7d2 <BCM_Rx_ISR_cbf+0x56>
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_ID_State>
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <g_BCM_EXcfg+0xd>
 7cc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <g_BCM_EXcfg+0xc>
 7d0:	54 c0       	rjmp	.+168    	; 0x87a <__stack+0x1b>
 7d2:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <g_ID_State>
 7d6:	51 c0       	rjmp	.+162    	; 0x87a <__stack+0x1b>
 7d8:	81 30       	cpi	r24, 0x01	; 1
 7da:	91 05       	cpc	r25, r1
 7dc:	19 f5       	brne	.+70     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7de:	89 81       	ldd	r24, Y+1	; 0x01
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <g_BCM_EXcfg+0x8>
 7e6:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <g_BCM_EXcfg+0x9>
 7ea:	28 17       	cp	r18, r24
 7ec:	39 07       	cpc	r19, r25
 7ee:	78 f4       	brcc	.+30     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7f0:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <g_LEN_State>
 7f4:	e8 e7       	ldi	r30, 0x78	; 120
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	84 83       	std	Z+4, r24	; 0x04
 7fc:	15 86       	std	Z+13, r1	; 0x0d
 7fe:	14 86       	std	Z+12, r1	; 0x0c
 800:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <g_LEN_State>
 804:	06 84       	ldd	r0, Z+14	; 0x0e
 806:	f7 85       	ldd	r31, Z+15	; 0x0f
 808:	e0 2d       	mov	r30, r0
 80a:	09 95       	icall
 80c:	36 c0       	rjmp	.+108    	; 0x87a <__stack+0x1b>
 80e:	e8 e7       	ldi	r30, 0x78	; 120
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	93 87       	std	Z+11, r25	; 0x0b
 814:	82 87       	std	Z+10, r24	; 0x0a
 816:	82 e0       	ldi	r24, 0x02	; 2
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	95 87       	std	Z+13, r25	; 0x0d
 81c:	84 87       	std	Z+12, r24	; 0x0c
 81e:	84 e0       	ldi	r24, 0x04	; 4
 820:	84 83       	std	Z+4, r24	; 0x04
 822:	2b c0       	rjmp	.+86     	; 0x87a <__stack+0x1b>
 824:	9c 01       	movw	r18, r24
 826:	22 50       	subi	r18, 0x02	; 2
 828:	31 09       	sbc	r19, r1
 82a:	40 91 82 00 	lds	r20, 0x0082	; 0x800082 <g_BCM_EXcfg+0xa>
 82e:	50 91 83 00 	lds	r21, 0x0083	; 0x800083 <g_BCM_EXcfg+0xb>
 832:	24 17       	cp	r18, r20
 834:	35 07       	cpc	r19, r21
 836:	a8 f4       	brcc	.+42     	; 0x862 <__stack+0x3>
 838:	89 81       	ldd	r24, Y+1	; 0x01
 83a:	e8 e7       	ldi	r30, 0x78	; 120
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	46 81       	ldd	r20, Z+6	; 0x06
 840:	57 81       	ldd	r21, Z+7	; 0x07
 842:	da 01       	movw	r26, r20
 844:	a2 0f       	add	r26, r18
 846:	b3 1f       	adc	r27, r19
 848:	8c 93       	st	X, r24
 84a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <g_CS_Calculated>
 84e:	89 81       	ldd	r24, Y+1	; 0x01
 850:	89 0f       	add	r24, r25
 852:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <g_CS_Calculated>
 856:	84 85       	ldd	r24, Z+12	; 0x0c
 858:	95 85       	ldd	r25, Z+13	; 0x0d
 85a:	01 96       	adiw	r24, 0x01	; 1
 85c:	95 87       	std	Z+13, r25	; 0x0d
 85e:	84 87       	std	Z+12, r24	; 0x0c
 860:	0c c0       	rjmp	.+24     	; 0x87a <__stack+0x1b>
 862:	24 17       	cp	r18, r20
 864:	35 07       	cpc	r19, r21
 866:	49 f4       	brne	.+18     	; 0x87a <__stack+0x1b>
 868:	e8 e7       	ldi	r30, 0x78	; 120
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	29 81       	ldd	r18, Y+1	; 0x01
 86e:	25 83       	std	Z+5, r18	; 0x05
 870:	01 96       	adiw	r24, 0x01	; 1
 872:	95 87       	std	Z+13, r25	; 0x0d
 874:	84 87       	std	Z+12, r24	; 0x0c
 876:	85 e0       	ldi	r24, 0x05	; 5
 878:	84 83       	std	Z+4, r24	; 0x04
 87a:	0f 90       	pop	r0
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	08 95       	ret

00000882 <BCM_Tx_Dispatcher>:
 882:	cf 93       	push	r28
 884:	df 93       	push	r29
 886:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <g_BCM_EXcfg+0x4>
 88a:	83 30       	cpi	r24, 0x03	; 3
 88c:	09 f0       	breq	.+2      	; 0x890 <BCM_Tx_Dispatcher+0xe>
 88e:	69 c0       	rjmp	.+210    	; 0x962 <BCM_Tx_Dispatcher+0xe0>
 890:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <g_BCM_EXcfg+0xc>
 894:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <g_BCM_EXcfg+0xd>
 898:	81 30       	cpi	r24, 0x01	; 1
 89a:	91 05       	cpc	r25, r1
 89c:	a1 f4       	brne	.+40     	; 0x8c6 <BCM_Tx_Dispatcher+0x44>
 89e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <g_BCM_EXcfg+0x2>
 8a2:	88 23       	and	r24, r24
 8a4:	19 f0       	breq	.+6      	; 0x8ac <BCM_Tx_Dispatcher+0x2a>
 8a6:	81 30       	cpi	r24, 0x01	; 1
 8a8:	31 f0       	breq	.+12     	; 0x8b6 <BCM_Tx_Dispatcher+0x34>
 8aa:	09 c0       	rjmp	.+18     	; 0x8be <BCM_Tx_Dispatcher+0x3c>
 8ac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <g_BCM_EXcfg+0x8>
 8b0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <UART_Write>
 8b4:	04 c0       	rjmp	.+8      	; 0x8be <BCM_Tx_Dispatcher+0x3c>
 8b6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <g_BCM_EXcfg+0x8>
 8ba:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_SPISend>
 8be:	82 e0       	ldi	r24, 0x02	; 2
 8c0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <g_BCM_EXcfg+0x4>
 8c4:	4e c0       	rjmp	.+156    	; 0x962 <BCM_Tx_Dispatcher+0xe0>
 8c6:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <g_BCM_EXcfg+0x8>
 8ca:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <g_BCM_EXcfg+0x9>
 8ce:	a9 01       	movw	r20, r18
 8d0:	4f 5f       	subi	r20, 0xFF	; 255
 8d2:	5f 4f       	sbci	r21, 0xFF	; 255
 8d4:	48 17       	cp	r20, r24
 8d6:	59 07       	cpc	r21, r25
 8d8:	18 f1       	brcs	.+70     	; 0x920 <BCM_Tx_Dispatcher+0x9e>
 8da:	a8 e7       	ldi	r26, 0x78	; 120
 8dc:	b0 e0       	ldi	r27, 0x00	; 0
 8de:	02 97       	sbiw	r24, 0x02	; 2
 8e0:	16 96       	adiw	r26, 0x06	; 6
 8e2:	ed 91       	ld	r30, X+
 8e4:	fc 91       	ld	r31, X
 8e6:	17 97       	sbiw	r26, 0x07	; 7
 8e8:	e8 0f       	add	r30, r24
 8ea:	f9 1f       	adc	r31, r25
 8ec:	15 96       	adiw	r26, 0x05	; 5
 8ee:	9c 91       	ld	r25, X
 8f0:	15 97       	sbiw	r26, 0x05	; 5
 8f2:	80 81       	ld	r24, Z
 8f4:	89 0f       	add	r24, r25
 8f6:	15 96       	adiw	r26, 0x05	; 5
 8f8:	8c 93       	st	X, r24
 8fa:	15 97       	sbiw	r26, 0x05	; 5
 8fc:	12 96       	adiw	r26, 0x02	; 2
 8fe:	8c 91       	ld	r24, X
 900:	88 23       	and	r24, r24
 902:	19 f0       	breq	.+6      	; 0x90a <BCM_Tx_Dispatcher+0x88>
 904:	81 30       	cpi	r24, 0x01	; 1
 906:	29 f0       	breq	.+10     	; 0x912 <BCM_Tx_Dispatcher+0x90>
 908:	07 c0       	rjmp	.+14     	; 0x918 <BCM_Tx_Dispatcher+0x96>
 90a:	80 81       	ld	r24, Z
 90c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <UART_Write>
 910:	03 c0       	rjmp	.+6      	; 0x918 <BCM_Tx_Dispatcher+0x96>
 912:	80 81       	ld	r24, Z
 914:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_SPISend>
 918:	82 e0       	ldi	r24, 0x02	; 2
 91a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <g_BCM_EXcfg+0x4>
 91e:	21 c0       	rjmp	.+66     	; 0x962 <BCM_Tx_Dispatcher+0xe0>
 920:	2e 5f       	subi	r18, 0xFE	; 254
 922:	3f 4f       	sbci	r19, 0xFF	; 255
 924:	82 17       	cp	r24, r18
 926:	93 07       	cpc	r25, r19
 928:	a1 f4       	brne	.+40     	; 0x952 <BCM_Tx_Dispatcher+0xd0>
 92a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <g_BCM_EXcfg+0x2>
 92e:	88 23       	and	r24, r24
 930:	19 f0       	breq	.+6      	; 0x938 <BCM_Tx_Dispatcher+0xb6>
 932:	81 30       	cpi	r24, 0x01	; 1
 934:	31 f0       	breq	.+12     	; 0x942 <BCM_Tx_Dispatcher+0xc0>
 936:	09 c0       	rjmp	.+18     	; 0x94a <BCM_Tx_Dispatcher+0xc8>
 938:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <g_BCM_EXcfg+0x5>
 93c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <UART_Write>
 940:	04 c0       	rjmp	.+8      	; 0x94a <BCM_Tx_Dispatcher+0xc8>
 942:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <g_BCM_EXcfg+0x5>
 946:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_SPISend>
 94a:	82 e0       	ldi	r24, 0x02	; 2
 94c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <g_BCM_EXcfg+0x4>
 950:	08 c0       	rjmp	.+16     	; 0x962 <BCM_Tx_Dispatcher+0xe0>
 952:	c8 e7       	ldi	r28, 0x78	; 120
 954:	d0 e0       	ldi	r29, 0x00	; 0
 956:	ee 85       	ldd	r30, Y+14	; 0x0e
 958:	ff 85       	ldd	r31, Y+15	; 0x0f
 95a:	8a e0       	ldi	r24, 0x0A	; 10
 95c:	09 95       	icall
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	8c 83       	std	Y+4, r24	; 0x04
 962:	df 91       	pop	r29
 964:	cf 91       	pop	r28
 966:	08 95       	ret

00000968 <BCM_Init>:
 968:	cf 93       	push	r28
 96a:	df 93       	push	r29
 96c:	cd b7       	in	r28, 0x3d	; 61
 96e:	de b7       	in	r29, 0x3e	; 62
 970:	60 97       	sbiw	r28, 0x10	; 16
 972:	0f b6       	in	r0, 0x3f	; 63
 974:	f8 94       	cli
 976:	de bf       	out	0x3e, r29	; 62
 978:	0f be       	out	0x3f, r0	; 63
 97a:	cd bf       	out	0x3d, r28	; 61
 97c:	00 97       	sbiw	r24, 0x00	; 0
 97e:	09 f4       	brne	.+2      	; 0x982 <BCM_Init+0x1a>
 980:	69 c0       	rjmp	.+210    	; 0xa54 <BCM_Init+0xec>
 982:	dc 01       	movw	r26, r24
 984:	11 96       	adiw	r26, 0x01	; 1
 986:	8c 91       	ld	r24, X
 988:	11 97       	sbiw	r26, 0x01	; 1
 98a:	e8 e7       	ldi	r30, 0x78	; 120
 98c:	f0 e0       	ldi	r31, 0x00	; 0
 98e:	81 83       	std	Z+1, r24	; 0x01
 990:	9c 91       	ld	r25, X
 992:	90 83       	st	Z, r25
 994:	12 96       	adiw	r26, 0x02	; 2
 996:	8c 91       	ld	r24, X
 998:	82 83       	std	Z+2, r24	; 0x02
 99a:	21 e0       	ldi	r18, 0x01	; 1
 99c:	24 83       	std	Z+4, r18	; 0x04
 99e:	15 86       	std	Z+13, r1	; 0x0d
 9a0:	14 86       	std	Z+12, r1	; 0x0c
 9a2:	15 82       	std	Z+5, r1	; 0x05
 9a4:	11 86       	std	Z+9, r1	; 0x09
 9a6:	10 86       	std	Z+8, r1	; 0x08
 9a8:	13 86       	std	Z+11, r1	; 0x0b
 9aa:	12 86       	std	Z+10, r1	; 0x0a
 9ac:	88 23       	and	r24, r24
 9ae:	19 f0       	breq	.+6      	; 0x9b6 <BCM_Init+0x4e>
 9b0:	81 30       	cpi	r24, 0x01	; 1
 9b2:	59 f1       	breq	.+86     	; 0xa0a <BCM_Init+0xa2>
 9b4:	51 c0       	rjmp	.+162    	; 0xa58 <BCM_Init+0xf0>
 9b6:	40 e8       	ldi	r20, 0x80	; 128
 9b8:	55 e2       	ldi	r21, 0x25	; 37
 9ba:	60 e0       	ldi	r22, 0x00	; 0
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	48 87       	std	Y+8, r20	; 0x08
 9c0:	59 87       	std	Y+9, r21	; 0x09
 9c2:	6a 87       	std	Y+10, r22	; 0x0a
 9c4:	7b 87       	std	Y+11, r23	; 0x0b
 9c6:	86 e0       	ldi	r24, 0x06	; 6
 9c8:	8a 83       	std	Y+2, r24	; 0x02
 9ca:	1d 82       	std	Y+5, r1	; 0x05
 9cc:	1b 82       	std	Y+3, r1	; 0x03
 9ce:	1e 82       	std	Y+6, r1	; 0x06
 9d0:	1c 82       	std	Y+4, r1	; 0x04
 9d2:	99 23       	and	r25, r25
 9d4:	19 f0       	breq	.+6      	; 0x9dc <BCM_Init+0x74>
 9d6:	91 30       	cpi	r25, 0x01	; 1
 9d8:	51 f0       	breq	.+20     	; 0x9ee <BCM_Init+0x86>
 9da:	11 c0       	rjmp	.+34     	; 0x9fe <BCM_Init+0x96>
 9dc:	88 e0       	ldi	r24, 0x08	; 8
 9de:	89 83       	std	Y+1, r24	; 0x01
 9e0:	80 e4       	ldi	r24, 0x40	; 64
 9e2:	8f 83       	std	Y+7, r24	; 0x07
 9e4:	80 eb       	ldi	r24, 0xB0	; 176
 9e6:	93 e0       	ldi	r25, 0x03	; 3
 9e8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <UART_SetTX>
 9ec:	08 c0       	rjmp	.+16     	; 0x9fe <BCM_Init+0x96>
 9ee:	80 e1       	ldi	r24, 0x10	; 16
 9f0:	89 83       	std	Y+1, r24	; 0x01
 9f2:	80 e8       	ldi	r24, 0x80	; 128
 9f4:	8f 83       	std	Y+7, r24	; 0x07
 9f6:	8e eb       	ldi	r24, 0xBE	; 190
 9f8:	93 e0       	ldi	r25, 0x03	; 3
 9fa:	0e 94 59 03 	call	0x6b2	; 0x6b2 <UART_SetRX>
 9fe:	ce 01       	movw	r24, r28
 a00:	01 96       	adiw	r24, 0x01	; 1
 a02:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <UART_Init>
 a06:	8c e3       	ldi	r24, 0x3C	; 60
 a08:	2a c0       	rjmp	.+84     	; 0xa5e <BCM_Init+0xf6>
 a0a:	83 e0       	ldi	r24, 0x03	; 3
 a0c:	8c 87       	std	Y+12, r24	; 0x0c
 a0e:	1e 86       	std	Y+14, r1	; 0x0e
 a10:	1d 86       	std	Y+13, r1	; 0x0d
 a12:	99 23       	and	r25, r25
 a14:	19 f0       	breq	.+6      	; 0xa1c <BCM_Init+0xb4>
 a16:	91 30       	cpi	r25, 0x01	; 1
 a18:	79 f0       	breq	.+30     	; 0xa38 <BCM_Init+0xd0>
 a1a:	20 c0       	rjmp	.+64     	; 0xa5c <BCM_Init+0xf4>
 a1c:	80 eb       	ldi	r24, 0xB0	; 176
 a1e:	93 e0       	ldi	r25, 0x03	; 3
 a20:	98 8b       	std	Y+16, r25	; 0x10
 a22:	8f 87       	std	Y+15, r24	; 0x0f
 a24:	ce 01       	movw	r24, r28
 a26:	0c 96       	adiw	r24, 0x0c	; 12
 a28:	0e 94 05 01 	call	0x20a	; 0x20a <_SPIInitMaster>
 a2c:	80 eb       	ldi	r24, 0xB0	; 176
 a2e:	93 e0       	ldi	r25, 0x03	; 3
 a30:	0e 94 94 01 	call	0x328	; 0x328 <SPI_SetCBF>
 a34:	8c e3       	ldi	r24, 0x3C	; 60
 a36:	13 c0       	rjmp	.+38     	; 0xa5e <BCM_Init+0xf6>
 a38:	8e eb       	ldi	r24, 0xBE	; 190
 a3a:	93 e0       	ldi	r25, 0x03	; 3
 a3c:	98 8b       	std	Y+16, r25	; 0x10
 a3e:	8f 87       	std	Y+15, r24	; 0x0f
 a40:	ce 01       	movw	r24, r28
 a42:	0c 96       	adiw	r24, 0x0c	; 12
 a44:	0e 94 40 01 	call	0x280	; 0x280 <_SPIInitSlave>
 a48:	8e eb       	ldi	r24, 0xBE	; 190
 a4a:	93 e0       	ldi	r25, 0x03	; 3
 a4c:	0e 94 94 01 	call	0x328	; 0x328 <SPI_SetCBF>
 a50:	8c e3       	ldi	r24, 0x3C	; 60
 a52:	05 c0       	rjmp	.+10     	; 0xa5e <BCM_Init+0xf6>
 a54:	8d e3       	ldi	r24, 0x3D	; 61
 a56:	03 c0       	rjmp	.+6      	; 0xa5e <BCM_Init+0xf6>
 a58:	80 e4       	ldi	r24, 0x40	; 64
 a5a:	01 c0       	rjmp	.+2      	; 0xa5e <BCM_Init+0xf6>
 a5c:	8c e3       	ldi	r24, 0x3C	; 60
 a5e:	60 96       	adiw	r28, 0x10	; 16
 a60:	0f b6       	in	r0, 0x3f	; 63
 a62:	f8 94       	cli
 a64:	de bf       	out	0x3e, r29	; 62
 a66:	0f be       	out	0x3f, r0	; 63
 a68:	cd bf       	out	0x3d, r28	; 61
 a6a:	df 91       	pop	r29
 a6c:	cf 91       	pop	r28
 a6e:	08 95       	ret

00000a70 <BCM_DeInit>:
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	
	/*--------[ Search For That BCM CFG In The Working List ]--------*/

	/*--------[ Set That BCM To OFF ]--------*/
	g_BCM_EXcfg.FSM_State = OFF_State;
 a70:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <g_BCM_EXcfg+0x4>
	
	
	errorStatus= BCM_ERROR + E_OK;

	return errorStatus;
}
 a74:	8c e3       	ldi	r24, 0x3C	; 60
 a76:	08 95       	ret

00000a78 <BCM_Send>:

ERROR_STATUS BCM_Send(uint8_t* Buffer, uint16_t Buf_Len, BCM_cfg_s* My_BCM, Notify_FunPtr Notify_Ptr ){
	
	/* lock the buffer so user can't chance on it  */
	
	g_BCM_EXcfg.Lock_State = Buffer_Locked ;
 a78:	e8 e7       	ldi	r30, 0x78	; 120
 a7a:	f0 e0       	ldi	r31, 0x00	; 0
 a7c:	41 e0       	ldi	r20, 0x01	; 1
 a7e:	43 83       	std	Z+3, r20	; 0x03
	
	/*set the buffer address, length, and notification function*/
	
	g_BCM_EXcfg.Buffer = Buffer;
 a80:	97 83       	std	Z+7, r25	; 0x07
 a82:	86 83       	std	Z+6, r24	; 0x06
	g_BCM_EXcfg.Buf_Len = Buf_Len;
 a84:	71 87       	std	Z+9, r23	; 0x09
 a86:	60 87       	std	Z+8, r22	; 0x08
	g_BCM_EXcfg.BCM_notify_cbf = Notify_Ptr;
 a88:	37 87       	std	Z+15, r19	; 0x0f
 a8a:	26 87       	std	Z+14, r18	; 0x0e
	
	switch(g_BCM_EXcfg.Protocol){
 a8c:	82 81       	ldd	r24, Z+2	; 0x02
 a8e:	88 23       	and	r24, r24
 a90:	19 f0       	breq	.+6      	; 0xa98 <BCM_Send+0x20>
 a92:	81 30       	cpi	r24, 0x01	; 1
 a94:	29 f0       	breq	.+10     	; 0xaa0 <BCM_Send+0x28>
 a96:	07 c0       	rjmp	.+14     	; 0xaa6 <BCM_Send+0x2e>
		
		case UART_Protocol :
			UART_Write(BCM_ID);
 a98:	81 e4       	ldi	r24, 0x41	; 65
 a9a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <UART_Write>
		break;
 a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <BCM_Send+0x2e>
		case  SPI_Protocol :
			_SPISend(BCM_ID);
 aa0:	81 e4       	ldi	r24, 0x41	; 65
 aa2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_SPISend>
		break;
		
	}
	g_BCM_EXcfg.FSM_State = SendingByte_State ;	
 aa6:	82 e0       	ldi	r24, 0x02	; 2
 aa8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <g_BCM_EXcfg+0x4>
	return 0 ;
}
 aac:	80 e0       	ldi	r24, 0x00	; 0
 aae:	08 95       	ret

00000ab0 <__udivmodsi4>:
 ab0:	a1 e2       	ldi	r26, 0x21	; 33
 ab2:	1a 2e       	mov	r1, r26
 ab4:	aa 1b       	sub	r26, r26
 ab6:	bb 1b       	sub	r27, r27
 ab8:	fd 01       	movw	r30, r26
 aba:	0d c0       	rjmp	.+26     	; 0xad6 <__udivmodsi4_ep>

00000abc <__udivmodsi4_loop>:
 abc:	aa 1f       	adc	r26, r26
 abe:	bb 1f       	adc	r27, r27
 ac0:	ee 1f       	adc	r30, r30
 ac2:	ff 1f       	adc	r31, r31
 ac4:	a2 17       	cp	r26, r18
 ac6:	b3 07       	cpc	r27, r19
 ac8:	e4 07       	cpc	r30, r20
 aca:	f5 07       	cpc	r31, r21
 acc:	20 f0       	brcs	.+8      	; 0xad6 <__udivmodsi4_ep>
 ace:	a2 1b       	sub	r26, r18
 ad0:	b3 0b       	sbc	r27, r19
 ad2:	e4 0b       	sbc	r30, r20
 ad4:	f5 0b       	sbc	r31, r21

00000ad6 <__udivmodsi4_ep>:
 ad6:	66 1f       	adc	r22, r22
 ad8:	77 1f       	adc	r23, r23
 ada:	88 1f       	adc	r24, r24
 adc:	99 1f       	adc	r25, r25
 ade:	1a 94       	dec	r1
 ae0:	69 f7       	brne	.-38     	; 0xabc <__udivmodsi4_loop>
 ae2:	60 95       	com	r22
 ae4:	70 95       	com	r23
 ae6:	80 95       	com	r24
 ae8:	90 95       	com	r25
 aea:	9b 01       	movw	r18, r22
 aec:	ac 01       	movw	r20, r24
 aee:	bd 01       	movw	r22, r26
 af0:	cf 01       	movw	r24, r30
 af2:	08 95       	ret

00000af4 <_exit>:
 af4:	f8 94       	cli

00000af6 <__stop_program>:
 af6:	ff cf       	rjmp	.-2      	; 0xaf6 <__stop_program>
