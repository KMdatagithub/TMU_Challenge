
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000924  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800060  00800060  00000998  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001961  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ba  00000000  00000000  0000254d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c3  00000000  00000000  00002e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000680  00000000  00000000  000034cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000923  00000000  00000000  00003b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000199f  00000000  00000000  0000446f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00005e0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_4>
  14:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_7>
  20:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_8>
  24:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__vector_9>
  28:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_10>
  2c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_11>
  30:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_12>
  34:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8a:	0c 94 90 04 	jmp	0x920	; 0x920 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <omgplzzz>:
#include "SL/BCM.h"
#include "MCAL/UART.h"
#include "util/softwareDelay.h"
#include "util/registers.h"

void omgplzzz(enum_BcmStatus n){}
  92:	08 95       	ret

00000094 <main>:

int main(void)
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	e5 97       	sbiw	r28, 0x35	; 53
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
	uint8_t rxBuffer[50];
	/*-------------[ BCM Initialization ]-------------*/
	BCM_cfg_s BCM1;
	BCM1.BCM_CH_ID = 1;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	8c ab       	std	Y+52, r24	; 0x34
	BCM1.Mode = BCM_Rx_Mode;
  ac:	8b ab       	std	Y+51, r24	; 0x33
	BCM1.Protocol = UART_Protocol;
  ae:	1d aa       	std	Y+53, r1	; 0x35
	BCM_Init(&BCM1);
  b0:	ce 01       	movw	r24, r28
  b2:	c3 96       	adiw	r24, 0x33	; 51
  b4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <BCM_Init>
    BCM_Setup_RxBuffer(&BCM1, 50, rxBuffer, omgplzzz);
  b8:	29 e4       	ldi	r18, 0x49	; 73
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	ae 01       	movw	r20, r28
  be:	4f 5f       	subi	r20, 0xFF	; 255
  c0:	5f 4f       	sbci	r21, 0xFF	; 255
  c2:	62 e3       	ldi	r22, 0x32	; 50
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	ce 01       	movw	r24, r28
  c8:	c3 96       	adiw	r24, 0x33	; 51
  ca:	0e 94 5d 04 	call	0x8ba	; 0x8ba <BCM_Setup_RxBuffer>
	//UART_Write_String((uint8_t*)"OMG Plzzz Report My Noob Team! \r\n");
	
	while (1) 
    {

    }
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x3a>

000000d0 <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  d0:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
  d2:	89 2b       	or	r24, r25
  d4:	c9 f1       	breq	.+114    	; 0x148 <DIO_init+0x78>
	{
		switch(DIO_info->GPIO)
  d6:	80 81       	ld	r24, Z
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	91 f0       	breq	.+36     	; 0x100 <DIO_init+0x30>
  dc:	28 f0       	brcs	.+10     	; 0xe8 <DIO_init+0x18>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	d9 f0       	breq	.+54     	; 0x118 <DIO_init+0x48>
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	29 f1       	breq	.+74     	; 0x130 <DIO_init+0x60>
  e6:	32 c0       	rjmp	.+100    	; 0x14c <DIO_init+0x7c>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
  e8:	81 81       	ldd	r24, Z+1	; 0x01
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	98 2f       	mov	r25, r24
  ee:	90 95       	com	r25
  f0:	29 23       	and	r18, r25
  f2:	92 81       	ldd	r25, Z+2	; 0x02
  f4:	98 23       	and	r25, r24
  f6:	82 2f       	mov	r24, r18
  f8:	89 2b       	or	r24, r25
  fa:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
  fc:	80 e0       	ldi	r24, 0x00	; 0
			break;
  fe:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
 100:	81 81       	ldd	r24, Z+1	; 0x01
 102:	27 b3       	in	r18, 0x17	; 23
 104:	98 2f       	mov	r25, r24
 106:	90 95       	com	r25
 108:	29 23       	and	r18, r25
 10a:	92 81       	ldd	r25, Z+2	; 0x02
 10c:	98 23       	and	r25, r24
 10e:	82 2f       	mov	r24, r18
 110:	89 2b       	or	r24, r25
 112:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
 114:	80 e0       	ldi	r24, 0x00	; 0
			break;
 116:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
 118:	81 81       	ldd	r24, Z+1	; 0x01
 11a:	24 b3       	in	r18, 0x14	; 20
 11c:	98 2f       	mov	r25, r24
 11e:	90 95       	com	r25
 120:	29 23       	and	r18, r25
 122:	92 81       	ldd	r25, Z+2	; 0x02
 124:	98 23       	and	r25, r24
 126:	82 2f       	mov	r24, r18
 128:	89 2b       	or	r24, r25
 12a:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
 12c:	80 e0       	ldi	r24, 0x00	; 0
			break;
 12e:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
 130:	81 81       	ldd	r24, Z+1	; 0x01
 132:	21 b3       	in	r18, 0x11	; 17
 134:	98 2f       	mov	r25, r24
 136:	90 95       	com	r25
 138:	29 23       	and	r18, r25
 13a:	92 81       	ldd	r25, Z+2	; 0x02
 13c:	98 23       	and	r25, r24
 13e:	82 2f       	mov	r24, r18
 140:	89 2b       	or	r24, r25
 142:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
 144:	80 e0       	ldi	r24, 0x00	; 0
			break;
 146:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
 14c:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 14e:	08 95       	ret

00000150 <DIO_Write>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write(uint8_t GPIO, uint8_t pins, uint8_t value)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	79 f0       	breq	.+30     	; 0x172 <DIO_Write+0x22>
 154:	28 f0       	brcs	.+10     	; 0x160 <DIO_Write+0x10>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	a9 f0       	breq	.+42     	; 0x184 <DIO_Write+0x34>
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	e1 f0       	breq	.+56     	; 0x196 <DIO_Write+0x46>
 15e:	24 c0       	rjmp	.+72     	; 0x1a8 <DIO_Write+0x58>
	{
		case GPIOA :
		PORTA_DATA = (pins & value) | (~pins & PORTA_DATA);
 160:	8b b3       	in	r24, 0x1b	; 27
 162:	96 2f       	mov	r25, r22
 164:	90 95       	com	r25
 166:	89 23       	and	r24, r25
 168:	46 23       	and	r20, r22
 16a:	48 2b       	or	r20, r24
 16c:	4b bb       	out	0x1b, r20	; 27
		errorStatus = E_OK;
 16e:	80 e0       	ldi	r24, 0x00	; 0
		break;
 170:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & value) | (~pins & PORTB_DATA);
 172:	88 b3       	in	r24, 0x18	; 24
 174:	96 2f       	mov	r25, r22
 176:	90 95       	com	r25
 178:	89 23       	and	r24, r25
 17a:	46 23       	and	r20, r22
 17c:	48 2b       	or	r20, r24
 17e:	48 bb       	out	0x18, r20	; 24
		errorStatus = E_OK;
 180:	80 e0       	ldi	r24, 0x00	; 0
		break;
 182:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & value) | (~pins & PORTC_DATA);
 184:	85 b3       	in	r24, 0x15	; 21
 186:	96 2f       	mov	r25, r22
 188:	90 95       	com	r25
 18a:	89 23       	and	r24, r25
 18c:	46 23       	and	r20, r22
 18e:	48 2b       	or	r20, r24
 190:	45 bb       	out	0x15, r20	; 21
		errorStatus = E_OK;
 192:	80 e0       	ldi	r24, 0x00	; 0
		break;
 194:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & value) | (~pins & PORTD_DATA);
 196:	82 b3       	in	r24, 0x12	; 18
 198:	96 2f       	mov	r25, r22
 19a:	90 95       	com	r25
 19c:	89 23       	and	r24, r25
 19e:	46 23       	and	r20, r22
 1a0:	48 2b       	or	r20, r24
 1a2:	42 bb       	out	0x12, r20	; 18
		errorStatus = E_OK;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
		break;
 1a6:	08 95       	ret
		default :
		errorStatus = E_NOK;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return errorStatus;
}
 1aa:	08 95       	ret

000001ac <_SPIInitMaster>:
#include "SPI__.h"

 void (*PTR_CALL_BACK)(void);
 volatile uint8_t g_u8_RxFlag = FALSE ;

extern void _SPIInitMaster(SPI_cfg_s * a_SPI_cfg){
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	00 d0       	rcall	.+0      	; 0x1b2 <_SPIInitMaster+0x6>
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <_SPIInitMaster+0x8>
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <_SPIInitMaster+0xa>
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	fc 01       	movw	r30, r24
		DIO_Cfg_s SPI_output_pins ;
		
	
	
		/* clear status register */
		SPSR = ZERO ;
 1bc:	1e b8       	out	0x0e, r1	; 14
		
		/* clear control mode */
		
		SPCR = ZERO ;
 1be:	1d b8       	out	0x0d, r1	; 13
		
		/* master or slave bit 4 */
		SPCR |= Master_SPI ; 
 1c0:	6c 9a       	sbi	0x0d, 4	; 13
		
		/*set clock*/
		 
		SPCR|= a_SPI_cfg-> clockSPI ;
 1c2:	9d b1       	in	r25, 0x0d	; 13
 1c4:	80 81       	ld	r24, Z
 1c6:	89 2b       	or	r24, r25
 1c8:	8d b9       	out	0x0d, r24	; 13
		
		/* data order update */
		
		SPCR|= a_SPI_cfg-> dataorder ;
 1ca:	9d b1       	in	r25, 0x0d	; 13
 1cc:	82 81       	ldd	r24, Z+2	; 0x02
 1ce:	89 2b       	or	r24, r25
 1d0:	8d b9       	out	0x0d, r24	; 13
		
		/* set phase bit2 and polarity bit3 */
		
		 SPCR |= a_SPI_cfg-> phasePolarityMode;
 1d2:	9d b1       	in	r25, 0x0d	; 13
 1d4:	81 81       	ldd	r24, Z+1	; 0x01
 1d6:	89 2b       	or	r24, r25
 1d8:	8d b9       	out	0x0d, r24	; 13
		
		/* set interrupt  */
		
		SPCR |= INTERRUPT_SPI ;
 1da:	6f 9a       	sbi	0x0d, 7	; 13
		
		/*set interrupt call back function */
		
		PTR_CALL_BACK = a_SPI_cfg->ptr_call_back ;
 1dc:	83 81       	ldd	r24, Z+3	; 0x03
 1de:	94 81       	ldd	r25, Z+4	; 0x04
 1e0:	90 93 86 00 	sts	0x0086, r25
 1e4:	80 93 85 00 	sts	0x0085, r24
	//SS   bit4 OUTPUT
	//MOSI bit5 OUTPUT
	//MISO bit6 INPUT
	//SCK  bit7 OUTPUT

	SPI_input_pins.GPIO = SPI_PORT ;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	89 83       	std	Y+1, r24	; 0x01
	SPI_input_pins.pins = MISO_PIN ;
 1ec:	90 e4       	ldi	r25, 0x40	; 64
 1ee:	9a 83       	std	Y+2, r25	; 0x02
	SPI_input_pins.dir = INPUT ;
 1f0:	1b 82       	std	Y+3, r1	; 0x03
	
	SPI_output_pins.GPIO = SPI_PORT ;
 1f2:	8c 83       	std	Y+4, r24	; 0x04
	SPI_output_pins.pins =  SCK_PIN|MOSI_PIN|SS_PIN ;
 1f4:	80 eb       	ldi	r24, 0xB0	; 176
 1f6:	8d 83       	std	Y+5, r24	; 0x05
	SPI_output_pins.dir = OUTPUT ;
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	8e 83       	std	Y+6, r24	; 0x06
	
	DIO_init(&SPI_output_pins);
 1fc:	ce 01       	movw	r24, r28
 1fe:	04 96       	adiw	r24, 0x04	; 4
 200:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_init>
	DIO_init(&SPI_input_pins);
 204:	ce 01       	movw	r24, r28
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_init>
	
		
	/// enable SPI bit 6
	
	sei();
 20c:	78 94       	sei
	SPCR |= Enable_SPI ;
 20e:	6e 9a       	sbi	0x0d, 6	; 13
	
}
 210:	26 96       	adiw	r28, 0x06	; 6
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <_SPITrancevier>:
	
		
	
}

extern void _SPITrancevier(uint8_t* data){
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ec 01       	movw	r28, r24
	
	if(SPCR&Master_SPI){
 228:	6c 9b       	sbis	0x0d, 4	; 13
 22a:	05 c0       	rjmp	.+10     	; 0x236 <_SPITrancevier+0x14>
		
		/*Select the slave By pull down the SS pin */
		
		DIO_Write(SPI_PORT,BIT4,ZERO );
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	60 e1       	ldi	r22, 0x10	; 16
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_Write>
		
	}
	
	
	*data = SPDR;
 236:	9f b1       	in	r25, 0x0f	; 15
 238:	98 83       	st	Y, r25
	while (!g_u8_RxFlag);
 23a:	80 91 60 00 	lds	r24, 0x0060
 23e:	88 23       	and	r24, r24
 240:	e1 f3       	breq	.-8      	; 0x23a <_SPITrancevier+0x18>
	SPDR = *data;	
 242:	9f b9       	out	0x0f, r25	; 15
	
	g_u8_RxFlag = FALSE ;
 244:	10 92 60 00 	sts	0x0060, r1
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <SPI_SetCBF>:


void SPI_SetCBF(FunPtr isr_ptr)
{
	PTR_CALL_BACK = isr_ptr;
 24e:	90 93 86 00 	sts	0x0086, r25
 252:	80 93 85 00 	sts	0x0085, r24
 256:	08 95       	ret

00000258 <__vector_12>:
}

ISR(SPI_STC_vect){
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
	g_u8_RxFlag = TRUE ;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 60 00 	sts	0x0060, r24
	PTR_CALL_BACK() ;
 280:	e0 91 85 00 	lds	r30, 0x0085
 284:	f0 91 86 00 	lds	r31, 0x0086
 288:	09 95       	icall

}
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	2f 93       	push	r18
 2b8:	3f 93       	push	r19
 2ba:	4f 93       	push	r20
 2bc:	5f 93       	push	r21
 2be:	6f 93       	push	r22
 2c0:	7f 93       	push	r23
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
 2c6:	af 93       	push	r26
 2c8:	bf 93       	push	r27
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
 2ce:	e0 91 6b 00 	lds	r30, 0x006B
 2d2:	f0 91 6c 00 	lds	r31, 0x006C
 2d6:	30 97       	sbiw	r30, 0x00	; 0
 2d8:	09 f0       	breq	.+2      	; 0x2dc <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
 2da:	09 95       	icall
	}
}
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	7f 91       	pop	r23
 2ea:	6f 91       	pop	r22
 2ec:	5f 91       	pop	r21
 2ee:	4f 91       	pop	r20
 2f0:	3f 91       	pop	r19
 2f2:	2f 91       	pop	r18
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	2f 93       	push	r18
 30a:	3f 93       	push	r19
 30c:	4f 93       	push	r20
 30e:	5f 93       	push	r21
 310:	6f 93       	push	r22
 312:	7f 93       	push	r23
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
 318:	af 93       	push	r26
 31a:	bf 93       	push	r27
 31c:	ef 93       	push	r30
 31e:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
 320:	e0 91 69 00 	lds	r30, 0x0069
 324:	f0 91 6a 00 	lds	r31, 0x006A
 328:	30 97       	sbiw	r30, 0x00	; 0
 32a:	09 f0       	breq	.+2      	; 0x32e <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
 32c:	09 95       	icall
	}
}
 32e:	ff 91       	pop	r31
 330:	ef 91       	pop	r30
 332:	bf 91       	pop	r27
 334:	af 91       	pop	r26
 336:	9f 91       	pop	r25
 338:	8f 91       	pop	r24
 33a:	7f 91       	pop	r23
 33c:	6f 91       	pop	r22
 33e:	5f 91       	pop	r21
 340:	4f 91       	pop	r20
 342:	3f 91       	pop	r19
 344:	2f 91       	pop	r18
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	2f 93       	push	r18
 35c:	3f 93       	push	r19
 35e:	4f 93       	push	r20
 360:	5f 93       	push	r21
 362:	6f 93       	push	r22
 364:	7f 93       	push	r23
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	af 93       	push	r26
 36c:	bf 93       	push	r27
 36e:	ef 93       	push	r30
 370:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
 372:	e0 91 63 00 	lds	r30, 0x0063
 376:	f0 91 64 00 	lds	r31, 0x0064
 37a:	30 97       	sbiw	r30, 0x00	; 0
 37c:	09 f0       	breq	.+2      	; 0x380 <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
 37e:	09 95       	icall
	}
}
 380:	ff 91       	pop	r31
 382:	ef 91       	pop	r30
 384:	bf 91       	pop	r27
 386:	af 91       	pop	r26
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	7f 91       	pop	r23
 38e:	6f 91       	pop	r22
 390:	5f 91       	pop	r21
 392:	4f 91       	pop	r20
 394:	3f 91       	pop	r19
 396:	2f 91       	pop	r18
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
 3c4:	e0 91 61 00 	lds	r30, 0x0061
 3c8:	f0 91 62 00 	lds	r31, 0x0062
 3cc:	30 97       	sbiw	r30, 0x00	; 0
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
 3d0:	09 95       	icall
	}
}
 3d2:	ff 91       	pop	r31
 3d4:	ef 91       	pop	r30
 3d6:	bf 91       	pop	r27
 3d8:	af 91       	pop	r26
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	7f 91       	pop	r23
 3e0:	6f 91       	pop	r22
 3e2:	5f 91       	pop	r21
 3e4:	4f 91       	pop	r20
 3e6:	3f 91       	pop	r19
 3e8:	2f 91       	pop	r18
 3ea:	0f 90       	pop	r0
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	0f 90       	pop	r0
 3f0:	1f 90       	pop	r1
 3f2:	18 95       	reti

000003f4 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 3f4:	1f 92       	push	r1
 3f6:	0f 92       	push	r0
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	0f 92       	push	r0
 3fc:	11 24       	eor	r1, r1
 3fe:	2f 93       	push	r18
 400:	3f 93       	push	r19
 402:	4f 93       	push	r20
 404:	5f 93       	push	r21
 406:	6f 93       	push	r22
 408:	7f 93       	push	r23
 40a:	8f 93       	push	r24
 40c:	9f 93       	push	r25
 40e:	af 93       	push	r26
 410:	bf 93       	push	r27
 412:	ef 93       	push	r30
 414:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
 416:	e0 91 67 00 	lds	r30, 0x0067
 41a:	f0 91 68 00 	lds	r31, 0x0068
 41e:	30 97       	sbiw	r30, 0x00	; 0
 420:	09 f0       	breq	.+2      	; 0x424 <__vector_9+0x30>
	{
		Ptr_Timer1_OV();
 422:	09 95       	icall
	}
}
 424:	ff 91       	pop	r31
 426:	ef 91       	pop	r30
 428:	bf 91       	pop	r27
 42a:	af 91       	pop	r26
 42c:	9f 91       	pop	r25
 42e:	8f 91       	pop	r24
 430:	7f 91       	pop	r23
 432:	6f 91       	pop	r22
 434:	5f 91       	pop	r21
 436:	4f 91       	pop	r20
 438:	3f 91       	pop	r19
 43a:	2f 91       	pop	r18
 43c:	0f 90       	pop	r0
 43e:	0f be       	out	0x3f, r0	; 63
 440:	0f 90       	pop	r0
 442:	1f 90       	pop	r1
 444:	18 95       	reti

00000446 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 446:	1f 92       	push	r1
 448:	0f 92       	push	r0
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	0f 92       	push	r0
 44e:	11 24       	eor	r1, r1
 450:	2f 93       	push	r18
 452:	3f 93       	push	r19
 454:	4f 93       	push	r20
 456:	5f 93       	push	r21
 458:	6f 93       	push	r22
 45a:	7f 93       	push	r23
 45c:	8f 93       	push	r24
 45e:	9f 93       	push	r25
 460:	af 93       	push	r26
 462:	bf 93       	push	r27
 464:	ef 93       	push	r30
 466:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 468:	e0 91 65 00 	lds	r30, 0x0065
 46c:	f0 91 66 00 	lds	r31, 0x0066
 470:	30 97       	sbiw	r30, 0x00	; 0
 472:	09 f0       	breq	.+2      	; 0x476 <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
 474:	09 95       	icall
	}	
}
 476:	ff 91       	pop	r31
 478:	ef 91       	pop	r30
 47a:	bf 91       	pop	r27
 47c:	af 91       	pop	r26
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	7f 91       	pop	r23
 484:	6f 91       	pop	r22
 486:	5f 91       	pop	r21
 488:	4f 91       	pop	r20
 48a:	3f 91       	pop	r19
 48c:	2f 91       	pop	r18
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	0f 90       	pop	r0
 494:	1f 90       	pop	r1
 496:	18 95       	reti

00000498 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
 4a2:	2f 93       	push	r18
 4a4:	3f 93       	push	r19
 4a6:	4f 93       	push	r20
 4a8:	5f 93       	push	r21
 4aa:	6f 93       	push	r22
 4ac:	7f 93       	push	r23
 4ae:	8f 93       	push	r24
 4b0:	9f 93       	push	r25
 4b2:	af 93       	push	r26
 4b4:	bf 93       	push	r27
 4b6:	ef 93       	push	r30
 4b8:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 4ba:	e0 91 65 00 	lds	r30, 0x0065
 4be:	f0 91 66 00 	lds	r31, 0x0066
 4c2:	30 97       	sbiw	r30, 0x00	; 0
 4c4:	09 f0       	breq	.+2      	; 0x4c8 <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 4c6:	09 95       	icall
	}
}
 4c8:	ff 91       	pop	r31
 4ca:	ef 91       	pop	r30
 4cc:	bf 91       	pop	r27
 4ce:	af 91       	pop	r26
 4d0:	9f 91       	pop	r25
 4d2:	8f 91       	pop	r24
 4d4:	7f 91       	pop	r23
 4d6:	6f 91       	pop	r22
 4d8:	5f 91       	pop	r21
 4da:	4f 91       	pop	r20
 4dc:	3f 91       	pop	r19
 4de:	2f 91       	pop	r18
 4e0:	0f 90       	pop	r0
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	0f 90       	pop	r0
 4e6:	1f 90       	pop	r1
 4e8:	18 95       	reti

000004ea <UART_Init>:
FunPtr Ptr_UART_TX = NULL;
FunPtr Ptr_UART_RX = NULL;


void UART_Init(UART_cfg* uart_cfg)
{
 4ea:	cf 92       	push	r12
 4ec:	df 92       	push	r13
 4ee:	ef 92       	push	r14
 4f0:	ff 92       	push	r15
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	ec 01       	movw	r28, r24
	uint8_t uart_control = 0x80;
	// Set The UART Baud Rate
	UBRRL = ((F_cpu/(16*uart_cfg->baudrate)) - 1);
 4f8:	8f 81       	ldd	r24, Y+7	; 0x07
 4fa:	98 85       	ldd	r25, Y+8	; 0x08
 4fc:	a9 85       	ldd	r26, Y+9	; 0x09
 4fe:	ba 85       	ldd	r27, Y+10	; 0x0a
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	aa 1f       	adc	r26, r26
 506:	bb 1f       	adc	r27, r27
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	aa 1f       	adc	r26, r26
 50e:	bb 1f       	adc	r27, r27
 510:	9c 01       	movw	r18, r24
 512:	ad 01       	movw	r20, r26
 514:	22 0f       	add	r18, r18
 516:	33 1f       	adc	r19, r19
 518:	44 1f       	adc	r20, r20
 51a:	55 1f       	adc	r21, r21
 51c:	22 0f       	add	r18, r18
 51e:	33 1f       	adc	r19, r19
 520:	44 1f       	adc	r20, r20
 522:	55 1f       	adc	r21, r21
 524:	0f 2e       	mov	r0, r31
 526:	c1 2c       	mov	r12, r1
 528:	f4 e2       	ldi	r31, 0x24	; 36
 52a:	df 2e       	mov	r13, r31
 52c:	f4 ef       	ldi	r31, 0xF4	; 244
 52e:	ef 2e       	mov	r14, r31
 530:	f1 2c       	mov	r15, r1
 532:	f0 2d       	mov	r31, r0
 534:	c7 01       	movw	r24, r14
 536:	b6 01       	movw	r22, r12
 538:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__udivmodsi4>
 53c:	21 50       	subi	r18, 0x01	; 1
 53e:	29 b9       	out	0x09, r18	; 9
	UBRRH = ((F_cpu/(16*uart_cfg->baudrate)) - 1)>>8;
 540:	8f 81       	ldd	r24, Y+7	; 0x07
 542:	98 85       	ldd	r25, Y+8	; 0x08
 544:	a9 85       	ldd	r26, Y+9	; 0x09
 546:	ba 85       	ldd	r27, Y+10	; 0x0a
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	aa 1f       	adc	r26, r26
 54e:	bb 1f       	adc	r27, r27
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	aa 1f       	adc	r26, r26
 556:	bb 1f       	adc	r27, r27
 558:	9c 01       	movw	r18, r24
 55a:	ad 01       	movw	r20, r26
 55c:	22 0f       	add	r18, r18
 55e:	33 1f       	adc	r19, r19
 560:	44 1f       	adc	r20, r20
 562:	55 1f       	adc	r21, r21
 564:	22 0f       	add	r18, r18
 566:	33 1f       	adc	r19, r19
 568:	44 1f       	adc	r20, r20
 56a:	55 1f       	adc	r21, r21
 56c:	c7 01       	movw	r24, r14
 56e:	b6 01       	movw	r22, r12
 570:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__udivmodsi4>
 574:	da 01       	movw	r26, r20
 576:	c9 01       	movw	r24, r18
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	a1 09       	sbc	r26, r1
 57c:	b1 09       	sbc	r27, r1
 57e:	89 2f       	mov	r24, r25
 580:	9a 2f       	mov	r25, r26
 582:	ab 2f       	mov	r26, r27
 584:	bb 27       	eor	r27, r27
 586:	80 bd       	out	0x20, r24	; 32
	// Set The UART Mode OF Operation
	UCSRB |= (uart_cfg->mode | uart_cfg->uartInterrupts);
 588:	9a b1       	in	r25, 0x0a	; 10
 58a:	88 81       	ld	r24, Y
 58c:	89 2b       	or	r24, r25
 58e:	9e 81       	ldd	r25, Y+6	; 0x06
 590:	89 2b       	or	r24, r25
 592:	8a b9       	out	0x0a, r24	; 10
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
	UCSRC |= uart_control;
 594:	20 b5       	in	r18, 0x20	; 32
	// Set The UART Data Sampling Edge
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
 596:	8b 81       	ldd	r24, Y+3	; 0x03
 598:	9d 81       	ldd	r25, Y+5	; 0x05
 59a:	89 2b       	or	r24, r25
 59c:	80 68       	ori	r24, 0x80	; 128
 59e:	99 81       	ldd	r25, Y+1	; 0x01
 5a0:	89 2b       	or	r24, r25
 5a2:	9a 81       	ldd	r25, Y+2	; 0x02
 5a4:	89 2b       	or	r24, r25
 5a6:	9c 81       	ldd	r25, Y+4	; 0x04
 5a8:	89 2b       	or	r24, r25
	UCSRC |= uart_control;
 5aa:	82 2b       	or	r24, r18
 5ac:	80 bd       	out	0x20, r24	; 32
	SREG  |= (0x80);
 5ae:	8f b7       	in	r24, 0x3f	; 63
 5b0:	80 68       	ori	r24, 0x80	; 128
 5b2:	8f bf       	out	0x3f, r24	; 63
}
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	ff 90       	pop	r15
 5ba:	ef 90       	pop	r14
 5bc:	df 90       	pop	r13
 5be:	cf 90       	pop	r12
 5c0:	08 95       	ret

000005c2 <UART_SetTX>:
/*-----------[ Timers Set CallBack Functions ]-----------*/
/*=======================================================*/

void UART_SetTX(FunPtr Ptr_ISR)
{
	Ptr_UART_TX = Ptr_ISR;
 5c2:	90 93 70 00 	sts	0x0070, r25
 5c6:	80 93 6f 00 	sts	0x006F, r24
 5ca:	08 95       	ret

000005cc <UART_SetRX>:
}

void UART_SetRX(FunPtr Ptr_ISR)
{
	Ptr_UART_RX = Ptr_ISR;
 5cc:	90 93 6e 00 	sts	0x006E, r25
 5d0:	80 93 6d 00 	sts	0x006D, r24
 5d4:	08 95       	ret

000005d6 <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
 5d6:	1f 92       	push	r1
 5d8:	0f 92       	push	r0
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	0f 92       	push	r0
 5de:	11 24       	eor	r1, r1
 5e0:	2f 93       	push	r18
 5e2:	3f 93       	push	r19
 5e4:	4f 93       	push	r20
 5e6:	5f 93       	push	r21
 5e8:	6f 93       	push	r22
 5ea:	7f 93       	push	r23
 5ec:	8f 93       	push	r24
 5ee:	9f 93       	push	r25
 5f0:	af 93       	push	r26
 5f2:	bf 93       	push	r27
 5f4:	ef 93       	push	r30
 5f6:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
 5f8:	e0 91 6d 00 	lds	r30, 0x006D
 5fc:	f0 91 6e 00 	lds	r31, 0x006E
 600:	30 97       	sbiw	r30, 0x00	; 0
 602:	09 f0       	breq	.+2      	; 0x606 <__vector_13+0x30>
	{
		Ptr_UART_RX();
 604:	09 95       	icall
	}
}
 606:	ff 91       	pop	r31
 608:	ef 91       	pop	r30
 60a:	bf 91       	pop	r27
 60c:	af 91       	pop	r26
 60e:	9f 91       	pop	r25
 610:	8f 91       	pop	r24
 612:	7f 91       	pop	r23
 614:	6f 91       	pop	r22
 616:	5f 91       	pop	r21
 618:	4f 91       	pop	r20
 61a:	3f 91       	pop	r19
 61c:	2f 91       	pop	r18
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <__vector_15>:

ISR(USART_TXC_vect)
{
 628:	1f 92       	push	r1
 62a:	0f 92       	push	r0
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	0f 92       	push	r0
 630:	11 24       	eor	r1, r1
 632:	2f 93       	push	r18
 634:	3f 93       	push	r19
 636:	4f 93       	push	r20
 638:	5f 93       	push	r21
 63a:	6f 93       	push	r22
 63c:	7f 93       	push	r23
 63e:	8f 93       	push	r24
 640:	9f 93       	push	r25
 642:	af 93       	push	r26
 644:	bf 93       	push	r27
 646:	ef 93       	push	r30
 648:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
 64a:	e0 91 6f 00 	lds	r30, 0x006F
 64e:	f0 91 70 00 	lds	r31, 0x0070
 652:	30 97       	sbiw	r30, 0x00	; 0
 654:	09 f0       	breq	.+2      	; 0x658 <__vector_15+0x30>
	{
		Ptr_UART_TX();
 656:	09 95       	icall
	}
 658:	ff 91       	pop	r31
 65a:	ef 91       	pop	r30
 65c:	bf 91       	pop	r27
 65e:	af 91       	pop	r26
 660:	9f 91       	pop	r25
 662:	8f 91       	pop	r24
 664:	7f 91       	pop	r23
 666:	6f 91       	pop	r22
 668:	5f 91       	pop	r21
 66a:	4f 91       	pop	r20
 66c:	3f 91       	pop	r19
 66e:	2f 91       	pop	r18
 670:	0f 90       	pop	r0
 672:	0f be       	out	0x3f, r0	; 63
 674:	0f 90       	pop	r0
 676:	1f 90       	pop	r1
 678:	18 95       	reti

0000067a <BCM_Tx_ISR_cbf>:
/*------------[ BCM CallBacks]------------*/
/* BCM Transmit ISR Call-Back Function */
static void BCM_Tx_ISR_cbf(void)
{
	/* LOL */
	TCNT2 = 0x05;
 67a:	85 e0       	ldi	r24, 0x05	; 5
 67c:	84 bd       	out	0x24, r24	; 36
 67e:	08 95       	ret

00000680 <BCM_Rx_ISR_cbf>:
}

/* BCM Receive ISR Call-Back Function */
static void BCM_Rx_ISR_cbf(void)
{
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	1f 92       	push	r1
 686:	cd b7       	in	r28, 0x3d	; 61
 688:	de b7       	in	r29, 0x3e	; 62
	uint8_t a_RX_Byte;
	switch(g_BCM_EXcfg.Protocol)
 68a:	80 91 77 00 	lds	r24, 0x0077
 68e:	88 23       	and	r24, r24
 690:	19 f0       	breq	.+6      	; 0x698 <BCM_Rx_ISR_cbf+0x18>
 692:	81 30       	cpi	r24, 0x01	; 1
 694:	21 f0       	breq	.+8      	; 0x69e <BCM_Rx_ISR_cbf+0x1e>
 696:	07 c0       	rjmp	.+14     	; 0x6a6 <BCM_Rx_ISR_cbf+0x26>
	{
		case UART_Protocol:
		{
			a_RX_Byte = UDR;
 698:	8c b1       	in	r24, 0x0c	; 12
 69a:	89 83       	std	Y+1, r24	; 0x01
			break;
 69c:	04 c0       	rjmp	.+8      	; 0x6a6 <BCM_Rx_ISR_cbf+0x26>
		}
		case SPI_Protocol:
		{
			_SPITrancevier(&a_RX_Byte);
 69e:	ce 01       	movw	r24, r28
 6a0:	01 96       	adiw	r24, 0x01	; 1
 6a2:	0e 94 11 01 	call	0x222	; 0x222 <_SPITrancevier>
		}
		default:
			break;
	}
				/* dubug point */
				TCNT0 = a_RX_Byte;
 6a6:	89 81       	ldd	r24, Y+1	; 0x01
 6a8:	82 bf       	out	0x32, r24	; 50
				/* dubug point */
	
	/* Read & Check The BCM Received ID */
	if(g_BCM_EXcfg.Count == 0)
 6aa:	80 91 81 00 	lds	r24, 0x0081
 6ae:	90 91 82 00 	lds	r25, 0x0082
 6b2:	00 97       	sbiw	r24, 0x00	; 0
 6b4:	b1 f4       	brne	.+44     	; 0x6e2 <BCM_Rx_ISR_cbf+0x62>
	{
		g_Rx_ID = a_RX_Byte;
 6b6:	89 81       	ldd	r24, Y+1	; 0x01
 6b8:	80 93 74 00 	sts	0x0074, r24
	
		if(g_Rx_ID == BCM_ID)
 6bc:	90 91 74 00 	lds	r25, 0x0074
 6c0:	91 34       	cpi	r25, 0x41	; 65
 6c2:	61 f4       	brne	.+24     	; 0x6dc <BCM_Rx_ISR_cbf+0x5c>
		{
			/* dubug point */
			TCNT2 = a_RX_Byte;
 6c4:	84 bd       	out	0x24, r24	; 36
			/* dubug point */
			g_ID_State = S_OK;
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	80 93 73 00 	sts	0x0073, r24
			g_BCM_EXcfg.Count++;
 6cc:	e5 e7       	ldi	r30, 0x75	; 117
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	84 85       	ldd	r24, Z+12	; 0x0c
 6d2:	95 85       	ldd	r25, Z+13	; 0x0d
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	95 87       	std	Z+13, r25	; 0x0d
 6d8:	84 87       	std	Z+12, r24	; 0x0c
 6da:	67 c0       	rjmp	.+206    	; 0x7aa <BCM_Rx_ISR_cbf+0x12a>
		}
		else
		{
			g_ID_State = S_NOK;
 6dc:	10 92 73 00 	sts	0x0073, r1
 6e0:	64 c0       	rjmp	.+200    	; 0x7aa <BCM_Rx_ISR_cbf+0x12a>
	}
	/*-------------------[ ID IS CHECKED ]------------------*/
	/*------------------------------------------------------*/
	/*-------------------[ Save & CHECK MSG Len ]------------------*/
	/* Read & Check The BCM Received Data Length */
	else if(g_BCM_EXcfg.Count == 1)
 6e2:	81 30       	cpi	r24, 0x01	; 1
 6e4:	91 05       	cpc	r25, r1
 6e6:	41 f5       	brne	.+80     	; 0x738 <BCM_Rx_ISR_cbf+0xb8>
	{
		if(a_RX_Byte > g_BCM_EXcfg.Buf_Len)
 6e8:	89 81       	ldd	r24, Y+1	; 0x01
 6ea:	48 2f       	mov	r20, r24
 6ec:	50 e0       	ldi	r21, 0x00	; 0
 6ee:	20 91 7d 00 	lds	r18, 0x007D
 6f2:	30 91 7e 00 	lds	r19, 0x007E
 6f6:	24 17       	cp	r18, r20
 6f8:	35 07       	cpc	r19, r21
 6fa:	78 f4       	brcc	.+30     	; 0x71a <BCM_Rx_ISR_cbf+0x9a>
		{
			g_LEN_State = S_NOK;
 6fc:	10 92 72 00 	sts	0x0072, r1
			g_BCM_EXcfg.FSM_State = IDLE_State;
 700:	e5 e7       	ldi	r30, 0x75	; 117
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	84 83       	std	Z+4, r24	; 0x04
			g_BCM_EXcfg.Count = ZERO;
 708:	15 86       	std	Z+13, r1	; 0x0d
 70a:	14 86       	std	Z+12, r1	; 0x0c
			g_BCM_EXcfg.BCM_notify_cbf(g_LEN_State);
 70c:	80 91 72 00 	lds	r24, 0x0072
 710:	06 84       	ldd	r0, Z+14	; 0x0e
 712:	f7 85       	ldd	r31, Z+15	; 0x0f
 714:	e0 2d       	mov	r30, r0
 716:	09 95       	icall
 718:	48 c0       	rjmp	.+144    	; 0x7aa <BCM_Rx_ISR_cbf+0x12a>
		}
		else
		{
			/* dubug point */
			TCNT2 = a_RX_Byte;
 71a:	84 bd       	out	0x24, r24	; 36
			/* dubug point */
			g_BCM_EXcfg.MSG_Len = a_RX_Byte;
 71c:	e5 e7       	ldi	r30, 0x75	; 117
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	89 81       	ldd	r24, Y+1	; 0x01
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	93 87       	std	Z+11, r25	; 0x0b
 726:	82 87       	std	Z+10, r24	; 0x0a
			g_BCM_EXcfg.Count++;
 728:	84 85       	ldd	r24, Z+12	; 0x0c
 72a:	95 85       	ldd	r25, Z+13	; 0x0d
 72c:	01 96       	adiw	r24, 0x01	; 1
 72e:	95 87       	std	Z+13, r25	; 0x0d
 730:	84 87       	std	Z+12, r24	; 0x0c
			g_BCM_EXcfg.FSM_State = ReceivingByte_State;
 732:	84 e0       	ldi	r24, 0x04	; 4
 734:	84 83       	std	Z+4, r24	; 0x04
 736:	39 c0       	rjmp	.+114    	; 0x7aa <BCM_Rx_ISR_cbf+0x12a>
		}
	}
	else if(g_BCM_EXcfg.Count-2 <= g_BCM_EXcfg.MSG_Len)
 738:	ac 01       	movw	r20, r24
 73a:	42 50       	subi	r20, 0x02	; 2
 73c:	51 09       	sbc	r21, r1
 73e:	20 91 7f 00 	lds	r18, 0x007F
 742:	30 91 80 00 	lds	r19, 0x0080
 746:	24 17       	cp	r18, r20
 748:	35 07       	cpc	r19, r21
 74a:	08 f1       	brcs	.+66     	; 0x78e <BCM_Rx_ISR_cbf+0x10e>
	{
		/* dubug point */
		TCNT2 = a_RX_Byte;
 74c:	89 81       	ldd	r24, Y+1	; 0x01
 74e:	84 bd       	out	0x24, r24	; 36
		/* dubug point */
		g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2] = a_RX_Byte;
 750:	29 81       	ldd	r18, Y+1	; 0x01
 752:	a5 e7       	ldi	r26, 0x75	; 117
 754:	b0 e0       	ldi	r27, 0x00	; 0
 756:	16 96       	adiw	r26, 0x06	; 6
 758:	ed 91       	ld	r30, X+
 75a:	fc 91       	ld	r31, X
 75c:	17 97       	sbiw	r26, 0x07	; 7
 75e:	1c 96       	adiw	r26, 0x0c	; 12
 760:	8d 91       	ld	r24, X+
 762:	9c 91       	ld	r25, X
 764:	1d 97       	sbiw	r26, 0x0d	; 13
 766:	e8 0f       	add	r30, r24
 768:	f9 1f       	adc	r31, r25
 76a:	32 97       	sbiw	r30, 0x02	; 2
 76c:	20 83       	st	Z, r18
		g_CS_Calculated += a_RX_Byte;
 76e:	90 91 71 00 	lds	r25, 0x0071
 772:	89 81       	ldd	r24, Y+1	; 0x01
 774:	89 0f       	add	r24, r25
 776:	80 93 71 00 	sts	0x0071, r24
		g_BCM_EXcfg.Count++;
 77a:	1c 96       	adiw	r26, 0x0c	; 12
 77c:	8d 91       	ld	r24, X+
 77e:	9c 91       	ld	r25, X
 780:	1d 97       	sbiw	r26, 0x0d	; 13
 782:	01 96       	adiw	r24, 0x01	; 1
 784:	1d 96       	adiw	r26, 0x0d	; 13
 786:	9c 93       	st	X, r25
 788:	8e 93       	st	-X, r24
 78a:	1c 97       	sbiw	r26, 0x0c	; 12
 78c:	0e c0       	rjmp	.+28     	; 0x7aa <BCM_Rx_ISR_cbf+0x12a>
	}
	else if(g_BCM_EXcfg.Count-2 == g_BCM_EXcfg.MSG_Len+1)
 78e:	2f 5f       	subi	r18, 0xFF	; 255
 790:	3f 4f       	sbci	r19, 0xFF	; 255
 792:	42 17       	cp	r20, r18
 794:	53 07       	cpc	r21, r19
 796:	49 f4       	brne	.+18     	; 0x7aa <BCM_Rx_ISR_cbf+0x12a>
	{
		g_BCM_EXcfg.CheckSum = a_RX_Byte;
 798:	e5 e7       	ldi	r30, 0x75	; 117
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	29 81       	ldd	r18, Y+1	; 0x01
 79e:	25 83       	std	Z+5, r18	; 0x05
		g_BCM_EXcfg.Count++;
 7a0:	01 96       	adiw	r24, 0x01	; 1
 7a2:	95 87       	std	Z+13, r25	; 0x0d
 7a4:	84 87       	std	Z+12, r24	; 0x0c
		g_BCM_EXcfg.FSM_State = ReceiveComplete_State;
 7a6:	85 e0       	ldi	r24, 0x05	; 5
 7a8:	84 83       	std	Z+4, r24	; 0x04
	}
	else
	{	}
}
 7aa:	0f 90       	pop	r0
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	08 95       	ret

000007b2 <BCM_Init>:
}
/*------------------------------------*/

/* BCM Initialization Routine */
ERROR_STATUS BCM_Init(BCM_cfg_s* a_BCM)
{
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	cd b7       	in	r28, 0x3d	; 61
 7b8:	de b7       	in	r29, 0x3e	; 62
 7ba:	60 97       	sbiw	r28, 0x10	; 16
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	f8 94       	cli
 7c0:	de bf       	out	0x3e, r29	; 62
 7c2:	0f be       	out	0x3f, r0	; 63
 7c4:	cd bf       	out	0x3d, r28	; 61
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	UART_cfg  a_BCM_UART;
	SPI_cfg_s a_BCM_SPI; 
	
	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_BCM != NULL)
 7c6:	00 97       	sbiw	r24, 0x00	; 0
 7c8:	09 f4       	brne	.+2      	; 0x7cc <BCM_Init+0x1a>
 7ca:	69 c0       	rjmp	.+210    	; 0x89e <__stack+0x3f>
 7cc:	dc 01       	movw	r26, r24
	{
		/*--------[ Add The BCM CFG To The Working List ]--------*/
		g_BCM_EXcfg.BCM_CH_ID = a_BCM->BCM_CH_ID;
 7ce:	11 96       	adiw	r26, 0x01	; 1
 7d0:	8c 91       	ld	r24, X
 7d2:	11 97       	sbiw	r26, 0x01	; 1
 7d4:	e5 e7       	ldi	r30, 0x75	; 117
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	81 83       	std	Z+1, r24	; 0x01
		g_BCM_EXcfg.Mode      = a_BCM->Mode;
 7da:	9c 91       	ld	r25, X
 7dc:	90 83       	st	Z, r25
		g_BCM_EXcfg.Protocol  = a_BCM->Protocol;
 7de:	12 96       	adiw	r26, 0x02	; 2
 7e0:	8c 91       	ld	r24, X
 7e2:	82 83       	std	Z+2, r24	; 0x02
		g_BCM_EXcfg.FSM_State = IDLE_State;
 7e4:	21 e0       	ldi	r18, 0x01	; 1
 7e6:	24 83       	std	Z+4, r18	; 0x04
		g_BCM_EXcfg.Count     = ZERO;
 7e8:	15 86       	std	Z+13, r1	; 0x0d
 7ea:	14 86       	std	Z+12, r1	; 0x0c
		g_BCM_EXcfg.CheckSum  = ZERO;
 7ec:	15 82       	std	Z+5, r1	; 0x05
		g_BCM_EXcfg.Buf_Len   = ZERO;
 7ee:	11 86       	std	Z+9, r1	; 0x09
 7f0:	10 86       	std	Z+8, r1	; 0x08
		g_BCM_EXcfg.MSG_Len   = ZERO;
 7f2:	13 86       	std	Z+11, r1	; 0x0b
 7f4:	12 86       	std	Z+10, r1	; 0x0a
		
		/*--------[ Check The BCM HW Communication Protocol ]--------*/
		switch(g_BCM_EXcfg.Protocol)
 7f6:	88 23       	and	r24, r24
 7f8:	19 f0       	breq	.+6      	; 0x800 <BCM_Init+0x4e>
 7fa:	81 30       	cpi	r24, 0x01	; 1
 7fc:	59 f1       	breq	.+86     	; 0x854 <BCM_Init+0xa2>
 7fe:	51 c0       	rjmp	.+162    	; 0x8a2 <__stack+0x43>
		{
			/*----------------------[ UART CASE START ]---------------------*/
			case UART_Protocol:
			{
				a_BCM_UART.baudrate   = BCM_UART_BaudRate;
 800:	40 e8       	ldi	r20, 0x80	; 128
 802:	55 e2       	ldi	r21, 0x25	; 37
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	48 87       	std	Y+8, r20	; 0x08
 80a:	59 87       	std	Y+9, r21	; 0x09
 80c:	6a 87       	std	Y+10, r22	; 0x0a
 80e:	7b 87       	std	Y+11, r23	; 0x0b
				a_BCM_UART.dataBits   = UART_Bits_8;
 810:	86 e0       	ldi	r24, 0x06	; 6
 812:	8a 83       	std	Y+2, r24	; 0x02
				a_BCM_UART.stopBits   = StopBits_1;
 814:	1d 82       	std	Y+5, r1	; 0x05
				a_BCM_UART.parity     = No_Parity;
 816:	1b 82       	std	Y+3, r1	; 0x03
				a_BCM_UART.sampleEdge = RisingEdg;
 818:	1e 82       	std	Y+6, r1	; 0x06
				a_BCM_UART.uartSync   = UART_Async;
 81a:	1c 82       	std	Y+4, r1	; 0x04
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
 81c:	99 23       	and	r25, r25
 81e:	19 f0       	breq	.+6      	; 0x826 <BCM_Init+0x74>
 820:	91 30       	cpi	r25, 0x01	; 1
 822:	51 f0       	breq	.+20     	; 0x838 <BCM_Init+0x86>
 824:	11 c0       	rjmp	.+34     	; 0x848 <BCM_Init+0x96>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_UART.mode = UART_TX;
 826:	88 e0       	ldi	r24, 0x08	; 8
 828:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnTx;
 82a:	80 e4       	ldi	r24, 0x40	; 64
 82c:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						UART_SetTX(BCM_Tx_ISR_cbf);
 82e:	8d e3       	ldi	r24, 0x3D	; 61
 830:	93 e0       	ldi	r25, 0x03	; 3
 832:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_SetTX>
						break;
 836:	08 c0       	rjmp	.+16     	; 0x848 <BCM_Init+0x96>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_UART.mode = UART_RX;
 838:	80 e1       	ldi	r24, 0x10	; 16
 83a:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnRx;
 83c:	80 e8       	ldi	r24, 0x80	; 128
 83e:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						UART_SetRX(BCM_Rx_ISR_cbf);
 840:	80 e4       	ldi	r24, 0x40	; 64
 842:	93 e0       	ldi	r25, 0x03	; 3
 844:	0e 94 e6 02 	call	0x5cc	; 0x5cc <UART_SetRX>
					}
					default:
						break;
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
 848:	ce 01       	movw	r24, r28
 84a:	01 96       	adiw	r24, 0x01	; 1
 84c:	0e 94 75 02 	call	0x4ea	; 0x4ea <UART_Init>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 850:	8c e3       	ldi	r24, 0x3C	; 60
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
				
				errorStatus = BCM_ERROR + E_OK;
				break;
 852:	2a c0       	rjmp	.+84     	; 0x8a8 <__stack+0x49>
			/*----------------------[ UART CASE END ]---------------------*/
			/*------------------------------------------------------------*/
			/*----------------------[ SPI CASE START ]--------------------*/
			case SPI_Protocol:
			{
				a_BCM_SPI.clockSPI = Fosc128;
 854:	83 e0       	ldi	r24, 0x03	; 3
 856:	8c 87       	std	Y+12, r24	; 0x0c
				a_BCM_SPI.dataorder = MSB;
 858:	1e 86       	std	Y+14, r1	; 0x0e
				a_BCM_SPI.phasePolarityMode = mode0;
 85a:	1d 86       	std	Y+13, r1	; 0x0d
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
 85c:	99 23       	and	r25, r25
 85e:	19 f0       	breq	.+6      	; 0x866 <__stack+0x7>
 860:	91 30       	cpi	r25, 0x01	; 1
 862:	79 f0       	breq	.+30     	; 0x882 <__stack+0x23>
 864:	20 c0       	rjmp	.+64     	; 0x8a6 <__stack+0x47>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_SPI.ptr_call_back = BCM_Tx_ISR_cbf;
 866:	8d e3       	ldi	r24, 0x3D	; 61
 868:	93 e0       	ldi	r25, 0x03	; 3
 86a:	98 8b       	std	Y+16, r25	; 0x10
 86c:	8f 87       	std	Y+15, r24	; 0x0f
						_SPIInitMaster(&a_BCM_SPI);
 86e:	ce 01       	movw	r24, r28
 870:	0c 96       	adiw	r24, 0x0c	; 12
 872:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_SPIInitMaster>
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Tx_ISR_cbf);
 876:	8d e3       	ldi	r24, 0x3D	; 61
 878:	93 e0       	ldi	r25, 0x03	; 3
 87a:	0e 94 27 01 	call	0x24e	; 0x24e <SPI_SetCBF>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 87e:	8c e3       	ldi	r24, 0x3C	; 60
					{
						a_BCM_SPI.ptr_call_back = BCM_Tx_ISR_cbf;
						_SPIInitMaster(&a_BCM_SPI);
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Tx_ISR_cbf);
						break;
 880:	13 c0       	rjmp	.+38     	; 0x8a8 <__stack+0x49>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_SPI.ptr_call_back = BCM_Rx_ISR_cbf;
 882:	80 e4       	ldi	r24, 0x40	; 64
 884:	93 e0       	ldi	r25, 0x03	; 3
 886:	98 8b       	std	Y+16, r25	; 0x10
 888:	8f 87       	std	Y+15, r24	; 0x0f
						_SPIInitMaster(&a_BCM_SPI);
 88a:	ce 01       	movw	r24, r28
 88c:	0c 96       	adiw	r24, 0x0c	; 12
 88e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_SPIInitMaster>
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Rx_ISR_cbf);
 892:	80 e4       	ldi	r24, 0x40	; 64
 894:	93 e0       	ldi	r25, 0x03	; 3
 896:	0e 94 27 01 	call	0x24e	; 0x24e <SPI_SetCBF>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 89a:	8c e3       	ldi	r24, 0x3C	; 60
					{
						a_BCM_SPI.ptr_call_back = BCM_Rx_ISR_cbf;
						_SPIInitMaster(&a_BCM_SPI);
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Rx_ISR_cbf);
						break;
 89c:	05 c0       	rjmp	.+10     	; 0x8a8 <__stack+0x49>
	}
	/*-------------[ In Case Of BCM's Null Pointer ]-------------*/
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
 89e:	8d e3       	ldi	r24, 0x3D	; 61
 8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <__stack+0x49>
				break;
			}
			/*----------------------[ SPI CASE END ]---------------------*/
			default:
				errorStatus = BCM_ERROR + INVALID_IN;
				return errorStatus;
 8a2:	80 e4       	ldi	r24, 0x40	; 64
 8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <__stack+0x49>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 8a6:	8c e3       	ldi	r24, 0x3C	; 60
}
 8a8:	60 96       	adiw	r28, 0x10	; 16
 8aa:	0f b6       	in	r0, 0x3f	; 63
 8ac:	f8 94       	cli
 8ae:	de bf       	out	0x3e, r29	; 62
 8b0:	0f be       	out	0x3f, r0	; 63
 8b2:	cd bf       	out	0x3d, r28	; 61
 8b4:	df 91       	pop	r29
 8b6:	cf 91       	pop	r28
 8b8:	08 95       	ret

000008ba <BCM_Setup_RxBuffer>:
	/* Needs So Much Improvements & Error Checking & More... */
	
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	
	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_BCM != NULL)
 8ba:	89 2b       	or	r24, r25
 8bc:	69 f0       	breq	.+26     	; 0x8d8 <BCM_Setup_RxBuffer+0x1e>
	{
		if(a_Buffer_Len <= Rx_Buffer_Size)
 8be:	63 33       	cpi	r22, 0x33	; 51
 8c0:	71 05       	cpc	r23, r1
 8c2:	50 f4       	brcc	.+20     	; 0x8d8 <BCM_Setup_RxBuffer+0x1e>
		{
			g_BCM_EXcfg.Buf_Len = a_Buffer_Len;
 8c4:	e5 e7       	ldi	r30, 0x75	; 117
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	71 87       	std	Z+9, r23	; 0x09
 8ca:	60 87       	std	Z+8, r22	; 0x08
			g_BCM_EXcfg.Buffer = a_buffer;
 8cc:	57 83       	std	Z+7, r21	; 0x07
 8ce:	46 83       	std	Z+6, r20	; 0x06
			g_BCM_EXcfg.FSM_State = IDLE_State;
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	84 83       	std	Z+4, r24	; 0x04
			g_BCM_EXcfg.BCM_notify_cbf = a_notify;
 8d4:	37 87       	std	Z+15, r19	; 0x0f
 8d6:	26 87       	std	Z+14, r18	; 0x0e
	{
		//errorStatus = NULL_PTR + BCM_ERROR;
		//return errorStatus;
	}
	return errorStatus;
}
 8d8:	8d e3       	ldi	r24, 0x3D	; 61
 8da:	08 95       	ret

000008dc <__udivmodsi4>:
 8dc:	a1 e2       	ldi	r26, 0x21	; 33
 8de:	1a 2e       	mov	r1, r26
 8e0:	aa 1b       	sub	r26, r26
 8e2:	bb 1b       	sub	r27, r27
 8e4:	fd 01       	movw	r30, r26
 8e6:	0d c0       	rjmp	.+26     	; 0x902 <__udivmodsi4_ep>

000008e8 <__udivmodsi4_loop>:
 8e8:	aa 1f       	adc	r26, r26
 8ea:	bb 1f       	adc	r27, r27
 8ec:	ee 1f       	adc	r30, r30
 8ee:	ff 1f       	adc	r31, r31
 8f0:	a2 17       	cp	r26, r18
 8f2:	b3 07       	cpc	r27, r19
 8f4:	e4 07       	cpc	r30, r20
 8f6:	f5 07       	cpc	r31, r21
 8f8:	20 f0       	brcs	.+8      	; 0x902 <__udivmodsi4_ep>
 8fa:	a2 1b       	sub	r26, r18
 8fc:	b3 0b       	sbc	r27, r19
 8fe:	e4 0b       	sbc	r30, r20
 900:	f5 0b       	sbc	r31, r21

00000902 <__udivmodsi4_ep>:
 902:	66 1f       	adc	r22, r22
 904:	77 1f       	adc	r23, r23
 906:	88 1f       	adc	r24, r24
 908:	99 1f       	adc	r25, r25
 90a:	1a 94       	dec	r1
 90c:	69 f7       	brne	.-38     	; 0x8e8 <__udivmodsi4_loop>
 90e:	60 95       	com	r22
 910:	70 95       	com	r23
 912:	80 95       	com	r24
 914:	90 95       	com	r25
 916:	9b 01       	movw	r18, r22
 918:	ac 01       	movw	r20, r24
 91a:	bd 01       	movw	r22, r26
 91c:	cf 01       	movw	r24, r30
 91e:	08 95       	ret

00000920 <_exit>:
 920:	f8 94       	cli

00000922 <__stop_program>:
 922:	ff cf       	rjmp	.-2      	; 0x922 <__stop_program>
