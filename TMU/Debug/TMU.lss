
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000073a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000073a  000007ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080006e  0080006e  000007dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cc0  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c0  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000823  00000000  00000000  00002ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000728  00000000  00000000  00003814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000923  00000000  00000000  00003f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cf9  00000000  00000000  0000485f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00006558  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__vector_4>
  14:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_7>
  20:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_8>
  24:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_9>
  28:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__vector_10>
  2c:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_11>
  30:	0c 94 00 02 	jmp	0x400	; 0x400 <__vector_12>
  34:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
  8a:	0c 94 9b 03 	jmp	0x736	; 0x736 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_DATA>:
	
	return 0;
}

ERROR_STATUS LCD_DATA(uint8_t a_Data)
{
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	if(a_Data & 1)
  96:	80 ff       	sbrs	r24, 0
  98:	06 c0       	rjmp	.+12     	; 0xa6 <LCD_DATA+0x14>
		DIO_Write(LCD_GPIO, D4, HIGH);
  9a:	4f ef       	ldi	r20, 0xFF	; 255
  9c:	60 e1       	ldi	r22, 0x10	; 16
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <LCD_DATA+0x1e>
	else
		DIO_Write(LCD_GPIO, D4, LOW);
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	60 e1       	ldi	r22, 0x10	; 16
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
	if(a_Data & 2)
  b0:	c1 ff       	sbrs	r28, 1
  b2:	06 c0       	rjmp	.+12     	; 0xc0 <LCD_DATA+0x2e>
		DIO_Write(LCD_GPIO, D5, HIGH);
  b4:	4f ef       	ldi	r20, 0xFF	; 255
  b6:	60 e2       	ldi	r22, 0x20	; 32
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
  be:	05 c0       	rjmp	.+10     	; 0xca <LCD_DATA+0x38>
	else
		DIO_Write(LCD_GPIO, D5, LOW);
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	60 e2       	ldi	r22, 0x20	; 32
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
	if(a_Data & 4)
  ca:	c2 ff       	sbrs	r28, 2
  cc:	06 c0       	rjmp	.+12     	; 0xda <LCD_DATA+0x48>
		DIO_Write(LCD_GPIO, D6, HIGH);
  ce:	4f ef       	ldi	r20, 0xFF	; 255
  d0:	60 e4       	ldi	r22, 0x40	; 64
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <LCD_DATA+0x52>
	else
		DIO_Write(LCD_GPIO, D6, LOW);
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	60 e4       	ldi	r22, 0x40	; 64
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
	if(a_Data & 8)
  e4:	c3 ff       	sbrs	r28, 3
  e6:	06 c0       	rjmp	.+12     	; 0xf4 <LCD_DATA+0x62>
		DIO_Write(LCD_GPIO, D7, HIGH);
  e8:	4f ef       	ldi	r20, 0xFF	; 255
  ea:	60 e8       	ldi	r22, 0x80	; 128
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
  f2:	05 c0       	rjmp	.+10     	; 0xfe <LCD_DATA+0x6c>
	else
		DIO_Write(LCD_GPIO, D7, LOW);
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	60 e8       	ldi	r22, 0x80	; 128
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
		
	return 0;
}
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <LCD_sendCommand>:

ERROR_STATUS LCD_sendCommand(uint8_t a_CMD)
{
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
	// Select Command Register
	DIO_Write(LCD_GPIO, RS, LOW);
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
	// Move The Command Data To LCD
	LCD_DATA(a_CMD);
 114:	8c 2f       	mov	r24, r28
 116:	0e 94 49 00 	call	0x92	; 0x92 <LCD_DATA>
	// Send The EN Clock Signal
	DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, HIGH);
 11a:	4f ef       	ldi	r20, 0xFF	; 255
 11c:	68 e0       	ldi	r22, 0x08	; 8
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	80 e5       	ldi	r24, 0x50	; 80
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_sendCommand+0x20>
	_delay_us(15);
	DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, LOW);
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	68 e0       	ldi	r22, 0x08	; 8
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
 134:	80 e5       	ldi	r24, 0x50	; 80
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_sendCommand+0x30>
	_delay_us(15);
	
	return 0;
}
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <LCD_init>:

# define F_CPU 16000000UL
#include <util/delay.h> // for development only

ERROR_STATUS LCD_init (void)
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	00 d0       	rcall	.+0      	; 0x148 <LCD_init+0x6>
 148:	00 d0       	rcall	.+0      	; 0x14a <LCD_init+0x8>
 14a:	00 d0       	rcall	.+0      	; 0x14c <LCD_init+0xa>
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
	/* DIO Pins Initialization */
	DIO_Cfg_s LCD_Pins, LCD_EN;
	LCD_EN.GPIO   = LCD_EN_GPIO;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	8c 83       	std	Y+4, r24	; 0x04
	LCD_EN.pins   = LCD_EN_BIT;
 154:	88 e0       	ldi	r24, 0x08	; 8
 156:	8d 83       	std	Y+5, r24	; 0x05
	LCD_EN.dir    = OUTPUT;
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	8e 83       	std	Y+6, r24	; 0x06
	LCD_Pins.GPIO = LCD_GPIO;
 15c:	19 82       	std	Y+1, r1	; 0x01
	LCD_Pins.dir  = OUTPUT;
 15e:	8b 83       	std	Y+3, r24	; 0x03
	LCD_Pins.pins = (RS | RW | D4 | D5 | D6 | D7);
 160:	86 ef       	ldi	r24, 0xF6	; 246
 162:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&LCD_EN);
 164:	ce 01       	movw	r24, r28
 166:	04 96       	adiw	r24, 0x04	; 4
 168:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_init>
	DIO_init(&LCD_Pins);
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_init>
	
	/* LCD Initialization Procedure */
	DIO_Write(LCD_GPIO, RS, LOW);
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	62 e0       	ldi	r22, 0x02	; 2
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
	DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, LOW);
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	68 e0       	ldi	r22, 0x08	; 8
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
	LCD_DATA(0x00);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_DATA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	88 e5       	ldi	r24, 0x58	; 88
 192:	96 e0       	ldi	r25, 0x06	; 6
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <LCD_init+0x52>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_init+0x5c>
 19e:	00 00       	nop
	_delay_ms(130);
	LCD_sendCommand(0x03);
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
 1a6:	8f e1       	ldi	r24, 0x1F	; 31
 1a8:	9e e4       	ldi	r25, 0x4E	; 78
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_init+0x68>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_init+0x6e>
 1b0:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0x03);
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	87 e5       	ldi	r24, 0x57	; 87
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_init+0x7a>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_init+0x80>
 1c2:	00 00       	nop
	_delay_us(150);
	LCD_sendCommand(0x03);
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
	LCD_sendCommand(0x02);
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
	LCD_sendCommand(0x02);
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
	LCD_sendCommand(0x08);
 1d6:	88 e0       	ldi	r24, 0x08	; 8
 1d8:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
	LCD_sendCommand(0x00);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
	LCD_sendCommand(0x0C);
 1e2:	8c e0       	ldi	r24, 0x0C	; 12
 1e4:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
	LCD_sendCommand(0x00);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
	LCD_sendCommand(0x06);
 1ee:	86 e0       	ldi	r24, 0x06	; 6
 1f0:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
	
	return 0;
}
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	26 96       	adiw	r28, 0x06	; 6
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <LCD_displayChar>:
	
	return 0;
}

ERROR_STATUS LCD_displayChar(uint8_t a_CH)
{
 20a:	cf 93       	push	r28
 20c:	c8 2f       	mov	r28, r24
	  uint8_t Low4,High4;
	  
	  Low4 = a_CH & 0x0F;
	  High4 = a_CH & 0xF0;
	  
	  DIO_Write(LCD_GPIO, RS, HIGH);
 20e:	4f ef       	ldi	r20, 0xFF	; 255
 210:	62 e0       	ldi	r22, 0x02	; 2
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
	  
	  LCD_DATA(High4>>4);
 218:	8c 2f       	mov	r24, r28
 21a:	82 95       	swap	r24
 21c:	8f 70       	andi	r24, 0x0F	; 15
 21e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_DATA>
	  DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, HIGH);
 222:	4f ef       	ldi	r20, 0xFF	; 255
 224:	68 e0       	ldi	r22, 0x08	; 8
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
 22c:	80 e5       	ldi	r24, 0x50	; 80
 22e:	8a 95       	dec	r24
 230:	f1 f7       	brne	.-4      	; 0x22e <LCD_displayChar+0x24>
	  _delay_us(15);
	  DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, LOW);
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	68 e0       	ldi	r22, 0x08	; 8
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
 23c:	80 e5       	ldi	r24, 0x50	; 80
 23e:	8a 95       	dec	r24
 240:	f1 f7       	brne	.-4      	; 0x23e <LCD_displayChar+0x34>
	  _delay_us(15);
	  
	  LCD_DATA(Low4);
 242:	8c 2f       	mov	r24, r28
 244:	8f 70       	andi	r24, 0x0F	; 15
 246:	0e 94 49 00 	call	0x92	; 0x92 <LCD_DATA>
	  DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, HIGH);
 24a:	4f ef       	ldi	r20, 0xFF	; 255
 24c:	68 e0       	ldi	r22, 0x08	; 8
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
 254:	80 e5       	ldi	r24, 0x50	; 80
 256:	8a 95       	dec	r24
 258:	f1 f7       	brne	.-4      	; 0x256 <LCD_displayChar+0x4c>
	  _delay_us(15);
	  DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, LOW);
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	68 e0       	ldi	r22, 0x08	; 8
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_Write>
 264:	80 e5       	ldi	r24, 0x50	; 80
 266:	8a 95       	dec	r24
 268:	f1 f7       	brne	.-4      	; 0x266 <LCD_displayChar+0x5c>
	  _delay_us(15);
	  
	  return 0;
}
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <LCD_gotoRowColumn>:

ERROR_STATUS LCD_gotoRowColumn(uint8_t a_ROW, uint8_t a_COL)
{
 272:	cf 93       	push	r28
	uint8_t Temp,Low4,High4;
	if(a_ROW == 1)
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	61 f4       	brne	.+24     	; 0x290 <LCD_gotoRowColumn+0x1e>
	{
		Temp = 0x80 + a_COL - 1;
 278:	cf e7       	ldi	r28, 0x7F	; 127
 27a:	c6 0f       	add	r28, r22
		High4 = Temp >> 4;
		Low4 = Temp & 0x0F;
		LCD_sendCommand(High4);
 27c:	8c 2f       	mov	r24, r28
 27e:	82 95       	swap	r24
 280:	8f 70       	andi	r24, 0x0F	; 15
 282:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
		LCD_sendCommand(Low4);
 286:	8c 2f       	mov	r24, r28
 288:	8f 70       	andi	r24, 0x0F	; 15
 28a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
 28e:	0d c0       	rjmp	.+26     	; 0x2aa <LCD_gotoRowColumn+0x38>
	}
	if(a_ROW == 2)
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	59 f4       	brne	.+22     	; 0x2aa <LCD_gotoRowColumn+0x38>
	{
		Temp = 0xC0 + a_COL - 1;
 294:	cf eb       	ldi	r28, 0xBF	; 191
 296:	c6 0f       	add	r28, r22
		High4 = Temp >> 4;
		Low4 = Temp & 0x0F;
		LCD_sendCommand(High4);
 298:	8c 2f       	mov	r24, r28
 29a:	82 95       	swap	r24
 29c:	8f 70       	andi	r24, 0x0F	; 15
 29e:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
		LCD_sendCommand(Low4);
 2a2:	8c 2f       	mov	r24, r28
 2a4:	8f 70       	andi	r24, 0x0F	; 15
 2a6:	0e 94 83 00 	call	0x106	; 0x106 <LCD_sendCommand>
	}
	
	return 0;
}
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <LCD_displayString>:

ERROR_STATUS LCD_displayString(uint8_t* a_STR)
{
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0; a_STR[i] != '\0'; i++)
 2ba:	80 81       	ld	r24, Z
 2bc:	88 23       	and	r24, r24
 2be:	59 f0       	breq	.+22     	; 0x2d6 <LCD_displayString+0x24>
 2c0:	8f 01       	movw	r16, r30
 2c2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_displayChar(a_STR[i]);
 2c4:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_displayChar>
}

ERROR_STATUS LCD_displayString(uint8_t* a_STR)
{
	uint8_t i;
	for(i=0; a_STR[i] != '\0'; i++)
 2c8:	cf 5f       	subi	r28, 0xFF	; 255
 2ca:	f8 01       	movw	r30, r16
 2cc:	ec 0f       	add	r30, r28
 2ce:	f1 1d       	adc	r31, r1
 2d0:	80 81       	ld	r24, Z
 2d2:	81 11       	cpse	r24, r1
 2d4:	f7 cf       	rjmp	.-18     	; 0x2c4 <LCD_displayString+0x12>
	{
		LCD_displayChar(a_STR[i]);
	}
	return 0;
}
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	08 95       	ret

000002e2 <LCD_displayStringRowColumn>:

ERROR_STATUS LCD_displayStringRowColumn(uint8_t a_ROW, uint8_t a_COL, uint8_t* a_STR)
{
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	ea 01       	movw	r28, r20
	LCD_gotoRowColumn(a_ROW, a_COL);
 2e8:	0e 94 39 01 	call	0x272	; 0x272 <LCD_gotoRowColumn>
	LCD_displayString(a_STR);
 2ec:	ce 01       	movw	r24, r28
 2ee:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_displayString>
	
	return 0;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <main>:

/*==========================================================================*/

int main(void)
{
	LCD_init();
 2fc:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_init>
	LCD_displayStringRowColumn(2, 1, "OMG GG! IZI");
 300:	41 e6       	ldi	r20, 0x61	; 97
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_displayStringRowColumn>
	/*-------------[ SUPER LOOP ]-------------*/
	while (1)
	{
		//LCD_displayChar(170);
		//SOS_Run();
	}
 30c:	ff cf       	rjmp	.-2      	; 0x30c <main+0x10>

0000030e <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
 30e:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
 310:	89 2b       	or	r24, r25
 312:	e9 f1       	breq	.+122    	; 0x38e <DIO_init+0x80>
	{
		switch(DIO_info->GPIO)
 314:	80 81       	ld	r24, Z
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	99 f0       	breq	.+38     	; 0x340 <DIO_init+0x32>
 31a:	28 f0       	brcs	.+10     	; 0x326 <DIO_init+0x18>
 31c:	82 30       	cpi	r24, 0x02	; 2
 31e:	e9 f0       	breq	.+58     	; 0x35a <DIO_init+0x4c>
 320:	83 30       	cpi	r24, 0x03	; 3
 322:	41 f1       	breq	.+80     	; 0x374 <DIO_init+0x66>
 324:	37 c0       	rjmp	.+110    	; 0x394 <DIO_init+0x86>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
 326:	81 81       	ldd	r24, Z+1	; 0x01
 328:	2a b3       	in	r18, 0x1a	; 26
 32a:	98 2f       	mov	r25, r24
 32c:	90 95       	com	r25
 32e:	29 23       	and	r18, r25
 330:	92 81       	ldd	r25, Z+2	; 0x02
 332:	98 23       	and	r25, r24
 334:	82 2f       	mov	r24, r18
 336:	89 2b       	or	r24, r25
 338:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
			break;
 33e:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
 340:	81 81       	ldd	r24, Z+1	; 0x01
 342:	27 b3       	in	r18, 0x17	; 23
 344:	98 2f       	mov	r25, r24
 346:	90 95       	com	r25
 348:	29 23       	and	r18, r25
 34a:	92 81       	ldd	r25, Z+2	; 0x02
 34c:	98 23       	and	r25, r24
 34e:	82 2f       	mov	r24, r18
 350:	89 2b       	or	r24, r25
 352:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
			break;
 358:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
 35a:	81 81       	ldd	r24, Z+1	; 0x01
 35c:	24 b3       	in	r18, 0x14	; 20
 35e:	98 2f       	mov	r25, r24
 360:	90 95       	com	r25
 362:	29 23       	and	r18, r25
 364:	92 81       	ldd	r25, Z+2	; 0x02
 366:	98 23       	and	r25, r24
 368:	82 2f       	mov	r24, r18
 36a:	89 2b       	or	r24, r25
 36c:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
			break;
 372:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
 374:	81 81       	ldd	r24, Z+1	; 0x01
 376:	21 b3       	in	r18, 0x11	; 17
 378:	98 2f       	mov	r25, r24
 37a:	90 95       	com	r25
 37c:	29 23       	and	r18, r25
 37e:	92 81       	ldd	r25, Z+2	; 0x02
 380:	98 23       	and	r25, r24
 382:	82 2f       	mov	r24, r18
 384:	89 2b       	or	r24, r25
 386:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
			break;
 38c:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 398:	08 95       	ret

0000039a <DIO_Write>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write(uint8_t GPIO, uint8_t pins, uint8_t value)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	81 f0       	breq	.+32     	; 0x3be <DIO_Write+0x24>
 39e:	28 f0       	brcs	.+10     	; 0x3aa <DIO_Write+0x10>
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	b9 f0       	breq	.+46     	; 0x3d2 <DIO_Write+0x38>
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	f9 f0       	breq	.+62     	; 0x3e6 <DIO_Write+0x4c>
 3a8:	28 c0       	rjmp	.+80     	; 0x3fa <DIO_Write+0x60>
	{
		case GPIOA :
		PORTA_DATA = (pins & value) | (~pins & PORTA_DATA);
 3aa:	8b b3       	in	r24, 0x1b	; 27
 3ac:	96 2f       	mov	r25, r22
 3ae:	90 95       	com	r25
 3b0:	89 23       	and	r24, r25
 3b2:	46 23       	and	r20, r22
 3b4:	48 2b       	or	r20, r24
 3b6:	4b bb       	out	0x1b, r20	; 27
		errorStatus = E_OK;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	90 e0       	ldi	r25, 0x00	; 0
		break;
 3bc:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & value) | (~pins & PORTB_DATA);
 3be:	88 b3       	in	r24, 0x18	; 24
 3c0:	96 2f       	mov	r25, r22
 3c2:	90 95       	com	r25
 3c4:	89 23       	and	r24, r25
 3c6:	46 23       	and	r20, r22
 3c8:	48 2b       	or	r20, r24
 3ca:	48 bb       	out	0x18, r20	; 24
		errorStatus = E_OK;
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
		break;
 3d0:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & value) | (~pins & PORTC_DATA);
 3d2:	85 b3       	in	r24, 0x15	; 21
 3d4:	96 2f       	mov	r25, r22
 3d6:	90 95       	com	r25
 3d8:	89 23       	and	r24, r25
 3da:	46 23       	and	r20, r22
 3dc:	48 2b       	or	r20, r24
 3de:	45 bb       	out	0x15, r20	; 21
		errorStatus = E_OK;
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
		break;
 3e4:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & value) | (~pins & PORTD_DATA);
 3e6:	82 b3       	in	r24, 0x12	; 18
 3e8:	96 2f       	mov	r25, r22
 3ea:	90 95       	com	r25
 3ec:	89 23       	and	r24, r25
 3ee:	46 23       	and	r20, r22
 3f0:	48 2b       	or	r20, r24
 3f2:	42 bb       	out	0x12, r20	; 18
		errorStatus = E_OK;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
		break;
 3f8:	08 95       	ret
		default :
		errorStatus = E_NOK;
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	return errorStatus;
}
 3fe:	08 95       	ret

00000400 <__vector_12>:
{
	PTR_CALL_BACK = isr_ptr;
}

ISR(SPI_STC_vect)
{
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	2f 93       	push	r18
 40c:	3f 93       	push	r19
 40e:	4f 93       	push	r20
 410:	5f 93       	push	r21
 412:	6f 93       	push	r22
 414:	7f 93       	push	r23
 416:	8f 93       	push	r24
 418:	9f 93       	push	r25
 41a:	af 93       	push	r26
 41c:	bf 93       	push	r27
 41e:	ef 93       	push	r30
 420:	ff 93       	push	r31
	g_u8_RxFlag = TRUE;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	80 93 60 00 	sts	0x0060, r24
	PTR_CALL_BACK();
 428:	e0 91 7e 00 	lds	r30, 0x007E
 42c:	f0 91 7f 00 	lds	r31, 0x007F
 430:	09 95       	icall
}
 432:	ff 91       	pop	r31
 434:	ef 91       	pop	r30
 436:	bf 91       	pop	r27
 438:	af 91       	pop	r26
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	7f 91       	pop	r23
 440:	6f 91       	pop	r22
 442:	5f 91       	pop	r21
 444:	4f 91       	pop	r20
 446:	3f 91       	pop	r19
 448:	2f 91       	pop	r18
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	2f 93       	push	r18
 460:	3f 93       	push	r19
 462:	4f 93       	push	r20
 464:	5f 93       	push	r21
 466:	6f 93       	push	r22
 468:	7f 93       	push	r23
 46a:	8f 93       	push	r24
 46c:	9f 93       	push	r25
 46e:	af 93       	push	r26
 470:	bf 93       	push	r27
 472:	ef 93       	push	r30
 474:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
 476:	e0 91 78 00 	lds	r30, 0x0078
 47a:	f0 91 79 00 	lds	r31, 0x0079
 47e:	30 97       	sbiw	r30, 0x00	; 0
 480:	09 f0       	breq	.+2      	; 0x484 <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
 482:	09 95       	icall
	}
}
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	bf 91       	pop	r27
 48a:	af 91       	pop	r26
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	7f 91       	pop	r23
 492:	6f 91       	pop	r22
 494:	5f 91       	pop	r21
 496:	4f 91       	pop	r20
 498:	3f 91       	pop	r19
 49a:	2f 91       	pop	r18
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	2f 93       	push	r18
 4b2:	3f 93       	push	r19
 4b4:	4f 93       	push	r20
 4b6:	5f 93       	push	r21
 4b8:	6f 93       	push	r22
 4ba:	7f 93       	push	r23
 4bc:	8f 93       	push	r24
 4be:	9f 93       	push	r25
 4c0:	af 93       	push	r26
 4c2:	bf 93       	push	r27
 4c4:	ef 93       	push	r30
 4c6:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
 4c8:	e0 91 76 00 	lds	r30, 0x0076
 4cc:	f0 91 77 00 	lds	r31, 0x0077
 4d0:	30 97       	sbiw	r30, 0x00	; 0
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
 4d4:	09 95       	icall
	}
}
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	2f 93       	push	r18
 504:	3f 93       	push	r19
 506:	4f 93       	push	r20
 508:	5f 93       	push	r21
 50a:	6f 93       	push	r22
 50c:	7f 93       	push	r23
 50e:	8f 93       	push	r24
 510:	9f 93       	push	r25
 512:	af 93       	push	r26
 514:	bf 93       	push	r27
 516:	ef 93       	push	r30
 518:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
 51a:	e0 91 70 00 	lds	r30, 0x0070
 51e:	f0 91 71 00 	lds	r31, 0x0071
 522:	30 97       	sbiw	r30, 0x00	; 0
 524:	09 f0       	breq	.+2      	; 0x528 <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
 526:	09 95       	icall
	}
}
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	bf 91       	pop	r27
 52e:	af 91       	pop	r26
 530:	9f 91       	pop	r25
 532:	8f 91       	pop	r24
 534:	7f 91       	pop	r23
 536:	6f 91       	pop	r22
 538:	5f 91       	pop	r21
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	2f 93       	push	r18
 556:	3f 93       	push	r19
 558:	4f 93       	push	r20
 55a:	5f 93       	push	r21
 55c:	6f 93       	push	r22
 55e:	7f 93       	push	r23
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
 564:	af 93       	push	r26
 566:	bf 93       	push	r27
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
 56c:	e0 91 6e 00 	lds	r30, 0x006E
 570:	f0 91 6f 00 	lds	r31, 0x006F
 574:	30 97       	sbiw	r30, 0x00	; 0
 576:	09 f0       	breq	.+2      	; 0x57a <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
 578:	09 95       	icall
	}
}
 57a:	ff 91       	pop	r31
 57c:	ef 91       	pop	r30
 57e:	bf 91       	pop	r27
 580:	af 91       	pop	r26
 582:	9f 91       	pop	r25
 584:	8f 91       	pop	r24
 586:	7f 91       	pop	r23
 588:	6f 91       	pop	r22
 58a:	5f 91       	pop	r21
 58c:	4f 91       	pop	r20
 58e:	3f 91       	pop	r19
 590:	2f 91       	pop	r18
 592:	0f 90       	pop	r0
 594:	0f be       	out	0x3f, r0	; 63
 596:	0f 90       	pop	r0
 598:	1f 90       	pop	r1
 59a:	18 95       	reti

0000059c <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 59c:	1f 92       	push	r1
 59e:	0f 92       	push	r0
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	0f 92       	push	r0
 5a4:	11 24       	eor	r1, r1
 5a6:	2f 93       	push	r18
 5a8:	3f 93       	push	r19
 5aa:	4f 93       	push	r20
 5ac:	5f 93       	push	r21
 5ae:	6f 93       	push	r22
 5b0:	7f 93       	push	r23
 5b2:	8f 93       	push	r24
 5b4:	9f 93       	push	r25
 5b6:	af 93       	push	r26
 5b8:	bf 93       	push	r27
 5ba:	ef 93       	push	r30
 5bc:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
 5be:	e0 91 74 00 	lds	r30, 0x0074
 5c2:	f0 91 75 00 	lds	r31, 0x0075
 5c6:	30 97       	sbiw	r30, 0x00	; 0
 5c8:	09 f0       	breq	.+2      	; 0x5cc <__vector_9+0x30>
	{
		Ptr_Timer1_OV();
 5ca:	09 95       	icall
	}
}
 5cc:	ff 91       	pop	r31
 5ce:	ef 91       	pop	r30
 5d0:	bf 91       	pop	r27
 5d2:	af 91       	pop	r26
 5d4:	9f 91       	pop	r25
 5d6:	8f 91       	pop	r24
 5d8:	7f 91       	pop	r23
 5da:	6f 91       	pop	r22
 5dc:	5f 91       	pop	r21
 5de:	4f 91       	pop	r20
 5e0:	3f 91       	pop	r19
 5e2:	2f 91       	pop	r18
 5e4:	0f 90       	pop	r0
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	0f 90       	pop	r0
 5ea:	1f 90       	pop	r1
 5ec:	18 95       	reti

000005ee <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	2f 93       	push	r18
 5fa:	3f 93       	push	r19
 5fc:	4f 93       	push	r20
 5fe:	5f 93       	push	r21
 600:	6f 93       	push	r22
 602:	7f 93       	push	r23
 604:	8f 93       	push	r24
 606:	9f 93       	push	r25
 608:	af 93       	push	r26
 60a:	bf 93       	push	r27
 60c:	ef 93       	push	r30
 60e:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 610:	e0 91 72 00 	lds	r30, 0x0072
 614:	f0 91 73 00 	lds	r31, 0x0073
 618:	30 97       	sbiw	r30, 0x00	; 0
 61a:	09 f0       	breq	.+2      	; 0x61e <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
 61c:	09 95       	icall
	}	
}
 61e:	ff 91       	pop	r31
 620:	ef 91       	pop	r30
 622:	bf 91       	pop	r27
 624:	af 91       	pop	r26
 626:	9f 91       	pop	r25
 628:	8f 91       	pop	r24
 62a:	7f 91       	pop	r23
 62c:	6f 91       	pop	r22
 62e:	5f 91       	pop	r21
 630:	4f 91       	pop	r20
 632:	3f 91       	pop	r19
 634:	2f 91       	pop	r18
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63
 63a:	0f 90       	pop	r0
 63c:	1f 90       	pop	r1
 63e:	18 95       	reti

00000640 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 640:	1f 92       	push	r1
 642:	0f 92       	push	r0
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	0f 92       	push	r0
 648:	11 24       	eor	r1, r1
 64a:	2f 93       	push	r18
 64c:	3f 93       	push	r19
 64e:	4f 93       	push	r20
 650:	5f 93       	push	r21
 652:	6f 93       	push	r22
 654:	7f 93       	push	r23
 656:	8f 93       	push	r24
 658:	9f 93       	push	r25
 65a:	af 93       	push	r26
 65c:	bf 93       	push	r27
 65e:	ef 93       	push	r30
 660:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 662:	e0 91 72 00 	lds	r30, 0x0072
 666:	f0 91 73 00 	lds	r31, 0x0073
 66a:	30 97       	sbiw	r30, 0x00	; 0
 66c:	09 f0       	breq	.+2      	; 0x670 <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 66e:	09 95       	icall
	}
}
 670:	ff 91       	pop	r31
 672:	ef 91       	pop	r30
 674:	bf 91       	pop	r27
 676:	af 91       	pop	r26
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	7f 91       	pop	r23
 67e:	6f 91       	pop	r22
 680:	5f 91       	pop	r21
 682:	4f 91       	pop	r20
 684:	3f 91       	pop	r19
 686:	2f 91       	pop	r18
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
 692:	1f 92       	push	r1
 694:	0f 92       	push	r0
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	0f 92       	push	r0
 69a:	11 24       	eor	r1, r1
 69c:	2f 93       	push	r18
 69e:	3f 93       	push	r19
 6a0:	4f 93       	push	r20
 6a2:	5f 93       	push	r21
 6a4:	6f 93       	push	r22
 6a6:	7f 93       	push	r23
 6a8:	8f 93       	push	r24
 6aa:	9f 93       	push	r25
 6ac:	af 93       	push	r26
 6ae:	bf 93       	push	r27
 6b0:	ef 93       	push	r30
 6b2:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
 6b4:	e0 91 7a 00 	lds	r30, 0x007A
 6b8:	f0 91 7b 00 	lds	r31, 0x007B
 6bc:	30 97       	sbiw	r30, 0x00	; 0
 6be:	09 f0       	breq	.+2      	; 0x6c2 <__vector_13+0x30>
	{
		Ptr_UART_RX();
 6c0:	09 95       	icall
	}
}
 6c2:	ff 91       	pop	r31
 6c4:	ef 91       	pop	r30
 6c6:	bf 91       	pop	r27
 6c8:	af 91       	pop	r26
 6ca:	9f 91       	pop	r25
 6cc:	8f 91       	pop	r24
 6ce:	7f 91       	pop	r23
 6d0:	6f 91       	pop	r22
 6d2:	5f 91       	pop	r21
 6d4:	4f 91       	pop	r20
 6d6:	3f 91       	pop	r19
 6d8:	2f 91       	pop	r18
 6da:	0f 90       	pop	r0
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	0f 90       	pop	r0
 6e0:	1f 90       	pop	r1
 6e2:	18 95       	reti

000006e4 <__vector_15>:

ISR(USART_TXC_vect)
{
 6e4:	1f 92       	push	r1
 6e6:	0f 92       	push	r0
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	0f 92       	push	r0
 6ec:	11 24       	eor	r1, r1
 6ee:	2f 93       	push	r18
 6f0:	3f 93       	push	r19
 6f2:	4f 93       	push	r20
 6f4:	5f 93       	push	r21
 6f6:	6f 93       	push	r22
 6f8:	7f 93       	push	r23
 6fa:	8f 93       	push	r24
 6fc:	9f 93       	push	r25
 6fe:	af 93       	push	r26
 700:	bf 93       	push	r27
 702:	ef 93       	push	r30
 704:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
 706:	e0 91 7c 00 	lds	r30, 0x007C
 70a:	f0 91 7d 00 	lds	r31, 0x007D
 70e:	30 97       	sbiw	r30, 0x00	; 0
 710:	09 f0       	breq	.+2      	; 0x714 <__vector_15+0x30>
	{
		Ptr_UART_TX();
 712:	09 95       	icall
	}
 714:	ff 91       	pop	r31
 716:	ef 91       	pop	r30
 718:	bf 91       	pop	r27
 71a:	af 91       	pop	r26
 71c:	9f 91       	pop	r25
 71e:	8f 91       	pop	r24
 720:	7f 91       	pop	r23
 722:	6f 91       	pop	r22
 724:	5f 91       	pop	r21
 726:	4f 91       	pop	r20
 728:	3f 91       	pop	r19
 72a:	2f 91       	pop	r18
 72c:	0f 90       	pop	r0
 72e:	0f be       	out	0x3f, r0	; 63
 730:	0f 90       	pop	r0
 732:	1f 90       	pop	r1
 734:	18 95       	reti

00000736 <_exit>:
 736:	f8 94       	cli

00000738 <__stop_program>:
 738:	ff cf       	rjmp	.-2      	; 0x738 <__stop_program>
