
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000009e6  00000a7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005a  00800062  00800062  00000a7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000aac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dde  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000993  00000000  00000000  00002ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077a  00000000  00000000  00003471  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006ec  00000000  00000000  00003bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000996  00000000  00000000  000042d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bdf  00000000  00000000  00004c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  0000684d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_4>
  14:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__vector_7>
  20:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_8>
  24:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_9>
  28:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_10>
  2c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__vector_11>
  30:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_12>
  34:	0c 94 36 03 	jmp	0x66c	; 0x66c <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3b       	cpi	r26, 0xBC	; 188
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6f 00 	call	0xde	; 0xde <main>
  8a:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <omgplzzz>:
	
/* RX Completion Notification Routine */
void omgplzzz(enum_BcmStatus st)
{
	/* Debug Point */
	TCNT1L = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8c bd       	out	0x2c, r24	; 44
	/* Debug Point */
	
	g_UART_TXindex = ZERO;
  96:	10 92 62 00 	sts	0x0062, r1
	g_TxBuffer_Len = BCM_Get_msgLEN();
  9a:	0e 94 cc 04 	call	0x998	; 0x998 <BCM_Get_msgLEN>
  9e:	80 93 63 00 	sts	0x0063, r24
	UART_Write(rxBuffer[g_UART_TXindex++]);
  a2:	e0 91 62 00 	lds	r30, 0x0062
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	8e 0f       	add	r24, r30
  aa:	80 93 62 00 	sts	0x0062, r24
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	e8 57       	subi	r30, 0x78	; 120
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	80 81       	ld	r24, Z
  b6:	0e 94 28 03 	call	0x650	; 0x650 <UART_Write>
  ba:	08 95       	ret

000000bc <UART_ISR_cbf>:
}


void UART_ISR_cbf(void)
{
	if(g_UART_TXindex < g_TxBuffer_Len)
  bc:	e0 91 62 00 	lds	r30, 0x0062
  c0:	80 91 63 00 	lds	r24, 0x0063
  c4:	e8 17       	cp	r30, r24
  c6:	50 f4       	brcc	.+20     	; 0xdc <UART_ISR_cbf+0x20>
	{
		UART_Write(rxBuffer[g_UART_TXindex++]);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	8e 0f       	add	r24, r30
  cc:	80 93 62 00 	sts	0x0062, r24
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	e8 57       	subi	r30, 0x78	; 120
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	80 81       	ld	r24, Z
  d8:	0e 94 28 03 	call	0x650	; 0x650 <UART_Write>
  dc:	08 95       	ret

000000de <main>:
	}
}

int main(void)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	2e 97       	sbiw	r28, 0x0e	; 14
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
	BCM_cfg_s BCM1;
	UART_cfg UART1;
	/*-------------[ BCM Initialization ]-------------*/
	BCM1.BCM_CH_ID = 1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	8a 83       	std	Y+2, r24	; 0x02
	BCM1.Mode = BCM_Rx_Mode;
  f6:	89 83       	std	Y+1, r24	; 0x01
	BCM1.Protocol = SPI_Protocol;
  f8:	8b 83       	std	Y+3, r24	; 0x03
	BCM_Init(&BCM1);
  fa:	ce 01       	movw	r24, r28
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	0e 94 3a 04 	call	0x874	; 0x874 <BCM_Init>
	BCM_Setup_RxBuffer(&BCM1, 40, rxBuffer, omgplzzz);
 102:	29 e4       	ldi	r18, 0x49	; 73
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	48 e8       	ldi	r20, 0x88	; 136
 108:	50 e0       	ldi	r21, 0x00	; 0
 10a:	68 e2       	ldi	r22, 0x28	; 40
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	ce 01       	movw	r24, r28
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	0e 94 be 04 	call	0x97c	; 0x97c <BCM_Setup_RxBuffer>
	
	/*-------------[ UART Initialization ]-------------*/
	UART1.baudrate   = 9600;
 116:	80 e8       	ldi	r24, 0x80	; 128
 118:	95 e2       	ldi	r25, 0x25	; 37
 11a:	a0 e0       	ldi	r26, 0x00	; 0
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	8b 87       	std	Y+11, r24	; 0x0b
 120:	9c 87       	std	Y+12, r25	; 0x0c
 122:	ad 87       	std	Y+13, r26	; 0x0d
 124:	be 87       	std	Y+14, r27	; 0x0e
	UART1.dataBits   = UART_Bits_8;
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	8d 83       	std	Y+5, r24	; 0x05
	UART1.stopBits   = StopBits_1;
 12a:	18 86       	std	Y+8, r1	; 0x08
	UART1.parity     = No_Parity;
 12c:	1e 82       	std	Y+6, r1	; 0x06
	UART1.sampleEdge = RisingEdg;
 12e:	19 86       	std	Y+9, r1	; 0x09
	UART1.uartSync   = UART_Async;
 130:	1f 82       	std	Y+7, r1	; 0x07
	UART1.mode       = UART_TX;
 132:	88 e0       	ldi	r24, 0x08	; 8
 134:	8c 83       	std	Y+4, r24	; 0x04
	UART1.uartInterrupts = OnTx;
 136:	80 e4       	ldi	r24, 0x40	; 64
 138:	8a 87       	std	Y+10, r24	; 0x0a
	UART_SetTX(UART_ISR_cbf);
 13a:	8e e5       	ldi	r24, 0x5E	; 94
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 2c 03 	call	0x658	; 0x658 <UART_SetTX>
	UART_Init(&UART1);
 142:	ce 01       	movw	r24, r28
 144:	04 96       	adiw	r24, 0x04	; 4
 146:	0e 94 ba 02 	call	0x574	; 0x574 <UART_Init>
	
	/*-------------[ SUPER LOOP ]-------------*/
	while (1) 
    {
		BCM_Rx_Dispatcher();
 14a:	0e 94 22 04 	call	0x844	; 0x844 <BCM_Rx_Dispatcher>
    }
 14e:	fd cf       	rjmp	.-6      	; 0x14a <main+0x6c>

00000150 <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
 150:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
 152:	89 2b       	or	r24, r25
 154:	c9 f1       	breq	.+114    	; 0x1c8 <DIO_init+0x78>
	{
		switch(DIO_info->GPIO)
 156:	80 81       	ld	r24, Z
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	91 f0       	breq	.+36     	; 0x180 <DIO_init+0x30>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_init+0x18>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	d9 f0       	breq	.+54     	; 0x198 <DIO_init+0x48>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	29 f1       	breq	.+74     	; 0x1b0 <DIO_init+0x60>
 166:	32 c0       	rjmp	.+100    	; 0x1cc <DIO_init+0x7c>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
 168:	81 81       	ldd	r24, Z+1	; 0x01
 16a:	2a b3       	in	r18, 0x1a	; 26
 16c:	98 2f       	mov	r25, r24
 16e:	90 95       	com	r25
 170:	29 23       	and	r18, r25
 172:	92 81       	ldd	r25, Z+2	; 0x02
 174:	98 23       	and	r25, r24
 176:	82 2f       	mov	r24, r18
 178:	89 2b       	or	r24, r25
 17a:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
 17c:	80 e0       	ldi	r24, 0x00	; 0
			break;
 17e:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
 180:	81 81       	ldd	r24, Z+1	; 0x01
 182:	27 b3       	in	r18, 0x17	; 23
 184:	98 2f       	mov	r25, r24
 186:	90 95       	com	r25
 188:	29 23       	and	r18, r25
 18a:	92 81       	ldd	r25, Z+2	; 0x02
 18c:	98 23       	and	r25, r24
 18e:	82 2f       	mov	r24, r18
 190:	89 2b       	or	r24, r25
 192:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
 194:	80 e0       	ldi	r24, 0x00	; 0
			break;
 196:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
 198:	81 81       	ldd	r24, Z+1	; 0x01
 19a:	24 b3       	in	r18, 0x14	; 20
 19c:	98 2f       	mov	r25, r24
 19e:	90 95       	com	r25
 1a0:	29 23       	and	r18, r25
 1a2:	92 81       	ldd	r25, Z+2	; 0x02
 1a4:	98 23       	and	r25, r24
 1a6:	82 2f       	mov	r24, r18
 1a8:	89 2b       	or	r24, r25
 1aa:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
 1ac:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1ae:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
 1b0:	81 81       	ldd	r24, Z+1	; 0x01
 1b2:	21 b3       	in	r18, 0x11	; 17
 1b4:	98 2f       	mov	r25, r24
 1b6:	90 95       	com	r25
 1b8:	29 23       	and	r18, r25
 1ba:	92 81       	ldd	r25, Z+2	; 0x02
 1bc:	98 23       	and	r25, r24
 1be:	82 2f       	mov	r24, r18
 1c0:	89 2b       	or	r24, r25
 1c2:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1c6:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 1ce:	08 95       	ret

000001d0 <_SPIInitMaster>:
#include "SPI__.h"

 void (*PTR_CALL_BACK)(void);
 volatile uint8_t g_u8_RxFlag = TRUE;

extern void _SPIInitMaster(SPI_cfg_s * a_SPI_cfg){
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <_SPIInitMaster+0x6>
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <_SPIInitMaster+0x8>
 1d8:	00 d0       	rcall	.+0      	; 0x1da <_SPIInitMaster+0xa>
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
 1de:	fc 01       	movw	r30, r24
		DIO_Cfg_s SPI_output_pins ;
		
	
	
		/* clear status register */
		SPSR = ZERO ;
 1e0:	1e b8       	out	0x0e, r1	; 14
		
		/* clear control mode */
		
		SPCR = ZERO ;
 1e2:	1d b8       	out	0x0d, r1	; 13
		
		/* master or slave bit 4 */
		SPCR |= Master_SPI ; 
 1e4:	6c 9a       	sbi	0x0d, 4	; 13
		
		/*set clock*/
		 
		SPCR|= a_SPI_cfg-> clockSPI ;
 1e6:	9d b1       	in	r25, 0x0d	; 13
 1e8:	80 81       	ld	r24, Z
 1ea:	89 2b       	or	r24, r25
 1ec:	8d b9       	out	0x0d, r24	; 13
		
		/* data order update */
		
		SPCR|= a_SPI_cfg-> dataorder ;
 1ee:	9d b1       	in	r25, 0x0d	; 13
 1f0:	82 81       	ldd	r24, Z+2	; 0x02
 1f2:	89 2b       	or	r24, r25
 1f4:	8d b9       	out	0x0d, r24	; 13
		
		/* set phase bit2 and polarity bit3 */
		
		 SPCR |= a_SPI_cfg-> phasePolarityMode;
 1f6:	9d b1       	in	r25, 0x0d	; 13
 1f8:	81 81       	ldd	r24, Z+1	; 0x01
 1fa:	89 2b       	or	r24, r25
 1fc:	8d b9       	out	0x0d, r24	; 13
		
		/* set interrupt  */
		
		SPCR |= INTERRUPT_SPI ;
 1fe:	6f 9a       	sbi	0x0d, 7	; 13
		
		/*set interrupt call back function */
		
		PTR_CALL_BACK = a_SPI_cfg->ptr_call_back ;
 200:	83 81       	ldd	r24, Z+3	; 0x03
 202:	94 81       	ldd	r25, Z+4	; 0x04
 204:	90 93 bb 00 	sts	0x00BB, r25
 208:	80 93 ba 00 	sts	0x00BA, r24
	//SS   bit4 OUTPUT
	//MOSI bit5 OUTPUT
	//MISO bit6 INPUT
	//SCK  bit7 OUTPUT

	SPI_input_pins.GPIO = SPI_PORT ;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	89 83       	std	Y+1, r24	; 0x01
	SPI_input_pins.pins = MISO_PIN ;
 210:	90 e4       	ldi	r25, 0x40	; 64
 212:	9a 83       	std	Y+2, r25	; 0x02
	SPI_input_pins.dir = INPUT ;
 214:	1b 82       	std	Y+3, r1	; 0x03
	
	SPI_output_pins.GPIO = SPI_PORT ;
 216:	8c 83       	std	Y+4, r24	; 0x04
	SPI_output_pins.pins =  SCK_PIN|MOSI_PIN|SS_PIN ;
 218:	80 eb       	ldi	r24, 0xB0	; 176
 21a:	8d 83       	std	Y+5, r24	; 0x05
	SPI_output_pins.dir = OUTPUT ;
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	8e 83       	std	Y+6, r24	; 0x06
	
	DIO_init(&SPI_output_pins);
 220:	ce 01       	movw	r24, r28
 222:	04 96       	adiw	r24, 0x04	; 4
 224:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_init>
	DIO_init(&SPI_input_pins);
 228:	ce 01       	movw	r24, r28
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_init>
	
		
	/// enable SPI bit 6
	
	sei();
 230:	78 94       	sei
	SPCR |= Enable_SPI ;
 232:	6e 9a       	sbi	0x0d, 6	; 13
	
}
 234:	26 96       	adiw	r28, 0x06	; 6
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <_SPIInitSlave>:

extern void _SPIInitSlave(SPI_cfg_s * a_SPI_cfg ){
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	00 d0       	rcall	.+0      	; 0x24c <_SPIInitSlave+0x6>
 24c:	00 d0       	rcall	.+0      	; 0x24e <_SPIInitSlave+0x8>
 24e:	00 d0       	rcall	.+0      	; 0x250 <_SPIInitSlave+0xa>
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	fc 01       	movw	r30, r24
	DIO_Cfg_s SPI_output_pins ;
			
			
	
	//// clear status register
	SPSR = ZERO ;
 256:	1e b8       	out	0x0e, r1	; 14
	
	/// clear control mode
	
	SPCR = ZERO ;
 258:	1d b8       	out	0x0d, r1	; 13
	
	
	// master or slave bit 4
	SPCR |= Slave_SPI ;
 25a:	8d b1       	in	r24, 0x0d	; 13
 25c:	8d b9       	out	0x0d, r24	; 13
	
	/// data order update
	
	SPCR|=a_SPI_cfg-> dataorder ;
 25e:	9d b1       	in	r25, 0x0d	; 13
 260:	82 81       	ldd	r24, Z+2	; 0x02
 262:	89 2b       	or	r24, r25
 264:	8d b9       	out	0x0d, r24	; 13
	
	//set clock
	
	SPCR |= a_SPI_cfg-> clockSPI ;
 266:	9d b1       	in	r25, 0x0d	; 13
 268:	80 81       	ld	r24, Z
 26a:	89 2b       	or	r24, r25
 26c:	8d b9       	out	0x0d, r24	; 13
	
	// set phase and polarity
	SPCR |=a_SPI_cfg -> phasePolarityMode ;
 26e:	9d b1       	in	r25, 0x0d	; 13
 270:	81 81       	ldd	r24, Z+1	; 0x01
 272:	89 2b       	or	r24, r25
 274:	8d b9       	out	0x0d, r24	; 13
	
	/* set interrupt  */
	SPCR |= INTERRUPT_SPI ;
 276:	6f 9a       	sbi	0x0d, 7	; 13
	
	/*set interrupt call back function */
		
	PTR_CALL_BACK = a_SPI_cfg->ptr_call_back ;
 278:	83 81       	ldd	r24, Z+3	; 0x03
 27a:	94 81       	ldd	r25, Z+4	; 0x04
 27c:	90 93 bb 00 	sts	0x00BB, r25
 280:	80 93 ba 00 	sts	0x00BA, r24
	//SS   bit4 INPUT
	//MOSI bit5 INPUT
	//MISO bit6 OUTPUT
	//SCK  bit7 INPUT

	SPI_input_pins.GPIO = SPI_PORT ;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	89 83       	std	Y+1, r24	; 0x01
	SPI_input_pins.pins =  SCK_PIN|MOSI_PIN|SS_PIN ;
 288:	90 eb       	ldi	r25, 0xB0	; 176
 28a:	9a 83       	std	Y+2, r25	; 0x02
	SPI_input_pins.dir = INPUT ;
 28c:	1b 82       	std	Y+3, r1	; 0x03

	SPI_output_pins.GPIO = SPI_PORT ;
 28e:	8c 83       	std	Y+4, r24	; 0x04
	SPI_output_pins.pins = MISO_PIN ;
 290:	80 e4       	ldi	r24, 0x40	; 64
 292:	8d 83       	std	Y+5, r24	; 0x05
	SPI_output_pins.dir = OUTPUT ;
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	8e 83       	std	Y+6, r24	; 0x06


	DIO_init(&SPI_output_pins);
 298:	ce 01       	movw	r24, r28
 29a:	04 96       	adiw	r24, 0x04	; 4
 29c:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_init>
	DIO_init(&SPI_input_pins);
 2a0:	ce 01       	movw	r24, r28
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_init>
	

	/// enable SPI bit 6
	sei();
 2a8:	78 94       	sei
	
	SPCR |= Enable_SPI ;
 2aa:	6e 9a       	sbi	0x0d, 6	; 13
	
		
	
}
 2ac:	26 96       	adiw	r28, 0x06	; 6
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	f8 94       	cli
 2b2:	de bf       	out	0x3e, r29	; 62
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	cd bf       	out	0x3d, r28	; 61
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <_SPIRead>:
	}
	return state;
}

extern ERROR_STATUS _SPIRead(uint8_t* data)
{
 2be:	fc 01       	movw	r30, r24
	uint8_t state = E_NOK;
	if(g_u8_RxFlag == TRUE)
 2c0:	90 91 60 00 	lds	r25, 0x0060
 2c4:	91 30       	cpi	r25, 0x01	; 1
 2c6:	31 f4       	brne	.+12     	; 0x2d4 <_SPIRead+0x16>
	{
		*data = SPDR;
 2c8:	8f b1       	in	r24, 0x0f	; 15
 2ca:	80 83       	st	Z, r24
		g_u8_RxFlag = FALSE;
 2cc:	10 92 60 00 	sts	0x0060, r1
		state = E_OK;
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	08 95       	ret
	return state;
}

extern ERROR_STATUS _SPIRead(uint8_t* data)
{
	uint8_t state = E_NOK;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
		*data = SPDR;
		g_u8_RxFlag = FALSE;
		state = E_OK;
	}
	return state;
}
 2d6:	08 95       	ret

000002d8 <SPI_SetCBF>:


void SPI_SetCBF(FunPtr isr_ptr)
{
	PTR_CALL_BACK = isr_ptr;
 2d8:	90 93 bb 00 	sts	0x00BB, r25
 2dc:	80 93 ba 00 	sts	0x00BA, r24
 2e0:	08 95       	ret

000002e2 <__vector_12>:
}

ISR(SPI_STC_vect)
{
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	2f 93       	push	r18
 2ee:	3f 93       	push	r19
 2f0:	4f 93       	push	r20
 2f2:	5f 93       	push	r21
 2f4:	6f 93       	push	r22
 2f6:	7f 93       	push	r23
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	g_u8_RxFlag = TRUE;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 60 00 	sts	0x0060, r24
	PTR_CALL_BACK();
 30a:	e0 91 ba 00 	lds	r30, 0x00BA
 30e:	f0 91 bb 00 	lds	r31, 0x00BB
 312:	09 95       	icall
}
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	bf 91       	pop	r27
 31a:	af 91       	pop	r26
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	7f 91       	pop	r23
 322:	6f 91       	pop	r22
 324:	5f 91       	pop	r21
 326:	4f 91       	pop	r20
 328:	3f 91       	pop	r19
 32a:	2f 91       	pop	r18
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	2f 93       	push	r18
 342:	3f 93       	push	r19
 344:	4f 93       	push	r20
 346:	5f 93       	push	r21
 348:	6f 93       	push	r22
 34a:	7f 93       	push	r23
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
 350:	af 93       	push	r26
 352:	bf 93       	push	r27
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
 358:	e0 91 6e 00 	lds	r30, 0x006E
 35c:	f0 91 6f 00 	lds	r31, 0x006F
 360:	30 97       	sbiw	r30, 0x00	; 0
 362:	09 f0       	breq	.+2      	; 0x366 <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
 364:	09 95       	icall
	}
}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	bf 91       	pop	r27
 36c:	af 91       	pop	r26
 36e:	9f 91       	pop	r25
 370:	8f 91       	pop	r24
 372:	7f 91       	pop	r23
 374:	6f 91       	pop	r22
 376:	5f 91       	pop	r21
 378:	4f 91       	pop	r20
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	2f 93       	push	r18
 394:	3f 93       	push	r19
 396:	4f 93       	push	r20
 398:	5f 93       	push	r21
 39a:	6f 93       	push	r22
 39c:	7f 93       	push	r23
 39e:	8f 93       	push	r24
 3a0:	9f 93       	push	r25
 3a2:	af 93       	push	r26
 3a4:	bf 93       	push	r27
 3a6:	ef 93       	push	r30
 3a8:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
 3aa:	e0 91 6c 00 	lds	r30, 0x006C
 3ae:	f0 91 6d 00 	lds	r31, 0x006D
 3b2:	30 97       	sbiw	r30, 0x00	; 0
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
 3b6:	09 95       	icall
	}
}
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	7f 91       	pop	r23
 3c6:	6f 91       	pop	r22
 3c8:	5f 91       	pop	r21
 3ca:	4f 91       	pop	r20
 3cc:	3f 91       	pop	r19
 3ce:	2f 91       	pop	r18
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	2f 93       	push	r18
 3e6:	3f 93       	push	r19
 3e8:	4f 93       	push	r20
 3ea:	5f 93       	push	r21
 3ec:	6f 93       	push	r22
 3ee:	7f 93       	push	r23
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	af 93       	push	r26
 3f6:	bf 93       	push	r27
 3f8:	ef 93       	push	r30
 3fa:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
 3fc:	e0 91 66 00 	lds	r30, 0x0066
 400:	f0 91 67 00 	lds	r31, 0x0067
 404:	30 97       	sbiw	r30, 0x00	; 0
 406:	09 f0       	breq	.+2      	; 0x40a <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
 408:	09 95       	icall
	}
}
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	bf 91       	pop	r27
 410:	af 91       	pop	r26
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	7f 91       	pop	r23
 418:	6f 91       	pop	r22
 41a:	5f 91       	pop	r21
 41c:	4f 91       	pop	r20
 41e:	3f 91       	pop	r19
 420:	2f 91       	pop	r18
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
 436:	2f 93       	push	r18
 438:	3f 93       	push	r19
 43a:	4f 93       	push	r20
 43c:	5f 93       	push	r21
 43e:	6f 93       	push	r22
 440:	7f 93       	push	r23
 442:	8f 93       	push	r24
 444:	9f 93       	push	r25
 446:	af 93       	push	r26
 448:	bf 93       	push	r27
 44a:	ef 93       	push	r30
 44c:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
 44e:	e0 91 64 00 	lds	r30, 0x0064
 452:	f0 91 65 00 	lds	r31, 0x0065
 456:	30 97       	sbiw	r30, 0x00	; 0
 458:	09 f0       	breq	.+2      	; 0x45c <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
 45a:	09 95       	icall
	}
}
 45c:	ff 91       	pop	r31
 45e:	ef 91       	pop	r30
 460:	bf 91       	pop	r27
 462:	af 91       	pop	r26
 464:	9f 91       	pop	r25
 466:	8f 91       	pop	r24
 468:	7f 91       	pop	r23
 46a:	6f 91       	pop	r22
 46c:	5f 91       	pop	r21
 46e:	4f 91       	pop	r20
 470:	3f 91       	pop	r19
 472:	2f 91       	pop	r18
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	2f 93       	push	r18
 48a:	3f 93       	push	r19
 48c:	4f 93       	push	r20
 48e:	5f 93       	push	r21
 490:	6f 93       	push	r22
 492:	7f 93       	push	r23
 494:	8f 93       	push	r24
 496:	9f 93       	push	r25
 498:	af 93       	push	r26
 49a:	bf 93       	push	r27
 49c:	ef 93       	push	r30
 49e:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
 4a0:	e0 91 6a 00 	lds	r30, 0x006A
 4a4:	f0 91 6b 00 	lds	r31, 0x006B
 4a8:	30 97       	sbiw	r30, 0x00	; 0
 4aa:	09 f0       	breq	.+2      	; 0x4ae <__vector_9+0x30>
	{
		Ptr_Timer1_OV();
 4ac:	09 95       	icall
	}
}
 4ae:	ff 91       	pop	r31
 4b0:	ef 91       	pop	r30
 4b2:	bf 91       	pop	r27
 4b4:	af 91       	pop	r26
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	7f 91       	pop	r23
 4bc:	6f 91       	pop	r22
 4be:	5f 91       	pop	r21
 4c0:	4f 91       	pop	r20
 4c2:	3f 91       	pop	r19
 4c4:	2f 91       	pop	r18
 4c6:	0f 90       	pop	r0
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	0f 90       	pop	r0
 4cc:	1f 90       	pop	r1
 4ce:	18 95       	reti

000004d0 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 4d0:	1f 92       	push	r1
 4d2:	0f 92       	push	r0
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	0f 92       	push	r0
 4d8:	11 24       	eor	r1, r1
 4da:	2f 93       	push	r18
 4dc:	3f 93       	push	r19
 4de:	4f 93       	push	r20
 4e0:	5f 93       	push	r21
 4e2:	6f 93       	push	r22
 4e4:	7f 93       	push	r23
 4e6:	8f 93       	push	r24
 4e8:	9f 93       	push	r25
 4ea:	af 93       	push	r26
 4ec:	bf 93       	push	r27
 4ee:	ef 93       	push	r30
 4f0:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 4f2:	e0 91 68 00 	lds	r30, 0x0068
 4f6:	f0 91 69 00 	lds	r31, 0x0069
 4fa:	30 97       	sbiw	r30, 0x00	; 0
 4fc:	09 f0       	breq	.+2      	; 0x500 <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
 4fe:	09 95       	icall
	}	
}
 500:	ff 91       	pop	r31
 502:	ef 91       	pop	r30
 504:	bf 91       	pop	r27
 506:	af 91       	pop	r26
 508:	9f 91       	pop	r25
 50a:	8f 91       	pop	r24
 50c:	7f 91       	pop	r23
 50e:	6f 91       	pop	r22
 510:	5f 91       	pop	r21
 512:	4f 91       	pop	r20
 514:	3f 91       	pop	r19
 516:	2f 91       	pop	r18
 518:	0f 90       	pop	r0
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	0f 90       	pop	r0
 51e:	1f 90       	pop	r1
 520:	18 95       	reti

00000522 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 522:	1f 92       	push	r1
 524:	0f 92       	push	r0
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	0f 92       	push	r0
 52a:	11 24       	eor	r1, r1
 52c:	2f 93       	push	r18
 52e:	3f 93       	push	r19
 530:	4f 93       	push	r20
 532:	5f 93       	push	r21
 534:	6f 93       	push	r22
 536:	7f 93       	push	r23
 538:	8f 93       	push	r24
 53a:	9f 93       	push	r25
 53c:	af 93       	push	r26
 53e:	bf 93       	push	r27
 540:	ef 93       	push	r30
 542:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 544:	e0 91 68 00 	lds	r30, 0x0068
 548:	f0 91 69 00 	lds	r31, 0x0069
 54c:	30 97       	sbiw	r30, 0x00	; 0
 54e:	09 f0       	breq	.+2      	; 0x552 <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 550:	09 95       	icall
	}
}
 552:	ff 91       	pop	r31
 554:	ef 91       	pop	r30
 556:	bf 91       	pop	r27
 558:	af 91       	pop	r26
 55a:	9f 91       	pop	r25
 55c:	8f 91       	pop	r24
 55e:	7f 91       	pop	r23
 560:	6f 91       	pop	r22
 562:	5f 91       	pop	r21
 564:	4f 91       	pop	r20
 566:	3f 91       	pop	r19
 568:	2f 91       	pop	r18
 56a:	0f 90       	pop	r0
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	0f 90       	pop	r0
 570:	1f 90       	pop	r1
 572:	18 95       	reti

00000574 <UART_Init>:
FunPtr Ptr_UART_TX = NULL;
FunPtr Ptr_UART_RX = NULL;


void UART_Init(UART_cfg* uart_cfg)
{
 574:	cf 92       	push	r12
 576:	df 92       	push	r13
 578:	ef 92       	push	r14
 57a:	ff 92       	push	r15
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	ec 01       	movw	r28, r24
	uint8_t uart_control = 0x80;
	// Set The UART Baud Rate
	UBRRL = ((F_cpu/(16*uart_cfg->baudrate)) - 1);
 582:	8f 81       	ldd	r24, Y+7	; 0x07
 584:	98 85       	ldd	r25, Y+8	; 0x08
 586:	a9 85       	ldd	r26, Y+9	; 0x09
 588:	ba 85       	ldd	r27, Y+10	; 0x0a
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	aa 1f       	adc	r26, r26
 590:	bb 1f       	adc	r27, r27
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	aa 1f       	adc	r26, r26
 598:	bb 1f       	adc	r27, r27
 59a:	9c 01       	movw	r18, r24
 59c:	ad 01       	movw	r20, r26
 59e:	22 0f       	add	r18, r18
 5a0:	33 1f       	adc	r19, r19
 5a2:	44 1f       	adc	r20, r20
 5a4:	55 1f       	adc	r21, r21
 5a6:	22 0f       	add	r18, r18
 5a8:	33 1f       	adc	r19, r19
 5aa:	44 1f       	adc	r20, r20
 5ac:	55 1f       	adc	r21, r21
 5ae:	0f 2e       	mov	r0, r31
 5b0:	c1 2c       	mov	r12, r1
 5b2:	f4 e2       	ldi	r31, 0x24	; 36
 5b4:	df 2e       	mov	r13, r31
 5b6:	f4 ef       	ldi	r31, 0xF4	; 244
 5b8:	ef 2e       	mov	r14, r31
 5ba:	f1 2c       	mov	r15, r1
 5bc:	f0 2d       	mov	r31, r0
 5be:	c7 01       	movw	r24, r14
 5c0:	b6 01       	movw	r22, r12
 5c2:	0e 94 cf 04 	call	0x99e	; 0x99e <__udivmodsi4>
 5c6:	21 50       	subi	r18, 0x01	; 1
 5c8:	29 b9       	out	0x09, r18	; 9
	UBRRH = ((F_cpu/(16*uart_cfg->baudrate)) - 1)>>8;
 5ca:	8f 81       	ldd	r24, Y+7	; 0x07
 5cc:	98 85       	ldd	r25, Y+8	; 0x08
 5ce:	a9 85       	ldd	r26, Y+9	; 0x09
 5d0:	ba 85       	ldd	r27, Y+10	; 0x0a
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	aa 1f       	adc	r26, r26
 5d8:	bb 1f       	adc	r27, r27
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	aa 1f       	adc	r26, r26
 5e0:	bb 1f       	adc	r27, r27
 5e2:	9c 01       	movw	r18, r24
 5e4:	ad 01       	movw	r20, r26
 5e6:	22 0f       	add	r18, r18
 5e8:	33 1f       	adc	r19, r19
 5ea:	44 1f       	adc	r20, r20
 5ec:	55 1f       	adc	r21, r21
 5ee:	22 0f       	add	r18, r18
 5f0:	33 1f       	adc	r19, r19
 5f2:	44 1f       	adc	r20, r20
 5f4:	55 1f       	adc	r21, r21
 5f6:	c7 01       	movw	r24, r14
 5f8:	b6 01       	movw	r22, r12
 5fa:	0e 94 cf 04 	call	0x99e	; 0x99e <__udivmodsi4>
 5fe:	da 01       	movw	r26, r20
 600:	c9 01       	movw	r24, r18
 602:	01 97       	sbiw	r24, 0x01	; 1
 604:	a1 09       	sbc	r26, r1
 606:	b1 09       	sbc	r27, r1
 608:	89 2f       	mov	r24, r25
 60a:	9a 2f       	mov	r25, r26
 60c:	ab 2f       	mov	r26, r27
 60e:	bb 27       	eor	r27, r27
 610:	80 bd       	out	0x20, r24	; 32
	// Set The UART Mode OF Operation
	UCSRB |= (uart_cfg->mode | uart_cfg->uartInterrupts);
 612:	9a b1       	in	r25, 0x0a	; 10
 614:	88 81       	ld	r24, Y
 616:	89 2b       	or	r24, r25
 618:	9e 81       	ldd	r25, Y+6	; 0x06
 61a:	89 2b       	or	r24, r25
 61c:	8a b9       	out	0x0a, r24	; 10
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
	UCSRC |= uart_control;
 61e:	20 b5       	in	r18, 0x20	; 32
	// Set The UART Data Sampling Edge
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
 620:	8b 81       	ldd	r24, Y+3	; 0x03
 622:	9d 81       	ldd	r25, Y+5	; 0x05
 624:	89 2b       	or	r24, r25
 626:	80 68       	ori	r24, 0x80	; 128
 628:	99 81       	ldd	r25, Y+1	; 0x01
 62a:	89 2b       	or	r24, r25
 62c:	9a 81       	ldd	r25, Y+2	; 0x02
 62e:	89 2b       	or	r24, r25
 630:	9c 81       	ldd	r25, Y+4	; 0x04
 632:	89 2b       	or	r24, r25
	UCSRC |= uart_control;
 634:	82 2b       	or	r24, r18
 636:	80 bd       	out	0x20, r24	; 32
	SREG  |= (0x80);
 638:	8f b7       	in	r24, 0x3f	; 63
 63a:	80 68       	ori	r24, 0x80	; 128
 63c:	8f bf       	out	0x3f, r24	; 63
}
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	ff 90       	pop	r15
 644:	ef 90       	pop	r14
 646:	df 90       	pop	r13
 648:	cf 90       	pop	r12
 64a:	08 95       	ret

0000064c <UART_Read>:

uint8_t UART_Read(void)
{
	return UDR;
 64c:	8c b1       	in	r24, 0x0c	; 12
}
 64e:	08 95       	ret

00000650 <UART_Write>:

void UART_Write(uint8_t data)
{
	// Wait For Empty Transmit Buffer
	while(!(UCSRA & (1<<5)));
 650:	5d 9b       	sbis	0x0b, 5	; 11
 652:	fe cf       	rjmp	.-4      	; 0x650 <UART_Write>
	// Write The Data To The Buffer & Send!
	UDR = data;
 654:	8c b9       	out	0x0c, r24	; 12
 656:	08 95       	ret

00000658 <UART_SetTX>:
/*-----------[ Timers Set CallBack Functions ]-----------*/
/*=======================================================*/

void UART_SetTX(FunPtr Ptr_ISR)
{
	Ptr_UART_TX = Ptr_ISR;
 658:	90 93 73 00 	sts	0x0073, r25
 65c:	80 93 72 00 	sts	0x0072, r24
 660:	08 95       	ret

00000662 <UART_SetRX>:
}

void UART_SetRX(FunPtr Ptr_ISR)
{
	Ptr_UART_RX = Ptr_ISR;
 662:	90 93 71 00 	sts	0x0071, r25
 666:	80 93 70 00 	sts	0x0070, r24
 66a:	08 95       	ret

0000066c <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
 66c:	1f 92       	push	r1
 66e:	0f 92       	push	r0
 670:	0f b6       	in	r0, 0x3f	; 63
 672:	0f 92       	push	r0
 674:	11 24       	eor	r1, r1
 676:	2f 93       	push	r18
 678:	3f 93       	push	r19
 67a:	4f 93       	push	r20
 67c:	5f 93       	push	r21
 67e:	6f 93       	push	r22
 680:	7f 93       	push	r23
 682:	8f 93       	push	r24
 684:	9f 93       	push	r25
 686:	af 93       	push	r26
 688:	bf 93       	push	r27
 68a:	ef 93       	push	r30
 68c:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
 68e:	e0 91 70 00 	lds	r30, 0x0070
 692:	f0 91 71 00 	lds	r31, 0x0071
 696:	30 97       	sbiw	r30, 0x00	; 0
 698:	09 f0       	breq	.+2      	; 0x69c <__vector_13+0x30>
	{
		Ptr_UART_RX();
 69a:	09 95       	icall
	}
}
 69c:	ff 91       	pop	r31
 69e:	ef 91       	pop	r30
 6a0:	bf 91       	pop	r27
 6a2:	af 91       	pop	r26
 6a4:	9f 91       	pop	r25
 6a6:	8f 91       	pop	r24
 6a8:	7f 91       	pop	r23
 6aa:	6f 91       	pop	r22
 6ac:	5f 91       	pop	r21
 6ae:	4f 91       	pop	r20
 6b0:	3f 91       	pop	r19
 6b2:	2f 91       	pop	r18
 6b4:	0f 90       	pop	r0
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	0f 90       	pop	r0
 6ba:	1f 90       	pop	r1
 6bc:	18 95       	reti

000006be <__vector_15>:

ISR(USART_TXC_vect)
{
 6be:	1f 92       	push	r1
 6c0:	0f 92       	push	r0
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	0f 92       	push	r0
 6c6:	11 24       	eor	r1, r1
 6c8:	2f 93       	push	r18
 6ca:	3f 93       	push	r19
 6cc:	4f 93       	push	r20
 6ce:	5f 93       	push	r21
 6d0:	6f 93       	push	r22
 6d2:	7f 93       	push	r23
 6d4:	8f 93       	push	r24
 6d6:	9f 93       	push	r25
 6d8:	af 93       	push	r26
 6da:	bf 93       	push	r27
 6dc:	ef 93       	push	r30
 6de:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
 6e0:	e0 91 72 00 	lds	r30, 0x0072
 6e4:	f0 91 73 00 	lds	r31, 0x0073
 6e8:	30 97       	sbiw	r30, 0x00	; 0
 6ea:	09 f0       	breq	.+2      	; 0x6ee <__vector_15+0x30>
	{
		Ptr_UART_TX();
 6ec:	09 95       	icall
	}
 6ee:	ff 91       	pop	r31
 6f0:	ef 91       	pop	r30
 6f2:	bf 91       	pop	r27
 6f4:	af 91       	pop	r26
 6f6:	9f 91       	pop	r25
 6f8:	8f 91       	pop	r24
 6fa:	7f 91       	pop	r23
 6fc:	6f 91       	pop	r22
 6fe:	5f 91       	pop	r21
 700:	4f 91       	pop	r20
 702:	3f 91       	pop	r19
 704:	2f 91       	pop	r18
 706:	0f 90       	pop	r0
 708:	0f be       	out	0x3f, r0	; 63
 70a:	0f 90       	pop	r0
 70c:	1f 90       	pop	r1
 70e:	18 95       	reti

00000710 <BCM_Tx_ISR_cbf>:
/*===================================================================================*/

/*------------[ BCM CallBacks]------------*/
/* BCM Transmit ISR Call-Back Function */
static void BCM_Tx_ISR_cbf(void)
{	if (g_BCM_EXcfg.FSM_State == SendingByte_State)
 710:	80 91 7c 00 	lds	r24, 0x007C
 714:	82 30       	cpi	r24, 0x02	; 2
 716:	49 f4       	brne	.+18     	; 0x72a <BCM_Tx_ISR_cbf+0x1a>
	{
		g_BCM_EXcfg.Count++;
 718:	e8 e7       	ldi	r30, 0x78	; 120
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	84 85       	ldd	r24, Z+12	; 0x0c
 71e:	95 85       	ldd	r25, Z+13	; 0x0d
 720:	01 96       	adiw	r24, 0x01	; 1
 722:	95 87       	std	Z+13, r25	; 0x0d
 724:	84 87       	std	Z+12, r24	; 0x0c
		g_BCM_EXcfg.FSM_State = SendComplete_State;
 726:	83 e0       	ldi	r24, 0x03	; 3
 728:	84 83       	std	Z+4, r24	; 0x04
 72a:	08 95       	ret

0000072c <BCM_Rx_ISR_cbf>:
	}
}

/* BCM Receive ISR Call-Back Function */
static void BCM_Rx_ISR_cbf(void)
{
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	1f 92       	push	r1
 732:	cd b7       	in	r28, 0x3d	; 61
 734:	de b7       	in	r29, 0x3e	; 62
	uint8_t a_RX_Byte;
	switch(g_BCM_EXcfg.Protocol)
 736:	80 91 7a 00 	lds	r24, 0x007A
 73a:	88 23       	and	r24, r24
 73c:	19 f0       	breq	.+6      	; 0x744 <BCM_Rx_ISR_cbf+0x18>
 73e:	81 30       	cpi	r24, 0x01	; 1
 740:	29 f0       	breq	.+10     	; 0x74c <BCM_Rx_ISR_cbf+0x20>
 742:	08 c0       	rjmp	.+16     	; 0x754 <BCM_Rx_ISR_cbf+0x28>
	{
		case UART_Protocol:
		{
			a_RX_Byte = UART_Read();
 744:	0e 94 26 03 	call	0x64c	; 0x64c <UART_Read>
 748:	89 83       	std	Y+1, r24	; 0x01
			break;
 74a:	04 c0       	rjmp	.+8      	; 0x754 <BCM_Rx_ISR_cbf+0x28>
		}
		case SPI_Protocol:
		{
			_SPIRead(&a_RX_Byte);
 74c:	ce 01       	movw	r24, r28
 74e:	01 96       	adiw	r24, 0x01	; 1
 750:	0e 94 5f 01 	call	0x2be	; 0x2be <_SPIRead>
		default:
			break;
	}
	
	/* Debug Point */
	TCNT2 = a_RX_Byte;
 754:	89 81       	ldd	r24, Y+1	; 0x01
 756:	84 bd       	out	0x24, r24	; 36
	/* Debug Point */
	
	/* Read & Check The BCM Received ID */
	if(g_BCM_EXcfg.Count == 0)
 758:	80 91 84 00 	lds	r24, 0x0084
 75c:	90 91 85 00 	lds	r25, 0x0085
 760:	00 97       	sbiw	r24, 0x00	; 0
 762:	b1 f4       	brne	.+44     	; 0x790 <BCM_Rx_ISR_cbf+0x64>
	{
		g_Rx_ID = a_RX_Byte;
 764:	89 81       	ldd	r24, Y+1	; 0x01
 766:	80 93 77 00 	sts	0x0077, r24
	
		if(g_Rx_ID == BCM_ID)
 76a:	90 91 77 00 	lds	r25, 0x0077
 76e:	91 34       	cpi	r25, 0x41	; 65
 770:	61 f4       	brne	.+24     	; 0x78a <BCM_Rx_ISR_cbf+0x5e>
		{
			/* Debug Point */
			TCNT0 = a_RX_Byte;
 772:	82 bf       	out	0x32, r24	; 50
			/* Debug Point */
			
			g_ID_State = S_OK;
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	80 93 76 00 	sts	0x0076, r24
			g_BCM_EXcfg.Count++;
 77a:	e8 e7       	ldi	r30, 0x78	; 120
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	84 85       	ldd	r24, Z+12	; 0x0c
 780:	95 85       	ldd	r25, Z+13	; 0x0d
 782:	01 96       	adiw	r24, 0x01	; 1
 784:	95 87       	std	Z+13, r25	; 0x0d
 786:	84 87       	std	Z+12, r24	; 0x0c
 788:	59 c0       	rjmp	.+178    	; 0x83c <BCM_Rx_ISR_cbf+0x110>
		}
		else
		{
			g_ID_State = S_NOK;
 78a:	10 92 76 00 	sts	0x0076, r1
 78e:	56 c0       	rjmp	.+172    	; 0x83c <BCM_Rx_ISR_cbf+0x110>
	}
	/*-------------------[ ID IS CHECKED ]------------------*/
	/*------------------------------------------------------*/
	/*-------------------[ Save & CHECK MSG Len ]------------------*/
	/* Read & Check The BCM Received Data Length */
	else if(g_BCM_EXcfg.Count == 1)
 790:	81 30       	cpi	r24, 0x01	; 1
 792:	91 05       	cpc	r25, r1
 794:	41 f5       	brne	.+80     	; 0x7e6 <BCM_Rx_ISR_cbf+0xba>
	{
		if(a_RX_Byte > g_BCM_EXcfg.Buf_Len)
 796:	89 81       	ldd	r24, Y+1	; 0x01
 798:	48 2f       	mov	r20, r24
 79a:	50 e0       	ldi	r21, 0x00	; 0
 79c:	20 91 80 00 	lds	r18, 0x0080
 7a0:	30 91 81 00 	lds	r19, 0x0081
 7a4:	24 17       	cp	r18, r20
 7a6:	35 07       	cpc	r19, r21
 7a8:	78 f4       	brcc	.+30     	; 0x7c8 <BCM_Rx_ISR_cbf+0x9c>
		{
			g_LEN_State = S_NOK;
 7aa:	10 92 75 00 	sts	0x0075, r1
			g_BCM_EXcfg.FSM_State = IDLE_State;
 7ae:	e8 e7       	ldi	r30, 0x78	; 120
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	84 83       	std	Z+4, r24	; 0x04
			g_BCM_EXcfg.Count = ZERO;
 7b6:	15 86       	std	Z+13, r1	; 0x0d
 7b8:	14 86       	std	Z+12, r1	; 0x0c
			g_BCM_EXcfg.BCM_notify_cbf(g_LEN_State);
 7ba:	80 91 75 00 	lds	r24, 0x0075
 7be:	06 84       	ldd	r0, Z+14	; 0x0e
 7c0:	f7 85       	ldd	r31, Z+15	; 0x0f
 7c2:	e0 2d       	mov	r30, r0
 7c4:	09 95       	icall
 7c6:	3a c0       	rjmp	.+116    	; 0x83c <BCM_Rx_ISR_cbf+0x110>
		}
		else
		{
			/* Debug Point */
			TCNT0 = a_RX_Byte;
 7c8:	82 bf       	out	0x32, r24	; 50
			/* Debug Point */
			
			g_BCM_EXcfg.MSG_Len = a_RX_Byte;
 7ca:	e8 e7       	ldi	r30, 0x78	; 120
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	89 81       	ldd	r24, Y+1	; 0x01
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	93 87       	std	Z+11, r25	; 0x0b
 7d4:	82 87       	std	Z+10, r24	; 0x0a
			g_BCM_EXcfg.Count++;
 7d6:	84 85       	ldd	r24, Z+12	; 0x0c
 7d8:	95 85       	ldd	r25, Z+13	; 0x0d
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	95 87       	std	Z+13, r25	; 0x0d
 7de:	84 87       	std	Z+12, r24	; 0x0c
			g_BCM_EXcfg.FSM_State = ReceivingByte_State;
 7e0:	84 e0       	ldi	r24, 0x04	; 4
 7e2:	84 83       	std	Z+4, r24	; 0x04
 7e4:	2b c0       	rjmp	.+86     	; 0x83c <BCM_Rx_ISR_cbf+0x110>
		}
	}
	else if(g_BCM_EXcfg.Count-2 < g_BCM_EXcfg.MSG_Len)
 7e6:	9c 01       	movw	r18, r24
 7e8:	22 50       	subi	r18, 0x02	; 2
 7ea:	31 09       	sbc	r19, r1
 7ec:	40 91 82 00 	lds	r20, 0x0082
 7f0:	50 91 83 00 	lds	r21, 0x0083
 7f4:	24 17       	cp	r18, r20
 7f6:	35 07       	cpc	r19, r21
 7f8:	a8 f4       	brcc	.+42     	; 0x824 <BCM_Rx_ISR_cbf+0xf8>
	{
		g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2] = a_RX_Byte;
 7fa:	89 81       	ldd	r24, Y+1	; 0x01
 7fc:	e8 e7       	ldi	r30, 0x78	; 120
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	46 81       	ldd	r20, Z+6	; 0x06
 802:	57 81       	ldd	r21, Z+7	; 0x07
 804:	da 01       	movw	r26, r20
 806:	a2 0f       	add	r26, r18
 808:	b3 1f       	adc	r27, r19
 80a:	8c 93       	st	X, r24
		g_CS_Calculated += a_RX_Byte;
 80c:	90 91 74 00 	lds	r25, 0x0074
 810:	89 81       	ldd	r24, Y+1	; 0x01
 812:	89 0f       	add	r24, r25
 814:	80 93 74 00 	sts	0x0074, r24
		g_BCM_EXcfg.Count++;
 818:	84 85       	ldd	r24, Z+12	; 0x0c
 81a:	95 85       	ldd	r25, Z+13	; 0x0d
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	95 87       	std	Z+13, r25	; 0x0d
 820:	84 87       	std	Z+12, r24	; 0x0c
 822:	0c c0       	rjmp	.+24     	; 0x83c <BCM_Rx_ISR_cbf+0x110>
	}
	else if(g_BCM_EXcfg.Count-2 == g_BCM_EXcfg.MSG_Len)
 824:	24 17       	cp	r18, r20
 826:	35 07       	cpc	r19, r21
 828:	49 f4       	brne	.+18     	; 0x83c <BCM_Rx_ISR_cbf+0x110>
	{
		g_BCM_EXcfg.CheckSum = a_RX_Byte;
 82a:	e8 e7       	ldi	r30, 0x78	; 120
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	29 81       	ldd	r18, Y+1	; 0x01
 830:	25 83       	std	Z+5, r18	; 0x05
		g_BCM_EXcfg.Count++;
 832:	01 96       	adiw	r24, 0x01	; 1
 834:	95 87       	std	Z+13, r25	; 0x0d
 836:	84 87       	std	Z+12, r24	; 0x0c
		g_BCM_EXcfg.FSM_State = ReceiveComplete_State;
 838:	85 e0       	ldi	r24, 0x05	; 5
 83a:	84 83       	std	Z+4, r24	; 0x04
	}
	else
	{	}
}
 83c:	0f 90       	pop	r0
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	08 95       	ret

00000844 <BCM_Rx_Dispatcher>:
/*---------[ BCM Dispatchers]---------*/

/* RX Dispatcher */
void BCM_Rx_Dispatcher(void)
{
	if(g_BCM_EXcfg.FSM_State == ReceiveComplete_State)
 844:	80 91 7c 00 	lds	r24, 0x007C
 848:	85 30       	cpi	r24, 0x05	; 5
 84a:	99 f4       	brne	.+38     	; 0x872 <__stack+0x13>
	{	
		if(g_BCM_EXcfg.CheckSum == g_CS_Calculated)
 84c:	80 91 74 00 	lds	r24, 0x0074
 850:	90 91 7d 00 	lds	r25, 0x007D
 854:	98 13       	cpse	r25, r24
 856:	0d c0       	rjmp	.+26     	; 0x872 <__stack+0x13>
		{
			/* Debug Point */
			TCNT0 = 0xBB;
 858:	8b eb       	ldi	r24, 0xBB	; 187
 85a:	82 bf       	out	0x32, r24	; 50
			/* Debug Point */
				
			g_BCM_EXcfg.Count = ZERO;
 85c:	e8 e7       	ldi	r30, 0x78	; 120
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	15 86       	std	Z+13, r1	; 0x0d
 862:	14 86       	std	Z+12, r1	; 0x0c
			g_BCM_EXcfg.FSM_State = IDLE_State;
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	84 83       	std	Z+4, r24	; 0x04
			g_BCM_EXcfg.BCM_notify_cbf(E_OK);
 868:	06 84       	ldd	r0, Z+14	; 0x0e
 86a:	f7 85       	ldd	r31, Z+15	; 0x0f
 86c:	e0 2d       	mov	r30, r0
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	09 95       	icall
 872:	08 95       	ret

00000874 <BCM_Init>:
}
/*------------------------------------*/

/* BCM Initialization Routine */
ERROR_STATUS BCM_Init(BCM_cfg_s* a_BCM)
{
 874:	cf 93       	push	r28
 876:	df 93       	push	r29
 878:	cd b7       	in	r28, 0x3d	; 61
 87a:	de b7       	in	r29, 0x3e	; 62
 87c:	60 97       	sbiw	r28, 0x10	; 16
 87e:	0f b6       	in	r0, 0x3f	; 63
 880:	f8 94       	cli
 882:	de bf       	out	0x3e, r29	; 62
 884:	0f be       	out	0x3f, r0	; 63
 886:	cd bf       	out	0x3d, r28	; 61
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	UART_cfg  a_BCM_UART;
	SPI_cfg_s a_BCM_SPI; 
	
	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_BCM != NULL)
 888:	00 97       	sbiw	r24, 0x00	; 0
 88a:	09 f4       	brne	.+2      	; 0x88e <BCM_Init+0x1a>
 88c:	69 c0       	rjmp	.+210    	; 0x960 <BCM_Init+0xec>
 88e:	dc 01       	movw	r26, r24
	{
		/*--------[ Add The BCM CFG To The Working List ]--------*/
		g_BCM_EXcfg.BCM_CH_ID = a_BCM->BCM_CH_ID;
 890:	11 96       	adiw	r26, 0x01	; 1
 892:	8c 91       	ld	r24, X
 894:	11 97       	sbiw	r26, 0x01	; 1
 896:	e8 e7       	ldi	r30, 0x78	; 120
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	81 83       	std	Z+1, r24	; 0x01
		g_BCM_EXcfg.Mode      = a_BCM->Mode;
 89c:	9c 91       	ld	r25, X
 89e:	90 83       	st	Z, r25
		g_BCM_EXcfg.Protocol  = a_BCM->Protocol;
 8a0:	12 96       	adiw	r26, 0x02	; 2
 8a2:	8c 91       	ld	r24, X
 8a4:	82 83       	std	Z+2, r24	; 0x02
		g_BCM_EXcfg.FSM_State = IDLE_State;
 8a6:	21 e0       	ldi	r18, 0x01	; 1
 8a8:	24 83       	std	Z+4, r18	; 0x04
		g_BCM_EXcfg.Count     = ZERO;
 8aa:	15 86       	std	Z+13, r1	; 0x0d
 8ac:	14 86       	std	Z+12, r1	; 0x0c
		g_BCM_EXcfg.CheckSum  = ZERO;
 8ae:	15 82       	std	Z+5, r1	; 0x05
		g_BCM_EXcfg.Buf_Len   = ZERO;
 8b0:	11 86       	std	Z+9, r1	; 0x09
 8b2:	10 86       	std	Z+8, r1	; 0x08
		g_BCM_EXcfg.MSG_Len   = ZERO;
 8b4:	13 86       	std	Z+11, r1	; 0x0b
 8b6:	12 86       	std	Z+10, r1	; 0x0a
		
		/*--------[ Check The BCM HW Communication Protocol ]--------*/
		switch(g_BCM_EXcfg.Protocol)
 8b8:	88 23       	and	r24, r24
 8ba:	19 f0       	breq	.+6      	; 0x8c2 <BCM_Init+0x4e>
 8bc:	81 30       	cpi	r24, 0x01	; 1
 8be:	59 f1       	breq	.+86     	; 0x916 <BCM_Init+0xa2>
 8c0:	51 c0       	rjmp	.+162    	; 0x964 <BCM_Init+0xf0>
		{
			/*----------------------[ UART CASE START ]---------------------*/
			case UART_Protocol:
			{
				a_BCM_UART.baudrate   = BCM_UART_BaudRate;
 8c2:	40 e8       	ldi	r20, 0x80	; 128
 8c4:	55 e2       	ldi	r21, 0x25	; 37
 8c6:	60 e0       	ldi	r22, 0x00	; 0
 8c8:	70 e0       	ldi	r23, 0x00	; 0
 8ca:	48 87       	std	Y+8, r20	; 0x08
 8cc:	59 87       	std	Y+9, r21	; 0x09
 8ce:	6a 87       	std	Y+10, r22	; 0x0a
 8d0:	7b 87       	std	Y+11, r23	; 0x0b
				a_BCM_UART.dataBits   = UART_Bits_8;
 8d2:	86 e0       	ldi	r24, 0x06	; 6
 8d4:	8a 83       	std	Y+2, r24	; 0x02
				a_BCM_UART.stopBits   = StopBits_1;
 8d6:	1d 82       	std	Y+5, r1	; 0x05
				a_BCM_UART.parity     = No_Parity;
 8d8:	1b 82       	std	Y+3, r1	; 0x03
				a_BCM_UART.sampleEdge = RisingEdg;
 8da:	1e 82       	std	Y+6, r1	; 0x06
				a_BCM_UART.uartSync   = UART_Async;
 8dc:	1c 82       	std	Y+4, r1	; 0x04
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
 8de:	99 23       	and	r25, r25
 8e0:	19 f0       	breq	.+6      	; 0x8e8 <BCM_Init+0x74>
 8e2:	91 30       	cpi	r25, 0x01	; 1
 8e4:	51 f0       	breq	.+20     	; 0x8fa <BCM_Init+0x86>
 8e6:	11 c0       	rjmp	.+34     	; 0x90a <BCM_Init+0x96>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_UART.mode = UART_TX;
 8e8:	88 e0       	ldi	r24, 0x08	; 8
 8ea:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnTx;
 8ec:	80 e4       	ldi	r24, 0x40	; 64
 8ee:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						UART_SetTX(BCM_Tx_ISR_cbf);
 8f0:	88 e8       	ldi	r24, 0x88	; 136
 8f2:	93 e0       	ldi	r25, 0x03	; 3
 8f4:	0e 94 2c 03 	call	0x658	; 0x658 <UART_SetTX>
						break;
 8f8:	08 c0       	rjmp	.+16     	; 0x90a <BCM_Init+0x96>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_UART.mode = UART_RX;
 8fa:	80 e1       	ldi	r24, 0x10	; 16
 8fc:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnRx;
 8fe:	80 e8       	ldi	r24, 0x80	; 128
 900:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						UART_SetRX(BCM_Rx_ISR_cbf);
 902:	86 e9       	ldi	r24, 0x96	; 150
 904:	93 e0       	ldi	r25, 0x03	; 3
 906:	0e 94 31 03 	call	0x662	; 0x662 <UART_SetRX>
					}
					default:
						break;
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
 90a:	ce 01       	movw	r24, r28
 90c:	01 96       	adiw	r24, 0x01	; 1
 90e:	0e 94 ba 02 	call	0x574	; 0x574 <UART_Init>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 912:	8c e3       	ldi	r24, 0x3C	; 60
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
				
				errorStatus = BCM_ERROR + E_OK;
				break;
 914:	2a c0       	rjmp	.+84     	; 0x96a <BCM_Init+0xf6>
			/*----------------------[ UART CASE END ]---------------------*/
			/*------------------------------------------------------------*/
			/*----------------------[ SPI CASE START ]--------------------*/
			case SPI_Protocol:
			{
				a_BCM_SPI.clockSPI = Fosc128;
 916:	83 e0       	ldi	r24, 0x03	; 3
 918:	8c 87       	std	Y+12, r24	; 0x0c
				a_BCM_SPI.dataorder = MSB;
 91a:	1e 86       	std	Y+14, r1	; 0x0e
				a_BCM_SPI.phasePolarityMode = mode0;
 91c:	1d 86       	std	Y+13, r1	; 0x0d
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
 91e:	99 23       	and	r25, r25
 920:	19 f0       	breq	.+6      	; 0x928 <BCM_Init+0xb4>
 922:	91 30       	cpi	r25, 0x01	; 1
 924:	79 f0       	breq	.+30     	; 0x944 <BCM_Init+0xd0>
 926:	20 c0       	rjmp	.+64     	; 0x968 <BCM_Init+0xf4>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_SPI.ptr_call_back = BCM_Tx_ISR_cbf;
 928:	88 e8       	ldi	r24, 0x88	; 136
 92a:	93 e0       	ldi	r25, 0x03	; 3
 92c:	98 8b       	std	Y+16, r25	; 0x10
 92e:	8f 87       	std	Y+15, r24	; 0x0f
						_SPIInitMaster(&a_BCM_SPI);
 930:	ce 01       	movw	r24, r28
 932:	0c 96       	adiw	r24, 0x0c	; 12
 934:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <_SPIInitMaster>
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Tx_ISR_cbf);
 938:	88 e8       	ldi	r24, 0x88	; 136
 93a:	93 e0       	ldi	r25, 0x03	; 3
 93c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_SetCBF>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 940:	8c e3       	ldi	r24, 0x3C	; 60
					{
						a_BCM_SPI.ptr_call_back = BCM_Tx_ISR_cbf;
						_SPIInitMaster(&a_BCM_SPI);
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Tx_ISR_cbf);
						break;
 942:	13 c0       	rjmp	.+38     	; 0x96a <BCM_Init+0xf6>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_SPI.ptr_call_back = BCM_Rx_ISR_cbf;
 944:	86 e9       	ldi	r24, 0x96	; 150
 946:	93 e0       	ldi	r25, 0x03	; 3
 948:	98 8b       	std	Y+16, r25	; 0x10
 94a:	8f 87       	std	Y+15, r24	; 0x0f
						_SPIInitSlave(&a_BCM_SPI);
 94c:	ce 01       	movw	r24, r28
 94e:	0c 96       	adiw	r24, 0x0c	; 12
 950:	0e 94 23 01 	call	0x246	; 0x246 <_SPIInitSlave>
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Rx_ISR_cbf);
 954:	86 e9       	ldi	r24, 0x96	; 150
 956:	93 e0       	ldi	r25, 0x03	; 3
 958:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SPI_SetCBF>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 95c:	8c e3       	ldi	r24, 0x3C	; 60
					{
						a_BCM_SPI.ptr_call_back = BCM_Rx_ISR_cbf;
						_SPIInitSlave(&a_BCM_SPI);
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Rx_ISR_cbf);
						break;
 95e:	05 c0       	rjmp	.+10     	; 0x96a <BCM_Init+0xf6>
	}
	/*-------------[ In Case Of BCM's Null Pointer ]-------------*/
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
 960:	8d e3       	ldi	r24, 0x3D	; 61
 962:	03 c0       	rjmp	.+6      	; 0x96a <BCM_Init+0xf6>
				break;
			}
			/*----------------------[ SPI CASE END ]---------------------*/
			default:
				errorStatus = BCM_ERROR + INVALID_IN;
				return errorStatus;
 964:	80 e4       	ldi	r24, 0x40	; 64
 966:	01 c0       	rjmp	.+2      	; 0x96a <BCM_Init+0xf6>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 968:	8c e3       	ldi	r24, 0x3C	; 60
}
 96a:	60 96       	adiw	r28, 0x10	; 16
 96c:	0f b6       	in	r0, 0x3f	; 63
 96e:	f8 94       	cli
 970:	de bf       	out	0x3e, r29	; 62
 972:	0f be       	out	0x3f, r0	; 63
 974:	cd bf       	out	0x3d, r28	; 61
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	08 95       	ret

0000097c <BCM_Setup_RxBuffer>:
	/* Needs So Much Improvements & Error Checking & More... */
	
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	
	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_BCM != NULL)
 97c:	89 2b       	or	r24, r25
 97e:	51 f0       	breq	.+20     	; 0x994 <BCM_Setup_RxBuffer+0x18>
	{
		g_BCM_EXcfg.Buf_Len = a_Buffer_Len;
 980:	e8 e7       	ldi	r30, 0x78	; 120
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	71 87       	std	Z+9, r23	; 0x09
 986:	60 87       	std	Z+8, r22	; 0x08
		g_BCM_EXcfg.Buffer = a_buffer;
 988:	57 83       	std	Z+7, r21	; 0x07
 98a:	46 83       	std	Z+6, r20	; 0x06
		g_BCM_EXcfg.FSM_State = IDLE_State;
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	84 83       	std	Z+4, r24	; 0x04
		g_BCM_EXcfg.BCM_notify_cbf = a_notify;
 990:	37 87       	std	Z+15, r19	; 0x0f
 992:	26 87       	std	Z+14, r18	; 0x0e
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
}
 994:	8d e3       	ldi	r24, 0x3D	; 61
 996:	08 95       	ret

00000998 <BCM_Get_msgLEN>:


uint8_t BCM_Get_msgLEN(void)
{
	return g_BCM_EXcfg.MSG_Len;
 998:	80 91 82 00 	lds	r24, 0x0082
 99c:	08 95       	ret

0000099e <__udivmodsi4>:
 99e:	a1 e2       	ldi	r26, 0x21	; 33
 9a0:	1a 2e       	mov	r1, r26
 9a2:	aa 1b       	sub	r26, r26
 9a4:	bb 1b       	sub	r27, r27
 9a6:	fd 01       	movw	r30, r26
 9a8:	0d c0       	rjmp	.+26     	; 0x9c4 <__udivmodsi4_ep>

000009aa <__udivmodsi4_loop>:
 9aa:	aa 1f       	adc	r26, r26
 9ac:	bb 1f       	adc	r27, r27
 9ae:	ee 1f       	adc	r30, r30
 9b0:	ff 1f       	adc	r31, r31
 9b2:	a2 17       	cp	r26, r18
 9b4:	b3 07       	cpc	r27, r19
 9b6:	e4 07       	cpc	r30, r20
 9b8:	f5 07       	cpc	r31, r21
 9ba:	20 f0       	brcs	.+8      	; 0x9c4 <__udivmodsi4_ep>
 9bc:	a2 1b       	sub	r26, r18
 9be:	b3 0b       	sbc	r27, r19
 9c0:	e4 0b       	sbc	r30, r20
 9c2:	f5 0b       	sbc	r31, r21

000009c4 <__udivmodsi4_ep>:
 9c4:	66 1f       	adc	r22, r22
 9c6:	77 1f       	adc	r23, r23
 9c8:	88 1f       	adc	r24, r24
 9ca:	99 1f       	adc	r25, r25
 9cc:	1a 94       	dec	r1
 9ce:	69 f7       	brne	.-38     	; 0x9aa <__udivmodsi4_loop>
 9d0:	60 95       	com	r22
 9d2:	70 95       	com	r23
 9d4:	80 95       	com	r24
 9d6:	90 95       	com	r25
 9d8:	9b 01       	movw	r18, r22
 9da:	ac 01       	movw	r20, r24
 9dc:	bd 01       	movw	r22, r26
 9de:	cf 01       	movw	r24, r30
 9e0:	08 95       	ret

000009e2 <_exit>:
 9e2:	f8 94       	cli

000009e4 <__stop_program>:
 9e4:	ff cf       	rjmp	.-2      	; 0x9e4 <__stop_program>
