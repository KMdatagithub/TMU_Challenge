
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ebe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000ebe  00000f52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009d  00800066  00800066  00000f58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b45  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000974  00000000  00000000  00002d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000087f  00000000  00000000  0000369d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000074c  00000000  00000000  00003f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a13  00000000  00000000  00004668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022d4  00000000  00000000  0000507b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000734f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__vector_4>
  14:	0c 94 c8 03 	jmp	0x790	; 0x790 <__vector_5>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 43 04 	jmp	0x886	; 0x886 <__vector_7>
  20:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__vector_8>
  24:	0c 94 1a 04 	jmp	0x834	; 0x834 <__vector_9>
  28:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_10>
  2c:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__vector_11>
  30:	0c 94 9b 01 	jmp	0x336	; 0x336 <__vector_12>
  34:	0c 94 95 04 	jmp	0x92a	; 0x92a <__vector_13>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 be 04 	jmp	0x97c	; 0x97c <__vector_15>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	ff 01       	movw	r30, r30
  56:	26 02       	muls	r18, r22
  58:	04 02       	muls	r16, r20
  5a:	0a 02       	muls	r16, r26
  5c:	0f 02       	muls	r16, r31
  5e:	15 02       	muls	r17, r21
  60:	1b 02       	muls	r17, r27
  62:	20 02       	muls	r18, r16
  64:	70 02       	muls	r23, r16
  66:	a9 02       	muls	r26, r25
  68:	77 02       	muls	r23, r23
  6a:	80 02       	muls	r24, r16
  6c:	87 02       	muls	r24, r23
  6e:	90 02       	muls	r25, r16
  70:	99 02       	muls	r25, r25
  72:	a0 02       	muls	r26, r16
  74:	f2 02       	muls	r31, r18
  76:	1b 03       	fmul	r17, r19
  78:	f7 02       	muls	r31, r23
  7a:	fd 02       	muls	r31, r29
  7c:	03 03       	mulsu	r16, r19
  7e:	09 03       	fmul	r16, r17
  80:	0f 03       	fmul	r16, r23
  82:	15 03       	mulsu	r17, r21

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf e5       	ldi	r28, 0x5F	; 95
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
  90:	10 e0       	ldi	r17, 0x00	; 0
  92:	a0 e6       	ldi	r26, 0x60	; 96
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	ee eb       	ldi	r30, 0xBE	; 190
  98:	fe e0       	ldi	r31, 0x0E	; 14
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <__do_copy_data+0x10>
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a6 36       	cpi	r26, 0x66	; 102
  a2:	b1 07       	cpc	r27, r17
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0xc>

000000a6 <__do_clear_bss>:
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	a6 e6       	ldi	r26, 0x66	; 102
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a3 30       	cpi	r26, 0x03	; 3
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  ba:	0c 94 5d 07 	jmp	0xeba	; 0xeba <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <Dummy>:

/*==========================================================================*/

void Dummy(void)
{
	DIO_Toggle(Test_Pin.GPIO, Test_Pin.pins);
  c2:	ee ef       	ldi	r30, 0xFE	; 254
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	61 81       	ldd	r22, Z+1	; 0x01
  c8:	80 81       	ld	r24, Z
  ca:	0e 94 60 01 	call	0x2c0	; 0x2c0 <DIO_Toggle>
  ce:	08 95       	ret

000000d0 <ToggleLED1>:
}

void ToggleLED1()
{
	DIO_Toggle(g_LED1.GPIO, g_LED1.pins);
  d0:	e3 ef       	ldi	r30, 0xF3	; 243
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	61 81       	ldd	r22, Z+1	; 0x01
  d6:	80 81       	ld	r24, Z
  d8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <DIO_Toggle>
  dc:	08 95       	ret

000000de <ToggleLED2>:
}
void ToggleLED2()
{
	DIO_Toggle(g_LED2.GPIO, g_LED2.pins);
  de:	e0 ef       	ldi	r30, 0xF0	; 240
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	61 81       	ldd	r22, Z+1	; 0x01
  e4:	80 81       	ld	r24, Z
  e6:	0e 94 60 01 	call	0x2c0	; 0x2c0 <DIO_Toggle>
  ea:	08 95       	ret

000000ec <ToggleLED3>:
}
void ToggleLED3()
{
	DIO_Toggle(g_LED3.GPIO, g_LED3.pins);
  ec:	e6 ef       	ldi	r30, 0xF6	; 246
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	61 81       	ldd	r22, Z+1	; 0x01
  f2:	80 81       	ld	r24, Z
  f4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <DIO_Toggle>
  f8:	08 95       	ret

000000fa <Init_LEDs>:
}
;
void Init_LEDs(void)
{
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
	g_LED1.GPIO = GPIOD;
 102:	e3 ef       	ldi	r30, 0xF3	; 243
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	13 e0       	ldi	r17, 0x03	; 3
 108:	10 83       	st	Z, r17
	g_LED1.dir  = OUTPUT;
 10a:	0f ef       	ldi	r16, 0xFF	; 255
 10c:	02 83       	std	Z+2, r16	; 0x02
	g_LED1.pins = BIT4;
 10e:	80 e1       	ldi	r24, 0x10	; 16
 110:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED1);
 112:	cf 01       	movw	r24, r30
 114:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_init>
	g_LED2.GPIO = GPIOD;
 118:	e0 ef       	ldi	r30, 0xF0	; 240
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	10 83       	st	Z, r17
	g_LED2.dir  = OUTPUT;
 11e:	02 83       	std	Z+2, r16	; 0x02
	g_LED2.pins = BIT5;
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED2);
 124:	cf 01       	movw	r24, r30
 126:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_init>
	g_LED3.GPIO = GPIOD;
 12a:	c6 ef       	ldi	r28, 0xF6	; 246
 12c:	d0 e0       	ldi	r29, 0x00	; 0
 12e:	18 83       	st	Y, r17
	g_LED3.dir  = OUTPUT;
 130:	0a 83       	std	Y+2, r16	; 0x02
	g_LED3.pins = BIT6;
 132:	80 e4       	ldi	r24, 0x40	; 64
 134:	89 83       	std	Y+1, r24	; 0x01
	DIO_init(&g_LED3);
 136:	ce 01       	movw	r24, r28
 138:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_init>
	DIO_Write(g_LED3.GPIO, g_LED3.pins, HIGH);
 13c:	4f ef       	ldi	r20, 0xFF	; 255
 13e:	69 81       	ldd	r22, Y+1	; 0x01
 140:	88 81       	ld	r24, Y
 142:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_Write>
	Test_Pin.dir = OUTPUT;
 146:	ee ef       	ldi	r30, 0xFE	; 254
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	02 83       	std	Z+2, r16	; 0x02
	Test_Pin.GPIO = GPIOD;
 14c:	10 83       	st	Z, r17
	Test_Pin.pins = BIT0;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&Test_Pin);
 152:	cf 01       	movw	r24, r30
 154:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_init>
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	08 95       	ret

00000162 <main>:
/*==========================================================================*/

int main(void)
{
	/*-------------[ LEDs Initialization ]-------------*/
	Init_LEDs();
 162:	0e 94 7d 00 	call	0xfa	; 0xfa <Init_LEDs>
		
	/*-------------[ TMU Initialization ]-------------*/
	MySOS.Tick_Time = 1;
 166:	e9 ef       	ldi	r30, 0xF9	; 249
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 83       	st	Z, r24
	MySOS.Timer_ID = TIMER_CH0;
 16e:	11 82       	std	Z+1, r1	; 0x01
	SOS_Init(&MySOS);
 170:	cf 01       	movw	r24, r30
 172:	0e 94 03 05 	call	0xa06	; 0xa06 <SOS_Init>
	
	/*----------[ Start 3 Different Tasks ]---------*/
	/*[[ TMU_Srart(Task_FunPtr, TaskID, Periodicity, Time_IN_ms); ]]*/
	Start_Task(ToggleLED1, 100, PERIODIC, 8, 0, Dummy, Dummy);
 176:	0f 2e       	mov	r0, r31
 178:	f1 e6       	ldi	r31, 0x61	; 97
 17a:	af 2e       	mov	r10, r31
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	bf 2e       	mov	r11, r31
 180:	f0 2d       	mov	r31, r0
 182:	65 01       	movw	r12, r10
 184:	e1 2c       	mov	r14, r1
 186:	08 e0       	ldi	r16, 0x08	; 8
 188:	10 e0       	ldi	r17, 0x00	; 0
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	41 e0       	ldi	r20, 0x01	; 1
 190:	64 e6       	ldi	r22, 0x64	; 100
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	88 e6       	ldi	r24, 0x68	; 104
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 6a 05 	call	0xad4	; 0xad4 <Start_Task>
	Start_Task(ToggleLED2, 110, PERIODIC, 5, 0, Dummy, Dummy);
 19c:	05 e0       	ldi	r16, 0x05	; 5
 19e:	10 e0       	ldi	r17, 0x00	; 0
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	6e e6       	ldi	r22, 0x6E	; 110
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	8f e6       	ldi	r24, 0x6F	; 111
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 6a 05 	call	0xad4	; 0xad4 <Start_Task>
	Start_Task(ToggleLED3, 120, PERIODIC, 3, 0, Dummy, Dummy);
 1b2:	03 e0       	ldi	r16, 0x03	; 3
 1b4:	10 e0       	ldi	r17, 0x00	; 0
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	68 e7       	ldi	r22, 0x78	; 120
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	86 e7       	ldi	r24, 0x76	; 118
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 6a 05 	call	0xad4	; 0xad4 <Start_Task>
	
	/*-------------[ SUPER LOOP ]-------------*/
	while (1)
	{
		SOS_Run();
 1c8:	0e 94 43 06 	call	0xc86	; 0xc86 <SOS_Run>
	}
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <main+0x66>

000001ce <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
 1ce:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
 1d0:	89 2b       	or	r24, r25
 1d2:	e9 f1       	breq	.+122    	; 0x24e <DIO_init+0x80>
	{
		switch(DIO_info->GPIO)
 1d4:	80 81       	ld	r24, Z
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	99 f0       	breq	.+38     	; 0x200 <DIO_init+0x32>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <DIO_init+0x18>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	e9 f0       	breq	.+58     	; 0x21a <DIO_init+0x4c>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	41 f1       	breq	.+80     	; 0x234 <DIO_init+0x66>
 1e4:	37 c0       	rjmp	.+110    	; 0x254 <DIO_init+0x86>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
 1e6:	81 81       	ldd	r24, Z+1	; 0x01
 1e8:	2a b3       	in	r18, 0x1a	; 26
 1ea:	98 2f       	mov	r25, r24
 1ec:	90 95       	com	r25
 1ee:	29 23       	and	r18, r25
 1f0:	92 81       	ldd	r25, Z+2	; 0x02
 1f2:	98 23       	and	r25, r24
 1f4:	82 2f       	mov	r24, r18
 1f6:	89 2b       	or	r24, r25
 1f8:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
			break;
 1fe:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
 200:	81 81       	ldd	r24, Z+1	; 0x01
 202:	27 b3       	in	r18, 0x17	; 23
 204:	98 2f       	mov	r25, r24
 206:	90 95       	com	r25
 208:	29 23       	and	r18, r25
 20a:	92 81       	ldd	r25, Z+2	; 0x02
 20c:	98 23       	and	r25, r24
 20e:	82 2f       	mov	r24, r18
 210:	89 2b       	or	r24, r25
 212:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
			break;
 218:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
 21a:	81 81       	ldd	r24, Z+1	; 0x01
 21c:	24 b3       	in	r18, 0x14	; 20
 21e:	98 2f       	mov	r25, r24
 220:	90 95       	com	r25
 222:	29 23       	and	r18, r25
 224:	92 81       	ldd	r25, Z+2	; 0x02
 226:	98 23       	and	r25, r24
 228:	82 2f       	mov	r24, r18
 22a:	89 2b       	or	r24, r25
 22c:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
			break;
 232:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
 234:	81 81       	ldd	r24, Z+1	; 0x01
 236:	21 b3       	in	r18, 0x11	; 17
 238:	98 2f       	mov	r25, r24
 23a:	90 95       	com	r25
 23c:	29 23       	and	r18, r25
 23e:	92 81       	ldd	r25, Z+2	; 0x02
 240:	98 23       	and	r25, r24
 242:	82 2f       	mov	r24, r18
 244:	89 2b       	or	r24, r25
 246:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
			break;
 24c:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 258:	08 95       	ret

0000025a <DIO_Write>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write(uint8_t GPIO, uint8_t pins, uint8_t value)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	81 f0       	breq	.+32     	; 0x27e <DIO_Write+0x24>
 25e:	28 f0       	brcs	.+10     	; 0x26a <DIO_Write+0x10>
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	b9 f0       	breq	.+46     	; 0x292 <DIO_Write+0x38>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	f9 f0       	breq	.+62     	; 0x2a6 <DIO_Write+0x4c>
 268:	28 c0       	rjmp	.+80     	; 0x2ba <DIO_Write+0x60>
	{
		case GPIOA :
		PORTA_DATA = (pins & value) | (~pins & PORTA_DATA);
 26a:	8b b3       	in	r24, 0x1b	; 27
 26c:	96 2f       	mov	r25, r22
 26e:	90 95       	com	r25
 270:	89 23       	and	r24, r25
 272:	46 23       	and	r20, r22
 274:	48 2b       	or	r20, r24
 276:	4b bb       	out	0x1b, r20	; 27
		errorStatus = E_OK;
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
		break;
 27c:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & value) | (~pins & PORTB_DATA);
 27e:	88 b3       	in	r24, 0x18	; 24
 280:	96 2f       	mov	r25, r22
 282:	90 95       	com	r25
 284:	89 23       	and	r24, r25
 286:	46 23       	and	r20, r22
 288:	48 2b       	or	r20, r24
 28a:	48 bb       	out	0x18, r20	; 24
		errorStatus = E_OK;
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
		break;
 290:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & value) | (~pins & PORTC_DATA);
 292:	85 b3       	in	r24, 0x15	; 21
 294:	96 2f       	mov	r25, r22
 296:	90 95       	com	r25
 298:	89 23       	and	r24, r25
 29a:	46 23       	and	r20, r22
 29c:	48 2b       	or	r20, r24
 29e:	45 bb       	out	0x15, r20	; 21
		errorStatus = E_OK;
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
		break;
 2a4:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & value) | (~pins & PORTD_DATA);
 2a6:	82 b3       	in	r24, 0x12	; 18
 2a8:	96 2f       	mov	r25, r22
 2aa:	90 95       	com	r25
 2ac:	89 23       	and	r24, r25
 2ae:	46 23       	and	r20, r22
 2b0:	48 2b       	or	r20, r24
 2b2:	42 bb       	out	0x12, r20	; 18
		errorStatus = E_OK;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
		break;
 2b8:	08 95       	ret
		default :
		errorStatus = E_NOK;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	return errorStatus;
}
 2be:	08 95       	ret

000002c0 <DIO_Toggle>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle(uint8_t GPIO, uint8_t pins)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	91 f0       	breq	.+36     	; 0x2e8 <DIO_Toggle+0x28>
 2c4:	28 f0       	brcs	.+10     	; 0x2d0 <DIO_Toggle+0x10>
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	d9 f0       	breq	.+54     	; 0x300 <DIO_Toggle+0x40>
 2ca:	83 30       	cpi	r24, 0x03	; 3
 2cc:	29 f1       	breq	.+74     	; 0x318 <DIO_Toggle+0x58>
 2ce:	30 c0       	rjmp	.+96     	; 0x330 <DIO_Toggle+0x70>
	{
		case GPIOA :
		PORTA_DATA = (pins & (~PORTA_DATA)) | (~pins & PORTA_DATA);
 2d0:	8b b3       	in	r24, 0x1b	; 27
 2d2:	9b b3       	in	r25, 0x1b	; 27
 2d4:	26 2f       	mov	r18, r22
 2d6:	20 95       	com	r18
 2d8:	92 23       	and	r25, r18
 2da:	80 95       	com	r24
 2dc:	68 23       	and	r22, r24
 2de:	69 2b       	or	r22, r25
 2e0:	6b bb       	out	0x1b, r22	; 27
		errorStatus = E_OK;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
		break;
 2e6:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & (~PORTB_DATA)) | (~pins & PORTB_DATA);
 2e8:	88 b3       	in	r24, 0x18	; 24
 2ea:	98 b3       	in	r25, 0x18	; 24
 2ec:	26 2f       	mov	r18, r22
 2ee:	20 95       	com	r18
 2f0:	92 23       	and	r25, r18
 2f2:	80 95       	com	r24
 2f4:	68 23       	and	r22, r24
 2f6:	69 2b       	or	r22, r25
 2f8:	68 bb       	out	0x18, r22	; 24
		errorStatus = E_OK;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
		break;
 2fe:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & (~PORTC_DATA)) | (~pins & PORTC_DATA);
 300:	85 b3       	in	r24, 0x15	; 21
 302:	95 b3       	in	r25, 0x15	; 21
 304:	26 2f       	mov	r18, r22
 306:	20 95       	com	r18
 308:	92 23       	and	r25, r18
 30a:	80 95       	com	r24
 30c:	68 23       	and	r22, r24
 30e:	69 2b       	or	r22, r25
 310:	65 bb       	out	0x15, r22	; 21
		errorStatus = E_OK;
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
		break;
 316:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & (~PORTD_DATA)) | (~pins & PORTD_DATA);
 318:	82 b3       	in	r24, 0x12	; 18
 31a:	92 b3       	in	r25, 0x12	; 18
 31c:	26 2f       	mov	r18, r22
 31e:	20 95       	com	r18
 320:	92 23       	and	r25, r18
 322:	80 95       	com	r24
 324:	68 23       	and	r22, r24
 326:	69 2b       	or	r22, r25
 328:	62 bb       	out	0x12, r22	; 18
		errorStatus = E_OK;
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
		break;
 32e:	08 95       	ret
		default :
		errorStatus = E_NOK;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	return errorStatus;
}
 334:	08 95       	ret

00000336 <__vector_12>:
{
	PTR_CALL_BACK = isr_ptr;
}

ISR(SPI_STC_vect)
{
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	2f 93       	push	r18
 342:	3f 93       	push	r19
 344:	4f 93       	push	r20
 346:	5f 93       	push	r21
 348:	6f 93       	push	r22
 34a:	7f 93       	push	r23
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
 350:	af 93       	push	r26
 352:	bf 93       	push	r27
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
	g_u8_RxFlag = TRUE;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	80 93 60 00 	sts	0x0060, r24
	PTR_CALL_BACK();
 35e:	e0 91 01 01 	lds	r30, 0x0101
 362:	f0 91 02 01 	lds	r31, 0x0102
 366:	09 95       	icall
}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <Timer_Init>:
 * Return: The error status of the function.			
 * Description: Initiates the module.
 * 							
 */
ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
 38a:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
 38c:	89 2b       	or	r24, r25
 38e:	09 f4       	brne	.+2      	; 0x392 <Timer_Init+0x8>
 390:	5c c1       	rjmp	.+696    	; 0x64a <Timer_Init+0x2c0>
	{
		// Check The Timer Channel Number & Init The Corresponding One
		switch(Timer_cfg->Timer_CH_NO)
 392:	80 81       	ld	r24, Z
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	09 f4       	brne	.+2      	; 0x39a <Timer_Init+0x10>
 398:	6f c0       	rjmp	.+222    	; 0x478 <Timer_Init+0xee>
 39a:	20 f0       	brcs	.+8      	; 0x3a4 <Timer_Init+0x1a>
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	09 f4       	brne	.+2      	; 0x3a2 <Timer_Init+0x18>
 3a0:	f8 c0       	rjmp	.+496    	; 0x592 <Timer_Init+0x208>
 3a2:	56 c1       	rjmp	.+684    	; 0x650 <Timer_Init+0x2c6>
static ERROR_STATUS Timer0_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR0 =  Timer0_CMP_Mask;
 3a4:	88 e0       	ldi	r24, 0x08	; 8
 3a6:	83 bf       	out	0x33, r24	; 51
		OCR0  =  0x00;
 3a8:	1c be       	out	0x3c, r1	; 60
		TIMSK &= Timer0_Int_CLR_Mask;
 3aa:	89 b7       	in	r24, 0x39	; 57
 3ac:	8c 7f       	andi	r24, 0xFC	; 252
 3ae:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 3b0:	82 81       	ldd	r24, Z+2	; 0x02
 3b2:	88 23       	and	r24, r24
 3b4:	19 f0       	breq	.+6      	; 0x3bc <Timer_Init+0x32>
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	21 f0       	breq	.+8      	; 0x3c2 <Timer_Init+0x38>
 3ba:	0f c0       	rjmp	.+30     	; 0x3da <Timer_Init+0x50>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer0_Polling_Int_Mask;
 3bc:	89 b7       	in	r24, 0x39	; 57
 3be:	89 bf       	out	0x39, r24	; 57
 3c0:	0c c0       	rjmp	.+24     	; 0x3da <Timer_Init+0x50>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer0_Interrupt_CMP_Int_Mask;
 3c2:	89 b7       	in	r24, 0x39	; 57
 3c4:	82 60       	ori	r24, 0x02	; 2
 3c6:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
 3c8:	8f b7       	in	r24, 0x3f	; 63
 3ca:	80 68       	ori	r24, 0x80	; 128
 3cc:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer0_CM = Timer_cfg->Timer_Cbk_ptr;
 3ce:	84 81       	ldd	r24, Z+4	; 0x04
 3d0:	95 81       	ldd	r25, Z+5	; 0x05
 3d2:	90 93 6f 00 	sts	0x006F, r25
 3d6:	80 93 6e 00 	sts	0x006E, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 3da:	81 81       	ldd	r24, Z+1	; 0x01
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	d9 f1       	breq	.+118    	; 0x456 <Timer_Init+0xcc>
 3e0:	18 f0       	brcs	.+6      	; 0x3e8 <Timer_Init+0x5e>
 3e2:	82 30       	cpi	r24, 0x02	; 2
 3e4:	f1 f1       	breq	.+124    	; 0x462 <Timer_Init+0xd8>
 3e6:	43 c0       	rjmp	.+134    	; 0x46e <Timer_Init+0xe4>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 3e8:	e3 81       	ldd	r30, Z+3	; 0x03
 3ea:	8e 2f       	mov	r24, r30
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	88 30       	cpi	r24, 0x08	; 8
 3f0:	91 05       	cpc	r25, r1
 3f2:	60 f5       	brcc	.+88     	; 0x44c <Timer_Init+0xc2>
 3f4:	fc 01       	movw	r30, r24
 3f6:	e6 5d       	subi	r30, 0xD6	; 214
 3f8:	ff 4f       	sbci	r31, 0xFF	; 255
 3fa:	0c 94 57 07 	jmp	0xeae	; 0xeae <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 3fe:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_OK;
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer0_Prescaler = TIMER0_PRESCALER_8;
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 414:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_NOK;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer0_Prescaler = TIMER0_PRESCALER_64;
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer0_Prescaler = TIMER0_PRESCALER_128;
 42a:	84 e0       	ldi	r24, 0x04	; 4
 42c:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 436:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_NOK;
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	08 95       	ret
						break;
					case TIMER_PRESCALER_1024 :
						Timer0_Prescaler = TIMER0_PRESCALER_1024;
 440:	85 e0       	ldi	r24, 0x05	; 5
 442:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	08 95       	ret
						break;
					default :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 44c:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_NOK;
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	08 95       	ret
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_RISING;
 456:	87 e0       	ldi	r24, 0x07	; 7
 458:	80 93 75 00 	sts	0x0075, r24
				errorStatus = E_OK;
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	08 95       	ret
				break;
			case COUNTER_DOWN_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_FALLING;
 462:	86 e0       	ldi	r24, 0x06	; 6
 464:	80 93 75 00 	sts	0x0075, r24
				errorStatus = E_OK;
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	08 95       	ret
				break;
			default :
				Timer0_Prescaler = TIMER0_NO_CLOCK;
 46e:	10 92 75 00 	sts	0x0075, r1
				errorStatus = E_NOK;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	08 95       	ret
static ERROR_STATUS Timer1_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR1 = Timer1_CMP_Mask;
 478:	88 e0       	ldi	r24, 0x08	; 8
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	9f bd       	out	0x2f, r25	; 47
 47e:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0x00;
 480:	1d bc       	out	0x2d, r1	; 45
 482:	1c bc       	out	0x2c, r1	; 44
		OCR1A = 0x00;
 484:	1b bc       	out	0x2b, r1	; 43
 486:	1a bc       	out	0x2a, r1	; 42
		TIMSK &= Timer1_Int_CLR_Mask;
 488:	89 b7       	in	r24, 0x39	; 57
 48a:	83 7c       	andi	r24, 0xC3	; 195
 48c:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 48e:	82 81       	ldd	r24, Z+2	; 0x02
 490:	88 23       	and	r24, r24
 492:	19 f0       	breq	.+6      	; 0x49a <Timer_Init+0x110>
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	21 f0       	breq	.+8      	; 0x4a0 <Timer_Init+0x116>
 498:	0f c0       	rjmp	.+30     	; 0x4b8 <Timer_Init+0x12e>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer1_Polling_Int_Mask;
 49a:	89 b7       	in	r24, 0x39	; 57
 49c:	89 bf       	out	0x39, r24	; 57
 49e:	0c c0       	rjmp	.+24     	; 0x4b8 <Timer_Init+0x12e>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer1_OCA_Int_Mask;
 4a0:	89 b7       	in	r24, 0x39	; 57
 4a2:	80 61       	ori	r24, 0x10	; 16
 4a4:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
 4a6:	8f b7       	in	r24, 0x3f	; 63
 4a8:	80 68       	ori	r24, 0x80	; 128
 4aa:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer1_CM = Timer_cfg->Timer_Cbk_ptr;
 4ac:	84 81       	ldd	r24, Z+4	; 0x04
 4ae:	95 81       	ldd	r25, Z+5	; 0x05
 4b0:	90 93 6b 00 	sts	0x006B, r25
 4b4:	80 93 6a 00 	sts	0x006A, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 4b8:	81 81       	ldd	r24, Z+1	; 0x01
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	09 f4       	brne	.+2      	; 0x4c0 <Timer_Init+0x136>
 4be:	50 c0       	rjmp	.+160    	; 0x560 <Timer_Init+0x1d6>
 4c0:	20 f0       	brcs	.+8      	; 0x4ca <Timer_Init+0x140>
 4c2:	82 30       	cpi	r24, 0x02	; 2
 4c4:	09 f4       	brne	.+2      	; 0x4c8 <Timer_Init+0x13e>
 4c6:	55 c0       	rjmp	.+170    	; 0x572 <Timer_Init+0x1e8>
 4c8:	5d c0       	rjmp	.+186    	; 0x584 <Timer_Init+0x1fa>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 4ca:	e3 81       	ldd	r30, Z+3	; 0x03
 4cc:	8e 2f       	mov	r24, r30
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	88 30       	cpi	r24, 0x08	; 8
 4d2:	91 05       	cpc	r25, r1
 4d4:	f0 f5       	brcc	.+124    	; 0x552 <Timer_Init+0x1c8>
 4d6:	fc 01       	movw	r30, r24
 4d8:	ee 5c       	subi	r30, 0xCE	; 206
 4da:	ff 4f       	sbci	r31, 0xFF	; 255
 4dc:	0c 94 57 07 	jmp	0xeae	; 0xeae <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 4e0:	10 92 74 00 	sts	0x0074, r1
 4e4:	10 92 73 00 	sts	0x0073, r1
						errorStatus = E_OK;
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer1_Prescaler = TIMER1_PRESCALER_8;
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	90 93 74 00 	sts	0x0074, r25
 4f6:	80 93 73 00 	sts	0x0073, r24
						errorStatus = E_OK;
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 500:	10 92 74 00 	sts	0x0074, r1
 504:	10 92 73 00 	sts	0x0073, r1
						errorStatus = E_NOK;
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer1_Prescaler = TIMER1_PRESCALER_64;
 50e:	83 e0       	ldi	r24, 0x03	; 3
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	90 93 74 00 	sts	0x0074, r25
 516:	80 93 73 00 	sts	0x0073, r24
						errorStatus = E_OK;
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer1_Prescaler = TIMER1_PRESCALER_128;
 520:	84 e0       	ldi	r24, 0x04	; 4
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	90 93 74 00 	sts	0x0074, r25
 528:	80 93 73 00 	sts	0x0073, r24
						errorStatus = E_OK;
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 532:	10 92 74 00 	sts	0x0074, r1
 536:	10 92 73 00 	sts	0x0073, r1
						errorStatus = E_NOK;
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	08 95       	ret
						break;
					case TIMER_PRESCALER_1024 :
						Timer1_Prescaler = TIMER1_PRESCALER_1024;
 540:	85 e0       	ldi	r24, 0x05	; 5
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	90 93 74 00 	sts	0x0074, r25
 548:	80 93 73 00 	sts	0x0073, r24
						errorStatus = E_OK;
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	08 95       	ret
						break;
					default :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 552:	10 92 74 00 	sts	0x0074, r1
 556:	10 92 73 00 	sts	0x0073, r1
						errorStatus = E_NOK;
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	08 95       	ret
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_RISING;
 560:	87 e0       	ldi	r24, 0x07	; 7
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	90 93 74 00 	sts	0x0074, r25
 568:	80 93 73 00 	sts	0x0073, r24
				errorStatus = E_OK;
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	08 95       	ret
				break;
			case COUNTER_DOWN_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_FALLING;
 572:	86 e0       	ldi	r24, 0x06	; 6
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	90 93 74 00 	sts	0x0074, r25
 57a:	80 93 73 00 	sts	0x0073, r24
				errorStatus = E_OK;
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	08 95       	ret
				break;
			default :
				Timer1_Prescaler = TIMER1_NO_CLOCK;
 584:	10 92 74 00 	sts	0x0074, r1
 588:	10 92 73 00 	sts	0x0073, r1
				errorStatus = E_NOK;
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	08 95       	ret
static ERROR_STATUS Timer2_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR2 = Timer2_CMP_Mask;
 592:	88 e0       	ldi	r24, 0x08	; 8
 594:	85 bd       	out	0x25, r24	; 37
		TCNT2 = Timer2_TCNT_INIT_Mask;
 596:	14 bc       	out	0x24, r1	; 36
		TIMSK &= Timer1_Int_CLR_Mask;
 598:	89 b7       	in	r24, 0x39	; 57
 59a:	83 7c       	andi	r24, 0xC3	; 195
 59c:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 59e:	82 81       	ldd	r24, Z+2	; 0x02
 5a0:	88 23       	and	r24, r24
 5a2:	19 f0       	breq	.+6      	; 0x5aa <Timer_Init+0x220>
 5a4:	81 30       	cpi	r24, 0x01	; 1
 5a6:	21 f0       	breq	.+8      	; 0x5b0 <Timer_Init+0x226>
 5a8:	0f c0       	rjmp	.+30     	; 0x5c8 <Timer_Init+0x23e>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer2_Polling_Int_Mask;
 5aa:	89 b7       	in	r24, 0x39	; 57
 5ac:	89 bf       	out	0x39, r24	; 57
 5ae:	0c c0       	rjmp	.+24     	; 0x5c8 <Timer_Init+0x23e>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer2_Interrupt_CMP_Int_Mask;
 5b0:	89 b7       	in	r24, 0x39	; 57
 5b2:	80 68       	ori	r24, 0x80	; 128
 5b4:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
 5b6:	8f b7       	in	r24, 0x3f	; 63
 5b8:	80 68       	ori	r24, 0x80	; 128
 5ba:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer2_CM = Timer_cfg->Timer_Cbk_ptr;
 5bc:	84 81       	ldd	r24, Z+4	; 0x04
 5be:	95 81       	ldd	r25, Z+5	; 0x05
 5c0:	90 93 67 00 	sts	0x0067, r25
 5c4:	80 93 66 00 	sts	0x0066, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 5c8:	81 81       	ldd	r24, Z+1	; 0x01
 5ca:	81 11       	cpse	r24, r1
 5cc:	39 c0       	rjmp	.+114    	; 0x640 <Timer_Init+0x2b6>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 5ce:	e3 81       	ldd	r30, Z+3	; 0x03
 5d0:	8e 2f       	mov	r24, r30
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	88 30       	cpi	r24, 0x08	; 8
 5d6:	91 05       	cpc	r25, r1
 5d8:	70 f5       	brcc	.+92     	; 0x636 <Timer_Init+0x2ac>
 5da:	fc 01       	movw	r30, r24
 5dc:	e6 5c       	subi	r30, 0xC6	; 198
 5de:	ff 4f       	sbci	r31, 0xFF	; 255
 5e0:	0c 94 57 07 	jmp	0xeae	; 0xeae <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
 5e4:	10 92 72 00 	sts	0x0072, r1
						errorStatus = E_OK;
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer2_Prescaler = TIMER2_PRESCALER_8;
 5ee:	82 e0       	ldi	r24, 0x02	; 2
 5f0:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer2_Prescaler = TIMER2_PRESCALER_32;
 5fa:	83 e0       	ldi	r24, 0x03	; 3
 5fc:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer2_Prescaler = TIMER2_PRESCALER_64;
 606:	84 e0       	ldi	r24, 0x04	; 4
 608:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer2_Prescaler = TIMER2_PRESCALER_128;
 612:	85 e0       	ldi	r24, 0x05	; 5
 614:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer2_Prescaler = TIMER2_PRESCALER_256;
 61e:	86 e0       	ldi	r24, 0x06	; 6
 620:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	08 95       	ret
						break;
						case TIMER_PRESCALER_1024 :
						Timer2_Prescaler = TIMER2_PRESCALER_1024;
 62a:	87 e0       	ldi	r24, 0x07	; 7
 62c:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	08 95       	ret
						break;
					default :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
 636:	10 92 72 00 	sts	0x0072, r1
						errorStatus = E_NOK;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	08 95       	ret
						break;
				}
				break;
			default :
				Timer2_Prescaler = TIMER2_NO_CLOCK;
 640:	10 92 72 00 	sts	0x0072, r1
				errorStatus = E_NOK;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	08 95       	ret
				break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	08 95       	ret
				break;
			case TIMER_CH2 :
				errorStatus = Timer2_Init(Timer_cfg);
				break;
			default :
				errorStatus = E_NOK;
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 654:	08 95       	ret

00000656 <Timer_Start>:
 */

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(Timer_CH_NO)
 656:	81 30       	cpi	r24, 0x01	; 1
 658:	91 f0       	breq	.+36     	; 0x67e <Timer_Start+0x28>
 65a:	18 f0       	brcs	.+6      	; 0x662 <Timer_Start+0xc>
 65c:	82 30       	cpi	r24, 0x02	; 2
 65e:	01 f1       	breq	.+64     	; 0x6a0 <Timer_Start+0x4a>
 660:	2d c0       	rjmp	.+90     	; 0x6bc <Timer_Start+0x66>
	{
		case TIMER_CH0 :
			if(Timer_Count <= 255)
 662:	6f 3f       	cpi	r22, 0xFF	; 255
 664:	71 05       	cpc	r23, r1
 666:	09 f0       	breq	.+2      	; 0x66a <Timer_Start+0x14>
 668:	60 f5       	brcc	.+88     	; 0x6c2 <Timer_Start+0x6c>
			{
				TCNT0 = 0x00;
 66a:	12 be       	out	0x32, r1	; 50
				OCR0  = Timer_Count;
 66c:	6c bf       	out	0x3c, r22	; 60
				TCCR0 |= Timer0_Prescaler;
 66e:	93 b7       	in	r25, 0x33	; 51
 670:	80 91 75 00 	lds	r24, 0x0075
 674:	89 2b       	or	r24, r25
 676:	83 bf       	out	0x33, r24	; 51
				errorStatus = E_OK;
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	08 95       	ret
			{
				errorStatus = E_NOK;
			}
			break;
		case TIMER_CH1 :
			TCNT1 = 0x0000;
 67e:	1d bc       	out	0x2d, r1	; 45
 680:	1c bc       	out	0x2c, r1	; 44
			OCR1A = Timer_Count;
 682:	7b bd       	out	0x2b, r23	; 43
 684:	6a bd       	out	0x2a, r22	; 42
			TCCR1 |= Timer1_Prescaler;
 686:	2e b5       	in	r18, 0x2e	; 46
 688:	3f b5       	in	r19, 0x2f	; 47
 68a:	80 91 73 00 	lds	r24, 0x0073
 68e:	90 91 74 00 	lds	r25, 0x0074
 692:	82 2b       	or	r24, r18
 694:	93 2b       	or	r25, r19
 696:	9f bd       	out	0x2f, r25	; 47
 698:	8e bd       	out	0x2e, r24	; 46
			errorStatus = E_OK;
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	90 e0       	ldi	r25, 0x00	; 0
			break;
 69e:	08 95       	ret
		case TIMER_CH2 :
			if(Timer_Count <= 255)
 6a0:	6f 3f       	cpi	r22, 0xFF	; 255
 6a2:	71 05       	cpc	r23, r1
 6a4:	09 f0       	breq	.+2      	; 0x6a8 <Timer_Start+0x52>
 6a6:	80 f4       	brcc	.+32     	; 0x6c8 <Timer_Start+0x72>
			{
				TCNT2 = 0x00;
 6a8:	14 bc       	out	0x24, r1	; 36
				OCR2  = Timer_Count;
 6aa:	63 bd       	out	0x23, r22	; 35
				TCCR2 |= Timer2_Prescaler;
 6ac:	95 b5       	in	r25, 0x25	; 37
 6ae:	80 91 72 00 	lds	r24, 0x0072
 6b2:	89 2b       	or	r24, r25
 6b4:	85 bd       	out	0x25, r24	; 37
				errorStatus = E_OK;
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	08 95       	ret
			{
				errorStatus = E_NOK;
			}
			break;
		default :
			errorStatus = E_NOK;
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	08 95       	ret
				TCCR0 |= Timer0_Prescaler;
				errorStatus = E_OK;
			}
			else
			{
				errorStatus = E_NOK;
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	08 95       	ret
				TCCR2 |= Timer2_Prescaler;
				errorStatus = E_OK;
			}
			else
			{
				errorStatus = E_NOK;
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
		default :
			errorStatus = E_NOK;
			break;
	}
	return errorStatus;
}
 6cc:	08 95       	ret

000006ce <TIMER0_SetCM>:
	Ptr_Timer0_OV = Ptr_ISR;
}

void TIMER0_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer0_CM = Ptr_ISR;
 6ce:	90 93 6f 00 	sts	0x006F, r25
 6d2:	80 93 6e 00 	sts	0x006E, r24
 6d6:	08 95       	ret

000006d8 <TIMER2_SetCM>:
	Ptr_Timer2_OV = Ptr_ISR;
}

void TIMER2_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer2_CM = Ptr_ISR;
 6d8:	90 93 67 00 	sts	0x0067, r25
 6dc:	80 93 66 00 	sts	0x0066, r24
 6e0:	08 95       	ret

000006e2 <TIMER1_SetCM>:
	Ptr_Timer1_OV = Ptr_ISR;
}

void TIMER1_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer1_CM = Ptr_ISR;
 6e2:	90 93 6b 00 	sts	0x006B, r25
 6e6:	80 93 6a 00 	sts	0x006A, r24
 6ea:	08 95       	ret

000006ec <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
 6ec:	1f 92       	push	r1
 6ee:	0f 92       	push	r0
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	0f 92       	push	r0
 6f4:	11 24       	eor	r1, r1
 6f6:	2f 93       	push	r18
 6f8:	3f 93       	push	r19
 6fa:	4f 93       	push	r20
 6fc:	5f 93       	push	r21
 6fe:	6f 93       	push	r22
 700:	7f 93       	push	r23
 702:	8f 93       	push	r24
 704:	9f 93       	push	r25
 706:	af 93       	push	r26
 708:	bf 93       	push	r27
 70a:	ef 93       	push	r30
 70c:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
 70e:	e0 91 70 00 	lds	r30, 0x0070
 712:	f0 91 71 00 	lds	r31, 0x0071
 716:	30 97       	sbiw	r30, 0x00	; 0
 718:	09 f0       	breq	.+2      	; 0x71c <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
 71a:	09 95       	icall
	}
}
 71c:	ff 91       	pop	r31
 71e:	ef 91       	pop	r30
 720:	bf 91       	pop	r27
 722:	af 91       	pop	r26
 724:	9f 91       	pop	r25
 726:	8f 91       	pop	r24
 728:	7f 91       	pop	r23
 72a:	6f 91       	pop	r22
 72c:	5f 91       	pop	r21
 72e:	4f 91       	pop	r20
 730:	3f 91       	pop	r19
 732:	2f 91       	pop	r18
 734:	0f 90       	pop	r0
 736:	0f be       	out	0x3f, r0	; 63
 738:	0f 90       	pop	r0
 73a:	1f 90       	pop	r1
 73c:	18 95       	reti

0000073e <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 73e:	1f 92       	push	r1
 740:	0f 92       	push	r0
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	0f 92       	push	r0
 746:	11 24       	eor	r1, r1
 748:	2f 93       	push	r18
 74a:	3f 93       	push	r19
 74c:	4f 93       	push	r20
 74e:	5f 93       	push	r21
 750:	6f 93       	push	r22
 752:	7f 93       	push	r23
 754:	8f 93       	push	r24
 756:	9f 93       	push	r25
 758:	af 93       	push	r26
 75a:	bf 93       	push	r27
 75c:	ef 93       	push	r30
 75e:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
 760:	e0 91 6e 00 	lds	r30, 0x006E
 764:	f0 91 6f 00 	lds	r31, 0x006F
 768:	30 97       	sbiw	r30, 0x00	; 0
 76a:	09 f0       	breq	.+2      	; 0x76e <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
 76c:	09 95       	icall
	}
}
 76e:	ff 91       	pop	r31
 770:	ef 91       	pop	r30
 772:	bf 91       	pop	r27
 774:	af 91       	pop	r26
 776:	9f 91       	pop	r25
 778:	8f 91       	pop	r24
 77a:	7f 91       	pop	r23
 77c:	6f 91       	pop	r22
 77e:	5f 91       	pop	r21
 780:	4f 91       	pop	r20
 782:	3f 91       	pop	r19
 784:	2f 91       	pop	r18
 786:	0f 90       	pop	r0
 788:	0f be       	out	0x3f, r0	; 63
 78a:	0f 90       	pop	r0
 78c:	1f 90       	pop	r1
 78e:	18 95       	reti

00000790 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 790:	1f 92       	push	r1
 792:	0f 92       	push	r0
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	0f 92       	push	r0
 798:	11 24       	eor	r1, r1
 79a:	2f 93       	push	r18
 79c:	3f 93       	push	r19
 79e:	4f 93       	push	r20
 7a0:	5f 93       	push	r21
 7a2:	6f 93       	push	r22
 7a4:	7f 93       	push	r23
 7a6:	8f 93       	push	r24
 7a8:	9f 93       	push	r25
 7aa:	af 93       	push	r26
 7ac:	bf 93       	push	r27
 7ae:	ef 93       	push	r30
 7b0:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
 7b2:	e0 91 68 00 	lds	r30, 0x0068
 7b6:	f0 91 69 00 	lds	r31, 0x0069
 7ba:	30 97       	sbiw	r30, 0x00	; 0
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
 7be:	09 95       	icall
	}
}
 7c0:	ff 91       	pop	r31
 7c2:	ef 91       	pop	r30
 7c4:	bf 91       	pop	r27
 7c6:	af 91       	pop	r26
 7c8:	9f 91       	pop	r25
 7ca:	8f 91       	pop	r24
 7cc:	7f 91       	pop	r23
 7ce:	6f 91       	pop	r22
 7d0:	5f 91       	pop	r21
 7d2:	4f 91       	pop	r20
 7d4:	3f 91       	pop	r19
 7d6:	2f 91       	pop	r18
 7d8:	0f 90       	pop	r0
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	0f 90       	pop	r0
 7de:	1f 90       	pop	r1
 7e0:	18 95       	reti

000007e2 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 7e2:	1f 92       	push	r1
 7e4:	0f 92       	push	r0
 7e6:	0f b6       	in	r0, 0x3f	; 63
 7e8:	0f 92       	push	r0
 7ea:	11 24       	eor	r1, r1
 7ec:	2f 93       	push	r18
 7ee:	3f 93       	push	r19
 7f0:	4f 93       	push	r20
 7f2:	5f 93       	push	r21
 7f4:	6f 93       	push	r22
 7f6:	7f 93       	push	r23
 7f8:	8f 93       	push	r24
 7fa:	9f 93       	push	r25
 7fc:	af 93       	push	r26
 7fe:	bf 93       	push	r27
 800:	ef 93       	push	r30
 802:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
 804:	e0 91 66 00 	lds	r30, 0x0066
 808:	f0 91 67 00 	lds	r31, 0x0067
 80c:	30 97       	sbiw	r30, 0x00	; 0
 80e:	09 f0       	breq	.+2      	; 0x812 <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
 810:	09 95       	icall
	}
}
 812:	ff 91       	pop	r31
 814:	ef 91       	pop	r30
 816:	bf 91       	pop	r27
 818:	af 91       	pop	r26
 81a:	9f 91       	pop	r25
 81c:	8f 91       	pop	r24
 81e:	7f 91       	pop	r23
 820:	6f 91       	pop	r22
 822:	5f 91       	pop	r21
 824:	4f 91       	pop	r20
 826:	3f 91       	pop	r19
 828:	2f 91       	pop	r18
 82a:	0f 90       	pop	r0
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	0f 90       	pop	r0
 830:	1f 90       	pop	r1
 832:	18 95       	reti

00000834 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 834:	1f 92       	push	r1
 836:	0f 92       	push	r0
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	0f 92       	push	r0
 83c:	11 24       	eor	r1, r1
 83e:	2f 93       	push	r18
 840:	3f 93       	push	r19
 842:	4f 93       	push	r20
 844:	5f 93       	push	r21
 846:	6f 93       	push	r22
 848:	7f 93       	push	r23
 84a:	8f 93       	push	r24
 84c:	9f 93       	push	r25
 84e:	af 93       	push	r26
 850:	bf 93       	push	r27
 852:	ef 93       	push	r30
 854:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
 856:	e0 91 6c 00 	lds	r30, 0x006C
 85a:	f0 91 6d 00 	lds	r31, 0x006D
 85e:	30 97       	sbiw	r30, 0x00	; 0
 860:	09 f0       	breq	.+2      	; 0x864 <__stack+0x5>
	{
		Ptr_Timer1_OV();
 862:	09 95       	icall
	}
}
 864:	ff 91       	pop	r31
 866:	ef 91       	pop	r30
 868:	bf 91       	pop	r27
 86a:	af 91       	pop	r26
 86c:	9f 91       	pop	r25
 86e:	8f 91       	pop	r24
 870:	7f 91       	pop	r23
 872:	6f 91       	pop	r22
 874:	5f 91       	pop	r21
 876:	4f 91       	pop	r20
 878:	3f 91       	pop	r19
 87a:	2f 91       	pop	r18
 87c:	0f 90       	pop	r0
 87e:	0f be       	out	0x3f, r0	; 63
 880:	0f 90       	pop	r0
 882:	1f 90       	pop	r1
 884:	18 95       	reti

00000886 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 886:	1f 92       	push	r1
 888:	0f 92       	push	r0
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	0f 92       	push	r0
 88e:	11 24       	eor	r1, r1
 890:	2f 93       	push	r18
 892:	3f 93       	push	r19
 894:	4f 93       	push	r20
 896:	5f 93       	push	r21
 898:	6f 93       	push	r22
 89a:	7f 93       	push	r23
 89c:	8f 93       	push	r24
 89e:	9f 93       	push	r25
 8a0:	af 93       	push	r26
 8a2:	bf 93       	push	r27
 8a4:	ef 93       	push	r30
 8a6:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 8a8:	e0 91 6a 00 	lds	r30, 0x006A
 8ac:	f0 91 6b 00 	lds	r31, 0x006B
 8b0:	30 97       	sbiw	r30, 0x00	; 0
 8b2:	09 f0       	breq	.+2      	; 0x8b6 <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
 8b4:	09 95       	icall
	}	
}
 8b6:	ff 91       	pop	r31
 8b8:	ef 91       	pop	r30
 8ba:	bf 91       	pop	r27
 8bc:	af 91       	pop	r26
 8be:	9f 91       	pop	r25
 8c0:	8f 91       	pop	r24
 8c2:	7f 91       	pop	r23
 8c4:	6f 91       	pop	r22
 8c6:	5f 91       	pop	r21
 8c8:	4f 91       	pop	r20
 8ca:	3f 91       	pop	r19
 8cc:	2f 91       	pop	r18
 8ce:	0f 90       	pop	r0
 8d0:	0f be       	out	0x3f, r0	; 63
 8d2:	0f 90       	pop	r0
 8d4:	1f 90       	pop	r1
 8d6:	18 95       	reti

000008d8 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 8d8:	1f 92       	push	r1
 8da:	0f 92       	push	r0
 8dc:	0f b6       	in	r0, 0x3f	; 63
 8de:	0f 92       	push	r0
 8e0:	11 24       	eor	r1, r1
 8e2:	2f 93       	push	r18
 8e4:	3f 93       	push	r19
 8e6:	4f 93       	push	r20
 8e8:	5f 93       	push	r21
 8ea:	6f 93       	push	r22
 8ec:	7f 93       	push	r23
 8ee:	8f 93       	push	r24
 8f0:	9f 93       	push	r25
 8f2:	af 93       	push	r26
 8f4:	bf 93       	push	r27
 8f6:	ef 93       	push	r30
 8f8:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 8fa:	e0 91 6a 00 	lds	r30, 0x006A
 8fe:	f0 91 6b 00 	lds	r31, 0x006B
 902:	30 97       	sbiw	r30, 0x00	; 0
 904:	09 f0       	breq	.+2      	; 0x908 <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 906:	09 95       	icall
	}
}
 908:	ff 91       	pop	r31
 90a:	ef 91       	pop	r30
 90c:	bf 91       	pop	r27
 90e:	af 91       	pop	r26
 910:	9f 91       	pop	r25
 912:	8f 91       	pop	r24
 914:	7f 91       	pop	r23
 916:	6f 91       	pop	r22
 918:	5f 91       	pop	r21
 91a:	4f 91       	pop	r20
 91c:	3f 91       	pop	r19
 91e:	2f 91       	pop	r18
 920:	0f 90       	pop	r0
 922:	0f be       	out	0x3f, r0	; 63
 924:	0f 90       	pop	r0
 926:	1f 90       	pop	r1
 928:	18 95       	reti

0000092a <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
 92a:	1f 92       	push	r1
 92c:	0f 92       	push	r0
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	0f 92       	push	r0
 932:	11 24       	eor	r1, r1
 934:	2f 93       	push	r18
 936:	3f 93       	push	r19
 938:	4f 93       	push	r20
 93a:	5f 93       	push	r21
 93c:	6f 93       	push	r22
 93e:	7f 93       	push	r23
 940:	8f 93       	push	r24
 942:	9f 93       	push	r25
 944:	af 93       	push	r26
 946:	bf 93       	push	r27
 948:	ef 93       	push	r30
 94a:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
 94c:	e0 91 76 00 	lds	r30, 0x0076
 950:	f0 91 77 00 	lds	r31, 0x0077
 954:	30 97       	sbiw	r30, 0x00	; 0
 956:	09 f0       	breq	.+2      	; 0x95a <__vector_13+0x30>
	{
		Ptr_UART_RX();
 958:	09 95       	icall
	}
}
 95a:	ff 91       	pop	r31
 95c:	ef 91       	pop	r30
 95e:	bf 91       	pop	r27
 960:	af 91       	pop	r26
 962:	9f 91       	pop	r25
 964:	8f 91       	pop	r24
 966:	7f 91       	pop	r23
 968:	6f 91       	pop	r22
 96a:	5f 91       	pop	r21
 96c:	4f 91       	pop	r20
 96e:	3f 91       	pop	r19
 970:	2f 91       	pop	r18
 972:	0f 90       	pop	r0
 974:	0f be       	out	0x3f, r0	; 63
 976:	0f 90       	pop	r0
 978:	1f 90       	pop	r1
 97a:	18 95       	reti

0000097c <__vector_15>:

ISR(USART_TXC_vect)
{
 97c:	1f 92       	push	r1
 97e:	0f 92       	push	r0
 980:	0f b6       	in	r0, 0x3f	; 63
 982:	0f 92       	push	r0
 984:	11 24       	eor	r1, r1
 986:	2f 93       	push	r18
 988:	3f 93       	push	r19
 98a:	4f 93       	push	r20
 98c:	5f 93       	push	r21
 98e:	6f 93       	push	r22
 990:	7f 93       	push	r23
 992:	8f 93       	push	r24
 994:	9f 93       	push	r25
 996:	af 93       	push	r26
 998:	bf 93       	push	r27
 99a:	ef 93       	push	r30
 99c:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
 99e:	e0 91 78 00 	lds	r30, 0x0078
 9a2:	f0 91 79 00 	lds	r31, 0x0079
 9a6:	30 97       	sbiw	r30, 0x00	; 0
 9a8:	09 f0       	breq	.+2      	; 0x9ac <__vector_15+0x30>
	{
		Ptr_UART_TX();
 9aa:	09 95       	icall
	}
 9ac:	ff 91       	pop	r31
 9ae:	ef 91       	pop	r30
 9b0:	bf 91       	pop	r27
 9b2:	af 91       	pop	r26
 9b4:	9f 91       	pop	r25
 9b6:	8f 91       	pop	r24
 9b8:	7f 91       	pop	r23
 9ba:	6f 91       	pop	r22
 9bc:	5f 91       	pop	r21
 9be:	4f 91       	pop	r20
 9c0:	3f 91       	pop	r19
 9c2:	2f 91       	pop	r18
 9c4:	0f 90       	pop	r0
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	0f 90       	pop	r0
 9ca:	1f 90       	pop	r1
 9cc:	18 95       	reti

000009ce <SOS_ISR_cbf>:


static void SOS_ISR_cbf(void)
{
	/* Adjust The Tick Time According To The TMU's Time Configuration */
	g_SysTicks++;
 9ce:	80 91 7a 00 	lds	r24, 0x007A
 9d2:	90 91 7b 00 	lds	r25, 0x007B
 9d6:	01 96       	adiw	r24, 0x01	; 1
 9d8:	90 93 7b 00 	sts	0x007B, r25
 9dc:	80 93 7a 00 	sts	0x007A, r24
	
	if(g_SysTicks == g_SOS_TickTime)
 9e0:	20 91 7a 00 	lds	r18, 0x007A
 9e4:	30 91 7b 00 	lds	r19, 0x007B
 9e8:	80 91 7c 00 	lds	r24, 0x007C
 9ec:	90 91 7d 00 	lds	r25, 0x007D
 9f0:	28 17       	cp	r18, r24
 9f2:	39 07       	cpc	r19, r25
 9f4:	39 f4       	brne	.+14     	; 0xa04 <SOS_ISR_cbf+0x36>
	{
		g_TMR_Ticks_Changed = TRUE;
 9f6:	81 e0       	ldi	r24, 0x01	; 1
 9f8:	80 93 7e 00 	sts	0x007E, r24
		g_SysTicks = FALSE;	
 9fc:	10 92 7b 00 	sts	0x007B, r1
 a00:	10 92 7a 00 	sts	0x007A, r1
 a04:	08 95       	ret

00000a06 <SOS_Init>:
{
	ERROR_STATUS errorStauts = E_OK;
	uint16_t index = 0;
	
	/*-------------[ Check TMU's Pointer Validity ]-------------*/
	if(a_SOS_s != NULL)
 a06:	00 97       	sbiw	r24, 0x00	; 0
 a08:	09 f4       	brne	.+2      	; 0xa0c <SOS_Init+0x6>
 a0a:	5e c0       	rjmp	.+188    	; 0xac8 <SOS_Init+0xc2>
 a0c:	fc 01       	movw	r30, r24
	{
		/*-------------[ TMU Initialization ]-------------*/
		g_SOS.Timer_ID  = a_SOS_s->Timer_ID;
 a0e:	a1 e6       	ldi	r26, 0x61	; 97
 a10:	b0 e0       	ldi	r27, 0x00	; 0
 a12:	81 81       	ldd	r24, Z+1	; 0x01
 a14:	11 96       	adiw	r26, 0x01	; 1
 a16:	8c 93       	st	X, r24
 a18:	11 97       	sbiw	r26, 0x01	; 1
		g_SOS.Tick_Time = a_SOS_s->Tick_Time;
 a1a:	80 81       	ld	r24, Z
 a1c:	8c 93       	st	X, r24
		g_SOS.Timer_Cbk_ptr = SOS_ISR_cbf;
 a1e:	27 ee       	ldi	r18, 0xE7	; 231
 a20:	34 e0       	ldi	r19, 0x04	; 4
 a22:	14 96       	adiw	r26, 0x04	; 4
 a24:	3c 93       	st	X, r19
 a26:	2e 93       	st	-X, r18
 a28:	13 97       	sbiw	r26, 0x03	; 3
		g_SOS.State    = INACTIVE;
 a2a:	12 96       	adiw	r26, 0x02	; 2
 a2c:	1c 92       	st	X, r1
		g_SOS_TickTime = g_SOS.Tick_Time;
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	90 93 7d 00 	sts	0x007D, r25
 a34:	80 93 7c 00 	sts	0x007C, r24
		
		/*-------------[ Timer Initialization ]-------------*/
		g_SOS_TMR.Timer_Mode = TIMER_MODE;
 a38:	aa ee       	ldi	r26, 0xEA	; 234
 a3a:	b0 e0       	ldi	r27, 0x00	; 0
 a3c:	11 96       	adiw	r26, 0x01	; 1
 a3e:	1c 92       	st	X, r1
 a40:	11 97       	sbiw	r26, 0x01	; 1
		g_SOS_TMR.Timer_Prescaler = TIMER_PRESCALER_64;
 a42:	84 e0       	ldi	r24, 0x04	; 4
 a44:	13 96       	adiw	r26, 0x03	; 3
 a46:	8c 93       	st	X, r24
 a48:	13 97       	sbiw	r26, 0x03	; 3
		g_SOS_TMR.Timer_Polling_Or_Interrupt = TIMER_INTERRUPT_MODE;
 a4a:	81 e0       	ldi	r24, 0x01	; 1
 a4c:	12 96       	adiw	r26, 0x02	; 2
 a4e:	8c 93       	st	X, r24
 a50:	12 97       	sbiw	r26, 0x02	; 2
		g_SOS_TMR.Timer_Cbk_ptr = g_SOS.Timer_Cbk_ptr;
 a52:	15 96       	adiw	r26, 0x05	; 5
 a54:	3c 93       	st	X, r19
 a56:	2e 93       	st	-X, r18
 a58:	14 97       	sbiw	r26, 0x04	; 4
		
		/* Select The Timer Channel & Set It's CallBack Function */
		switch(a_SOS_s->Timer_ID)
 a5a:	81 81       	ldd	r24, Z+1	; 0x01
 a5c:	81 30       	cpi	r24, 0x01	; 1
 a5e:	59 f0       	breq	.+22     	; 0xa76 <SOS_Init+0x70>
 a60:	18 f0       	brcs	.+6      	; 0xa68 <SOS_Init+0x62>
 a62:	82 30       	cpi	r24, 0x02	; 2
 a64:	81 f0       	breq	.+32     	; 0xa86 <SOS_Init+0x80>
 a66:	33 c0       	rjmp	.+102    	; 0xace <SOS_Init+0xc8>
		{
			case TIMER_CH0:
				g_SOS_TMR.Timer_CH_NO = TIMER_CH0;
 a68:	10 92 ea 00 	sts	0x00EA, r1
				TIMER0_SetCM(SOS_ISR_cbf);
 a6c:	87 ee       	ldi	r24, 0xE7	; 231
 a6e:	94 e0       	ldi	r25, 0x04	; 4
 a70:	0e 94 67 03 	call	0x6ce	; 0x6ce <TIMER0_SetCM>
				break;
 a74:	0f c0       	rjmp	.+30     	; 0xa94 <SOS_Init+0x8e>
			case TIMER_CH1:
				g_SOS_TMR.Timer_CH_NO = TIMER_CH1;
 a76:	81 e0       	ldi	r24, 0x01	; 1
 a78:	80 93 ea 00 	sts	0x00EA, r24
				TIMER1_SetCM(SOS_ISR_cbf);
 a7c:	87 ee       	ldi	r24, 0xE7	; 231
 a7e:	94 e0       	ldi	r25, 0x04	; 4
 a80:	0e 94 71 03 	call	0x6e2	; 0x6e2 <TIMER1_SetCM>
				break;
 a84:	07 c0       	rjmp	.+14     	; 0xa94 <SOS_Init+0x8e>
			case TIMER_CH2:
				g_SOS_TMR.Timer_CH_NO = TIMER_CH2;
 a86:	82 e0       	ldi	r24, 0x02	; 2
 a88:	80 93 ea 00 	sts	0x00EA, r24
				TIMER2_SetCM(SOS_ISR_cbf);
 a8c:	87 ee       	ldi	r24, 0xE7	; 231
 a8e:	94 e0       	ldi	r25, 0x04	; 4
 a90:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <TIMER2_SetCM>
				errorStauts = TMU_ERROR + INVALID_IN;
				return errorStauts;
		}
		
		/* Apply The Settings & Start The TMU Timer Hardware Module */
		Timer_Init(&g_SOS_TMR);
 a94:	8a ee       	ldi	r24, 0xEA	; 234
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	0e 94 c5 01 	call	0x38a	; 0x38a <Timer_Init>
		Timer_Start(g_SOS_TMR.Timer_CH_NO, TMR_Ticks);	
 a9c:	6a ef       	ldi	r22, 0xFA	; 250
 a9e:	70 e0       	ldi	r23, 0x00	; 0
 aa0:	80 91 ea 00 	lds	r24, 0x00EA
 aa4:	0e 94 2b 03 	call	0x656	; 0x656 <Timer_Start>
 aa8:	e7 e9       	ldi	r30, 0x97	; 151
 aaa:	f0 e0       	ldi	r31, 0x00	; 0
 aac:	86 ef       	ldi	r24, 0xF6	; 246
 aae:	90 e0       	ldi	r25, 0x00	; 0
		
		/*  Initialize The Request Buffer  */
		for(index = 0; index < REQUEST_BUFFER_LEN; index++)
		{
			g_RequestBuffer[index].State = INACTIVE;
 ab0:	10 82       	st	Z, r1
 ab2:	df 01       	movw	r26, r30
 ab4:	1c 97       	sbiw	r26, 0x0c	; 12
			g_RequestBuffer[index].Task_Ptr = NULL;
 ab6:	1d 92       	st	X+, r1
 ab8:	1c 92       	st	X, r1
 aba:	73 96       	adiw	r30, 0x13	; 19
		/* Apply The Settings & Start The TMU Timer Hardware Module */
		Timer_Init(&g_SOS_TMR);
		Timer_Start(g_SOS_TMR.Timer_CH_NO, TMR_Ticks);	
		
		/*  Initialize The Request Buffer  */
		for(index = 0; index < REQUEST_BUFFER_LEN; index++)
 abc:	e8 17       	cp	r30, r24
 abe:	f9 07       	cpc	r31, r25
 ac0:	b9 f7       	brne	.-18     	; 0xab0 <SOS_Init+0xaa>
	else
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
	}
	return errorStauts;
 ac2:	80 e0       	ldi	r24, 0x00	; 0
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	08 95       	ret
	}
	/*-------------[ In Case Of TMU's Null Pointer ]-------------*/
	else
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
 ac8:	89 ec       	ldi	r24, 0xC9	; 201
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	08 95       	ret
				g_SOS_TMR.Timer_CH_NO = TIMER_CH2;
				TIMER2_SetCM(SOS_ISR_cbf);
				break;
			default:
				errorStauts = TMU_ERROR + INVALID_IN;
				return errorStauts;
 ace:	8c ec       	ldi	r24, 0xCC	; 204
 ad0:	90 e0       	ldi	r25, 0x00	; 0
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
	}
	return errorStauts;
}
 ad2:	08 95       	ret

00000ad4 <Start_Task>:


ERROR_STATUS Start_Task(FunPtr a_TaskFun, uint16_t a_TaskID, uint8_t a_Periodic_OneShot, uint32_t a_Time, uint8_t a_Priority, FunPtr PreHook, FunPtr PostHook)
{
 ad4:	af 92       	push	r10
 ad6:	bf 92       	push	r11
 ad8:	cf 92       	push	r12
 ada:	df 92       	push	r13
 adc:	ef 92       	push	r14
 ade:	0f 93       	push	r16
 ae0:	1f 93       	push	r17
 ae2:	cf 93       	push	r28
 ae4:	df 93       	push	r29
 ae6:	fc 01       	movw	r30, r24
	a_NewTask.Periodicity = a_Periodic_OneShot;
	a_NewTask.Periority = a_Priority;
	a_NewTask.Count = ZERO;
	a_NewTask.State = ACTIVE;
	
	if(g_SOS.State == INACTIVE || g_SOS.State == ACTIVE)
 ae8:	90 91 63 00 	lds	r25, 0x0063
 aec:	92 30       	cpi	r25, 0x02	; 2
 aee:	08 f0       	brcs	.+2      	; 0xaf2 <Start_Task+0x1e>
 af0:	ac c0       	rjmp	.+344    	; 0xc4a <Start_Task+0x176>
	{
		/*-------------[ Check All CBF Pointers Validity ]-------------*/
		if(a_TaskFun != NULL && PreHook != NULL && PostHook != NULL)
 af2:	30 97       	sbiw	r30, 0x00	; 0
 af4:	09 f4       	brne	.+2      	; 0xaf8 <Start_Task+0x24>
 af6:	ac c0       	rjmp	.+344    	; 0xc50 <Start_Task+0x17c>
 af8:	c1 14       	cp	r12, r1
 afa:	d1 04       	cpc	r13, r1
 afc:	09 f4       	brne	.+2      	; 0xb00 <Start_Task+0x2c>
 afe:	ab c0       	rjmp	.+342    	; 0xc56 <Start_Task+0x182>
 b00:	a1 14       	cp	r10, r1
 b02:	b1 04       	cpc	r11, r1
 b04:	09 f4       	brne	.+2      	; 0xb08 <Start_Task+0x34>
 b06:	aa c0       	rjmp	.+340    	; 0xc5c <Start_Task+0x188>
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
 b08:	80 91 7f 00 	lds	r24, 0x007F
 b0c:	90 91 80 00 	lds	r25, 0x0080
 b10:	05 97       	sbiw	r24, 0x05	; 5
 b12:	49 f0       	breq	.+18     	; 0xb26 <Start_Task+0x52>
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
 b14:	80 91 9c 00 	lds	r24, 0x009C
 b18:	90 91 9d 00 	lds	r25, 0x009D
 b1c:	86 17       	cp	r24, r22
 b1e:	97 07       	cpc	r25, r23
 b20:	09 f0       	breq	.+2      	; 0xb24 <Start_Task+0x50>
 b22:	4a c0       	rjmp	.+148    	; 0xbb8 <Start_Task+0xe4>
 b24:	9e c0       	rjmp	.+316    	; 0xc62 <Start_Task+0x18e>
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Task & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].State == INACTIVE)
 b26:	80 91 97 00 	lds	r24, 0x0097
 b2a:	88 23       	and	r24, r24
 b2c:	41 f0       	breq	.+16     	; 0xb3e <Start_Task+0x6a>
 b2e:	aa ea       	ldi	r26, 0xAA	; 170
 b30:	b0 e0       	ldi	r27, 0x00	; 0
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Task & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
 b32:	81 e0       	ldi	r24, 0x01	; 1
 b34:	90 e0       	ldi	r25, 0x00	; 0
				{
					if(g_RequestBuffer[index].State == INACTIVE)
 b36:	5c 91       	ld	r21, X
 b38:	51 11       	cpse	r21, r1
 b3a:	36 c0       	rjmp	.+108    	; 0xba8 <Start_Task+0xd4>
 b3c:	02 c0       	rjmp	.+4      	; 0xb42 <Start_Task+0x6e>
 b3e:	80 e0       	ldi	r24, 0x00	; 0
 b40:	90 e0       	ldi	r25, 0x00	; 0
					{
						g_RequestBuffer[index] = a_NewTask;
 b42:	53 e1       	ldi	r21, 0x13	; 19
 b44:	58 9f       	mul	r21, r24
 b46:	d0 01       	movw	r26, r0
 b48:	59 9f       	mul	r21, r25
 b4a:	b0 0d       	add	r27, r0
 b4c:	11 24       	eor	r1, r1
 b4e:	a5 57       	subi	r26, 0x75	; 117
 b50:	bf 4f       	sbci	r27, 0xFF	; 255
 b52:	11 96       	adiw	r26, 0x01	; 1
 b54:	fc 93       	st	X, r31
 b56:	ee 93       	st	-X, r30
 b58:	13 96       	adiw	r26, 0x03	; 3
 b5a:	dc 92       	st	X, r13
 b5c:	ce 92       	st	-X, r12
 b5e:	12 97       	sbiw	r26, 0x02	; 2
 b60:	15 96       	adiw	r26, 0x05	; 5
 b62:	bc 92       	st	X, r11
 b64:	ae 92       	st	-X, r10
 b66:	14 97       	sbiw	r26, 0x04	; 4
 b68:	16 96       	adiw	r26, 0x06	; 6
 b6a:	ec 92       	st	X, r14
 b6c:	16 97       	sbiw	r26, 0x06	; 6
 b6e:	17 96       	adiw	r26, 0x07	; 7
 b70:	4c 93       	st	X, r20
 b72:	17 97       	sbiw	r26, 0x07	; 7
 b74:	18 96       	adiw	r26, 0x08	; 8
 b76:	0d 93       	st	X+, r16
 b78:	1d 93       	st	X+, r17
 b7a:	2d 93       	st	X+, r18
 b7c:	3c 93       	st	X, r19
 b7e:	1b 97       	sbiw	r26, 0x0b	; 11
 b80:	21 e0       	ldi	r18, 0x01	; 1
 b82:	1c 96       	adiw	r26, 0x0c	; 12
 b84:	2c 93       	st	X, r18
 b86:	1c 97       	sbiw	r26, 0x0c	; 12
 b88:	1d 96       	adiw	r26, 0x0d	; 13
 b8a:	1d 92       	st	X+, r1
 b8c:	1d 92       	st	X+, r1
 b8e:	1d 92       	st	X+, r1
 b90:	1c 92       	st	X, r1
 b92:	50 97       	sbiw	r26, 0x10	; 16
 b94:	52 96       	adiw	r26, 0x12	; 18
 b96:	7c 93       	st	X, r23
 b98:	6e 93       	st	-X, r22
 b9a:	51 97       	sbiw	r26, 0x11	; 17
						break;
					}
				}
				/*  If All Tasks In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
 b9c:	05 97       	sbiw	r24, 0x05	; 5
 b9e:	09 f4       	brne	.+2      	; 0xba2 <Start_Task+0xce>
 ba0:	63 c0       	rjmp	.+198    	; 0xc68 <Start_Task+0x194>
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
 ba2:	80 e0       	ldi	r24, 0x00	; 0
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	65 c0       	rjmp	.+202    	; 0xc72 <Start_Task+0x19e>
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Task & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
 ba8:	01 96       	adiw	r24, 0x01	; 1
 baa:	53 96       	adiw	r26, 0x13	; 19
 bac:	85 30       	cpi	r24, 0x05	; 5
 bae:	91 05       	cpc	r25, r1
 bb0:	11 f6       	brne	.-124    	; 0xb36 <Start_Task+0x62>
				}
				/*  If All Tasks In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
				{
					a_errorStatus = TMU_ERROR + FULL_BUFFER;
					return a_errorStatus;
 bb2:	8f ec       	ldi	r24, 0xCF	; 207
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	5d c0       	rjmp	.+186    	; 0xc72 <Start_Task+0x19e>
 bb8:	af ea       	ldi	r26, 0xAF	; 175
 bba:	b0 e0       	ldi	r27, 0x00	; 0
 bbc:	cb ef       	ldi	r28, 0xFB	; 251
 bbe:	d0 e0       	ldi	r29, 0x00	; 0
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
 bc0:	8d 91       	ld	r24, X+
 bc2:	9c 91       	ld	r25, X
 bc4:	11 97       	sbiw	r26, 0x01	; 1
 bc6:	86 17       	cp	r24, r22
 bc8:	97 07       	cpc	r25, r23
 bca:	09 f4       	brne	.+2      	; 0xbce <Start_Task+0xfa>
 bcc:	50 c0       	rjmp	.+160    	; 0xc6e <Start_Task+0x19a>
 bce:	53 96       	adiw	r26, 0x13	; 19
			}
			/*  If There Still Space In The Request Buffer  */
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
 bd0:	ac 17       	cp	r26, r28
 bd2:	bd 07       	cpc	r27, r29
 bd4:	a9 f7       	brne	.-22     	; 0xbc0 <Start_Task+0xec>
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
					}
				}
				/* Add The New Consumer To The Request Buffer */
				g_RequestBuffer[g_ReqBuffer_Index++] = a_NewTask;				
 bd6:	80 91 7f 00 	lds	r24, 0x007F
 bda:	90 91 80 00 	lds	r25, 0x0080
 bde:	dc 01       	movw	r26, r24
 be0:	11 96       	adiw	r26, 0x01	; 1
 be2:	b0 93 80 00 	sts	0x0080, r27
 be6:	a0 93 7f 00 	sts	0x007F, r26
 bea:	53 e1       	ldi	r21, 0x13	; 19
 bec:	58 9f       	mul	r21, r24
 bee:	d0 01       	movw	r26, r0
 bf0:	59 9f       	mul	r21, r25
 bf2:	b0 0d       	add	r27, r0
 bf4:	11 24       	eor	r1, r1
 bf6:	a5 57       	subi	r26, 0x75	; 117
 bf8:	bf 4f       	sbci	r27, 0xFF	; 255
 bfa:	11 96       	adiw	r26, 0x01	; 1
 bfc:	fc 93       	st	X, r31
 bfe:	ee 93       	st	-X, r30
 c00:	13 96       	adiw	r26, 0x03	; 3
 c02:	dc 92       	st	X, r13
 c04:	ce 92       	st	-X, r12
 c06:	12 97       	sbiw	r26, 0x02	; 2
 c08:	15 96       	adiw	r26, 0x05	; 5
 c0a:	bc 92       	st	X, r11
 c0c:	ae 92       	st	-X, r10
 c0e:	14 97       	sbiw	r26, 0x04	; 4
 c10:	16 96       	adiw	r26, 0x06	; 6
 c12:	ec 92       	st	X, r14
 c14:	16 97       	sbiw	r26, 0x06	; 6
 c16:	17 96       	adiw	r26, 0x07	; 7
 c18:	4c 93       	st	X, r20
 c1a:	17 97       	sbiw	r26, 0x07	; 7
 c1c:	18 96       	adiw	r26, 0x08	; 8
 c1e:	0d 93       	st	X+, r16
 c20:	1d 93       	st	X+, r17
 c22:	2d 93       	st	X+, r18
 c24:	3c 93       	st	X, r19
 c26:	1b 97       	sbiw	r26, 0x0b	; 11
 c28:	81 e0       	ldi	r24, 0x01	; 1
 c2a:	1c 96       	adiw	r26, 0x0c	; 12
 c2c:	8c 93       	st	X, r24
 c2e:	1c 97       	sbiw	r26, 0x0c	; 12
 c30:	1d 96       	adiw	r26, 0x0d	; 13
 c32:	1d 92       	st	X+, r1
 c34:	1d 92       	st	X+, r1
 c36:	1d 92       	st	X+, r1
 c38:	1c 92       	st	X, r1
 c3a:	50 97       	sbiw	r26, 0x10	; 16
 c3c:	52 96       	adiw	r26, 0x12	; 18
 c3e:	7c 93       	st	X, r23
 c40:	6e 93       	st	-X, r22
 c42:	51 97       	sbiw	r26, 0x11	; 17
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
 c44:	80 e0       	ldi	r24, 0x00	; 0
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	14 c0       	rjmp	.+40     	; 0xc72 <Start_Task+0x19e>
	}
	/*-------------[ In Case The TMU IS Not Active (Not Initialized Yet) ]-------------*/
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
 c4a:	8a ec       	ldi	r24, 0xCA	; 202
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	11 c0       	rjmp	.+34     	; 0xc72 <Start_Task+0x19e>
		}
		/*-------------[ In Case Of Consumer's Null Pointer CBF ]-------------*/
		else
		{
			a_errorStatus = TMU_ERROR + NULL_PTR;
			return a_errorStatus;
 c50:	89 ec       	ldi	r24, 0xC9	; 201
 c52:	90 e0       	ldi	r25, 0x00	; 0
 c54:	0e c0       	rjmp	.+28     	; 0xc72 <Start_Task+0x19e>
 c56:	89 ec       	ldi	r24, 0xC9	; 201
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	0b c0       	rjmp	.+22     	; 0xc72 <Start_Task+0x19e>
 c5c:	89 ec       	ldi	r24, 0xC9	; 201
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	08 c0       	rjmp	.+16     	; 0xc72 <Start_Task+0x19e>
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
					{
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
 c62:	8e ec       	ldi	r24, 0xCE	; 206
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	05 c0       	rjmp	.+10     	; 0xc72 <Start_Task+0x19e>
				}
				/*  If All Tasks In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
				{
					a_errorStatus = TMU_ERROR + FULL_BUFFER;
					return a_errorStatus;
 c68:	8f ec       	ldi	r24, 0xCF	; 207
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	02 c0       	rjmp	.+4      	; 0xc72 <Start_Task+0x19e>
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
					{
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
 c6e:	8e ec       	ldi	r24, 0xCE	; 206
 c70:	90 e0       	ldi	r25, 0x00	; 0
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
}
 c72:	df 91       	pop	r29
 c74:	cf 91       	pop	r28
 c76:	1f 91       	pop	r17
 c78:	0f 91       	pop	r16
 c7a:	ef 90       	pop	r14
 c7c:	df 90       	pop	r13
 c7e:	cf 90       	pop	r12
 c80:	bf 90       	pop	r11
 c82:	af 90       	pop	r10
 c84:	08 95       	ret

00000c86 <SOS_Run>:
	/*-------------[ Consumer Not Found In Request Buffer ]-------------*/
	return errorStatus;
}

void SOS_Run(void)
{
 c86:	af 92       	push	r10
 c88:	bf 92       	push	r11
 c8a:	cf 92       	push	r12
 c8c:	df 92       	push	r13
 c8e:	ef 92       	push	r14
 c90:	ff 92       	push	r15
 c92:	0f 93       	push	r16
 c94:	1f 93       	push	r17
 c96:	cf 93       	push	r28
 c98:	df 93       	push	r29
	uint8_t a_u8_ReadyIndex = ZERO, a_counter = ZERO;
	sint16_t a_temp;
	FunPtr a_TaskFunc, a_Task_PreHook, a_Task_PostHook;
	
	/*-------------[ Every TMU Tick, Go Through The Request Buffer ]-------------*/
	if(g_TMR_Ticks_Changed)
 c9a:	80 91 7e 00 	lds	r24, 0x007E
 c9e:	88 23       	and	r24, r24
 ca0:	09 f4       	brne	.+2      	; 0xca4 <SOS_Run+0x1e>
 ca2:	fa c0       	rjmp	.+500    	; 0xe98 <SOS_Run+0x212>
	{
		/* Initialize The Ready Tasks Buffer */
		for(a_s16_index = ZERO; a_s16_index < REQUEST_BUFFER_LEN; a_s16_index++)
		{
			g_ReadyTasks[a_s16_index] = -1;
 ca4:	e1 e8       	ldi	r30, 0x81	; 129
 ca6:	f0 e0       	ldi	r31, 0x00	; 0
 ca8:	8f ef       	ldi	r24, 0xFF	; 255
 caa:	9f ef       	ldi	r25, 0xFF	; 255
 cac:	91 83       	std	Z+1, r25	; 0x01
 cae:	80 83       	st	Z, r24
 cb0:	93 83       	std	Z+3, r25	; 0x03
 cb2:	82 83       	std	Z+2, r24	; 0x02
 cb4:	95 83       	std	Z+5, r25	; 0x05
 cb6:	84 83       	std	Z+4, r24	; 0x04
 cb8:	97 83       	std	Z+7, r25	; 0x07
 cba:	86 83       	std	Z+6, r24	; 0x06
 cbc:	91 87       	std	Z+9, r25	; 0x09
 cbe:	80 87       	std	Z+8, r24	; 0x08
 cc0:	e7 e9       	ldi	r30, 0x97	; 151
 cc2:	f0 e0       	ldi	r31, 0x00	; 0
 cc4:	c2 e9       	ldi	r28, 0x92	; 146
 cc6:	d0 e0       	ldi	r29, 0x00	; 0
 cc8:	10 e0       	ldi	r17, 0x00	; 0
 cca:	20 e0       	ldi	r18, 0x00	; 0
 ccc:	30 e0       	ldi	r19, 0x00	; 0
		}
		
		/* Go Through The Tasks Request Buffer To Add All Ready Tasks To Be Executed */
		for(a_s16_index = ZERO; a_s16_index < REQUEST_BUFFER_LEN; a_s16_index++)
		{
			g_RequestBuffer[a_s16_index].Count += g_SOS_TickTime;
 cce:	60 91 7c 00 	lds	r22, 0x007C
 cd2:	70 91 7d 00 	lds	r23, 0x007D
 cd6:	af 01       	movw	r20, r30
 cd8:	81 81       	ldd	r24, Z+1	; 0x01
 cda:	92 81       	ldd	r25, Z+2	; 0x02
 cdc:	a3 81       	ldd	r26, Z+3	; 0x03
 cde:	b4 81       	ldd	r27, Z+4	; 0x04
 ce0:	86 0f       	add	r24, r22
 ce2:	97 1f       	adc	r25, r23
 ce4:	a1 1d       	adc	r26, r1
 ce6:	b1 1d       	adc	r27, r1
 ce8:	81 83       	std	Z+1, r24	; 0x01
 cea:	92 83       	std	Z+2, r25	; 0x02
 cec:	a3 83       	std	Z+3, r26	; 0x03
 cee:	b4 83       	std	Z+4, r27	; 0x04
			
			/*-------------[ IF Consumer's Due Time Is Met!  ]-------------*/
			if(g_RequestBuffer[a_s16_index].Count >= g_RequestBuffer[a_s16_index].Time)
 cf0:	c9 80       	ldd	r12, Y+1	; 0x01
 cf2:	da 80       	ldd	r13, Y+2	; 0x02
 cf4:	eb 80       	ldd	r14, Y+3	; 0x03
 cf6:	fc 80       	ldd	r15, Y+4	; 0x04
 cf8:	8c 15       	cp	r24, r12
 cfa:	9d 05       	cpc	r25, r13
 cfc:	ae 05       	cpc	r26, r14
 cfe:	bf 05       	cpc	r27, r15
 d00:	30 f1       	brcs	.+76     	; 0xd4e <SOS_Run+0xc8>
				a_TaskFunc      = g_RequestBuffer[a_s16_index].Task_Ptr;
				a_Task_PreHook  = g_RequestBuffer[a_s16_index].Pre_Hook;
				a_Task_PostHook = g_RequestBuffer[a_s16_index].Post_Hook;
				
				/* IF The Consumer Function IS Periodic */
				if(g_RequestBuffer[a_s16_index].Periodicity == PERIODIC && g_RequestBuffer[a_s16_index].State == ACTIVE)
 d02:	88 81       	ld	r24, Y
 d04:	81 30       	cpi	r24, 0x01	; 1
 d06:	a1 f4       	brne	.+40     	; 0xd30 <SOS_Run+0xaa>
 d08:	80 81       	ld	r24, Z
 d0a:	81 30       	cpi	r24, 0x01	; 1
 d0c:	01 f5       	brne	.+64     	; 0xd4e <SOS_Run+0xc8>
				{
					g_RequestBuffer[a_s16_index].Count = ZERO;
 d0e:	da 01       	movw	r26, r20
 d10:	11 96       	adiw	r26, 0x01	; 1
 d12:	1d 92       	st	X+, r1
 d14:	1d 92       	st	X+, r1
 d16:	1d 92       	st	X+, r1
 d18:	1c 92       	st	X, r1
 d1a:	14 97       	sbiw	r26, 0x04	; 4
					g_ReadyTasks[a_u8_ReadyIndex++] = a_s16_index;
 d1c:	a1 2f       	mov	r26, r17
 d1e:	b0 e0       	ldi	r27, 0x00	; 0
 d20:	aa 0f       	add	r26, r26
 d22:	bb 1f       	adc	r27, r27
 d24:	af 57       	subi	r26, 0x7F	; 127
 d26:	bf 4f       	sbci	r27, 0xFF	; 255
 d28:	2d 93       	st	X+, r18
 d2a:	3c 93       	st	X, r19
 d2c:	1f 5f       	subi	r17, 0xFF	; 255
 d2e:	0f c0       	rjmp	.+30     	; 0xd4e <SOS_Run+0xc8>
				}
				
				/* Else IF The Consumer Function IS OneShot (Non-Periodic) */
				else if (g_RequestBuffer[a_s16_index].Periodicity == ONESHOT && g_RequestBuffer[a_s16_index].State == ACTIVE)
 d30:	81 11       	cpse	r24, r1
 d32:	0d c0       	rjmp	.+26     	; 0xd4e <SOS_Run+0xc8>
 d34:	80 81       	ld	r24, Z
 d36:	81 30       	cpi	r24, 0x01	; 1
 d38:	51 f4       	brne	.+20     	; 0xd4e <SOS_Run+0xc8>
				{
					g_RequestBuffer[a_s16_index].State = INACTIVE;
 d3a:	10 82       	st	Z, r1
					g_ReadyTasks[a_u8_ReadyIndex++] = a_s16_index;
 d3c:	a1 2f       	mov	r26, r17
 d3e:	b0 e0       	ldi	r27, 0x00	; 0
 d40:	aa 0f       	add	r26, r26
 d42:	bb 1f       	adc	r27, r27
 d44:	af 57       	subi	r26, 0x7F	; 127
 d46:	bf 4f       	sbci	r27, 0xFF	; 255
 d48:	2d 93       	st	X+, r18
 d4a:	3c 93       	st	X, r19
 d4c:	1f 5f       	subi	r17, 0xFF	; 255
		{
			g_ReadyTasks[a_s16_index] = -1;
		}
		
		/* Go Through The Tasks Request Buffer To Add All Ready Tasks To Be Executed */
		for(a_s16_index = ZERO; a_s16_index < REQUEST_BUFFER_LEN; a_s16_index++)
 d4e:	2f 5f       	subi	r18, 0xFF	; 255
 d50:	3f 4f       	sbci	r19, 0xFF	; 255
 d52:	73 96       	adiw	r30, 0x13	; 19
 d54:	63 96       	adiw	r28, 0x13	; 19
 d56:	25 30       	cpi	r18, 0x05	; 5
 d58:	31 05       	cpc	r19, r1
 d5a:	09 f0       	breq	.+2      	; 0xd5e <SOS_Run+0xd8>
 d5c:	b8 cf       	rjmp	.-144    	; 0xcce <SOS_Run+0x48>
					g_ReadyTasks[a_u8_ReadyIndex++] = a_s16_index;
				}
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
 d5e:	80 91 81 00 	lds	r24, 0x0081
 d62:	90 91 82 00 	lds	r25, 0x0082
 d66:	01 96       	adiw	r24, 0x01	; 1
 d68:	09 f4       	brne	.+2      	; 0xd6c <SOS_Run+0xe6>
 d6a:	94 c0       	rjmp	.+296    	; 0xe94 <SOS_Run+0x20e>
 d6c:	0f 2e       	mov	r0, r31
 d6e:	f1 e8       	ldi	r31, 0x81	; 129
 d70:	af 2e       	mov	r10, r31
 d72:	f0 e0       	ldi	r31, 0x00	; 0
 d74:	bf 2e       	mov	r11, r31
 d76:	f0 2d       	mov	r31, r0
 d78:	85 01       	movw	r16, r10
 d7a:	61 e0       	ldi	r22, 0x01	; 1
 d7c:	70 e0       	ldi	r23, 0x00	; 0
		{
			for (a_counter = a_s16_index + 1; g_ReadyTasks[a_counter] != -1; a_counter++)
			{
				if(g_RequestBuffer[g_ReadyTasks[a_s16_index]].Periority > g_RequestBuffer[g_ReadyTasks[a_counter]].Periority)
 d7e:	0f 2e       	mov	r0, r31
 d80:	f3 e1       	ldi	r31, 0x13	; 19
 d82:	ef 2e       	mov	r14, r31
 d84:	f0 2d       	mov	r31, r0
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
		{
			for (a_counter = a_s16_index + 1; g_ReadyTasks[a_counter] != -1; a_counter++)
 d86:	f6 2e       	mov	r15, r22
 d88:	cb 01       	movw	r24, r22
 d8a:	e8 01       	movw	r28, r16
 d8c:	2a 81       	ldd	r18, Y+2	; 0x02
 d8e:	3b 81       	ldd	r19, Y+3	; 0x03
 d90:	2f 3f       	cpi	r18, 0xFF	; 255
 d92:	ef ef       	ldi	r30, 0xFF	; 255
 d94:	3e 07       	cpc	r19, r30
 d96:	a1 f1       	breq	.+104    	; 0xe00 <SOS_Run+0x17a>
			{
				if(g_RequestBuffer[g_ReadyTasks[a_s16_index]].Periority > g_RequestBuffer[g_ReadyTasks[a_counter]].Periority)
 d98:	c8 80       	ld	r12, Y
 d9a:	d9 80       	ldd	r13, Y+1	; 0x01
 d9c:	ec 9c       	mul	r14, r12
 d9e:	d0 01       	movw	r26, r0
 da0:	ed 9c       	mul	r14, r13
 da2:	b0 0d       	add	r27, r0
 da4:	11 24       	eor	r1, r1
 da6:	a5 57       	subi	r26, 0x75	; 117
 da8:	bf 4f       	sbci	r27, 0xFF	; 255
 daa:	e2 9e       	mul	r14, r18
 dac:	f0 01       	movw	r30, r0
 dae:	e3 9e       	mul	r14, r19
 db0:	f0 0d       	add	r31, r0
 db2:	11 24       	eor	r1, r1
 db4:	e5 57       	subi	r30, 0x75	; 117
 db6:	ff 4f       	sbci	r31, 0xFF	; 255
 db8:	16 96       	adiw	r26, 0x06	; 6
 dba:	ac 91       	ld	r26, X
 dbc:	e6 81       	ldd	r30, Z+6	; 0x06
 dbe:	ea 17       	cp	r30, r26
 dc0:	48 f4       	brcc	.+18     	; 0xdd4 <SOS_Run+0x14e>
				{
					a_temp = g_ReadyTasks[a_s16_index];
					g_ReadyTasks[a_s16_index] = g_ReadyTasks[a_counter];
 dc2:	39 83       	std	Y+1, r19	; 0x01
 dc4:	28 83       	st	Y, r18
					g_ReadyTasks[a_counter] = a_temp;
 dc6:	88 0f       	add	r24, r24
 dc8:	99 1f       	adc	r25, r25
 dca:	fc 01       	movw	r30, r24
 dcc:	ef 57       	subi	r30, 0x7F	; 127
 dce:	ff 4f       	sbci	r31, 0xFF	; 255
 dd0:	d1 82       	std	Z+1, r13	; 0x01
 dd2:	c0 82       	st	Z, r12
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
		{
			for (a_counter = a_s16_index + 1; g_ReadyTasks[a_counter] != -1; a_counter++)
 dd4:	f3 94       	inc	r15
 dd6:	8f 2d       	mov	r24, r15
 dd8:	90 e0       	ldi	r25, 0x00	; 0
 dda:	fc 01       	movw	r30, r24
 ddc:	ee 0f       	add	r30, r30
 dde:	ff 1f       	adc	r31, r31
 de0:	ef 57       	subi	r30, 0x7F	; 127
 de2:	ff 4f       	sbci	r31, 0xFF	; 255
 de4:	20 81       	ld	r18, Z
 de6:	31 81       	ldd	r19, Z+1	; 0x01
 de8:	2f 3f       	cpi	r18, 0xFF	; 255
 dea:	ff ef       	ldi	r31, 0xFF	; 255
 dec:	3f 07       	cpc	r19, r31
 dee:	a1 f6       	brne	.-88     	; 0xd98 <SOS_Run+0x112>
 df0:	6f 5f       	subi	r22, 0xFF	; 255
 df2:	7f 4f       	sbci	r23, 0xFF	; 255
 df4:	0e 5f       	subi	r16, 0xFE	; 254
 df6:	1f 4f       	sbci	r17, 0xFF	; 255
					g_ReadyTasks[a_u8_ReadyIndex++] = a_s16_index;
				}
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
 df8:	8a 81       	ldd	r24, Y+2	; 0x02
 dfa:	9b 81       	ldd	r25, Y+3	; 0x03
 dfc:	01 96       	adiw	r24, 0x01	; 1
 dfe:	19 f6       	brne	.-122    	; 0xd86 <SOS_Run+0x100>
					g_ReadyTasks[a_counter] = a_temp;
				}					
			}
		}
		/* Execute The Ready Tasks One By One (In Priority Order) */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
 e00:	80 91 81 00 	lds	r24, 0x0081
 e04:	90 91 82 00 	lds	r25, 0x0082
 e08:	8f 3f       	cpi	r24, 0xFF	; 255
 e0a:	4f ef       	ldi	r20, 0xFF	; 255
 e0c:	94 07       	cpc	r25, r20
 e0e:	09 f4       	brne	.+2      	; 0xe12 <SOS_Run+0x18c>
 e10:	41 c0       	rjmp	.+130    	; 0xe94 <SOS_Run+0x20e>
		{
			/*--[ Debug Point ]--*/
			TCNT2 = g_ReadyTasks[a_s16_index];
			_delay_ms(1000);
			/*--[ Debug Point ]--*/
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Pre_Hook();
 e12:	0f 2e       	mov	r0, r31
 e14:	f3 e1       	ldi	r31, 0x13	; 19
 e16:	ff 2e       	mov	r15, r31
 e18:	f0 2d       	mov	r31, r0
		}
		/* Execute The Ready Tasks One By One (In Priority Order) */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
		{
			/*--[ Debug Point ]--*/
			TCNT2 = g_ReadyTasks[a_s16_index];
 e1a:	84 bd       	out	0x24, r24	; 36
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 e1c:	8f e3       	ldi	r24, 0x3F	; 63
 e1e:	9d e0       	ldi	r25, 0x0D	; 13
 e20:	a3 e0       	ldi	r26, 0x03	; 3
 e22:	81 50       	subi	r24, 0x01	; 1
 e24:	90 40       	sbci	r25, 0x00	; 0
 e26:	a0 40       	sbci	r26, 0x00	; 0
 e28:	e1 f7       	brne	.-8      	; 0xe22 <SOS_Run+0x19c>
 e2a:	00 c0       	rjmp	.+0      	; 0xe2c <SOS_Run+0x1a6>
 e2c:	00 00       	nop
 e2e:	85 01       	movw	r16, r10
			_delay_ms(1000);
			/*--[ Debug Point ]--*/
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Pre_Hook();
 e30:	f5 01       	movw	r30, r10
 e32:	80 81       	ld	r24, Z
 e34:	91 81       	ldd	r25, Z+1	; 0x01
 e36:	f8 9e       	mul	r15, r24
 e38:	f0 01       	movw	r30, r0
 e3a:	f9 9e       	mul	r15, r25
 e3c:	f0 0d       	add	r31, r0
 e3e:	11 24       	eor	r1, r1
 e40:	e5 57       	subi	r30, 0x75	; 117
 e42:	ff 4f       	sbci	r31, 0xFF	; 255
 e44:	02 80       	ldd	r0, Z+2	; 0x02
 e46:	f3 81       	ldd	r31, Z+3	; 0x03
 e48:	e0 2d       	mov	r30, r0
 e4a:	09 95       	icall
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Task_Ptr();
 e4c:	d5 01       	movw	r26, r10
 e4e:	8d 91       	ld	r24, X+
 e50:	9d 91       	ld	r25, X+
 e52:	5d 01       	movw	r10, r26
 e54:	f8 9e       	mul	r15, r24
 e56:	f0 01       	movw	r30, r0
 e58:	f9 9e       	mul	r15, r25
 e5a:	f0 0d       	add	r31, r0
 e5c:	11 24       	eor	r1, r1
 e5e:	e5 57       	subi	r30, 0x75	; 117
 e60:	ff 4f       	sbci	r31, 0xFF	; 255
 e62:	01 90       	ld	r0, Z+
 e64:	f0 81       	ld	r31, Z
 e66:	e0 2d       	mov	r30, r0
 e68:	09 95       	icall
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Post_Hook();
 e6a:	f8 01       	movw	r30, r16
 e6c:	80 81       	ld	r24, Z
 e6e:	91 81       	ldd	r25, Z+1	; 0x01
 e70:	f8 9e       	mul	r15, r24
 e72:	f0 01       	movw	r30, r0
 e74:	f9 9e       	mul	r15, r25
 e76:	f0 0d       	add	r31, r0
 e78:	11 24       	eor	r1, r1
 e7a:	e5 57       	subi	r30, 0x75	; 117
 e7c:	ff 4f       	sbci	r31, 0xFF	; 255
 e7e:	04 80       	ldd	r0, Z+4	; 0x04
 e80:	f5 81       	ldd	r31, Z+5	; 0x05
 e82:	e0 2d       	mov	r30, r0
 e84:	09 95       	icall
					g_ReadyTasks[a_counter] = a_temp;
				}					
			}
		}
		/* Execute The Ready Tasks One By One (In Priority Order) */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
 e86:	d5 01       	movw	r26, r10
 e88:	8d 91       	ld	r24, X+
 e8a:	9c 91       	ld	r25, X
 e8c:	8f 3f       	cpi	r24, 0xFF	; 255
 e8e:	bf ef       	ldi	r27, 0xFF	; 255
 e90:	9b 07       	cpc	r25, r27
 e92:	19 f6       	brne	.-122    	; 0xe1a <SOS_Run+0x194>
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Pre_Hook();
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Task_Ptr();
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Post_Hook();
		}		
		
		g_TMR_Ticks_Changed = FALSE;
 e94:	10 92 7e 00 	sts	0x007E, r1
	}
}
 e98:	df 91       	pop	r29
 e9a:	cf 91       	pop	r28
 e9c:	1f 91       	pop	r17
 e9e:	0f 91       	pop	r16
 ea0:	ff 90       	pop	r15
 ea2:	ef 90       	pop	r14
 ea4:	df 90       	pop	r13
 ea6:	cf 90       	pop	r12
 ea8:	bf 90       	pop	r11
 eaa:	af 90       	pop	r10
 eac:	08 95       	ret

00000eae <__tablejump2__>:
 eae:	ee 0f       	add	r30, r30
 eb0:	ff 1f       	adc	r31, r31
 eb2:	05 90       	lpm	r0, Z+
 eb4:	f4 91       	lpm	r31, Z
 eb6:	e0 2d       	mov	r30, r0
 eb8:	09 94       	ijmp

00000eba <_exit>:
 eba:	f8 94       	cli

00000ebc <__stop_program>:
 ebc:	ff cf       	rjmp	.-2      	; 0xebc <__stop_program>
