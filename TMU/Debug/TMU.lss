
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000b18  00000bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005b  00800062  00800062  00000bae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d0b  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009df  00000000  00000000  00002b57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007dd  00000000  00000000  00003536  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006fc  00000000  00000000  00003d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099d  00000000  00000000  00004410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c47  00000000  00000000  00004dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  000069f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_4>
  14:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_7>
  20:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_8>
  24:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_9>
  28:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_10>
  2c:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_11>
  30:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_12>
  34:	0c 94 1c 03 	jmp	0x638	; 0x638 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 45 03 	jmp	0x68a	; 0x68a <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3b       	cpi	r26, 0xBD	; 189
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  8a:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <txnotify>:
//uint8_t Arr[7] = {3, 3, 3, 3, 1, 5, 8};
uint8_t* MSG = (uint8_t*)"1234";


/* TX Completion Notification Routine */
void txnotify(enum_BcmStatus st){}
  92:	08 95       	ret

00000094 <omgplzzz>:
	
/* RX Completion Notification Routine */
void omgplzzz(enum_BcmStatus st)
{
	/* Debug Point */
	TCNT1L = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8c bd       	out	0x2c, r24	; 44
	/* Debug Point */
	
	BCM_DeInit(&BCM1);
  98:	86 e8       	ldi	r24, 0x86	; 134
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 25 05 	call	0xa4a	; 0xa4a <BCM_DeInit>
	BCM1.BCM_CH_ID = 1;
  a0:	e6 e8       	ldi	r30, 0x86	; 134
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	81 83       	std	Z+1, r24	; 0x01
	BCM1.Mode = BCM_Tx_Mode;
  a8:	10 82       	st	Z, r1
	BCM1.Protocol = UART_Protocol;
  aa:	12 82       	std	Z+2, r1	; 0x02
	BCM_Init(&BCM1);
  ac:	cf 01       	movw	r24, r30
  ae:	0e 94 93 04 	call	0x926	; 0x926 <BCM_Init>
	BCM_Send(rxBuffer, 7, &BCM1, txnotify);
  b2:	29 e4       	ldi	r18, 0x49	; 73
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	46 e8       	ldi	r20, 0x86	; 134
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	67 e0       	ldi	r22, 0x07	; 7
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	89 e8       	ldi	r24, 0x89	; 137
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 29 05 	call	0xa52	; 0xa52 <BCM_Send>
  c6:	08 95       	ret

000000c8 <main>:

int main(void)
{
	/*-------------[ BCM Initialization ]-------------*/
	
	BCM1.BCM_CH_ID = 1;
  c8:	e6 e8       	ldi	r30, 0x86	; 134
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	81 83       	std	Z+1, r24	; 0x01
	BCM1.Mode = BCM_Rx_Mode;
  d0:	80 83       	st	Z, r24
	BCM1.Protocol = SPI_Protocol;
  d2:	82 83       	std	Z+2, r24	; 0x02
	BCM_Init(&BCM1);
  d4:	cf 01       	movw	r24, r30
  d6:	0e 94 93 04 	call	0x926	; 0x926 <BCM_Init>
	
	BCM_Setup_RxBuffer(&BCM1, 7, rxBuffer, omgplzzz);
  da:	2a e4       	ldi	r18, 0x4A	; 74
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	49 e8       	ldi	r20, 0x89	; 137
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	67 e0       	ldi	r22, 0x07	; 7
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	86 e8       	ldi	r24, 0x86	; 134
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 17 05 	call	0xa2e	; 0xa2e <BCM_Setup_RxBuffer>
	
	while (1) 
    {
		BCM_Tx_Dispatcher();
  ee:	0e 94 20 04 	call	0x840	; 0x840 <BCM_Tx_Dispatcher>
		BCM_Rx_Dispatcher();
  f2:	0e 94 08 04 	call	0x810	; 0x810 <BCM_Rx_Dispatcher>
		softwareDelayMs(100);
  f6:	64 e6       	ldi	r22, 0x64	; 100
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 45 05 	call	0xa8a	; 0xa8a <softwareDelayMs>
    }
 102:	f5 cf       	rjmp	.-22     	; 0xee <main+0x26>

00000104 <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
 104:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
 106:	89 2b       	or	r24, r25
 108:	c9 f1       	breq	.+114    	; 0x17c <DIO_init+0x78>
	{
		switch(DIO_info->GPIO)
 10a:	80 81       	ld	r24, Z
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	91 f0       	breq	.+36     	; 0x134 <DIO_init+0x30>
 110:	28 f0       	brcs	.+10     	; 0x11c <DIO_init+0x18>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	d9 f0       	breq	.+54     	; 0x14c <DIO_init+0x48>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	29 f1       	breq	.+74     	; 0x164 <DIO_init+0x60>
 11a:	32 c0       	rjmp	.+100    	; 0x180 <DIO_init+0x7c>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
 11c:	81 81       	ldd	r24, Z+1	; 0x01
 11e:	2a b3       	in	r18, 0x1a	; 26
 120:	98 2f       	mov	r25, r24
 122:	90 95       	com	r25
 124:	29 23       	and	r18, r25
 126:	92 81       	ldd	r25, Z+2	; 0x02
 128:	98 23       	and	r25, r24
 12a:	82 2f       	mov	r24, r18
 12c:	89 2b       	or	r24, r25
 12e:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
 130:	80 e0       	ldi	r24, 0x00	; 0
			break;
 132:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
 134:	81 81       	ldd	r24, Z+1	; 0x01
 136:	27 b3       	in	r18, 0x17	; 23
 138:	98 2f       	mov	r25, r24
 13a:	90 95       	com	r25
 13c:	29 23       	and	r18, r25
 13e:	92 81       	ldd	r25, Z+2	; 0x02
 140:	98 23       	and	r25, r24
 142:	82 2f       	mov	r24, r18
 144:	89 2b       	or	r24, r25
 146:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
 148:	80 e0       	ldi	r24, 0x00	; 0
			break;
 14a:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
 14c:	81 81       	ldd	r24, Z+1	; 0x01
 14e:	24 b3       	in	r18, 0x14	; 20
 150:	98 2f       	mov	r25, r24
 152:	90 95       	com	r25
 154:	29 23       	and	r18, r25
 156:	92 81       	ldd	r25, Z+2	; 0x02
 158:	98 23       	and	r25, r24
 15a:	82 2f       	mov	r24, r18
 15c:	89 2b       	or	r24, r25
 15e:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
 160:	80 e0       	ldi	r24, 0x00	; 0
			break;
 162:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
 164:	81 81       	ldd	r24, Z+1	; 0x01
 166:	21 b3       	in	r18, 0x11	; 17
 168:	98 2f       	mov	r25, r24
 16a:	90 95       	com	r25
 16c:	29 23       	and	r18, r25
 16e:	92 81       	ldd	r25, Z+2	; 0x02
 170:	98 23       	and	r25, r24
 172:	82 2f       	mov	r24, r18
 174:	89 2b       	or	r24, r25
 176:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
 178:	80 e0       	ldi	r24, 0x00	; 0
			break;
 17a:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
 180:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 182:	08 95       	ret

00000184 <_SPIInitMaster>:
#include "SPI__.h"

 void (*PTR_CALL_BACK)(void);
 volatile uint8_t g_u8_RxFlag = TRUE;

extern void _SPIInitMaster(SPI_cfg_s * a_SPI_cfg){
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	00 d0       	rcall	.+0      	; 0x18a <_SPIInitMaster+0x6>
 18a:	00 d0       	rcall	.+0      	; 0x18c <_SPIInitMaster+0x8>
 18c:	00 d0       	rcall	.+0      	; 0x18e <_SPIInitMaster+0xa>
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	fc 01       	movw	r30, r24
		DIO_Cfg_s SPI_output_pins ;
		
	
	
		/* clear status register */
		SPSR = ZERO ;
 194:	1e b8       	out	0x0e, r1	; 14
		
		/* clear control mode */
		
		SPCR = ZERO ;
 196:	1d b8       	out	0x0d, r1	; 13
		
		/* master or slave bit 4 */
		SPCR |= Master_SPI ; 
 198:	6c 9a       	sbi	0x0d, 4	; 13
		
		/*set clock*/
		 
		SPCR|= a_SPI_cfg-> clockSPI ;
 19a:	9d b1       	in	r25, 0x0d	; 13
 19c:	80 81       	ld	r24, Z
 19e:	89 2b       	or	r24, r25
 1a0:	8d b9       	out	0x0d, r24	; 13
		
		/* data order update */
		
		SPCR|= a_SPI_cfg-> dataorder ;
 1a2:	9d b1       	in	r25, 0x0d	; 13
 1a4:	82 81       	ldd	r24, Z+2	; 0x02
 1a6:	89 2b       	or	r24, r25
 1a8:	8d b9       	out	0x0d, r24	; 13
		
		/* set phase bit2 and polarity bit3 */
		
		 SPCR |= a_SPI_cfg-> phasePolarityMode;
 1aa:	9d b1       	in	r25, 0x0d	; 13
 1ac:	81 81       	ldd	r24, Z+1	; 0x01
 1ae:	89 2b       	or	r24, r25
 1b0:	8d b9       	out	0x0d, r24	; 13
		
		/* set interrupt  */
		
		SPCR |= INTERRUPT_SPI ;
 1b2:	6f 9a       	sbi	0x0d, 7	; 13
		
		/*set interrupt call back function */
		
		PTR_CALL_BACK = a_SPI_cfg->ptr_call_back ;
 1b4:	83 81       	ldd	r24, Z+3	; 0x03
 1b6:	94 81       	ldd	r25, Z+4	; 0x04
 1b8:	90 93 bc 00 	sts	0x00BC, r25
 1bc:	80 93 bb 00 	sts	0x00BB, r24
	//SS   bit4 OUTPUT
	//MOSI bit5 OUTPUT
	//MISO bit6 INPUT
	//SCK  bit7 OUTPUT

	SPI_input_pins.GPIO = SPI_PORT ;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	89 83       	std	Y+1, r24	; 0x01
	SPI_input_pins.pins = MISO_PIN ;
 1c4:	90 e4       	ldi	r25, 0x40	; 64
 1c6:	9a 83       	std	Y+2, r25	; 0x02
	SPI_input_pins.dir = INPUT ;
 1c8:	1b 82       	std	Y+3, r1	; 0x03
	
	SPI_output_pins.GPIO = SPI_PORT ;
 1ca:	8c 83       	std	Y+4, r24	; 0x04
	SPI_output_pins.pins =  SCK_PIN|MOSI_PIN|SS_PIN ;
 1cc:	80 eb       	ldi	r24, 0xB0	; 176
 1ce:	8d 83       	std	Y+5, r24	; 0x05
	SPI_output_pins.dir = OUTPUT ;
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	8e 83       	std	Y+6, r24	; 0x06
	
	DIO_init(&SPI_output_pins);
 1d4:	ce 01       	movw	r24, r28
 1d6:	04 96       	adiw	r24, 0x04	; 4
 1d8:	0e 94 82 00 	call	0x104	; 0x104 <DIO_init>
	DIO_init(&SPI_input_pins);
 1dc:	ce 01       	movw	r24, r28
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	0e 94 82 00 	call	0x104	; 0x104 <DIO_init>
	
		
	/// enable SPI bit 6
	
	sei();
 1e4:	78 94       	sei
	SPCR |= Enable_SPI ;
 1e6:	6e 9a       	sbi	0x0d, 6	; 13
	
}
 1e8:	26 96       	adiw	r28, 0x06	; 6
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <_SPIInitSlave>:

extern void _SPIInitSlave(SPI_cfg_s * a_SPI_cfg ){
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	00 d0       	rcall	.+0      	; 0x200 <_SPIInitSlave+0x6>
 200:	00 d0       	rcall	.+0      	; 0x202 <_SPIInitSlave+0x8>
 202:	00 d0       	rcall	.+0      	; 0x204 <_SPIInitSlave+0xa>
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	fc 01       	movw	r30, r24
	DIO_Cfg_s SPI_output_pins ;
			
			
	
	//// clear status register
	SPSR = ZERO ;
 20a:	1e b8       	out	0x0e, r1	; 14
	
	/// clear control mode
	
	SPCR = ZERO ;
 20c:	1d b8       	out	0x0d, r1	; 13
	
	
	// master or slave bit 4
	SPCR |= Slave_SPI ;
 20e:	8d b1       	in	r24, 0x0d	; 13
 210:	8d b9       	out	0x0d, r24	; 13
	
	/// data order update
	
	SPCR|=a_SPI_cfg-> dataorder ;
 212:	9d b1       	in	r25, 0x0d	; 13
 214:	82 81       	ldd	r24, Z+2	; 0x02
 216:	89 2b       	or	r24, r25
 218:	8d b9       	out	0x0d, r24	; 13
	
	//set clock
	
	SPCR |= a_SPI_cfg-> clockSPI ;
 21a:	9d b1       	in	r25, 0x0d	; 13
 21c:	80 81       	ld	r24, Z
 21e:	89 2b       	or	r24, r25
 220:	8d b9       	out	0x0d, r24	; 13
	
	// set phase and polarity
	SPCR |=a_SPI_cfg -> phasePolarityMode ;
 222:	9d b1       	in	r25, 0x0d	; 13
 224:	81 81       	ldd	r24, Z+1	; 0x01
 226:	89 2b       	or	r24, r25
 228:	8d b9       	out	0x0d, r24	; 13
	
	/* set interrupt  */
	SPCR |= INTERRUPT_SPI ;
 22a:	6f 9a       	sbi	0x0d, 7	; 13
	
	/*set interrupt call back function */
		
	PTR_CALL_BACK = a_SPI_cfg->ptr_call_back ;
 22c:	83 81       	ldd	r24, Z+3	; 0x03
 22e:	94 81       	ldd	r25, Z+4	; 0x04
 230:	90 93 bc 00 	sts	0x00BC, r25
 234:	80 93 bb 00 	sts	0x00BB, r24
	//SS   bit4 INPUT
	//MOSI bit5 INPUT
	//MISO bit6 OUTPUT
	//SCK  bit7 INPUT

	SPI_input_pins.GPIO = SPI_PORT ;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	89 83       	std	Y+1, r24	; 0x01
	SPI_input_pins.pins =  SCK_PIN|MOSI_PIN|SS_PIN ;
 23c:	90 eb       	ldi	r25, 0xB0	; 176
 23e:	9a 83       	std	Y+2, r25	; 0x02
	SPI_input_pins.dir = INPUT ;
 240:	1b 82       	std	Y+3, r1	; 0x03

	SPI_output_pins.GPIO = SPI_PORT ;
 242:	8c 83       	std	Y+4, r24	; 0x04
	SPI_output_pins.pins = MISO_PIN ;
 244:	80 e4       	ldi	r24, 0x40	; 64
 246:	8d 83       	std	Y+5, r24	; 0x05
	SPI_output_pins.dir = OUTPUT ;
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	8e 83       	std	Y+6, r24	; 0x06


	DIO_init(&SPI_output_pins);
 24c:	ce 01       	movw	r24, r28
 24e:	04 96       	adiw	r24, 0x04	; 4
 250:	0e 94 82 00 	call	0x104	; 0x104 <DIO_init>
	DIO_init(&SPI_input_pins);
 254:	ce 01       	movw	r24, r28
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	0e 94 82 00 	call	0x104	; 0x104 <DIO_init>
	

	/// enable SPI bit 6
	sei();
 25c:	78 94       	sei
	
	SPCR |= Enable_SPI ;
 25e:	6e 9a       	sbi	0x0d, 6	; 13
	
		
	
}
 260:	26 96       	adiw	r28, 0x06	; 6
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <_SPISend>:
}

extern ERROR_STATUS _SPISend(uint8_t data)
{
	uint8_t state = E_NOK;	
	if(g_u8_RxFlag == TRUE)
 272:	90 91 60 00 	lds	r25, 0x0060
 276:	91 30       	cpi	r25, 0x01	; 1
 278:	29 f4       	brne	.+10     	; 0x284 <_SPISend+0x12>
	{
		SPDR = data;
 27a:	8f b9       	out	0x0f, r24	; 15
		g_u8_RxFlag = FALSE;	
 27c:	10 92 60 00 	sts	0x0060, r1
		state = E_OK;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	08 95       	ret
	g_u8_RxFlag = FALSE ;
}

extern ERROR_STATUS _SPISend(uint8_t data)
{
	uint8_t state = E_NOK;	
 284:	81 e0       	ldi	r24, 0x01	; 1
		SPDR = data;
		g_u8_RxFlag = FALSE;	
		state = E_OK;
	}
	return state;
}
 286:	08 95       	ret

00000288 <_SPIRead>:

extern ERROR_STATUS _SPIRead(uint8_t* data)
{
 288:	fc 01       	movw	r30, r24
	uint8_t state = E_NOK;
	if(g_u8_RxFlag == TRUE)
 28a:	90 91 60 00 	lds	r25, 0x0060
 28e:	91 30       	cpi	r25, 0x01	; 1
 290:	31 f4       	brne	.+12     	; 0x29e <_SPIRead+0x16>
	{
		*data = SPDR;
 292:	8f b1       	in	r24, 0x0f	; 15
 294:	80 83       	st	Z, r24
		g_u8_RxFlag = FALSE;
 296:	10 92 60 00 	sts	0x0060, r1
		state = E_OK;
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	08 95       	ret
	return state;
}

extern ERROR_STATUS _SPIRead(uint8_t* data)
{
	uint8_t state = E_NOK;
 29e:	81 e0       	ldi	r24, 0x01	; 1
		*data = SPDR;
		g_u8_RxFlag = FALSE;
		state = E_OK;
	}
	return state;
}
 2a0:	08 95       	ret

000002a2 <SPI_SetCBF>:


void SPI_SetCBF(FunPtr isr_ptr)
{
	PTR_CALL_BACK = isr_ptr;
 2a2:	90 93 bc 00 	sts	0x00BC, r25
 2a6:	80 93 bb 00 	sts	0x00BB, r24
 2aa:	08 95       	ret

000002ac <__vector_12>:
}

ISR(SPI_STC_vect)
{
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	2f 93       	push	r18
 2b8:	3f 93       	push	r19
 2ba:	4f 93       	push	r20
 2bc:	5f 93       	push	r21
 2be:	6f 93       	push	r22
 2c0:	7f 93       	push	r23
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
 2c6:	af 93       	push	r26
 2c8:	bf 93       	push	r27
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
	g_u8_RxFlag = TRUE;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	80 93 60 00 	sts	0x0060, r24
	PTR_CALL_BACK();
 2d4:	e0 91 bb 00 	lds	r30, 0x00BB
 2d8:	f0 91 bc 00 	lds	r31, 0x00BC
 2dc:	09 95       	icall
}
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	7f 91       	pop	r23
 2ec:	6f 91       	pop	r22
 2ee:	5f 91       	pop	r21
 2f0:	4f 91       	pop	r20
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
 300:	1f 92       	push	r1
 302:	0f 92       	push	r0
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
 322:	e0 91 6c 00 	lds	r30, 0x006C
 326:	f0 91 6d 00 	lds	r31, 0x006D
 32a:	30 97       	sbiw	r30, 0x00	; 0
 32c:	09 f0       	breq	.+2      	; 0x330 <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
 32e:	09 95       	icall
	}
}
 330:	ff 91       	pop	r31
 332:	ef 91       	pop	r30
 334:	bf 91       	pop	r27
 336:	af 91       	pop	r26
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	7f 91       	pop	r23
 33e:	6f 91       	pop	r22
 340:	5f 91       	pop	r21
 342:	4f 91       	pop	r20
 344:	3f 91       	pop	r19
 346:	2f 91       	pop	r18
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

00000352 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	2f 93       	push	r18
 35e:	3f 93       	push	r19
 360:	4f 93       	push	r20
 362:	5f 93       	push	r21
 364:	6f 93       	push	r22
 366:	7f 93       	push	r23
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
 36c:	af 93       	push	r26
 36e:	bf 93       	push	r27
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
 374:	e0 91 6a 00 	lds	r30, 0x006A
 378:	f0 91 6b 00 	lds	r31, 0x006B
 37c:	30 97       	sbiw	r30, 0x00	; 0
 37e:	09 f0       	breq	.+2      	; 0x382 <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
 380:	09 95       	icall
	}
}
 382:	ff 91       	pop	r31
 384:	ef 91       	pop	r30
 386:	bf 91       	pop	r27
 388:	af 91       	pop	r26
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	7f 91       	pop	r23
 390:	6f 91       	pop	r22
 392:	5f 91       	pop	r21
 394:	4f 91       	pop	r20
 396:	3f 91       	pop	r19
 398:	2f 91       	pop	r18
 39a:	0f 90       	pop	r0
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	0f 90       	pop	r0
 3a0:	1f 90       	pop	r1
 3a2:	18 95       	reti

000003a4 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	6f 93       	push	r22
 3b8:	7f 93       	push	r23
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
 3be:	af 93       	push	r26
 3c0:	bf 93       	push	r27
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
 3c6:	e0 91 64 00 	lds	r30, 0x0064
 3ca:	f0 91 65 00 	lds	r31, 0x0065
 3ce:	30 97       	sbiw	r30, 0x00	; 0
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
 3d2:	09 95       	icall
	}
}
 3d4:	ff 91       	pop	r31
 3d6:	ef 91       	pop	r30
 3d8:	bf 91       	pop	r27
 3da:	af 91       	pop	r26
 3dc:	9f 91       	pop	r25
 3de:	8f 91       	pop	r24
 3e0:	7f 91       	pop	r23
 3e2:	6f 91       	pop	r22
 3e4:	5f 91       	pop	r21
 3e6:	4f 91       	pop	r20
 3e8:	3f 91       	pop	r19
 3ea:	2f 91       	pop	r18
 3ec:	0f 90       	pop	r0
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	0f 90       	pop	r0
 3f2:	1f 90       	pop	r1
 3f4:	18 95       	reti

000003f6 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	2f 93       	push	r18
 402:	3f 93       	push	r19
 404:	4f 93       	push	r20
 406:	5f 93       	push	r21
 408:	6f 93       	push	r22
 40a:	7f 93       	push	r23
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
 410:	af 93       	push	r26
 412:	bf 93       	push	r27
 414:	ef 93       	push	r30
 416:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
 418:	e0 91 62 00 	lds	r30, 0x0062
 41c:	f0 91 63 00 	lds	r31, 0x0063
 420:	30 97       	sbiw	r30, 0x00	; 0
 422:	09 f0       	breq	.+2      	; 0x426 <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
 424:	09 95       	icall
	}
}
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	bf 91       	pop	r27
 42c:	af 91       	pop	r26
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	7f 91       	pop	r23
 434:	6f 91       	pop	r22
 436:	5f 91       	pop	r21
 438:	4f 91       	pop	r20
 43a:	3f 91       	pop	r19
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	2f 93       	push	r18
 454:	3f 93       	push	r19
 456:	4f 93       	push	r20
 458:	5f 93       	push	r21
 45a:	6f 93       	push	r22
 45c:	7f 93       	push	r23
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	af 93       	push	r26
 464:	bf 93       	push	r27
 466:	ef 93       	push	r30
 468:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
 46a:	e0 91 68 00 	lds	r30, 0x0068
 46e:	f0 91 69 00 	lds	r31, 0x0069
 472:	30 97       	sbiw	r30, 0x00	; 0
 474:	09 f0       	breq	.+2      	; 0x478 <__vector_9+0x30>
	{
		Ptr_Timer1_OV();
 476:	09 95       	icall
	}
}
 478:	ff 91       	pop	r31
 47a:	ef 91       	pop	r30
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	2f 93       	push	r18
 4a6:	3f 93       	push	r19
 4a8:	4f 93       	push	r20
 4aa:	5f 93       	push	r21
 4ac:	6f 93       	push	r22
 4ae:	7f 93       	push	r23
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
 4b4:	af 93       	push	r26
 4b6:	bf 93       	push	r27
 4b8:	ef 93       	push	r30
 4ba:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 4bc:	e0 91 66 00 	lds	r30, 0x0066
 4c0:	f0 91 67 00 	lds	r31, 0x0067
 4c4:	30 97       	sbiw	r30, 0x00	; 0
 4c6:	09 f0       	breq	.+2      	; 0x4ca <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
 4c8:	09 95       	icall
	}	
}
 4ca:	ff 91       	pop	r31
 4cc:	ef 91       	pop	r30
 4ce:	bf 91       	pop	r27
 4d0:	af 91       	pop	r26
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	7f 91       	pop	r23
 4d8:	6f 91       	pop	r22
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	2f 93       	push	r18
 4f8:	3f 93       	push	r19
 4fa:	4f 93       	push	r20
 4fc:	5f 93       	push	r21
 4fe:	6f 93       	push	r22
 500:	7f 93       	push	r23
 502:	8f 93       	push	r24
 504:	9f 93       	push	r25
 506:	af 93       	push	r26
 508:	bf 93       	push	r27
 50a:	ef 93       	push	r30
 50c:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 50e:	e0 91 66 00 	lds	r30, 0x0066
 512:	f0 91 67 00 	lds	r31, 0x0067
 516:	30 97       	sbiw	r30, 0x00	; 0
 518:	09 f0       	breq	.+2      	; 0x51c <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 51a:	09 95       	icall
	}
}
 51c:	ff 91       	pop	r31
 51e:	ef 91       	pop	r30
 520:	bf 91       	pop	r27
 522:	af 91       	pop	r26
 524:	9f 91       	pop	r25
 526:	8f 91       	pop	r24
 528:	7f 91       	pop	r23
 52a:	6f 91       	pop	r22
 52c:	5f 91       	pop	r21
 52e:	4f 91       	pop	r20
 530:	3f 91       	pop	r19
 532:	2f 91       	pop	r18
 534:	0f 90       	pop	r0
 536:	0f be       	out	0x3f, r0	; 63
 538:	0f 90       	pop	r0
 53a:	1f 90       	pop	r1
 53c:	18 95       	reti

0000053e <UART_Init>:
FunPtr Ptr_UART_TX = NULL;
FunPtr Ptr_UART_RX = NULL;


void UART_Init(UART_cfg* uart_cfg)
{
 53e:	cf 92       	push	r12
 540:	df 92       	push	r13
 542:	ef 92       	push	r14
 544:	ff 92       	push	r15
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	ec 01       	movw	r28, r24
	uint8_t uart_control = 0x80;
	// Set The UART Baud Rate
	UBRRL = ((F_cpu/(16*uart_cfg->baudrate)) - 1);
 54c:	8f 81       	ldd	r24, Y+7	; 0x07
 54e:	98 85       	ldd	r25, Y+8	; 0x08
 550:	a9 85       	ldd	r26, Y+9	; 0x09
 552:	ba 85       	ldd	r27, Y+10	; 0x0a
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	aa 1f       	adc	r26, r26
 55a:	bb 1f       	adc	r27, r27
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	aa 1f       	adc	r26, r26
 562:	bb 1f       	adc	r27, r27
 564:	9c 01       	movw	r18, r24
 566:	ad 01       	movw	r20, r26
 568:	22 0f       	add	r18, r18
 56a:	33 1f       	adc	r19, r19
 56c:	44 1f       	adc	r20, r20
 56e:	55 1f       	adc	r21, r21
 570:	22 0f       	add	r18, r18
 572:	33 1f       	adc	r19, r19
 574:	44 1f       	adc	r20, r20
 576:	55 1f       	adc	r21, r21
 578:	0f 2e       	mov	r0, r31
 57a:	c1 2c       	mov	r12, r1
 57c:	f4 e2       	ldi	r31, 0x24	; 36
 57e:	df 2e       	mov	r13, r31
 580:	f4 ef       	ldi	r31, 0xF4	; 244
 582:	ef 2e       	mov	r14, r31
 584:	f1 2c       	mov	r15, r1
 586:	f0 2d       	mov	r31, r0
 588:	c7 01       	movw	r24, r14
 58a:	b6 01       	movw	r22, r12
 58c:	0e 94 68 05 	call	0xad0	; 0xad0 <__udivmodsi4>
 590:	21 50       	subi	r18, 0x01	; 1
 592:	29 b9       	out	0x09, r18	; 9
	UBRRH = ((F_cpu/(16*uart_cfg->baudrate)) - 1)>>8;
 594:	8f 81       	ldd	r24, Y+7	; 0x07
 596:	98 85       	ldd	r25, Y+8	; 0x08
 598:	a9 85       	ldd	r26, Y+9	; 0x09
 59a:	ba 85       	ldd	r27, Y+10	; 0x0a
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	aa 1f       	adc	r26, r26
 5a2:	bb 1f       	adc	r27, r27
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	aa 1f       	adc	r26, r26
 5aa:	bb 1f       	adc	r27, r27
 5ac:	9c 01       	movw	r18, r24
 5ae:	ad 01       	movw	r20, r26
 5b0:	22 0f       	add	r18, r18
 5b2:	33 1f       	adc	r19, r19
 5b4:	44 1f       	adc	r20, r20
 5b6:	55 1f       	adc	r21, r21
 5b8:	22 0f       	add	r18, r18
 5ba:	33 1f       	adc	r19, r19
 5bc:	44 1f       	adc	r20, r20
 5be:	55 1f       	adc	r21, r21
 5c0:	c7 01       	movw	r24, r14
 5c2:	b6 01       	movw	r22, r12
 5c4:	0e 94 68 05 	call	0xad0	; 0xad0 <__udivmodsi4>
 5c8:	da 01       	movw	r26, r20
 5ca:	c9 01       	movw	r24, r18
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	a1 09       	sbc	r26, r1
 5d0:	b1 09       	sbc	r27, r1
 5d2:	89 2f       	mov	r24, r25
 5d4:	9a 2f       	mov	r25, r26
 5d6:	ab 2f       	mov	r26, r27
 5d8:	bb 27       	eor	r27, r27
 5da:	80 bd       	out	0x20, r24	; 32
	// Set The UART Mode OF Operation
	UCSRB |= (uart_cfg->mode | uart_cfg->uartInterrupts);
 5dc:	9a b1       	in	r25, 0x0a	; 10
 5de:	88 81       	ld	r24, Y
 5e0:	89 2b       	or	r24, r25
 5e2:	9e 81       	ldd	r25, Y+6	; 0x06
 5e4:	89 2b       	or	r24, r25
 5e6:	8a b9       	out	0x0a, r24	; 10
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
	UCSRC |= uart_control;
 5e8:	20 b5       	in	r18, 0x20	; 32
	// Set The UART Data Sampling Edge
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
 5ea:	8b 81       	ldd	r24, Y+3	; 0x03
 5ec:	9d 81       	ldd	r25, Y+5	; 0x05
 5ee:	89 2b       	or	r24, r25
 5f0:	80 68       	ori	r24, 0x80	; 128
 5f2:	99 81       	ldd	r25, Y+1	; 0x01
 5f4:	89 2b       	or	r24, r25
 5f6:	9a 81       	ldd	r25, Y+2	; 0x02
 5f8:	89 2b       	or	r24, r25
 5fa:	9c 81       	ldd	r25, Y+4	; 0x04
 5fc:	89 2b       	or	r24, r25
	UCSRC |= uart_control;
 5fe:	82 2b       	or	r24, r18
 600:	80 bd       	out	0x20, r24	; 32
	SREG  |= (0x80);
 602:	8f b7       	in	r24, 0x3f	; 63
 604:	80 68       	ori	r24, 0x80	; 128
 606:	8f bf       	out	0x3f, r24	; 63
}
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	ff 90       	pop	r15
 60e:	ef 90       	pop	r14
 610:	df 90       	pop	r13
 612:	cf 90       	pop	r12
 614:	08 95       	ret

00000616 <UART_Read>:

uint8_t UART_Read(void)
{
	return UDR;
 616:	8c b1       	in	r24, 0x0c	; 12
}
 618:	08 95       	ret

0000061a <UART_Write>:

void UART_Write(uint8_t data)
{
	// Wait For Empty Transmit Buffer
	while(!(UCSRA & (1<<5)));
 61a:	5d 9b       	sbis	0x0b, 5	; 11
 61c:	fe cf       	rjmp	.-4      	; 0x61a <UART_Write>
	// Write The Data To The Buffer & Send!
	UDR = data+48;
 61e:	80 5d       	subi	r24, 0xD0	; 208
 620:	8c b9       	out	0x0c, r24	; 12
 622:	08 95       	ret

00000624 <UART_SetTX>:
/*-----------[ Timers Set CallBack Functions ]-----------*/
/*=======================================================*/

void UART_SetTX(FunPtr Ptr_ISR)
{
	Ptr_UART_TX = Ptr_ISR;
 624:	90 93 71 00 	sts	0x0071, r25
 628:	80 93 70 00 	sts	0x0070, r24
 62c:	08 95       	ret

0000062e <UART_SetRX>:
}

void UART_SetRX(FunPtr Ptr_ISR)
{
	Ptr_UART_RX = Ptr_ISR;
 62e:	90 93 6f 00 	sts	0x006F, r25
 632:	80 93 6e 00 	sts	0x006E, r24
 636:	08 95       	ret

00000638 <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
 638:	1f 92       	push	r1
 63a:	0f 92       	push	r0
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	0f 92       	push	r0
 640:	11 24       	eor	r1, r1
 642:	2f 93       	push	r18
 644:	3f 93       	push	r19
 646:	4f 93       	push	r20
 648:	5f 93       	push	r21
 64a:	6f 93       	push	r22
 64c:	7f 93       	push	r23
 64e:	8f 93       	push	r24
 650:	9f 93       	push	r25
 652:	af 93       	push	r26
 654:	bf 93       	push	r27
 656:	ef 93       	push	r30
 658:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
 65a:	e0 91 6e 00 	lds	r30, 0x006E
 65e:	f0 91 6f 00 	lds	r31, 0x006F
 662:	30 97       	sbiw	r30, 0x00	; 0
 664:	09 f0       	breq	.+2      	; 0x668 <__vector_13+0x30>
	{
		Ptr_UART_RX();
 666:	09 95       	icall
	}
}
 668:	ff 91       	pop	r31
 66a:	ef 91       	pop	r30
 66c:	bf 91       	pop	r27
 66e:	af 91       	pop	r26
 670:	9f 91       	pop	r25
 672:	8f 91       	pop	r24
 674:	7f 91       	pop	r23
 676:	6f 91       	pop	r22
 678:	5f 91       	pop	r21
 67a:	4f 91       	pop	r20
 67c:	3f 91       	pop	r19
 67e:	2f 91       	pop	r18
 680:	0f 90       	pop	r0
 682:	0f be       	out	0x3f, r0	; 63
 684:	0f 90       	pop	r0
 686:	1f 90       	pop	r1
 688:	18 95       	reti

0000068a <__vector_15>:

ISR(USART_TXC_vect)
{
 68a:	1f 92       	push	r1
 68c:	0f 92       	push	r0
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	0f 92       	push	r0
 692:	11 24       	eor	r1, r1
 694:	2f 93       	push	r18
 696:	3f 93       	push	r19
 698:	4f 93       	push	r20
 69a:	5f 93       	push	r21
 69c:	6f 93       	push	r22
 69e:	7f 93       	push	r23
 6a0:	8f 93       	push	r24
 6a2:	9f 93       	push	r25
 6a4:	af 93       	push	r26
 6a6:	bf 93       	push	r27
 6a8:	ef 93       	push	r30
 6aa:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
 6ac:	e0 91 70 00 	lds	r30, 0x0070
 6b0:	f0 91 71 00 	lds	r31, 0x0071
 6b4:	30 97       	sbiw	r30, 0x00	; 0
 6b6:	09 f0       	breq	.+2      	; 0x6ba <__vector_15+0x30>
	{
		Ptr_UART_TX();
 6b8:	09 95       	icall
	}
 6ba:	ff 91       	pop	r31
 6bc:	ef 91       	pop	r30
 6be:	bf 91       	pop	r27
 6c0:	af 91       	pop	r26
 6c2:	9f 91       	pop	r25
 6c4:	8f 91       	pop	r24
 6c6:	7f 91       	pop	r23
 6c8:	6f 91       	pop	r22
 6ca:	5f 91       	pop	r21
 6cc:	4f 91       	pop	r20
 6ce:	3f 91       	pop	r19
 6d0:	2f 91       	pop	r18
 6d2:	0f 90       	pop	r0
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	0f 90       	pop	r0
 6d8:	1f 90       	pop	r1
 6da:	18 95       	reti

000006dc <BCM_Tx_ISR_cbf>:
/*===================================================================================*/

/*------------[ BCM CallBacks]------------*/
/* BCM Transmit ISR Call-Back Function */
static void BCM_Tx_ISR_cbf(void)
{	if (g_BCM_EXcfg.FSM_State == SendingByte_State)
 6dc:	80 91 7a 00 	lds	r24, 0x007A
 6e0:	82 30       	cpi	r24, 0x02	; 2
 6e2:	49 f4       	brne	.+18     	; 0x6f6 <BCM_Tx_ISR_cbf+0x1a>
	{
		g_BCM_EXcfg.Count++;
 6e4:	e6 e7       	ldi	r30, 0x76	; 118
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	84 85       	ldd	r24, Z+12	; 0x0c
 6ea:	95 85       	ldd	r25, Z+13	; 0x0d
 6ec:	01 96       	adiw	r24, 0x01	; 1
 6ee:	95 87       	std	Z+13, r25	; 0x0d
 6f0:	84 87       	std	Z+12, r24	; 0x0c
		g_BCM_EXcfg.FSM_State = SendComplete_State;
 6f2:	83 e0       	ldi	r24, 0x03	; 3
 6f4:	84 83       	std	Z+4, r24	; 0x04
 6f6:	08 95       	ret

000006f8 <BCM_Rx_ISR_cbf>:
	}
}

/* BCM Receive ISR Call-Back Function */
static void BCM_Rx_ISR_cbf(void)
{
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	1f 92       	push	r1
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
	uint8_t a_RX_Byte;
	switch(g_BCM_EXcfg.Protocol)
 702:	80 91 78 00 	lds	r24, 0x0078
 706:	88 23       	and	r24, r24
 708:	19 f0       	breq	.+6      	; 0x710 <BCM_Rx_ISR_cbf+0x18>
 70a:	81 30       	cpi	r24, 0x01	; 1
 70c:	29 f0       	breq	.+10     	; 0x718 <BCM_Rx_ISR_cbf+0x20>
 70e:	08 c0       	rjmp	.+16     	; 0x720 <BCM_Rx_ISR_cbf+0x28>
	{
		case UART_Protocol:
		{
			a_RX_Byte = UART_Read();
 710:	0e 94 0b 03 	call	0x616	; 0x616 <UART_Read>
 714:	89 83       	std	Y+1, r24	; 0x01
			break;
 716:	04 c0       	rjmp	.+8      	; 0x720 <BCM_Rx_ISR_cbf+0x28>
		}
		case SPI_Protocol:
		{
			_SPIRead(&a_RX_Byte);
 718:	ce 01       	movw	r24, r28
 71a:	01 96       	adiw	r24, 0x01	; 1
 71c:	0e 94 44 01 	call	0x288	; 0x288 <_SPIRead>
		default:
			break;
	}
	
	/* Debug Point */
	TCNT2 = a_RX_Byte;
 720:	89 81       	ldd	r24, Y+1	; 0x01
 722:	84 bd       	out	0x24, r24	; 36
	/* Debug Point */
	
	/* Read & Check The BCM Received ID */
	if(g_BCM_EXcfg.Count == 0)
 724:	80 91 82 00 	lds	r24, 0x0082
 728:	90 91 83 00 	lds	r25, 0x0083
 72c:	00 97       	sbiw	r24, 0x00	; 0
 72e:	b1 f4       	brne	.+44     	; 0x75c <BCM_Rx_ISR_cbf+0x64>
	{
		g_Rx_ID = a_RX_Byte;
 730:	89 81       	ldd	r24, Y+1	; 0x01
 732:	80 93 75 00 	sts	0x0075, r24
	
		if(g_Rx_ID == BCM_ID)
 736:	90 91 75 00 	lds	r25, 0x0075
 73a:	91 34       	cpi	r25, 0x41	; 65
 73c:	61 f4       	brne	.+24     	; 0x756 <BCM_Rx_ISR_cbf+0x5e>
		{
			/* Debug Point */
			TCNT0 = a_RX_Byte;
 73e:	82 bf       	out	0x32, r24	; 50
			/* Debug Point */
			
			g_ID_State = S_OK;
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	80 93 74 00 	sts	0x0074, r24
			g_BCM_EXcfg.Count++;
 746:	e6 e7       	ldi	r30, 0x76	; 118
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	84 85       	ldd	r24, Z+12	; 0x0c
 74c:	95 85       	ldd	r25, Z+13	; 0x0d
 74e:	01 96       	adiw	r24, 0x01	; 1
 750:	95 87       	std	Z+13, r25	; 0x0d
 752:	84 87       	std	Z+12, r24	; 0x0c
 754:	59 c0       	rjmp	.+178    	; 0x808 <BCM_Rx_ISR_cbf+0x110>
		}
		else
		{
			g_ID_State = S_NOK;
 756:	10 92 74 00 	sts	0x0074, r1
 75a:	56 c0       	rjmp	.+172    	; 0x808 <BCM_Rx_ISR_cbf+0x110>
	}
	/*-------------------[ ID IS CHECKED ]------------------*/
	/*------------------------------------------------------*/
	/*-------------------[ Save & CHECK MSG Len ]------------------*/
	/* Read & Check The BCM Received Data Length */
	else if(g_BCM_EXcfg.Count == 1)
 75c:	81 30       	cpi	r24, 0x01	; 1
 75e:	91 05       	cpc	r25, r1
 760:	41 f5       	brne	.+80     	; 0x7b2 <BCM_Rx_ISR_cbf+0xba>
	{
		if(a_RX_Byte > g_BCM_EXcfg.Buf_Len)
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	48 2f       	mov	r20, r24
 766:	50 e0       	ldi	r21, 0x00	; 0
 768:	20 91 7e 00 	lds	r18, 0x007E
 76c:	30 91 7f 00 	lds	r19, 0x007F
 770:	24 17       	cp	r18, r20
 772:	35 07       	cpc	r19, r21
 774:	78 f4       	brcc	.+30     	; 0x794 <BCM_Rx_ISR_cbf+0x9c>
		{
			g_LEN_State = S_NOK;
 776:	10 92 73 00 	sts	0x0073, r1
			g_BCM_EXcfg.FSM_State = IDLE_State;
 77a:	e6 e7       	ldi	r30, 0x76	; 118
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	84 83       	std	Z+4, r24	; 0x04
			g_BCM_EXcfg.Count = ZERO;
 782:	15 86       	std	Z+13, r1	; 0x0d
 784:	14 86       	std	Z+12, r1	; 0x0c
			g_BCM_EXcfg.BCM_notify_cbf(g_LEN_State);
 786:	80 91 73 00 	lds	r24, 0x0073
 78a:	06 84       	ldd	r0, Z+14	; 0x0e
 78c:	f7 85       	ldd	r31, Z+15	; 0x0f
 78e:	e0 2d       	mov	r30, r0
 790:	09 95       	icall
 792:	3a c0       	rjmp	.+116    	; 0x808 <BCM_Rx_ISR_cbf+0x110>
		}
		else
		{
			/* Debug Point */
			TCNT0 = a_RX_Byte;
 794:	82 bf       	out	0x32, r24	; 50
			/* Debug Point */
			
			g_BCM_EXcfg.MSG_Len = a_RX_Byte;
 796:	e6 e7       	ldi	r30, 0x76	; 118
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	89 81       	ldd	r24, Y+1	; 0x01
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	93 87       	std	Z+11, r25	; 0x0b
 7a0:	82 87       	std	Z+10, r24	; 0x0a
			g_BCM_EXcfg.Count++;
 7a2:	84 85       	ldd	r24, Z+12	; 0x0c
 7a4:	95 85       	ldd	r25, Z+13	; 0x0d
 7a6:	01 96       	adiw	r24, 0x01	; 1
 7a8:	95 87       	std	Z+13, r25	; 0x0d
 7aa:	84 87       	std	Z+12, r24	; 0x0c
			g_BCM_EXcfg.FSM_State = ReceivingByte_State;
 7ac:	84 e0       	ldi	r24, 0x04	; 4
 7ae:	84 83       	std	Z+4, r24	; 0x04
 7b0:	2b c0       	rjmp	.+86     	; 0x808 <BCM_Rx_ISR_cbf+0x110>
		}
	}
	else if(g_BCM_EXcfg.Count-2 < g_BCM_EXcfg.MSG_Len)
 7b2:	9c 01       	movw	r18, r24
 7b4:	22 50       	subi	r18, 0x02	; 2
 7b6:	31 09       	sbc	r19, r1
 7b8:	40 91 80 00 	lds	r20, 0x0080
 7bc:	50 91 81 00 	lds	r21, 0x0081
 7c0:	24 17       	cp	r18, r20
 7c2:	35 07       	cpc	r19, r21
 7c4:	a8 f4       	brcc	.+42     	; 0x7f0 <BCM_Rx_ISR_cbf+0xf8>
	{
		g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2] = a_RX_Byte;
 7c6:	89 81       	ldd	r24, Y+1	; 0x01
 7c8:	e6 e7       	ldi	r30, 0x76	; 118
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	46 81       	ldd	r20, Z+6	; 0x06
 7ce:	57 81       	ldd	r21, Z+7	; 0x07
 7d0:	da 01       	movw	r26, r20
 7d2:	a2 0f       	add	r26, r18
 7d4:	b3 1f       	adc	r27, r19
 7d6:	8c 93       	st	X, r24
		g_CS_Calculated += a_RX_Byte;
 7d8:	90 91 72 00 	lds	r25, 0x0072
 7dc:	89 81       	ldd	r24, Y+1	; 0x01
 7de:	89 0f       	add	r24, r25
 7e0:	80 93 72 00 	sts	0x0072, r24
		g_BCM_EXcfg.Count++;
 7e4:	84 85       	ldd	r24, Z+12	; 0x0c
 7e6:	95 85       	ldd	r25, Z+13	; 0x0d
 7e8:	01 96       	adiw	r24, 0x01	; 1
 7ea:	95 87       	std	Z+13, r25	; 0x0d
 7ec:	84 87       	std	Z+12, r24	; 0x0c
 7ee:	0c c0       	rjmp	.+24     	; 0x808 <BCM_Rx_ISR_cbf+0x110>
	}
	else if(g_BCM_EXcfg.Count-2 == g_BCM_EXcfg.MSG_Len)
 7f0:	24 17       	cp	r18, r20
 7f2:	35 07       	cpc	r19, r21
 7f4:	49 f4       	brne	.+18     	; 0x808 <BCM_Rx_ISR_cbf+0x110>
	{
		g_BCM_EXcfg.CheckSum = a_RX_Byte;
 7f6:	e6 e7       	ldi	r30, 0x76	; 118
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	29 81       	ldd	r18, Y+1	; 0x01
 7fc:	25 83       	std	Z+5, r18	; 0x05
		g_BCM_EXcfg.Count++;
 7fe:	01 96       	adiw	r24, 0x01	; 1
 800:	95 87       	std	Z+13, r25	; 0x0d
 802:	84 87       	std	Z+12, r24	; 0x0c
		g_BCM_EXcfg.FSM_State = ReceiveComplete_State;
 804:	85 e0       	ldi	r24, 0x05	; 5
 806:	84 83       	std	Z+4, r24	; 0x04
	}
	else
	{	}
}
 808:	0f 90       	pop	r0
 80a:	df 91       	pop	r29
 80c:	cf 91       	pop	r28
 80e:	08 95       	ret

00000810 <BCM_Rx_Dispatcher>:
/*---------[ BCM Dispatchers]---------*/

/* RX Dispatcher */
void BCM_Rx_Dispatcher(void)
{
	if(g_BCM_EXcfg.FSM_State == ReceiveComplete_State)
 810:	80 91 7a 00 	lds	r24, 0x007A
 814:	85 30       	cpi	r24, 0x05	; 5
 816:	99 f4       	brne	.+38     	; 0x83e <BCM_Rx_Dispatcher+0x2e>
	{	
		if(g_BCM_EXcfg.CheckSum == g_CS_Calculated)
 818:	80 91 72 00 	lds	r24, 0x0072
 81c:	90 91 7b 00 	lds	r25, 0x007B
 820:	98 13       	cpse	r25, r24
 822:	0d c0       	rjmp	.+26     	; 0x83e <BCM_Rx_Dispatcher+0x2e>
		{
			/* Debug Point */
			TCNT0 = 0xBB;
 824:	8b eb       	ldi	r24, 0xBB	; 187
 826:	82 bf       	out	0x32, r24	; 50
			/* Debug Point */
				
			g_BCM_EXcfg.Count = ZERO;
 828:	e6 e7       	ldi	r30, 0x76	; 118
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	15 86       	std	Z+13, r1	; 0x0d
 82e:	14 86       	std	Z+12, r1	; 0x0c
			g_BCM_EXcfg.FSM_State = IDLE_State;
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	84 83       	std	Z+4, r24	; 0x04
			g_BCM_EXcfg.BCM_notify_cbf(E_OK);
 834:	06 84       	ldd	r0, Z+14	; 0x0e
 836:	f7 85       	ldd	r31, Z+15	; 0x0f
 838:	e0 2d       	mov	r30, r0
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	09 95       	icall
 83e:	08 95       	ret

00000840 <BCM_Tx_Dispatcher>:
		}
	}
}

/* TX Dispatcher */
void BCM_Tx_Dispatcher(void){
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
	
	switch(g_BCM_EXcfg.FSM_State)
 844:	80 91 7a 00 	lds	r24, 0x007A
 848:	83 30       	cpi	r24, 0x03	; 3
 84a:	09 f0       	breq	.+2      	; 0x84e <BCM_Tx_Dispatcher+0xe>
 84c:	69 c0       	rjmp	.+210    	; 0x920 <__stack+0xc1>
		case IDLE_State :
			break;
		case SendingByte_State :
			break;
		case SendComplete_State :
		if(g_BCM_EXcfg.Count == 1)
 84e:	80 91 82 00 	lds	r24, 0x0082
 852:	90 91 83 00 	lds	r25, 0x0083
 856:	81 30       	cpi	r24, 0x01	; 1
 858:	91 05       	cpc	r25, r1
 85a:	a1 f4       	brne	.+40     	; 0x884 <__stack+0x25>
		{
			switch(g_BCM_EXcfg.Protocol){
 85c:	80 91 78 00 	lds	r24, 0x0078
 860:	88 23       	and	r24, r24
 862:	19 f0       	breq	.+6      	; 0x86a <__stack+0xb>
 864:	81 30       	cpi	r24, 0x01	; 1
 866:	31 f0       	breq	.+12     	; 0x874 <__stack+0x15>
 868:	09 c0       	rjmp	.+18     	; 0x87c <__stack+0x1d>
				case UART_Protocol :
				UART_Write(g_BCM_EXcfg.Buf_Len);
 86a:	80 91 7e 00 	lds	r24, 0x007E
 86e:	0e 94 0d 03 	call	0x61a	; 0x61a <UART_Write>
				break;
 872:	04 c0       	rjmp	.+8      	; 0x87c <__stack+0x1d>
				case  SPI_Protocol :
				_SPISend(g_BCM_EXcfg.Buf_Len);
 874:	80 91 7e 00 	lds	r24, 0x007E
 878:	0e 94 39 01 	call	0x272	; 0x272 <_SPISend>
				break;
			}
			g_BCM_EXcfg.FSM_State = SendingByte_State ;
 87c:	82 e0       	ldi	r24, 0x02	; 2
 87e:	80 93 7a 00 	sts	0x007A, r24
 882:	4e c0       	rjmp	.+156    	; 0x920 <__stack+0xc1>
			
		}
		else if (g_BCM_EXcfg.Count <= g_BCM_EXcfg.Buf_Len+1)
 884:	20 91 7e 00 	lds	r18, 0x007E
 888:	30 91 7f 00 	lds	r19, 0x007F
 88c:	a9 01       	movw	r20, r18
 88e:	4f 5f       	subi	r20, 0xFF	; 255
 890:	5f 4f       	sbci	r21, 0xFF	; 255
 892:	48 17       	cp	r20, r24
 894:	59 07       	cpc	r21, r25
 896:	18 f1       	brcs	.+70     	; 0x8de <__stack+0x7f>
		{
			g_BCM_EXcfg.CheckSum +=g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2];
 898:	a6 e7       	ldi	r26, 0x76	; 118
 89a:	b0 e0       	ldi	r27, 0x00	; 0
 89c:	02 97       	sbiw	r24, 0x02	; 2
 89e:	16 96       	adiw	r26, 0x06	; 6
 8a0:	ed 91       	ld	r30, X+
 8a2:	fc 91       	ld	r31, X
 8a4:	17 97       	sbiw	r26, 0x07	; 7
 8a6:	e8 0f       	add	r30, r24
 8a8:	f9 1f       	adc	r31, r25
 8aa:	90 81       	ld	r25, Z
 8ac:	15 96       	adiw	r26, 0x05	; 5
 8ae:	8c 91       	ld	r24, X
 8b0:	15 97       	sbiw	r26, 0x05	; 5
 8b2:	89 0f       	add	r24, r25
 8b4:	15 96       	adiw	r26, 0x05	; 5
 8b6:	8c 93       	st	X, r24
 8b8:	15 97       	sbiw	r26, 0x05	; 5
			
			switch(g_BCM_EXcfg.Protocol){
 8ba:	12 96       	adiw	r26, 0x02	; 2
 8bc:	8c 91       	ld	r24, X
 8be:	88 23       	and	r24, r24
 8c0:	19 f0       	breq	.+6      	; 0x8c8 <__stack+0x69>
 8c2:	81 30       	cpi	r24, 0x01	; 1
 8c4:	29 f0       	breq	.+10     	; 0x8d0 <__stack+0x71>
 8c6:	07 c0       	rjmp	.+14     	; 0x8d6 <__stack+0x77>
				case UART_Protocol :
				UART_Write(g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2]);
 8c8:	80 81       	ld	r24, Z
 8ca:	0e 94 0d 03 	call	0x61a	; 0x61a <UART_Write>
				break;
 8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <__stack+0x77>
				case  SPI_Protocol :
				_SPISend(g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2]);	
 8d0:	80 81       	ld	r24, Z
 8d2:	0e 94 39 01 	call	0x272	; 0x272 <_SPISend>
				break;
			}
			g_BCM_EXcfg.FSM_State = SendingByte_State ;
 8d6:	82 e0       	ldi	r24, 0x02	; 2
 8d8:	80 93 7a 00 	sts	0x007A, r24
 8dc:	21 c0       	rjmp	.+66     	; 0x920 <__stack+0xc1>

			}else if (g_BCM_EXcfg.Count == g_BCM_EXcfg.Buf_Len+2){
 8de:	2e 5f       	subi	r18, 0xFE	; 254
 8e0:	3f 4f       	sbci	r19, 0xFF	; 255
 8e2:	82 17       	cp	r24, r18
 8e4:	93 07       	cpc	r25, r19
 8e6:	a1 f4       	brne	.+40     	; 0x910 <__stack+0xb1>
			switch(g_BCM_EXcfg.Protocol){
 8e8:	80 91 78 00 	lds	r24, 0x0078
 8ec:	88 23       	and	r24, r24
 8ee:	19 f0       	breq	.+6      	; 0x8f6 <__stack+0x97>
 8f0:	81 30       	cpi	r24, 0x01	; 1
 8f2:	31 f0       	breq	.+12     	; 0x900 <__stack+0xa1>
 8f4:	09 c0       	rjmp	.+18     	; 0x908 <__stack+0xa9>
				
				case UART_Protocol :
				UART_Write(g_BCM_EXcfg.CheckSum);
 8f6:	80 91 7b 00 	lds	r24, 0x007B
 8fa:	0e 94 0d 03 	call	0x61a	; 0x61a <UART_Write>
				break;
 8fe:	04 c0       	rjmp	.+8      	; 0x908 <__stack+0xa9>
				case  SPI_Protocol :
				_SPISend(g_BCM_EXcfg.CheckSum);
 900:	80 91 7b 00 	lds	r24, 0x007B
 904:	0e 94 39 01 	call	0x272	; 0x272 <_SPISend>
				break;
			}
			g_BCM_EXcfg.FSM_State = SendingByte_State ;
 908:	82 e0       	ldi	r24, 0x02	; 2
 90a:	80 93 7a 00 	sts	0x007A, r24
 90e:	08 c0       	rjmp	.+16     	; 0x920 <__stack+0xc1>
			
			}else{
				g_BCM_EXcfg.BCM_notify_cbf(10);
 910:	c6 e7       	ldi	r28, 0x76	; 118
 912:	d0 e0       	ldi	r29, 0x00	; 0
 914:	ee 85       	ldd	r30, Y+14	; 0x0e
 916:	ff 85       	ldd	r31, Y+15	; 0x0f
 918:	8a e0       	ldi	r24, 0x0A	; 10
 91a:	09 95       	icall
			g_BCM_EXcfg.FSM_State = IDLE_State ;
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	8c 83       	std	Y+4, r24	; 0x04
		}
		break;
		case OFF_State :
		break;
	}	
}
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	08 95       	ret

00000926 <BCM_Init>:
/*------------------------------------*/

/* BCM Initialization Routine */
ERROR_STATUS BCM_Init(BCM_cfg_s* a_BCM)
{
 926:	cf 93       	push	r28
 928:	df 93       	push	r29
 92a:	cd b7       	in	r28, 0x3d	; 61
 92c:	de b7       	in	r29, 0x3e	; 62
 92e:	60 97       	sbiw	r28, 0x10	; 16
 930:	0f b6       	in	r0, 0x3f	; 63
 932:	f8 94       	cli
 934:	de bf       	out	0x3e, r29	; 62
 936:	0f be       	out	0x3f, r0	; 63
 938:	cd bf       	out	0x3d, r28	; 61
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	UART_cfg  a_BCM_UART;
	SPI_cfg_s a_BCM_SPI; 
	
	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_BCM != NULL)
 93a:	00 97       	sbiw	r24, 0x00	; 0
 93c:	09 f4       	brne	.+2      	; 0x940 <BCM_Init+0x1a>
 93e:	69 c0       	rjmp	.+210    	; 0xa12 <BCM_Init+0xec>
 940:	dc 01       	movw	r26, r24
	{
		/*--------[ Add The BCM CFG To The Working List ]--------*/
		g_BCM_EXcfg.BCM_CH_ID = a_BCM->BCM_CH_ID;
 942:	11 96       	adiw	r26, 0x01	; 1
 944:	8c 91       	ld	r24, X
 946:	11 97       	sbiw	r26, 0x01	; 1
 948:	e6 e7       	ldi	r30, 0x76	; 118
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	81 83       	std	Z+1, r24	; 0x01
		g_BCM_EXcfg.Mode      = a_BCM->Mode;
 94e:	9c 91       	ld	r25, X
 950:	90 83       	st	Z, r25
		g_BCM_EXcfg.Protocol  = a_BCM->Protocol;
 952:	12 96       	adiw	r26, 0x02	; 2
 954:	8c 91       	ld	r24, X
 956:	82 83       	std	Z+2, r24	; 0x02
		g_BCM_EXcfg.FSM_State = IDLE_State;
 958:	21 e0       	ldi	r18, 0x01	; 1
 95a:	24 83       	std	Z+4, r18	; 0x04
		g_BCM_EXcfg.Count     = ZERO;
 95c:	15 86       	std	Z+13, r1	; 0x0d
 95e:	14 86       	std	Z+12, r1	; 0x0c
		g_BCM_EXcfg.CheckSum  = ZERO;
 960:	15 82       	std	Z+5, r1	; 0x05
		g_BCM_EXcfg.Buf_Len   = ZERO;
 962:	11 86       	std	Z+9, r1	; 0x09
 964:	10 86       	std	Z+8, r1	; 0x08
		g_BCM_EXcfg.MSG_Len   = ZERO;
 966:	13 86       	std	Z+11, r1	; 0x0b
 968:	12 86       	std	Z+10, r1	; 0x0a
		
		/*--------[ Check The BCM HW Communication Protocol ]--------*/
		switch(g_BCM_EXcfg.Protocol)
 96a:	88 23       	and	r24, r24
 96c:	19 f0       	breq	.+6      	; 0x974 <BCM_Init+0x4e>
 96e:	81 30       	cpi	r24, 0x01	; 1
 970:	59 f1       	breq	.+86     	; 0x9c8 <BCM_Init+0xa2>
 972:	51 c0       	rjmp	.+162    	; 0xa16 <BCM_Init+0xf0>
		{
			/*----------------------[ UART CASE START ]---------------------*/
			case UART_Protocol:
			{
				a_BCM_UART.baudrate   = BCM_UART_BaudRate;
 974:	40 e8       	ldi	r20, 0x80	; 128
 976:	55 e2       	ldi	r21, 0x25	; 37
 978:	60 e0       	ldi	r22, 0x00	; 0
 97a:	70 e0       	ldi	r23, 0x00	; 0
 97c:	48 87       	std	Y+8, r20	; 0x08
 97e:	59 87       	std	Y+9, r21	; 0x09
 980:	6a 87       	std	Y+10, r22	; 0x0a
 982:	7b 87       	std	Y+11, r23	; 0x0b
				a_BCM_UART.dataBits   = UART_Bits_8;
 984:	86 e0       	ldi	r24, 0x06	; 6
 986:	8a 83       	std	Y+2, r24	; 0x02
				a_BCM_UART.stopBits   = StopBits_1;
 988:	1d 82       	std	Y+5, r1	; 0x05
				a_BCM_UART.parity     = No_Parity;
 98a:	1b 82       	std	Y+3, r1	; 0x03
				a_BCM_UART.sampleEdge = RisingEdg;
 98c:	1e 82       	std	Y+6, r1	; 0x06
				a_BCM_UART.uartSync   = UART_Async;
 98e:	1c 82       	std	Y+4, r1	; 0x04
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
 990:	99 23       	and	r25, r25
 992:	19 f0       	breq	.+6      	; 0x99a <BCM_Init+0x74>
 994:	91 30       	cpi	r25, 0x01	; 1
 996:	51 f0       	breq	.+20     	; 0x9ac <BCM_Init+0x86>
 998:	11 c0       	rjmp	.+34     	; 0x9bc <BCM_Init+0x96>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_UART.mode = UART_TX;
 99a:	88 e0       	ldi	r24, 0x08	; 8
 99c:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnTx;
 99e:	80 e4       	ldi	r24, 0x40	; 64
 9a0:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						UART_SetTX(BCM_Tx_ISR_cbf);
 9a2:	8e e6       	ldi	r24, 0x6E	; 110
 9a4:	93 e0       	ldi	r25, 0x03	; 3
 9a6:	0e 94 12 03 	call	0x624	; 0x624 <UART_SetTX>
						break;
 9aa:	08 c0       	rjmp	.+16     	; 0x9bc <BCM_Init+0x96>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_UART.mode = UART_RX;
 9ac:	80 e1       	ldi	r24, 0x10	; 16
 9ae:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnRx;
 9b0:	80 e8       	ldi	r24, 0x80	; 128
 9b2:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						UART_SetRX(BCM_Rx_ISR_cbf);
 9b4:	8c e7       	ldi	r24, 0x7C	; 124
 9b6:	93 e0       	ldi	r25, 0x03	; 3
 9b8:	0e 94 17 03 	call	0x62e	; 0x62e <UART_SetRX>
					}
					default:
						break;
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
 9bc:	ce 01       	movw	r24, r28
 9be:	01 96       	adiw	r24, 0x01	; 1
 9c0:	0e 94 9f 02 	call	0x53e	; 0x53e <UART_Init>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 9c4:	8c e3       	ldi	r24, 0x3C	; 60
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
				
				errorStatus = BCM_ERROR + E_OK;
				break;
 9c6:	2a c0       	rjmp	.+84     	; 0xa1c <BCM_Init+0xf6>
			/*----------------------[ UART CASE END ]---------------------*/
			/*------------------------------------------------------------*/
			/*----------------------[ SPI CASE START ]--------------------*/
			case SPI_Protocol:
			{
				a_BCM_SPI.clockSPI = Fosc128;
 9c8:	83 e0       	ldi	r24, 0x03	; 3
 9ca:	8c 87       	std	Y+12, r24	; 0x0c
				a_BCM_SPI.dataorder = MSB;
 9cc:	1e 86       	std	Y+14, r1	; 0x0e
				a_BCM_SPI.phasePolarityMode = mode0;
 9ce:	1d 86       	std	Y+13, r1	; 0x0d
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
 9d0:	99 23       	and	r25, r25
 9d2:	19 f0       	breq	.+6      	; 0x9da <BCM_Init+0xb4>
 9d4:	91 30       	cpi	r25, 0x01	; 1
 9d6:	79 f0       	breq	.+30     	; 0x9f6 <BCM_Init+0xd0>
 9d8:	20 c0       	rjmp	.+64     	; 0xa1a <BCM_Init+0xf4>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_SPI.ptr_call_back = BCM_Tx_ISR_cbf;
 9da:	8e e6       	ldi	r24, 0x6E	; 110
 9dc:	93 e0       	ldi	r25, 0x03	; 3
 9de:	98 8b       	std	Y+16, r25	; 0x10
 9e0:	8f 87       	std	Y+15, r24	; 0x0f
						_SPIInitMaster(&a_BCM_SPI);
 9e2:	ce 01       	movw	r24, r28
 9e4:	0c 96       	adiw	r24, 0x0c	; 12
 9e6:	0e 94 c2 00 	call	0x184	; 0x184 <_SPIInitMaster>
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Tx_ISR_cbf);
 9ea:	8e e6       	ldi	r24, 0x6E	; 110
 9ec:	93 e0       	ldi	r25, 0x03	; 3
 9ee:	0e 94 51 01 	call	0x2a2	; 0x2a2 <SPI_SetCBF>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 9f2:	8c e3       	ldi	r24, 0x3C	; 60
					{
						a_BCM_SPI.ptr_call_back = BCM_Tx_ISR_cbf;
						_SPIInitMaster(&a_BCM_SPI);
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Tx_ISR_cbf);
						break;
 9f4:	13 c0       	rjmp	.+38     	; 0xa1c <BCM_Init+0xf6>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_SPI.ptr_call_back = BCM_Rx_ISR_cbf;
 9f6:	8c e7       	ldi	r24, 0x7C	; 124
 9f8:	93 e0       	ldi	r25, 0x03	; 3
 9fa:	98 8b       	std	Y+16, r25	; 0x10
 9fc:	8f 87       	std	Y+15, r24	; 0x0f
						_SPIInitSlave(&a_BCM_SPI);
 9fe:	ce 01       	movw	r24, r28
 a00:	0c 96       	adiw	r24, 0x0c	; 12
 a02:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_SPIInitSlave>
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Rx_ISR_cbf);
 a06:	8c e7       	ldi	r24, 0x7C	; 124
 a08:	93 e0       	ldi	r25, 0x03	; 3
 a0a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <SPI_SetCBF>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 a0e:	8c e3       	ldi	r24, 0x3C	; 60
					{
						a_BCM_SPI.ptr_call_back = BCM_Rx_ISR_cbf;
						_SPIInitSlave(&a_BCM_SPI);
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Rx_ISR_cbf);
						break;
 a10:	05 c0       	rjmp	.+10     	; 0xa1c <BCM_Init+0xf6>
	}
	/*-------------[ In Case Of BCM's Null Pointer ]-------------*/
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
 a12:	8d e3       	ldi	r24, 0x3D	; 61
 a14:	03 c0       	rjmp	.+6      	; 0xa1c <BCM_Init+0xf6>
				break;
			}
			/*----------------------[ SPI CASE END ]---------------------*/
			default:
				errorStatus = BCM_ERROR + INVALID_IN;
				return errorStatus;
 a16:	80 e4       	ldi	r24, 0x40	; 64
 a18:	01 c0       	rjmp	.+2      	; 0xa1c <BCM_Init+0xf6>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 a1a:	8c e3       	ldi	r24, 0x3C	; 60
}
 a1c:	60 96       	adiw	r28, 0x10	; 16
 a1e:	0f b6       	in	r0, 0x3f	; 63
 a20:	f8 94       	cli
 a22:	de bf       	out	0x3e, r29	; 62
 a24:	0f be       	out	0x3f, r0	; 63
 a26:	cd bf       	out	0x3d, r28	; 61
 a28:	df 91       	pop	r29
 a2a:	cf 91       	pop	r28
 a2c:	08 95       	ret

00000a2e <BCM_Setup_RxBuffer>:
	/* Needs So Much Improvements & Error Checking & More... */
	
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	
	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_BCM != NULL)
 a2e:	89 2b       	or	r24, r25
 a30:	51 f0       	breq	.+20     	; 0xa46 <BCM_Setup_RxBuffer+0x18>
	{
		g_BCM_EXcfg.Buf_Len = a_Buffer_Len;
 a32:	e6 e7       	ldi	r30, 0x76	; 118
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	71 87       	std	Z+9, r23	; 0x09
 a38:	60 87       	std	Z+8, r22	; 0x08
		g_BCM_EXcfg.Buffer = a_buffer;
 a3a:	57 83       	std	Z+7, r21	; 0x07
 a3c:	46 83       	std	Z+6, r20	; 0x06
		g_BCM_EXcfg.FSM_State = IDLE_State;
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	84 83       	std	Z+4, r24	; 0x04
		g_BCM_EXcfg.BCM_notify_cbf = a_notify;
 a42:	37 87       	std	Z+15, r19	; 0x0f
 a44:	26 87       	std	Z+14, r18	; 0x0e
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
}
 a46:	8d e3       	ldi	r24, 0x3D	; 61
 a48:	08 95       	ret

00000a4a <BCM_DeInit>:
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	
	/*--------[ Search For That BCM CFG In The Working List ]--------*/

	/*--------[ Set That BCM To OFF ]--------*/
	g_BCM_EXcfg.FSM_State = OFF_State;
 a4a:	10 92 7a 00 	sts	0x007A, r1
	
	errorStatus= BCM_ERROR + E_OK;

	return errorStatus;
}
 a4e:	8c e3       	ldi	r24, 0x3C	; 60
 a50:	08 95       	ret

00000a52 <BCM_Send>:

ERROR_STATUS BCM_Send(uint8_t* Buffer, uint16_t Buf_Len, BCM_cfg_s* My_BCM, Notify_FunPtr Notify_Ptr ){
	
	/* lock the buffer so user can't chance on it  */
	
	g_BCM_EXcfg.Lock_State = Buffer_Locked ;
 a52:	e6 e7       	ldi	r30, 0x76	; 118
 a54:	f0 e0       	ldi	r31, 0x00	; 0
 a56:	41 e0       	ldi	r20, 0x01	; 1
 a58:	43 83       	std	Z+3, r20	; 0x03
	
	/*set the buffer address, length, and notification function*/
	
	g_BCM_EXcfg.Buffer = Buffer;
 a5a:	97 83       	std	Z+7, r25	; 0x07
 a5c:	86 83       	std	Z+6, r24	; 0x06
	g_BCM_EXcfg.Buf_Len = Buf_Len;
 a5e:	71 87       	std	Z+9, r23	; 0x09
 a60:	60 87       	std	Z+8, r22	; 0x08
	g_BCM_EXcfg.BCM_notify_cbf = Notify_Ptr;
 a62:	37 87       	std	Z+15, r19	; 0x0f
 a64:	26 87       	std	Z+14, r18	; 0x0e
	
	switch(g_BCM_EXcfg.Protocol){
 a66:	82 81       	ldd	r24, Z+2	; 0x02
 a68:	88 23       	and	r24, r24
 a6a:	19 f0       	breq	.+6      	; 0xa72 <BCM_Send+0x20>
 a6c:	81 30       	cpi	r24, 0x01	; 1
 a6e:	29 f0       	breq	.+10     	; 0xa7a <BCM_Send+0x28>
 a70:	07 c0       	rjmp	.+14     	; 0xa80 <BCM_Send+0x2e>
		
		case UART_Protocol :
			UART_Write(BCM_ID);
 a72:	81 e4       	ldi	r24, 0x41	; 65
 a74:	0e 94 0d 03 	call	0x61a	; 0x61a <UART_Write>
		break;
 a78:	03 c0       	rjmp	.+6      	; 0xa80 <BCM_Send+0x2e>
		case  SPI_Protocol :
			_SPISend(BCM_ID);
 a7a:	81 e4       	ldi	r24, 0x41	; 65
 a7c:	0e 94 39 01 	call	0x272	; 0x272 <_SPISend>
		break;
		
	}
	g_BCM_EXcfg.FSM_State = SendingByte_State ;	
 a80:	82 e0       	ldi	r24, 0x02	; 2
 a82:	80 93 7a 00 	sts	0x007A, r24
	return 0 ;
}
 a86:	80 e0       	ldi	r24, 0x00	; 0
 a88:	08 95       	ret

00000a8a <softwareDelayMs>:
 */ 
#include "softwareDelay.h"
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 a8a:	0f 93       	push	r16
 a8c:	1f 93       	push	r17
 a8e:	8b 01       	movw	r16, r22
 a90:	9c 01       	movw	r18, r24
  uint32_t ticks = 2290, i, j;
  for(j=0; j<u32_delay_in_ms; j++)
 a92:	67 2b       	or	r22, r23
 a94:	68 2b       	or	r22, r24
 a96:	69 2b       	or	r22, r25
 a98:	81 f4       	brne	.+32     	; 0xaba <softwareDelayMs+0x30>
 a9a:	17 c0       	rjmp	.+46     	; 0xaca <softwareDelayMs+0x40>
 a9c:	01 96       	adiw	r24, 0x01	; 1
  {
    for(i=0; i<ticks; i++)
 a9e:	82 3f       	cpi	r24, 0xF2	; 242
 aa0:	a8 e0       	ldi	r26, 0x08	; 8
 aa2:	9a 07       	cpc	r25, r26
 aa4:	d9 f7       	brne	.-10     	; 0xa9c <softwareDelayMs+0x12>
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
  uint32_t ticks = 2290, i, j;
  for(j=0; j<u32_delay_in_ms; j++)
 aa6:	4f 5f       	subi	r20, 0xFF	; 255
 aa8:	5f 4f       	sbci	r21, 0xFF	; 255
 aaa:	6f 4f       	sbci	r22, 0xFF	; 255
 aac:	7f 4f       	sbci	r23, 0xFF	; 255
 aae:	40 17       	cp	r20, r16
 ab0:	51 07       	cpc	r21, r17
 ab2:	62 07       	cpc	r22, r18
 ab4:	73 07       	cpc	r23, r19
 ab6:	31 f4       	brne	.+12     	; 0xac4 <softwareDelayMs+0x3a>
 ab8:	08 c0       	rjmp	.+16     	; 0xaca <softwareDelayMs+0x40>
 aba:	40 e0       	ldi	r20, 0x00	; 0
 abc:	50 e0       	ldi	r21, 0x00	; 0
 abe:	ba 01       	movw	r22, r20
 */ 
#include "softwareDelay.h"
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 ac0:	f0 e0       	ldi	r31, 0x00	; 0
 ac2:	e0 e0       	ldi	r30, 0x00	; 0
 ac4:	8f 2f       	mov	r24, r31
 ac6:	9e 2f       	mov	r25, r30
 ac8:	e9 cf       	rjmp	.-46     	; 0xa9c <softwareDelayMs+0x12>
  for(j=0; j<u32_delay_in_ms; j++)
  {
    for(i=0; i<ticks; i++)
    { }
  }
}
 aca:	1f 91       	pop	r17
 acc:	0f 91       	pop	r16
 ace:	08 95       	ret

00000ad0 <__udivmodsi4>:
 ad0:	a1 e2       	ldi	r26, 0x21	; 33
 ad2:	1a 2e       	mov	r1, r26
 ad4:	aa 1b       	sub	r26, r26
 ad6:	bb 1b       	sub	r27, r27
 ad8:	fd 01       	movw	r30, r26
 ada:	0d c0       	rjmp	.+26     	; 0xaf6 <__udivmodsi4_ep>

00000adc <__udivmodsi4_loop>:
 adc:	aa 1f       	adc	r26, r26
 ade:	bb 1f       	adc	r27, r27
 ae0:	ee 1f       	adc	r30, r30
 ae2:	ff 1f       	adc	r31, r31
 ae4:	a2 17       	cp	r26, r18
 ae6:	b3 07       	cpc	r27, r19
 ae8:	e4 07       	cpc	r30, r20
 aea:	f5 07       	cpc	r31, r21
 aec:	20 f0       	brcs	.+8      	; 0xaf6 <__udivmodsi4_ep>
 aee:	a2 1b       	sub	r26, r18
 af0:	b3 0b       	sbc	r27, r19
 af2:	e4 0b       	sbc	r30, r20
 af4:	f5 0b       	sbc	r31, r21

00000af6 <__udivmodsi4_ep>:
 af6:	66 1f       	adc	r22, r22
 af8:	77 1f       	adc	r23, r23
 afa:	88 1f       	adc	r24, r24
 afc:	99 1f       	adc	r25, r25
 afe:	1a 94       	dec	r1
 b00:	69 f7       	brne	.-38     	; 0xadc <__udivmodsi4_loop>
 b02:	60 95       	com	r22
 b04:	70 95       	com	r23
 b06:	80 95       	com	r24
 b08:	90 95       	com	r25
 b0a:	9b 01       	movw	r18, r22
 b0c:	ac 01       	movw	r20, r24
 b0e:	bd 01       	movw	r22, r26
 b10:	cf 01       	movw	r24, r30
 b12:	08 95       	ret

00000b14 <_exit>:
 b14:	f8 94       	cli

00000b16 <__stop_program>:
 b16:	ff cf       	rjmp	.-2      	; 0xb16 <__stop_program>
