
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000d4a  00000dde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000077  00800066  00800066  00000de4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019a3  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a8  00000000  00000000  00002a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007aa  00000000  00000000  000032b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000070c  00000000  00000000  00003a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000956  00000000  00000000  0000416c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001de0  00000000  00000000  00004ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000068a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__vector_4>
  14:	0c 94 c0 03 	jmp	0x780	; 0x780 <__vector_5>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 3b 04 	jmp	0x876	; 0x876 <__vector_7>
  20:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__vector_8>
  24:	0c 94 12 04 	jmp	0x824	; 0x824 <__vector_9>
  28:	0c 94 97 03 	jmp	0x72e	; 0x72e <__vector_10>
  2c:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_11>
  30:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_12>
  34:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__vector_13>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__vector_15>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	f7 01       	movw	r30, r14
  56:	1e 02       	muls	r17, r30
  58:	fc 01       	movw	r30, r24
  5a:	02 02       	muls	r16, r18
  5c:	07 02       	muls	r16, r23
  5e:	0d 02       	muls	r16, r29
  60:	13 02       	muls	r17, r19
  62:	18 02       	muls	r17, r24
  64:	68 02       	muls	r22, r24
  66:	a1 02       	muls	r26, r17
  68:	6f 02       	muls	r22, r31
  6a:	78 02       	muls	r23, r24
  6c:	7f 02       	muls	r23, r31
  6e:	88 02       	muls	r24, r24
  70:	91 02       	muls	r25, r17
  72:	98 02       	muls	r25, r24
  74:	ea 02       	muls	r30, r26
  76:	13 03       	mulsu	r17, r19
  78:	ef 02       	muls	r30, r31
  7a:	f5 02       	muls	r31, r21
  7c:	fb 02       	muls	r31, r27
  7e:	01 03       	mulsu	r16, r17
  80:	07 03       	mulsu	r16, r23
  82:	0d 03       	fmul	r16, r21

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf e5       	ldi	r28, 0x5F	; 95
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
  90:	10 e0       	ldi	r17, 0x00	; 0
  92:	a0 e6       	ldi	r26, 0x60	; 96
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	ea e4       	ldi	r30, 0x4A	; 74
  98:	fd e0       	ldi	r31, 0x0D	; 13
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <__do_copy_data+0x10>
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a6 36       	cpi	r26, 0x66	; 102
  a2:	b1 07       	cpc	r27, r17
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0xc>

000000a6 <__do_clear_bss>:
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	a6 e6       	ldi	r26, 0x66	; 102
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	ad 3d       	cpi	r26, 0xDD	; 221
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  ba:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <ToggleLED1>:
TMU_cfg_s TMU1;


void ToggleLED1()
{
	DIO_Toggle(g_LED1.GPIO, g_LED1.pins);
  c2:	e5 ed       	ldi	r30, 0xD5	; 213
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	61 81       	ldd	r22, Z+1	; 0x01
  c8:	80 81       	ld	r24, Z
  ca:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_Toggle>
  ce:	08 95       	ret

000000d0 <ToggleLED2>:
}
void ToggleLED2()
{
	DIO_Toggle(g_LED2.GPIO, g_LED2.pins);
  d0:	ed ec       	ldi	r30, 0xCD	; 205
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	61 81       	ldd	r22, Z+1	; 0x01
  d6:	80 81       	ld	r24, Z
  d8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_Toggle>
  dc:	08 95       	ret

000000de <ToggleLED3>:
}
void ToggleLED3()
{
	DIO_Toggle(g_LED3.GPIO, g_LED3.pins);
  de:	e8 ed       	ldi	r30, 0xD8	; 216
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	61 81       	ldd	r22, Z+1	; 0x01
  e4:	80 81       	ld	r24, Z
  e6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_Toggle>
  ea:	08 95       	ret

000000ec <StopTasks>:
}

void StopTasks()
{
	TMU_Stop(100);
  ec:	84 e6       	ldi	r24, 0x64	; 100
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 19 06 	call	0xc32	; 0xc32 <TMU_Stop>
  f4:	08 95       	ret

000000f6 <Init_LEDs>:
	//TMU_Stop(110);
}

void Init_LEDs(void)
{
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
	g_LED1.GPIO = GPIOD;
  fe:	e5 ed       	ldi	r30, 0xD5	; 213
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	03 e0       	ldi	r16, 0x03	; 3
 104:	00 83       	st	Z, r16
	g_LED1.dir  = OUTPUT;
 106:	1f ef       	ldi	r17, 0xFF	; 255
 108:	12 83       	std	Z+2, r17	; 0x02
	g_LED1.pins = BIT4;
 10a:	80 e1       	ldi	r24, 0x10	; 16
 10c:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED1);
 10e:	cf 01       	movw	r24, r30
 110:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_init>
	g_LED2.GPIO = GPIOD;
 114:	ed ec       	ldi	r30, 0xCD	; 205
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	00 83       	st	Z, r16
	g_LED2.dir  = OUTPUT;
 11a:	12 83       	std	Z+2, r17	; 0x02
	g_LED2.pins = BIT5;
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED2);
 120:	cf 01       	movw	r24, r30
 122:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_init>
	g_LED3.GPIO = GPIOD;
 126:	c8 ed       	ldi	r28, 0xD8	; 216
 128:	d0 e0       	ldi	r29, 0x00	; 0
 12a:	08 83       	st	Y, r16
	g_LED3.dir  = OUTPUT;
 12c:	1a 83       	std	Y+2, r17	; 0x02
	g_LED3.pins = BIT6;
 12e:	80 e4       	ldi	r24, 0x40	; 64
 130:	89 83       	std	Y+1, r24	; 0x01
	DIO_init(&g_LED3);
 132:	ce 01       	movw	r24, r28
 134:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_init>
	DIO_Write(g_LED3.GPIO, g_LED3.pins, HIGH);
 138:	4f ef       	ldi	r20, 0xFF	; 255
 13a:	69 81       	ldd	r22, Y+1	; 0x01
 13c:	88 81       	ld	r24, Y
 13e:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_Write>
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	08 95       	ret

0000014c <main>:


int main(void)
{
	/*-------------[ TMU Initialization ]-------------*/
	TMU1.Tick_Time = 1;
 14c:	e0 ed       	ldi	r30, 0xD0	; 208
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 83       	st	Z, r24
	TMU1.Timer_ID = TIMER_CH0;
 154:	11 82       	std	Z+1, r1	; 0x01
	TMU_Init(&TMU1);
 156:	cf 01       	movw	r24, r30
 158:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <TMU_Init>
	
	/*-------------[ LEDs Initialization ]-------------*/
	Init_LEDs();
 15c:	0e 94 7b 00 	call	0xf6	; 0xf6 <Init_LEDs>
	
	/*----------[ Start 3 Different Consumers ]---------*/
	/*[[ TMU_Srart(Consumer_FunPtr, ConsumerID, Periodicity, Time_IN_ms); ]]*/
	TMU_Start(ToggleLED1, 100, PERIODIC, 100);
 160:	04 e6       	ldi	r16, 0x64	; 100
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	64 e6       	ldi	r22, 0x64	; 100
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	81 e6       	ldi	r24, 0x61	; 97
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 62 05 	call	0xac4	; 0xac4 <TMU_Start>
	TMU_Start(ToggleLED2, 110, PERIODIC, 300);
 176:	0c e2       	ldi	r16, 0x2C	; 44
 178:	11 e0       	ldi	r17, 0x01	; 1
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	41 e0       	ldi	r20, 0x01	; 1
 180:	6e e6       	ldi	r22, 0x6E	; 110
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	88 e6       	ldi	r24, 0x68	; 104
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 62 05 	call	0xac4	; 0xac4 <TMU_Start>
	TMU_Start(ToggleLED3, 120, ONESHOT, 3000);
 18c:	08 eb       	ldi	r16, 0xB8	; 184
 18e:	1b e0       	ldi	r17, 0x0B	; 11
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	68 e7       	ldi	r22, 0x78	; 120
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	8f e6       	ldi	r24, 0x6F	; 111
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 62 05 	call	0xac4	; 0xac4 <TMU_Start>
	TMU_Start(StopTasks, 130, ONESHOT, 5000);
 1a2:	08 e8       	ldi	r16, 0x88	; 136
 1a4:	13 e1       	ldi	r17, 0x13	; 19
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	62 e8       	ldi	r22, 0x82	; 130
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	86 e7       	ldi	r24, 0x76	; 118
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 62 05 	call	0xac4	; 0xac4 <TMU_Start>
	
	while (1)
	{
		TMU_Dispatcher();
 1b8:	0e 94 46 06 	call	0xc8c	; 0xc8c <TMU_Dispatcher>
	}
 1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <main+0x6c>

000001be <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
 1be:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
 1c0:	89 2b       	or	r24, r25
 1c2:	e9 f1       	breq	.+122    	; 0x23e <DIO_init+0x80>
	{
		switch(DIO_info->GPIO)
 1c4:	80 81       	ld	r24, Z
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	99 f0       	breq	.+38     	; 0x1f0 <DIO_init+0x32>
 1ca:	28 f0       	brcs	.+10     	; 0x1d6 <DIO_init+0x18>
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	e9 f0       	breq	.+58     	; 0x20a <DIO_init+0x4c>
 1d0:	83 30       	cpi	r24, 0x03	; 3
 1d2:	41 f1       	breq	.+80     	; 0x224 <DIO_init+0x66>
 1d4:	37 c0       	rjmp	.+110    	; 0x244 <DIO_init+0x86>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
 1d6:	81 81       	ldd	r24, Z+1	; 0x01
 1d8:	2a b3       	in	r18, 0x1a	; 26
 1da:	98 2f       	mov	r25, r24
 1dc:	90 95       	com	r25
 1de:	29 23       	and	r18, r25
 1e0:	92 81       	ldd	r25, Z+2	; 0x02
 1e2:	98 23       	and	r25, r24
 1e4:	82 2f       	mov	r24, r18
 1e6:	89 2b       	or	r24, r25
 1e8:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
			break;
 1ee:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
 1f0:	81 81       	ldd	r24, Z+1	; 0x01
 1f2:	27 b3       	in	r18, 0x17	; 23
 1f4:	98 2f       	mov	r25, r24
 1f6:	90 95       	com	r25
 1f8:	29 23       	and	r18, r25
 1fa:	92 81       	ldd	r25, Z+2	; 0x02
 1fc:	98 23       	and	r25, r24
 1fe:	82 2f       	mov	r24, r18
 200:	89 2b       	or	r24, r25
 202:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
			break;
 208:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
 20a:	81 81       	ldd	r24, Z+1	; 0x01
 20c:	24 b3       	in	r18, 0x14	; 20
 20e:	98 2f       	mov	r25, r24
 210:	90 95       	com	r25
 212:	29 23       	and	r18, r25
 214:	92 81       	ldd	r25, Z+2	; 0x02
 216:	98 23       	and	r25, r24
 218:	82 2f       	mov	r24, r18
 21a:	89 2b       	or	r24, r25
 21c:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
			break;
 222:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
 224:	81 81       	ldd	r24, Z+1	; 0x01
 226:	21 b3       	in	r18, 0x11	; 17
 228:	98 2f       	mov	r25, r24
 22a:	90 95       	com	r25
 22c:	29 23       	and	r18, r25
 22e:	92 81       	ldd	r25, Z+2	; 0x02
 230:	98 23       	and	r25, r24
 232:	82 2f       	mov	r24, r18
 234:	89 2b       	or	r24, r25
 236:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
			break;
 23c:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 248:	08 95       	ret

0000024a <DIO_Write>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write(uint8_t GPIO, uint8_t pins, uint8_t value)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	81 f0       	breq	.+32     	; 0x26e <DIO_Write+0x24>
 24e:	28 f0       	brcs	.+10     	; 0x25a <DIO_Write+0x10>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	b9 f0       	breq	.+46     	; 0x282 <DIO_Write+0x38>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	f9 f0       	breq	.+62     	; 0x296 <DIO_Write+0x4c>
 258:	28 c0       	rjmp	.+80     	; 0x2aa <DIO_Write+0x60>
	{
		case GPIOA :
		PORTA_DATA = (pins & value) | (~pins & PORTA_DATA);
 25a:	8b b3       	in	r24, 0x1b	; 27
 25c:	96 2f       	mov	r25, r22
 25e:	90 95       	com	r25
 260:	89 23       	and	r24, r25
 262:	46 23       	and	r20, r22
 264:	48 2b       	or	r20, r24
 266:	4b bb       	out	0x1b, r20	; 27
		errorStatus = E_OK;
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
		break;
 26c:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & value) | (~pins & PORTB_DATA);
 26e:	88 b3       	in	r24, 0x18	; 24
 270:	96 2f       	mov	r25, r22
 272:	90 95       	com	r25
 274:	89 23       	and	r24, r25
 276:	46 23       	and	r20, r22
 278:	48 2b       	or	r20, r24
 27a:	48 bb       	out	0x18, r20	; 24
		errorStatus = E_OK;
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
		break;
 280:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & value) | (~pins & PORTC_DATA);
 282:	85 b3       	in	r24, 0x15	; 21
 284:	96 2f       	mov	r25, r22
 286:	90 95       	com	r25
 288:	89 23       	and	r24, r25
 28a:	46 23       	and	r20, r22
 28c:	48 2b       	or	r20, r24
 28e:	45 bb       	out	0x15, r20	; 21
		errorStatus = E_OK;
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
		break;
 294:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & value) | (~pins & PORTD_DATA);
 296:	82 b3       	in	r24, 0x12	; 18
 298:	96 2f       	mov	r25, r22
 29a:	90 95       	com	r25
 29c:	89 23       	and	r24, r25
 29e:	46 23       	and	r20, r22
 2a0:	48 2b       	or	r20, r24
 2a2:	42 bb       	out	0x12, r20	; 18
		errorStatus = E_OK;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
		break;
 2a8:	08 95       	ret
		default :
		errorStatus = E_NOK;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	return errorStatus;
}
 2ae:	08 95       	ret

000002b0 <DIO_Toggle>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle(uint8_t GPIO, uint8_t pins)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	91 f0       	breq	.+36     	; 0x2d8 <DIO_Toggle+0x28>
 2b4:	28 f0       	brcs	.+10     	; 0x2c0 <DIO_Toggle+0x10>
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	d9 f0       	breq	.+54     	; 0x2f0 <DIO_Toggle+0x40>
 2ba:	83 30       	cpi	r24, 0x03	; 3
 2bc:	29 f1       	breq	.+74     	; 0x308 <DIO_Toggle+0x58>
 2be:	30 c0       	rjmp	.+96     	; 0x320 <DIO_Toggle+0x70>
	{
		case GPIOA :
		PORTA_DATA = (pins & (~PORTA_DATA)) | (~pins & PORTA_DATA);
 2c0:	8b b3       	in	r24, 0x1b	; 27
 2c2:	9b b3       	in	r25, 0x1b	; 27
 2c4:	26 2f       	mov	r18, r22
 2c6:	20 95       	com	r18
 2c8:	92 23       	and	r25, r18
 2ca:	80 95       	com	r24
 2cc:	68 23       	and	r22, r24
 2ce:	69 2b       	or	r22, r25
 2d0:	6b bb       	out	0x1b, r22	; 27
		errorStatus = E_OK;
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
		break;
 2d6:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & (~PORTB_DATA)) | (~pins & PORTB_DATA);
 2d8:	88 b3       	in	r24, 0x18	; 24
 2da:	98 b3       	in	r25, 0x18	; 24
 2dc:	26 2f       	mov	r18, r22
 2de:	20 95       	com	r18
 2e0:	92 23       	and	r25, r18
 2e2:	80 95       	com	r24
 2e4:	68 23       	and	r22, r24
 2e6:	69 2b       	or	r22, r25
 2e8:	68 bb       	out	0x18, r22	; 24
		errorStatus = E_OK;
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
		break;
 2ee:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & (~PORTC_DATA)) | (~pins & PORTC_DATA);
 2f0:	85 b3       	in	r24, 0x15	; 21
 2f2:	95 b3       	in	r25, 0x15	; 21
 2f4:	26 2f       	mov	r18, r22
 2f6:	20 95       	com	r18
 2f8:	92 23       	and	r25, r18
 2fa:	80 95       	com	r24
 2fc:	68 23       	and	r22, r24
 2fe:	69 2b       	or	r22, r25
 300:	65 bb       	out	0x15, r22	; 21
		errorStatus = E_OK;
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
		break;
 306:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & (~PORTD_DATA)) | (~pins & PORTD_DATA);
 308:	82 b3       	in	r24, 0x12	; 18
 30a:	92 b3       	in	r25, 0x12	; 18
 30c:	26 2f       	mov	r18, r22
 30e:	20 95       	com	r18
 310:	92 23       	and	r25, r18
 312:	80 95       	com	r24
 314:	68 23       	and	r22, r24
 316:	69 2b       	or	r22, r25
 318:	62 bb       	out	0x12, r22	; 18
		errorStatus = E_OK;
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
		break;
 31e:	08 95       	ret
		default :
		errorStatus = E_NOK;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	return errorStatus;
}
 324:	08 95       	ret

00000326 <__vector_12>:
{
	PTR_CALL_BACK = isr_ptr;
}

ISR(SPI_STC_vect)
{
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	2f 93       	push	r18
 332:	3f 93       	push	r19
 334:	4f 93       	push	r20
 336:	5f 93       	push	r21
 338:	6f 93       	push	r22
 33a:	7f 93       	push	r23
 33c:	8f 93       	push	r24
 33e:	9f 93       	push	r25
 340:	af 93       	push	r26
 342:	bf 93       	push	r27
 344:	ef 93       	push	r30
 346:	ff 93       	push	r31
	g_u8_RxFlag = TRUE;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	80 93 60 00 	sts	0x0060, r24
	PTR_CALL_BACK();
 34e:	e0 91 db 00 	lds	r30, 0x00DB
 352:	f0 91 dc 00 	lds	r31, 0x00DC
 356:	09 95       	icall
}
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	bf 91       	pop	r27
 35e:	af 91       	pop	r26
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	7f 91       	pop	r23
 366:	6f 91       	pop	r22
 368:	5f 91       	pop	r21
 36a:	4f 91       	pop	r20
 36c:	3f 91       	pop	r19
 36e:	2f 91       	pop	r18
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <Timer_Init>:
 * Return: The error status of the function.			
 * Description: Initiates the module.
 * 							
 */
ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
 37a:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
 37c:	89 2b       	or	r24, r25
 37e:	09 f4       	brne	.+2      	; 0x382 <Timer_Init+0x8>
 380:	5c c1       	rjmp	.+696    	; 0x63a <Timer_Init+0x2c0>
	{
		// Check The Timer Channel Number & Init The Corresponding One
		switch(Timer_cfg->Timer_CH_NO)
 382:	80 81       	ld	r24, Z
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	09 f4       	brne	.+2      	; 0x38a <Timer_Init+0x10>
 388:	6f c0       	rjmp	.+222    	; 0x468 <Timer_Init+0xee>
 38a:	20 f0       	brcs	.+8      	; 0x394 <Timer_Init+0x1a>
 38c:	82 30       	cpi	r24, 0x02	; 2
 38e:	09 f4       	brne	.+2      	; 0x392 <Timer_Init+0x18>
 390:	f8 c0       	rjmp	.+496    	; 0x582 <Timer_Init+0x208>
 392:	56 c1       	rjmp	.+684    	; 0x640 <Timer_Init+0x2c6>
static ERROR_STATUS Timer0_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR0 =  Timer0_CMP_Mask;
 394:	88 e0       	ldi	r24, 0x08	; 8
 396:	83 bf       	out	0x33, r24	; 51
		OCR0  =  0x00;
 398:	1c be       	out	0x3c, r1	; 60
		TIMSK &= Timer0_Int_CLR_Mask;
 39a:	89 b7       	in	r24, 0x39	; 57
 39c:	8c 7f       	andi	r24, 0xFC	; 252
 39e:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 3a0:	82 81       	ldd	r24, Z+2	; 0x02
 3a2:	88 23       	and	r24, r24
 3a4:	19 f0       	breq	.+6      	; 0x3ac <Timer_Init+0x32>
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	21 f0       	breq	.+8      	; 0x3b2 <Timer_Init+0x38>
 3aa:	0f c0       	rjmp	.+30     	; 0x3ca <Timer_Init+0x50>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer0_Polling_Int_Mask;
 3ac:	89 b7       	in	r24, 0x39	; 57
 3ae:	89 bf       	out	0x39, r24	; 57
 3b0:	0c c0       	rjmp	.+24     	; 0x3ca <Timer_Init+0x50>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer0_Interrupt_CMP_Int_Mask;
 3b2:	89 b7       	in	r24, 0x39	; 57
 3b4:	82 60       	ori	r24, 0x02	; 2
 3b6:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
 3b8:	8f b7       	in	r24, 0x3f	; 63
 3ba:	80 68       	ori	r24, 0x80	; 128
 3bc:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer0_CM = Timer_cfg->Timer_Cbk_ptr;
 3be:	84 81       	ldd	r24, Z+4	; 0x04
 3c0:	95 81       	ldd	r25, Z+5	; 0x05
 3c2:	90 93 6f 00 	sts	0x006F, r25
 3c6:	80 93 6e 00 	sts	0x006E, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 3ca:	81 81       	ldd	r24, Z+1	; 0x01
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	d9 f1       	breq	.+118    	; 0x446 <Timer_Init+0xcc>
 3d0:	18 f0       	brcs	.+6      	; 0x3d8 <Timer_Init+0x5e>
 3d2:	82 30       	cpi	r24, 0x02	; 2
 3d4:	f1 f1       	breq	.+124    	; 0x452 <Timer_Init+0xd8>
 3d6:	43 c0       	rjmp	.+134    	; 0x45e <Timer_Init+0xe4>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 3d8:	e3 81       	ldd	r30, Z+3	; 0x03
 3da:	8e 2f       	mov	r24, r30
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	88 30       	cpi	r24, 0x08	; 8
 3e0:	91 05       	cpc	r25, r1
 3e2:	60 f5       	brcc	.+88     	; 0x43c <Timer_Init+0xc2>
 3e4:	fc 01       	movw	r30, r24
 3e6:	e6 5d       	subi	r30, 0xD6	; 214
 3e8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ea:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 3ee:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_OK;
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer0_Prescaler = TIMER0_PRESCALER_8;
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 404:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_NOK;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer0_Prescaler = TIMER0_PRESCALER_64;
 40e:	83 e0       	ldi	r24, 0x03	; 3
 410:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer0_Prescaler = TIMER0_PRESCALER_128;
 41a:	84 e0       	ldi	r24, 0x04	; 4
 41c:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 426:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_NOK;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	08 95       	ret
						break;
					case TIMER_PRESCALER_1024 :
						Timer0_Prescaler = TIMER0_PRESCALER_1024;
 430:	85 e0       	ldi	r24, 0x05	; 5
 432:	80 93 75 00 	sts	0x0075, r24
						errorStatus = E_OK;
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	08 95       	ret
						break;
					default :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
 43c:	10 92 75 00 	sts	0x0075, r1
						errorStatus = E_NOK;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	08 95       	ret
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_RISING;
 446:	87 e0       	ldi	r24, 0x07	; 7
 448:	80 93 75 00 	sts	0x0075, r24
				errorStatus = E_OK;
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	08 95       	ret
				break;
			case COUNTER_DOWN_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_FALLING;
 452:	86 e0       	ldi	r24, 0x06	; 6
 454:	80 93 75 00 	sts	0x0075, r24
				errorStatus = E_OK;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	08 95       	ret
				break;
			default :
				Timer0_Prescaler = TIMER0_NO_CLOCK;
 45e:	10 92 75 00 	sts	0x0075, r1
				errorStatus = E_NOK;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	08 95       	ret
static ERROR_STATUS Timer1_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR1 = Timer1_CMP_Mask;
 468:	88 e0       	ldi	r24, 0x08	; 8
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	9f bd       	out	0x2f, r25	; 47
 46e:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0x00;
 470:	1d bc       	out	0x2d, r1	; 45
 472:	1c bc       	out	0x2c, r1	; 44
		OCR1A = 0x00;
 474:	1b bc       	out	0x2b, r1	; 43
 476:	1a bc       	out	0x2a, r1	; 42
		TIMSK &= Timer1_Int_CLR_Mask;
 478:	89 b7       	in	r24, 0x39	; 57
 47a:	83 7c       	andi	r24, 0xC3	; 195
 47c:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 47e:	82 81       	ldd	r24, Z+2	; 0x02
 480:	88 23       	and	r24, r24
 482:	19 f0       	breq	.+6      	; 0x48a <Timer_Init+0x110>
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	21 f0       	breq	.+8      	; 0x490 <Timer_Init+0x116>
 488:	0f c0       	rjmp	.+30     	; 0x4a8 <Timer_Init+0x12e>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer1_Polling_Int_Mask;
 48a:	89 b7       	in	r24, 0x39	; 57
 48c:	89 bf       	out	0x39, r24	; 57
 48e:	0c c0       	rjmp	.+24     	; 0x4a8 <Timer_Init+0x12e>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer1_OCA_Int_Mask;
 490:	89 b7       	in	r24, 0x39	; 57
 492:	80 61       	ori	r24, 0x10	; 16
 494:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
 496:	8f b7       	in	r24, 0x3f	; 63
 498:	80 68       	ori	r24, 0x80	; 128
 49a:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer1_CM = Timer_cfg->Timer_Cbk_ptr;
 49c:	84 81       	ldd	r24, Z+4	; 0x04
 49e:	95 81       	ldd	r25, Z+5	; 0x05
 4a0:	90 93 6b 00 	sts	0x006B, r25
 4a4:	80 93 6a 00 	sts	0x006A, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 4a8:	81 81       	ldd	r24, Z+1	; 0x01
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	09 f4       	brne	.+2      	; 0x4b0 <Timer_Init+0x136>
 4ae:	50 c0       	rjmp	.+160    	; 0x550 <Timer_Init+0x1d6>
 4b0:	20 f0       	brcs	.+8      	; 0x4ba <Timer_Init+0x140>
 4b2:	82 30       	cpi	r24, 0x02	; 2
 4b4:	09 f4       	brne	.+2      	; 0x4b8 <Timer_Init+0x13e>
 4b6:	55 c0       	rjmp	.+170    	; 0x562 <Timer_Init+0x1e8>
 4b8:	5d c0       	rjmp	.+186    	; 0x574 <Timer_Init+0x1fa>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 4ba:	e3 81       	ldd	r30, Z+3	; 0x03
 4bc:	8e 2f       	mov	r24, r30
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	88 30       	cpi	r24, 0x08	; 8
 4c2:	91 05       	cpc	r25, r1
 4c4:	f0 f5       	brcc	.+124    	; 0x542 <Timer_Init+0x1c8>
 4c6:	fc 01       	movw	r30, r24
 4c8:	ee 5c       	subi	r30, 0xCE	; 206
 4ca:	ff 4f       	sbci	r31, 0xFF	; 255
 4cc:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 4d0:	10 92 74 00 	sts	0x0074, r1
 4d4:	10 92 73 00 	sts	0x0073, r1
						errorStatus = E_OK;
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer1_Prescaler = TIMER1_PRESCALER_8;
 4de:	82 e0       	ldi	r24, 0x02	; 2
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	90 93 74 00 	sts	0x0074, r25
 4e6:	80 93 73 00 	sts	0x0073, r24
						errorStatus = E_OK;
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 4f0:	10 92 74 00 	sts	0x0074, r1
 4f4:	10 92 73 00 	sts	0x0073, r1
						errorStatus = E_NOK;
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer1_Prescaler = TIMER1_PRESCALER_64;
 4fe:	83 e0       	ldi	r24, 0x03	; 3
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	90 93 74 00 	sts	0x0074, r25
 506:	80 93 73 00 	sts	0x0073, r24
						errorStatus = E_OK;
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer1_Prescaler = TIMER1_PRESCALER_128;
 510:	84 e0       	ldi	r24, 0x04	; 4
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	90 93 74 00 	sts	0x0074, r25
 518:	80 93 73 00 	sts	0x0073, r24
						errorStatus = E_OK;
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 522:	10 92 74 00 	sts	0x0074, r1
 526:	10 92 73 00 	sts	0x0073, r1
						errorStatus = E_NOK;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	08 95       	ret
						break;
					case TIMER_PRESCALER_1024 :
						Timer1_Prescaler = TIMER1_PRESCALER_1024;
 530:	85 e0       	ldi	r24, 0x05	; 5
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	90 93 74 00 	sts	0x0074, r25
 538:	80 93 73 00 	sts	0x0073, r24
						errorStatus = E_OK;
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	08 95       	ret
						break;
					default :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 542:	10 92 74 00 	sts	0x0074, r1
 546:	10 92 73 00 	sts	0x0073, r1
						errorStatus = E_NOK;
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	08 95       	ret
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_RISING;
 550:	87 e0       	ldi	r24, 0x07	; 7
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	90 93 74 00 	sts	0x0074, r25
 558:	80 93 73 00 	sts	0x0073, r24
				errorStatus = E_OK;
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	08 95       	ret
				break;
			case COUNTER_DOWN_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_FALLING;
 562:	86 e0       	ldi	r24, 0x06	; 6
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	90 93 74 00 	sts	0x0074, r25
 56a:	80 93 73 00 	sts	0x0073, r24
				errorStatus = E_OK;
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	08 95       	ret
				break;
			default :
				Timer1_Prescaler = TIMER1_NO_CLOCK;
 574:	10 92 74 00 	sts	0x0074, r1
 578:	10 92 73 00 	sts	0x0073, r1
				errorStatus = E_NOK;
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	08 95       	ret
static ERROR_STATUS Timer2_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR2 = Timer2_CMP_Mask;
 582:	88 e0       	ldi	r24, 0x08	; 8
 584:	85 bd       	out	0x25, r24	; 37
		TCNT2 = Timer2_TCNT_INIT_Mask;
 586:	14 bc       	out	0x24, r1	; 36
		TIMSK &= Timer1_Int_CLR_Mask;
 588:	89 b7       	in	r24, 0x39	; 57
 58a:	83 7c       	andi	r24, 0xC3	; 195
 58c:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 58e:	82 81       	ldd	r24, Z+2	; 0x02
 590:	88 23       	and	r24, r24
 592:	19 f0       	breq	.+6      	; 0x59a <Timer_Init+0x220>
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	21 f0       	breq	.+8      	; 0x5a0 <Timer_Init+0x226>
 598:	0f c0       	rjmp	.+30     	; 0x5b8 <Timer_Init+0x23e>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer2_Polling_Int_Mask;
 59a:	89 b7       	in	r24, 0x39	; 57
 59c:	89 bf       	out	0x39, r24	; 57
 59e:	0c c0       	rjmp	.+24     	; 0x5b8 <Timer_Init+0x23e>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer2_Interrupt_CMP_Int_Mask;
 5a0:	89 b7       	in	r24, 0x39	; 57
 5a2:	80 68       	ori	r24, 0x80	; 128
 5a4:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
 5a6:	8f b7       	in	r24, 0x3f	; 63
 5a8:	80 68       	ori	r24, 0x80	; 128
 5aa:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer2_CM = Timer_cfg->Timer_Cbk_ptr;
 5ac:	84 81       	ldd	r24, Z+4	; 0x04
 5ae:	95 81       	ldd	r25, Z+5	; 0x05
 5b0:	90 93 67 00 	sts	0x0067, r25
 5b4:	80 93 66 00 	sts	0x0066, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 5b8:	81 81       	ldd	r24, Z+1	; 0x01
 5ba:	81 11       	cpse	r24, r1
 5bc:	39 c0       	rjmp	.+114    	; 0x630 <Timer_Init+0x2b6>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 5be:	e3 81       	ldd	r30, Z+3	; 0x03
 5c0:	8e 2f       	mov	r24, r30
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	88 30       	cpi	r24, 0x08	; 8
 5c6:	91 05       	cpc	r25, r1
 5c8:	70 f5       	brcc	.+92     	; 0x626 <Timer_Init+0x2ac>
 5ca:	fc 01       	movw	r30, r24
 5cc:	e6 5c       	subi	r30, 0xC6	; 198
 5ce:	ff 4f       	sbci	r31, 0xFF	; 255
 5d0:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
 5d4:	10 92 72 00 	sts	0x0072, r1
						errorStatus = E_OK;
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer2_Prescaler = TIMER2_PRESCALER_8;
 5de:	82 e0       	ldi	r24, 0x02	; 2
 5e0:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer2_Prescaler = TIMER2_PRESCALER_32;
 5ea:	83 e0       	ldi	r24, 0x03	; 3
 5ec:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer2_Prescaler = TIMER2_PRESCALER_64;
 5f6:	84 e0       	ldi	r24, 0x04	; 4
 5f8:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer2_Prescaler = TIMER2_PRESCALER_128;
 602:	85 e0       	ldi	r24, 0x05	; 5
 604:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer2_Prescaler = TIMER2_PRESCALER_256;
 60e:	86 e0       	ldi	r24, 0x06	; 6
 610:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	08 95       	ret
						break;
						case TIMER_PRESCALER_1024 :
						Timer2_Prescaler = TIMER2_PRESCALER_1024;
 61a:	87 e0       	ldi	r24, 0x07	; 7
 61c:	80 93 72 00 	sts	0x0072, r24
						errorStatus = E_OK;
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	08 95       	ret
						break;
					default :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
 626:	10 92 72 00 	sts	0x0072, r1
						errorStatus = E_NOK;
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	08 95       	ret
						break;
				}
				break;
			default :
				Timer2_Prescaler = TIMER2_NO_CLOCK;
 630:	10 92 72 00 	sts	0x0072, r1
				errorStatus = E_NOK;
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	08 95       	ret
				break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	08 95       	ret
				break;
			case TIMER_CH2 :
				errorStatus = Timer2_Init(Timer_cfg);
				break;
			default :
				errorStatus = E_NOK;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 644:	08 95       	ret

00000646 <Timer_Start>:
 */

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(Timer_CH_NO)
 646:	81 30       	cpi	r24, 0x01	; 1
 648:	91 f0       	breq	.+36     	; 0x66e <Timer_Start+0x28>
 64a:	18 f0       	brcs	.+6      	; 0x652 <Timer_Start+0xc>
 64c:	82 30       	cpi	r24, 0x02	; 2
 64e:	01 f1       	breq	.+64     	; 0x690 <Timer_Start+0x4a>
 650:	2d c0       	rjmp	.+90     	; 0x6ac <Timer_Start+0x66>
	{
		case TIMER_CH0 :
			if(Timer_Count <= 255)
 652:	6f 3f       	cpi	r22, 0xFF	; 255
 654:	71 05       	cpc	r23, r1
 656:	09 f0       	breq	.+2      	; 0x65a <Timer_Start+0x14>
 658:	60 f5       	brcc	.+88     	; 0x6b2 <Timer_Start+0x6c>
			{
				TCNT0 = 0x00;
 65a:	12 be       	out	0x32, r1	; 50
				OCR0  = Timer_Count;
 65c:	6c bf       	out	0x3c, r22	; 60
				TCCR0 |= Timer0_Prescaler;
 65e:	93 b7       	in	r25, 0x33	; 51
 660:	80 91 75 00 	lds	r24, 0x0075
 664:	89 2b       	or	r24, r25
 666:	83 bf       	out	0x33, r24	; 51
				errorStatus = E_OK;
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	08 95       	ret
			{
				errorStatus = E_NOK;
			}
			break;
		case TIMER_CH1 :
			TCNT1 = 0x0000;
 66e:	1d bc       	out	0x2d, r1	; 45
 670:	1c bc       	out	0x2c, r1	; 44
			OCR1A = Timer_Count;
 672:	7b bd       	out	0x2b, r23	; 43
 674:	6a bd       	out	0x2a, r22	; 42
			TCCR1 |= Timer1_Prescaler;
 676:	2e b5       	in	r18, 0x2e	; 46
 678:	3f b5       	in	r19, 0x2f	; 47
 67a:	80 91 73 00 	lds	r24, 0x0073
 67e:	90 91 74 00 	lds	r25, 0x0074
 682:	82 2b       	or	r24, r18
 684:	93 2b       	or	r25, r19
 686:	9f bd       	out	0x2f, r25	; 47
 688:	8e bd       	out	0x2e, r24	; 46
			errorStatus = E_OK;
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	90 e0       	ldi	r25, 0x00	; 0
			break;
 68e:	08 95       	ret
		case TIMER_CH2 :
			if(Timer_Count <= 255)
 690:	6f 3f       	cpi	r22, 0xFF	; 255
 692:	71 05       	cpc	r23, r1
 694:	09 f0       	breq	.+2      	; 0x698 <Timer_Start+0x52>
 696:	80 f4       	brcc	.+32     	; 0x6b8 <Timer_Start+0x72>
			{
				TCNT2 = 0x00;
 698:	14 bc       	out	0x24, r1	; 36
				OCR2  = Timer_Count;
 69a:	63 bd       	out	0x23, r22	; 35
				TCCR2 |= Timer2_Prescaler;
 69c:	95 b5       	in	r25, 0x25	; 37
 69e:	80 91 72 00 	lds	r24, 0x0072
 6a2:	89 2b       	or	r24, r25
 6a4:	85 bd       	out	0x25, r24	; 37
				errorStatus = E_OK;
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	08 95       	ret
			{
				errorStatus = E_NOK;
			}
			break;
		default :
			errorStatus = E_NOK;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	08 95       	ret
				TCCR0 |= Timer0_Prescaler;
				errorStatus = E_OK;
			}
			else
			{
				errorStatus = E_NOK;
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	08 95       	ret
				TCCR2 |= Timer2_Prescaler;
				errorStatus = E_OK;
			}
			else
			{
				errorStatus = E_NOK;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
		default :
			errorStatus = E_NOK;
			break;
	}
	return errorStatus;
}
 6bc:	08 95       	ret

000006be <TIMER0_SetCM>:
	Ptr_Timer0_OV = Ptr_ISR;
}

void TIMER0_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer0_CM = Ptr_ISR;
 6be:	90 93 6f 00 	sts	0x006F, r25
 6c2:	80 93 6e 00 	sts	0x006E, r24
 6c6:	08 95       	ret

000006c8 <TIMER2_SetCM>:
	Ptr_Timer2_OV = Ptr_ISR;
}

void TIMER2_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer2_CM = Ptr_ISR;
 6c8:	90 93 67 00 	sts	0x0067, r25
 6cc:	80 93 66 00 	sts	0x0066, r24
 6d0:	08 95       	ret

000006d2 <TIMER1_SetCM>:
	Ptr_Timer1_OV = Ptr_ISR;
}

void TIMER1_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer1_CM = Ptr_ISR;
 6d2:	90 93 6b 00 	sts	0x006B, r25
 6d6:	80 93 6a 00 	sts	0x006A, r24
 6da:	08 95       	ret

000006dc <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
 6dc:	1f 92       	push	r1
 6de:	0f 92       	push	r0
 6e0:	0f b6       	in	r0, 0x3f	; 63
 6e2:	0f 92       	push	r0
 6e4:	11 24       	eor	r1, r1
 6e6:	2f 93       	push	r18
 6e8:	3f 93       	push	r19
 6ea:	4f 93       	push	r20
 6ec:	5f 93       	push	r21
 6ee:	6f 93       	push	r22
 6f0:	7f 93       	push	r23
 6f2:	8f 93       	push	r24
 6f4:	9f 93       	push	r25
 6f6:	af 93       	push	r26
 6f8:	bf 93       	push	r27
 6fa:	ef 93       	push	r30
 6fc:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
 6fe:	e0 91 70 00 	lds	r30, 0x0070
 702:	f0 91 71 00 	lds	r31, 0x0071
 706:	30 97       	sbiw	r30, 0x00	; 0
 708:	09 f0       	breq	.+2      	; 0x70c <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
 70a:	09 95       	icall
	}
}
 70c:	ff 91       	pop	r31
 70e:	ef 91       	pop	r30
 710:	bf 91       	pop	r27
 712:	af 91       	pop	r26
 714:	9f 91       	pop	r25
 716:	8f 91       	pop	r24
 718:	7f 91       	pop	r23
 71a:	6f 91       	pop	r22
 71c:	5f 91       	pop	r21
 71e:	4f 91       	pop	r20
 720:	3f 91       	pop	r19
 722:	2f 91       	pop	r18
 724:	0f 90       	pop	r0
 726:	0f be       	out	0x3f, r0	; 63
 728:	0f 90       	pop	r0
 72a:	1f 90       	pop	r1
 72c:	18 95       	reti

0000072e <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 72e:	1f 92       	push	r1
 730:	0f 92       	push	r0
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	0f 92       	push	r0
 736:	11 24       	eor	r1, r1
 738:	2f 93       	push	r18
 73a:	3f 93       	push	r19
 73c:	4f 93       	push	r20
 73e:	5f 93       	push	r21
 740:	6f 93       	push	r22
 742:	7f 93       	push	r23
 744:	8f 93       	push	r24
 746:	9f 93       	push	r25
 748:	af 93       	push	r26
 74a:	bf 93       	push	r27
 74c:	ef 93       	push	r30
 74e:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
 750:	e0 91 6e 00 	lds	r30, 0x006E
 754:	f0 91 6f 00 	lds	r31, 0x006F
 758:	30 97       	sbiw	r30, 0x00	; 0
 75a:	09 f0       	breq	.+2      	; 0x75e <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
 75c:	09 95       	icall
	}
}
 75e:	ff 91       	pop	r31
 760:	ef 91       	pop	r30
 762:	bf 91       	pop	r27
 764:	af 91       	pop	r26
 766:	9f 91       	pop	r25
 768:	8f 91       	pop	r24
 76a:	7f 91       	pop	r23
 76c:	6f 91       	pop	r22
 76e:	5f 91       	pop	r21
 770:	4f 91       	pop	r20
 772:	3f 91       	pop	r19
 774:	2f 91       	pop	r18
 776:	0f 90       	pop	r0
 778:	0f be       	out	0x3f, r0	; 63
 77a:	0f 90       	pop	r0
 77c:	1f 90       	pop	r1
 77e:	18 95       	reti

00000780 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 780:	1f 92       	push	r1
 782:	0f 92       	push	r0
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	0f 92       	push	r0
 788:	11 24       	eor	r1, r1
 78a:	2f 93       	push	r18
 78c:	3f 93       	push	r19
 78e:	4f 93       	push	r20
 790:	5f 93       	push	r21
 792:	6f 93       	push	r22
 794:	7f 93       	push	r23
 796:	8f 93       	push	r24
 798:	9f 93       	push	r25
 79a:	af 93       	push	r26
 79c:	bf 93       	push	r27
 79e:	ef 93       	push	r30
 7a0:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
 7a2:	e0 91 68 00 	lds	r30, 0x0068
 7a6:	f0 91 69 00 	lds	r31, 0x0069
 7aa:	30 97       	sbiw	r30, 0x00	; 0
 7ac:	09 f0       	breq	.+2      	; 0x7b0 <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
 7ae:	09 95       	icall
	}
}
 7b0:	ff 91       	pop	r31
 7b2:	ef 91       	pop	r30
 7b4:	bf 91       	pop	r27
 7b6:	af 91       	pop	r26
 7b8:	9f 91       	pop	r25
 7ba:	8f 91       	pop	r24
 7bc:	7f 91       	pop	r23
 7be:	6f 91       	pop	r22
 7c0:	5f 91       	pop	r21
 7c2:	4f 91       	pop	r20
 7c4:	3f 91       	pop	r19
 7c6:	2f 91       	pop	r18
 7c8:	0f 90       	pop	r0
 7ca:	0f be       	out	0x3f, r0	; 63
 7cc:	0f 90       	pop	r0
 7ce:	1f 90       	pop	r1
 7d0:	18 95       	reti

000007d2 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 7d2:	1f 92       	push	r1
 7d4:	0f 92       	push	r0
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	0f 92       	push	r0
 7da:	11 24       	eor	r1, r1
 7dc:	2f 93       	push	r18
 7de:	3f 93       	push	r19
 7e0:	4f 93       	push	r20
 7e2:	5f 93       	push	r21
 7e4:	6f 93       	push	r22
 7e6:	7f 93       	push	r23
 7e8:	8f 93       	push	r24
 7ea:	9f 93       	push	r25
 7ec:	af 93       	push	r26
 7ee:	bf 93       	push	r27
 7f0:	ef 93       	push	r30
 7f2:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
 7f4:	e0 91 66 00 	lds	r30, 0x0066
 7f8:	f0 91 67 00 	lds	r31, 0x0067
 7fc:	30 97       	sbiw	r30, 0x00	; 0
 7fe:	09 f0       	breq	.+2      	; 0x802 <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
 800:	09 95       	icall
	}
}
 802:	ff 91       	pop	r31
 804:	ef 91       	pop	r30
 806:	bf 91       	pop	r27
 808:	af 91       	pop	r26
 80a:	9f 91       	pop	r25
 80c:	8f 91       	pop	r24
 80e:	7f 91       	pop	r23
 810:	6f 91       	pop	r22
 812:	5f 91       	pop	r21
 814:	4f 91       	pop	r20
 816:	3f 91       	pop	r19
 818:	2f 91       	pop	r18
 81a:	0f 90       	pop	r0
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	0f 90       	pop	r0
 820:	1f 90       	pop	r1
 822:	18 95       	reti

00000824 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 824:	1f 92       	push	r1
 826:	0f 92       	push	r0
 828:	0f b6       	in	r0, 0x3f	; 63
 82a:	0f 92       	push	r0
 82c:	11 24       	eor	r1, r1
 82e:	2f 93       	push	r18
 830:	3f 93       	push	r19
 832:	4f 93       	push	r20
 834:	5f 93       	push	r21
 836:	6f 93       	push	r22
 838:	7f 93       	push	r23
 83a:	8f 93       	push	r24
 83c:	9f 93       	push	r25
 83e:	af 93       	push	r26
 840:	bf 93       	push	r27
 842:	ef 93       	push	r30
 844:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
 846:	e0 91 6c 00 	lds	r30, 0x006C
 84a:	f0 91 6d 00 	lds	r31, 0x006D
 84e:	30 97       	sbiw	r30, 0x00	; 0
 850:	09 f0       	breq	.+2      	; 0x854 <__vector_9+0x30>
	{
		Ptr_Timer1_OV();
 852:	09 95       	icall
	}
}
 854:	ff 91       	pop	r31
 856:	ef 91       	pop	r30
 858:	bf 91       	pop	r27
 85a:	af 91       	pop	r26
 85c:	9f 91       	pop	r25
 85e:	8f 91       	pop	r24
 860:	7f 91       	pop	r23
 862:	6f 91       	pop	r22
 864:	5f 91       	pop	r21
 866:	4f 91       	pop	r20
 868:	3f 91       	pop	r19
 86a:	2f 91       	pop	r18
 86c:	0f 90       	pop	r0
 86e:	0f be       	out	0x3f, r0	; 63
 870:	0f 90       	pop	r0
 872:	1f 90       	pop	r1
 874:	18 95       	reti

00000876 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 876:	1f 92       	push	r1
 878:	0f 92       	push	r0
 87a:	0f b6       	in	r0, 0x3f	; 63
 87c:	0f 92       	push	r0
 87e:	11 24       	eor	r1, r1
 880:	2f 93       	push	r18
 882:	3f 93       	push	r19
 884:	4f 93       	push	r20
 886:	5f 93       	push	r21
 888:	6f 93       	push	r22
 88a:	7f 93       	push	r23
 88c:	8f 93       	push	r24
 88e:	9f 93       	push	r25
 890:	af 93       	push	r26
 892:	bf 93       	push	r27
 894:	ef 93       	push	r30
 896:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 898:	e0 91 6a 00 	lds	r30, 0x006A
 89c:	f0 91 6b 00 	lds	r31, 0x006B
 8a0:	30 97       	sbiw	r30, 0x00	; 0
 8a2:	09 f0       	breq	.+2      	; 0x8a6 <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
 8a4:	09 95       	icall
	}	
}
 8a6:	ff 91       	pop	r31
 8a8:	ef 91       	pop	r30
 8aa:	bf 91       	pop	r27
 8ac:	af 91       	pop	r26
 8ae:	9f 91       	pop	r25
 8b0:	8f 91       	pop	r24
 8b2:	7f 91       	pop	r23
 8b4:	6f 91       	pop	r22
 8b6:	5f 91       	pop	r21
 8b8:	4f 91       	pop	r20
 8ba:	3f 91       	pop	r19
 8bc:	2f 91       	pop	r18
 8be:	0f 90       	pop	r0
 8c0:	0f be       	out	0x3f, r0	; 63
 8c2:	0f 90       	pop	r0
 8c4:	1f 90       	pop	r1
 8c6:	18 95       	reti

000008c8 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 8c8:	1f 92       	push	r1
 8ca:	0f 92       	push	r0
 8cc:	0f b6       	in	r0, 0x3f	; 63
 8ce:	0f 92       	push	r0
 8d0:	11 24       	eor	r1, r1
 8d2:	2f 93       	push	r18
 8d4:	3f 93       	push	r19
 8d6:	4f 93       	push	r20
 8d8:	5f 93       	push	r21
 8da:	6f 93       	push	r22
 8dc:	7f 93       	push	r23
 8de:	8f 93       	push	r24
 8e0:	9f 93       	push	r25
 8e2:	af 93       	push	r26
 8e4:	bf 93       	push	r27
 8e6:	ef 93       	push	r30
 8e8:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 8ea:	e0 91 6a 00 	lds	r30, 0x006A
 8ee:	f0 91 6b 00 	lds	r31, 0x006B
 8f2:	30 97       	sbiw	r30, 0x00	; 0
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 8f6:	09 95       	icall
	}
}
 8f8:	ff 91       	pop	r31
 8fa:	ef 91       	pop	r30
 8fc:	bf 91       	pop	r27
 8fe:	af 91       	pop	r26
 900:	9f 91       	pop	r25
 902:	8f 91       	pop	r24
 904:	7f 91       	pop	r23
 906:	6f 91       	pop	r22
 908:	5f 91       	pop	r21
 90a:	4f 91       	pop	r20
 90c:	3f 91       	pop	r19
 90e:	2f 91       	pop	r18
 910:	0f 90       	pop	r0
 912:	0f be       	out	0x3f, r0	; 63
 914:	0f 90       	pop	r0
 916:	1f 90       	pop	r1
 918:	18 95       	reti

0000091a <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
 91a:	1f 92       	push	r1
 91c:	0f 92       	push	r0
 91e:	0f b6       	in	r0, 0x3f	; 63
 920:	0f 92       	push	r0
 922:	11 24       	eor	r1, r1
 924:	2f 93       	push	r18
 926:	3f 93       	push	r19
 928:	4f 93       	push	r20
 92a:	5f 93       	push	r21
 92c:	6f 93       	push	r22
 92e:	7f 93       	push	r23
 930:	8f 93       	push	r24
 932:	9f 93       	push	r25
 934:	af 93       	push	r26
 936:	bf 93       	push	r27
 938:	ef 93       	push	r30
 93a:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
 93c:	e0 91 76 00 	lds	r30, 0x0076
 940:	f0 91 77 00 	lds	r31, 0x0077
 944:	30 97       	sbiw	r30, 0x00	; 0
 946:	09 f0       	breq	.+2      	; 0x94a <__vector_13+0x30>
	{
		Ptr_UART_RX();
 948:	09 95       	icall
	}
}
 94a:	ff 91       	pop	r31
 94c:	ef 91       	pop	r30
 94e:	bf 91       	pop	r27
 950:	af 91       	pop	r26
 952:	9f 91       	pop	r25
 954:	8f 91       	pop	r24
 956:	7f 91       	pop	r23
 958:	6f 91       	pop	r22
 95a:	5f 91       	pop	r21
 95c:	4f 91       	pop	r20
 95e:	3f 91       	pop	r19
 960:	2f 91       	pop	r18
 962:	0f 90       	pop	r0
 964:	0f be       	out	0x3f, r0	; 63
 966:	0f 90       	pop	r0
 968:	1f 90       	pop	r1
 96a:	18 95       	reti

0000096c <__vector_15>:

ISR(USART_TXC_vect)
{
 96c:	1f 92       	push	r1
 96e:	0f 92       	push	r0
 970:	0f b6       	in	r0, 0x3f	; 63
 972:	0f 92       	push	r0
 974:	11 24       	eor	r1, r1
 976:	2f 93       	push	r18
 978:	3f 93       	push	r19
 97a:	4f 93       	push	r20
 97c:	5f 93       	push	r21
 97e:	6f 93       	push	r22
 980:	7f 93       	push	r23
 982:	8f 93       	push	r24
 984:	9f 93       	push	r25
 986:	af 93       	push	r26
 988:	bf 93       	push	r27
 98a:	ef 93       	push	r30
 98c:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
 98e:	e0 91 78 00 	lds	r30, 0x0078
 992:	f0 91 79 00 	lds	r31, 0x0079
 996:	30 97       	sbiw	r30, 0x00	; 0
 998:	09 f0       	breq	.+2      	; 0x99c <__vector_15+0x30>
	{
		Ptr_UART_TX();
 99a:	09 95       	icall
	}
 99c:	ff 91       	pop	r31
 99e:	ef 91       	pop	r30
 9a0:	bf 91       	pop	r27
 9a2:	af 91       	pop	r26
 9a4:	9f 91       	pop	r25
 9a6:	8f 91       	pop	r24
 9a8:	7f 91       	pop	r23
 9aa:	6f 91       	pop	r22
 9ac:	5f 91       	pop	r21
 9ae:	4f 91       	pop	r20
 9b0:	3f 91       	pop	r19
 9b2:	2f 91       	pop	r18
 9b4:	0f 90       	pop	r0
 9b6:	0f be       	out	0x3f, r0	; 63
 9b8:	0f 90       	pop	r0
 9ba:	1f 90       	pop	r1
 9bc:	18 95       	reti

000009be <TMU_ISR_cbf>:


static void TMU_ISR_cbf(void)
{
	/* Adjust The Tick Time According To The TMU's Time Configuration */
	g_SysTicks++;
 9be:	80 91 7a 00 	lds	r24, 0x007A
 9c2:	90 91 7b 00 	lds	r25, 0x007B
 9c6:	01 96       	adiw	r24, 0x01	; 1
 9c8:	90 93 7b 00 	sts	0x007B, r25
 9cc:	80 93 7a 00 	sts	0x007A, r24
	
	if(g_SysTicks == g_TMU_TickTime)
 9d0:	20 91 7a 00 	lds	r18, 0x007A
 9d4:	30 91 7b 00 	lds	r19, 0x007B
 9d8:	80 91 7c 00 	lds	r24, 0x007C
 9dc:	90 91 7d 00 	lds	r25, 0x007D
 9e0:	28 17       	cp	r18, r24
 9e2:	39 07       	cpc	r19, r25
 9e4:	39 f4       	brne	.+14     	; 0x9f4 <TMU_ISR_cbf+0x36>
	{
		g_TMR_Ticks_Changed = TRUE;
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	80 93 7e 00 	sts	0x007E, r24
		g_SysTicks = FALSE;	
 9ec:	10 92 7b 00 	sts	0x007B, r1
 9f0:	10 92 7a 00 	sts	0x007A, r1
 9f4:	08 95       	ret

000009f6 <TMU_Init>:
{
	ERROR_STATUS errorStauts = E_OK;
	uint16_t index = 0;
	
	/*-------------[ Check TMU's Pointer Validity ]-------------*/
	if(a_TMU_s != NULL)
 9f6:	00 97       	sbiw	r24, 0x00	; 0
 9f8:	09 f4       	brne	.+2      	; 0x9fc <TMU_Init+0x6>
 9fa:	5e c0       	rjmp	.+188    	; 0xab8 <TMU_Init+0xc2>
 9fc:	fc 01       	movw	r30, r24
	{
		/*-------------[ TMU Initialization ]-------------*/
		g_TMU.Timer_ID  = a_TMU_s->Timer_ID;
 9fe:	a1 e6       	ldi	r26, 0x61	; 97
 a00:	b0 e0       	ldi	r27, 0x00	; 0
 a02:	81 81       	ldd	r24, Z+1	; 0x01
 a04:	11 96       	adiw	r26, 0x01	; 1
 a06:	8c 93       	st	X, r24
 a08:	11 97       	sbiw	r26, 0x01	; 1
		g_TMU.Tick_Time = a_TMU_s->Tick_Time;
 a0a:	80 81       	ld	r24, Z
 a0c:	8c 93       	st	X, r24
		g_TMU.Timer_Cbk_ptr = TMU_ISR_cbf;
 a0e:	2f ed       	ldi	r18, 0xDF	; 223
 a10:	34 e0       	ldi	r19, 0x04	; 4
 a12:	14 96       	adiw	r26, 0x04	; 4
 a14:	3c 93       	st	X, r19
 a16:	2e 93       	st	-X, r18
 a18:	13 97       	sbiw	r26, 0x03	; 3
		g_TMU.State    = INACTIVE;
 a1a:	12 96       	adiw	r26, 0x02	; 2
 a1c:	1c 92       	st	X, r1
		g_TMU_TickTime = g_TMU.Tick_Time;
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	90 93 7d 00 	sts	0x007D, r25
 a24:	80 93 7c 00 	sts	0x007C, r24
		
		/*-------------[ Timer Initialization ]-------------*/
		g_TMU_TMR.Timer_Mode = TIMER_MODE;
 a28:	a7 ec       	ldi	r26, 0xC7	; 199
 a2a:	b0 e0       	ldi	r27, 0x00	; 0
 a2c:	11 96       	adiw	r26, 0x01	; 1
 a2e:	1c 92       	st	X, r1
 a30:	11 97       	sbiw	r26, 0x01	; 1
		g_TMU_TMR.Timer_Prescaler = TIMER_PRESCALER_64;
 a32:	84 e0       	ldi	r24, 0x04	; 4
 a34:	13 96       	adiw	r26, 0x03	; 3
 a36:	8c 93       	st	X, r24
 a38:	13 97       	sbiw	r26, 0x03	; 3
		g_TMU_TMR.Timer_Polling_Or_Interrupt = TIMER_INTERRUPT_MODE;
 a3a:	81 e0       	ldi	r24, 0x01	; 1
 a3c:	12 96       	adiw	r26, 0x02	; 2
 a3e:	8c 93       	st	X, r24
 a40:	12 97       	sbiw	r26, 0x02	; 2
		g_TMU_TMR.Timer_Cbk_ptr = g_TMU.Timer_Cbk_ptr;
 a42:	15 96       	adiw	r26, 0x05	; 5
 a44:	3c 93       	st	X, r19
 a46:	2e 93       	st	-X, r18
 a48:	14 97       	sbiw	r26, 0x04	; 4
		
		/* Select The Timer Channel & Set It's CallBack Function */
		switch(a_TMU_s->Timer_ID)
 a4a:	81 81       	ldd	r24, Z+1	; 0x01
 a4c:	81 30       	cpi	r24, 0x01	; 1
 a4e:	59 f0       	breq	.+22     	; 0xa66 <TMU_Init+0x70>
 a50:	18 f0       	brcs	.+6      	; 0xa58 <TMU_Init+0x62>
 a52:	82 30       	cpi	r24, 0x02	; 2
 a54:	81 f0       	breq	.+32     	; 0xa76 <TMU_Init+0x80>
 a56:	33 c0       	rjmp	.+102    	; 0xabe <TMU_Init+0xc8>
		{
			case TIMER_CH0:
				g_TMU_TMR.Timer_CH_NO = TIMER_CH0;
 a58:	10 92 c7 00 	sts	0x00C7, r1
				TIMER0_SetCM(TMU_ISR_cbf);
 a5c:	8f ed       	ldi	r24, 0xDF	; 223
 a5e:	94 e0       	ldi	r25, 0x04	; 4
 a60:	0e 94 5f 03 	call	0x6be	; 0x6be <TIMER0_SetCM>
				break;
 a64:	0f c0       	rjmp	.+30     	; 0xa84 <TMU_Init+0x8e>
			case TIMER_CH1:
				g_TMU_TMR.Timer_CH_NO = TIMER_CH1;
 a66:	81 e0       	ldi	r24, 0x01	; 1
 a68:	80 93 c7 00 	sts	0x00C7, r24
				TIMER1_SetCM(TMU_ISR_cbf);
 a6c:	8f ed       	ldi	r24, 0xDF	; 223
 a6e:	94 e0       	ldi	r25, 0x04	; 4
 a70:	0e 94 69 03 	call	0x6d2	; 0x6d2 <TIMER1_SetCM>
				break;
 a74:	07 c0       	rjmp	.+14     	; 0xa84 <TMU_Init+0x8e>
			case TIMER_CH2:
				g_TMU_TMR.Timer_CH_NO = TIMER_CH2;
 a76:	82 e0       	ldi	r24, 0x02	; 2
 a78:	80 93 c7 00 	sts	0x00C7, r24
				TIMER2_SetCM(TMU_ISR_cbf);
 a7c:	8f ed       	ldi	r24, 0xDF	; 223
 a7e:	94 e0       	ldi	r25, 0x04	; 4
 a80:	0e 94 64 03 	call	0x6c8	; 0x6c8 <TIMER2_SetCM>
				errorStauts = TMU_ERROR + INVALID_IN;
				return errorStauts;
		}
		
		/* Apply The Settings & Start The TMU Timer Hardware Module */
		Timer_Init(&g_TMU_TMR);
 a84:	87 ec       	ldi	r24, 0xC7	; 199
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	0e 94 bd 01 	call	0x37a	; 0x37a <Timer_Init>
		Timer_Start(g_TMU_TMR.Timer_CH_NO, TMR_Ticks);	
 a8c:	6a ef       	ldi	r22, 0xFA	; 250
 a8e:	70 e0       	ldi	r23, 0x00	; 0
 a90:	80 91 c7 00 	lds	r24, 0x00C7
 a94:	0e 94 23 03 	call	0x646	; 0x646 <Timer_Start>
 a98:	e8 e8       	ldi	r30, 0x88	; 136
 a9a:	f0 e0       	ldi	r31, 0x00	; 0
 a9c:	8e ec       	ldi	r24, 0xCE	; 206
 a9e:	90 e0       	ldi	r25, 0x00	; 0
		
		/*  Initialize The Request Buffer  */
		for(index = 0; index < REQUEST_BUFFER_LEN; index++)
		{
			g_RequestBuffer[index].State = INACTIVE;
 aa0:	10 82       	st	Z, r1
 aa2:	df 01       	movw	r26, r30
 aa4:	17 97       	sbiw	r26, 0x07	; 7
			g_RequestBuffer[index].Consumer_Ptr = NULL;
 aa6:	1d 92       	st	X+, r1
 aa8:	1c 92       	st	X, r1
 aaa:	3e 96       	adiw	r30, 0x0e	; 14
		/* Apply The Settings & Start The TMU Timer Hardware Module */
		Timer_Init(&g_TMU_TMR);
		Timer_Start(g_TMU_TMR.Timer_CH_NO, TMR_Ticks);	
		
		/*  Initialize The Request Buffer  */
		for(index = 0; index < REQUEST_BUFFER_LEN; index++)
 aac:	e8 17       	cp	r30, r24
 aae:	f9 07       	cpc	r31, r25
 ab0:	b9 f7       	brne	.-18     	; 0xaa0 <TMU_Init+0xaa>
	else
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
	}
	return errorStauts;
 ab2:	80 e0       	ldi	r24, 0x00	; 0
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	08 95       	ret
	}
	/*-------------[ In Case Of TMU's Null Pointer ]-------------*/
	else
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
 ab8:	89 ec       	ldi	r24, 0xC9	; 201
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	08 95       	ret
				g_TMU_TMR.Timer_CH_NO = TIMER_CH2;
				TIMER2_SetCM(TMU_ISR_cbf);
				break;
			default:
				errorStauts = TMU_ERROR + INVALID_IN;
				return errorStauts;
 abe:	8c ec       	ldi	r24, 0xCC	; 204
 ac0:	90 e0       	ldi	r25, 0x00	; 0
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
	}
	return errorStauts;
}
 ac2:	08 95       	ret

00000ac4 <TMU_Start>:


ERROR_STATUS TMU_Start(FunPtr a_ConsumerFun, uint16_t a_ConsumerID, uint8_t a_Periodic_OneShot, uint32_t a_Time)
{
 ac4:	0f 93       	push	r16
 ac6:	1f 93       	push	r17
 ac8:	cf 93       	push	r28
 aca:	df 93       	push	r29
 acc:	fc 01       	movw	r30, r24
	a_NewConsumer.Time = a_Time;
	a_NewConsumer.Periodicity = a_Periodic_OneShot;
	a_NewConsumer.Count = ZERO;
	a_NewConsumer.State = ACTIVE;
	
	if(g_TMU.State == INACTIVE || g_TMU.State == ACTIVE)
 ace:	90 91 63 00 	lds	r25, 0x0063
 ad2:	92 30       	cpi	r25, 0x02	; 2
 ad4:	08 f0       	brcs	.+2      	; 0xad8 <TMU_Start+0x14>
 ad6:	9a c0       	rjmp	.+308    	; 0xc0c <TMU_Start+0x148>
	{
		/*-------------[ Check Consumer's CBF Pointer Validity ]-------------*/
		if(a_ConsumerFun != NULL)
 ad8:	30 97       	sbiw	r30, 0x00	; 0
 ada:	09 f4       	brne	.+2      	; 0xade <TMU_Start+0x1a>
 adc:	9a c0       	rjmp	.+308    	; 0xc12 <TMU_Start+0x14e>
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
 ade:	80 91 7f 00 	lds	r24, 0x007F
 ae2:	90 91 80 00 	lds	r25, 0x0080
 ae6:	05 97       	sbiw	r24, 0x05	; 5
 ae8:	49 f0       	breq	.+18     	; 0xafc <TMU_Start+0x38>
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].ConsumerID == a_ConsumerID)
 aea:	80 91 8d 00 	lds	r24, 0x008D
 aee:	90 91 8e 00 	lds	r25, 0x008E
 af2:	86 17       	cp	r24, r22
 af4:	97 07       	cpc	r25, r23
 af6:	09 f0       	breq	.+2      	; 0xafa <TMU_Start+0x36>
 af8:	45 c0       	rjmp	.+138    	; 0xb84 <TMU_Start+0xc0>
 afa:	8e c0       	rjmp	.+284    	; 0xc18 <TMU_Start+0x154>
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Consumer & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].State == INACTIVE)
 afc:	80 91 88 00 	lds	r24, 0x0088
 b00:	88 23       	and	r24, r24
 b02:	41 f0       	breq	.+16     	; 0xb14 <TMU_Start+0x50>
 b04:	a6 e9       	ldi	r26, 0x96	; 150
 b06:	b0 e0       	ldi	r27, 0x00	; 0
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Consumer & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
 b08:	81 e0       	ldi	r24, 0x01	; 1
 b0a:	90 e0       	ldi	r25, 0x00	; 0
				{
					if(g_RequestBuffer[index].State == INACTIVE)
 b0c:	5c 91       	ld	r21, X
 b0e:	51 11       	cpse	r21, r1
 b10:	31 c0       	rjmp	.+98     	; 0xb74 <TMU_Start+0xb0>
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <TMU_Start+0x54>
 b14:	80 e0       	ldi	r24, 0x00	; 0
 b16:	90 e0       	ldi	r25, 0x00	; 0
					{
						g_RequestBuffer[index] = a_NewConsumer;
 b18:	ec 01       	movw	r28, r24
 b1a:	cc 0f       	add	r28, r28
 b1c:	dd 1f       	adc	r29, r29
 b1e:	de 01       	movw	r26, r28
 b20:	aa 0f       	add	r26, r26
 b22:	bb 1f       	adc	r27, r27
 b24:	aa 0f       	add	r26, r26
 b26:	bb 1f       	adc	r27, r27
 b28:	aa 0f       	add	r26, r26
 b2a:	bb 1f       	adc	r27, r27
 b2c:	ac 1b       	sub	r26, r28
 b2e:	bd 0b       	sbc	r27, r29
 b30:	af 57       	subi	r26, 0x7F	; 127
 b32:	bf 4f       	sbci	r27, 0xFF	; 255
 b34:	11 96       	adiw	r26, 0x01	; 1
 b36:	fc 93       	st	X, r31
 b38:	ee 93       	st	-X, r30
 b3a:	12 96       	adiw	r26, 0x02	; 2
 b3c:	4c 93       	st	X, r20
 b3e:	12 97       	sbiw	r26, 0x02	; 2
 b40:	13 96       	adiw	r26, 0x03	; 3
 b42:	0d 93       	st	X+, r16
 b44:	1d 93       	st	X+, r17
 b46:	2d 93       	st	X+, r18
 b48:	3c 93       	st	X, r19
 b4a:	16 97       	sbiw	r26, 0x06	; 6
 b4c:	21 e0       	ldi	r18, 0x01	; 1
 b4e:	17 96       	adiw	r26, 0x07	; 7
 b50:	2c 93       	st	X, r18
 b52:	17 97       	sbiw	r26, 0x07	; 7
 b54:	18 96       	adiw	r26, 0x08	; 8
 b56:	1d 92       	st	X+, r1
 b58:	1d 92       	st	X+, r1
 b5a:	1d 92       	st	X+, r1
 b5c:	1c 92       	st	X, r1
 b5e:	1b 97       	sbiw	r26, 0x0b	; 11
 b60:	1d 96       	adiw	r26, 0x0d	; 13
 b62:	7c 93       	st	X, r23
 b64:	6e 93       	st	-X, r22
 b66:	1c 97       	sbiw	r26, 0x0c	; 12
						break;
					}
				}
				/*  If All Consumers In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
 b68:	05 97       	sbiw	r24, 0x05	; 5
 b6a:	09 f4       	brne	.+2      	; 0xb6e <TMU_Start+0xaa>
 b6c:	58 c0       	rjmp	.+176    	; 0xc1e <TMU_Start+0x15a>
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
 b6e:	80 e0       	ldi	r24, 0x00	; 0
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	5a c0       	rjmp	.+180    	; 0xc28 <TMU_Start+0x164>
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Consumer & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
 b74:	01 96       	adiw	r24, 0x01	; 1
 b76:	1e 96       	adiw	r26, 0x0e	; 14
 b78:	85 30       	cpi	r24, 0x05	; 5
 b7a:	91 05       	cpc	r25, r1
 b7c:	39 f6       	brne	.-114    	; 0xb0c <TMU_Start+0x48>
				}
				/*  If All Consumers In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
				{
					a_errorStatus = TMU_ERROR + FULL_BUFFER;
					return a_errorStatus;
 b7e:	8f ec       	ldi	r24, 0xCF	; 207
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	52 c0       	rjmp	.+164    	; 0xc28 <TMU_Start+0x164>
 b84:	a1 e8       	ldi	r26, 0x81	; 129
 b86:	b0 e0       	ldi	r27, 0x00	; 0
 b88:	c9 eb       	ldi	r28, 0xB9	; 185
 b8a:	d0 e0       	ldi	r29, 0x00	; 0
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].ConsumerID == a_ConsumerID)
 b8c:	5a 96       	adiw	r26, 0x1a	; 26
 b8e:	8d 91       	ld	r24, X+
 b90:	9c 91       	ld	r25, X
 b92:	5b 97       	sbiw	r26, 0x1b	; 27
 b94:	86 17       	cp	r24, r22
 b96:	97 07       	cpc	r25, r23
 b98:	09 f4       	brne	.+2      	; 0xb9c <TMU_Start+0xd8>
 b9a:	44 c0       	rjmp	.+136    	; 0xc24 <TMU_Start+0x160>
 b9c:	1e 96       	adiw	r26, 0x0e	; 14
			}
			/*  If There Still Space In The Request Buffer  */
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
 b9e:	ac 17       	cp	r26, r28
 ba0:	bd 07       	cpc	r27, r29
 ba2:	a1 f7       	brne	.-24     	; 0xb8c <TMU_Start+0xc8>
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
					}
				}
				/* Add The New Consumer To The Request Buffer */
				g_RequestBuffer[g_ReqBuffer_Index++] = a_NewConsumer;				
 ba4:	80 91 7f 00 	lds	r24, 0x007F
 ba8:	90 91 80 00 	lds	r25, 0x0080
 bac:	dc 01       	movw	r26, r24
 bae:	11 96       	adiw	r26, 0x01	; 1
 bb0:	b0 93 80 00 	sts	0x0080, r27
 bb4:	a0 93 7f 00 	sts	0x007F, r26
 bb8:	88 0f       	add	r24, r24
 bba:	99 1f       	adc	r25, r25
 bbc:	dc 01       	movw	r26, r24
 bbe:	aa 0f       	add	r26, r26
 bc0:	bb 1f       	adc	r27, r27
 bc2:	aa 0f       	add	r26, r26
 bc4:	bb 1f       	adc	r27, r27
 bc6:	aa 0f       	add	r26, r26
 bc8:	bb 1f       	adc	r27, r27
 bca:	a8 1b       	sub	r26, r24
 bcc:	b9 0b       	sbc	r27, r25
 bce:	af 57       	subi	r26, 0x7F	; 127
 bd0:	bf 4f       	sbci	r27, 0xFF	; 255
 bd2:	11 96       	adiw	r26, 0x01	; 1
 bd4:	fc 93       	st	X, r31
 bd6:	ee 93       	st	-X, r30
 bd8:	12 96       	adiw	r26, 0x02	; 2
 bda:	4c 93       	st	X, r20
 bdc:	12 97       	sbiw	r26, 0x02	; 2
 bde:	13 96       	adiw	r26, 0x03	; 3
 be0:	0d 93       	st	X+, r16
 be2:	1d 93       	st	X+, r17
 be4:	2d 93       	st	X+, r18
 be6:	3c 93       	st	X, r19
 be8:	16 97       	sbiw	r26, 0x06	; 6
 bea:	81 e0       	ldi	r24, 0x01	; 1
 bec:	17 96       	adiw	r26, 0x07	; 7
 bee:	8c 93       	st	X, r24
 bf0:	17 97       	sbiw	r26, 0x07	; 7
 bf2:	18 96       	adiw	r26, 0x08	; 8
 bf4:	1d 92       	st	X+, r1
 bf6:	1d 92       	st	X+, r1
 bf8:	1d 92       	st	X+, r1
 bfa:	1c 92       	st	X, r1
 bfc:	1b 97       	sbiw	r26, 0x0b	; 11
 bfe:	1d 96       	adiw	r26, 0x0d	; 13
 c00:	7c 93       	st	X, r23
 c02:	6e 93       	st	-X, r22
 c04:	1c 97       	sbiw	r26, 0x0c	; 12
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
 c06:	80 e0       	ldi	r24, 0x00	; 0
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	0e c0       	rjmp	.+28     	; 0xc28 <TMU_Start+0x164>
	}
	/*-------------[ In Case The TMU IS Not Active (Not Initialized Yet) ]-------------*/
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
 c0c:	8a ec       	ldi	r24, 0xCA	; 202
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	0b c0       	rjmp	.+22     	; 0xc28 <TMU_Start+0x164>
		}
		/*-------------[ In Case Of Consumer's Null Pointer CBF ]-------------*/
		else
		{
			a_errorStatus = TMU_ERROR + NULL_PTR;
			return a_errorStatus;
 c12:	89 ec       	ldi	r24, 0xC9	; 201
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	08 c0       	rjmp	.+16     	; 0xc28 <TMU_Start+0x164>
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].ConsumerID == a_ConsumerID)
					{
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
 c18:	8e ec       	ldi	r24, 0xCE	; 206
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	05 c0       	rjmp	.+10     	; 0xc28 <TMU_Start+0x164>
				}
				/*  If All Consumers In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
				{
					a_errorStatus = TMU_ERROR + FULL_BUFFER;
					return a_errorStatus;
 c1e:	8f ec       	ldi	r24, 0xCF	; 207
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	02 c0       	rjmp	.+4      	; 0xc28 <TMU_Start+0x164>
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].ConsumerID == a_ConsumerID)
					{
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
 c24:	8e ec       	ldi	r24, 0xCE	; 206
 c26:	90 e0       	ldi	r25, 0x00	; 0
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
}
 c28:	df 91       	pop	r29
 c2a:	cf 91       	pop	r28
 c2c:	1f 91       	pop	r17
 c2e:	0f 91       	pop	r16
 c30:	08 95       	ret

00000c32 <TMU_Stop>:
	
	/*-------------[ Search For The Consumer ID In The Request Buffer ]-------------*/
	for(a_u16_index = ZERO; a_u16_index < REQUEST_BUFFER_LEN; a_u16_index++)
	{
		/*-------------[ When It's Found, Deactivate That Consumer ]-------------*/
		if(g_RequestBuffer[a_u16_index].ConsumerID == a_ConsumerID)
 c32:	20 91 8d 00 	lds	r18, 0x008D
 c36:	30 91 8e 00 	lds	r19, 0x008E
 c3a:	28 17       	cp	r18, r24
 c3c:	39 07       	cpc	r19, r25
 c3e:	51 f0       	breq	.+20     	; 0xc54 <TMU_Stop+0x22>
 c40:	e1 e8       	ldi	r30, 0x81	; 129
 c42:	f0 e0       	ldi	r31, 0x00	; 0
{
	ERROR_STATUS errorStatus = E_NOK;
	uint16_t a_u16_index;
	
	/*-------------[ Search For The Consumer ID In The Request Buffer ]-------------*/
	for(a_u16_index = ZERO; a_u16_index < REQUEST_BUFFER_LEN; a_u16_index++)
 c44:	21 e0       	ldi	r18, 0x01	; 1
 c46:	30 e0       	ldi	r19, 0x00	; 0
	{
		/*-------------[ When It's Found, Deactivate That Consumer ]-------------*/
		if(g_RequestBuffer[a_u16_index].ConsumerID == a_ConsumerID)
 c48:	42 8d       	ldd	r20, Z+26	; 0x1a
 c4a:	53 8d       	ldd	r21, Z+27	; 0x1b
 c4c:	48 17       	cp	r20, r24
 c4e:	59 07       	cpc	r21, r25
 c50:	a1 f4       	brne	.+40     	; 0xc7a <TMU_Stop+0x48>
 c52:	02 c0       	rjmp	.+4      	; 0xc58 <TMU_Stop+0x26>
{
	ERROR_STATUS errorStatus = E_NOK;
	uint16_t a_u16_index;
	
	/*-------------[ Search For The Consumer ID In The Request Buffer ]-------------*/
	for(a_u16_index = ZERO; a_u16_index < REQUEST_BUFFER_LEN; a_u16_index++)
 c54:	20 e0       	ldi	r18, 0x00	; 0
 c56:	30 e0       	ldi	r19, 0x00	; 0
	{
		/*-------------[ When It's Found, Deactivate That Consumer ]-------------*/
		if(g_RequestBuffer[a_u16_index].ConsumerID == a_ConsumerID)
		{
			g_RequestBuffer[a_u16_index].State = INACTIVE;
 c58:	22 0f       	add	r18, r18
 c5a:	33 1f       	adc	r19, r19
 c5c:	f9 01       	movw	r30, r18
 c5e:	ee 0f       	add	r30, r30
 c60:	ff 1f       	adc	r31, r31
 c62:	ee 0f       	add	r30, r30
 c64:	ff 1f       	adc	r31, r31
 c66:	ee 0f       	add	r30, r30
 c68:	ff 1f       	adc	r31, r31
 c6a:	e2 1b       	sub	r30, r18
 c6c:	f3 0b       	sbc	r31, r19
 c6e:	ef 57       	subi	r30, 0x7F	; 127
 c70:	ff 4f       	sbci	r31, 0xFF	; 255
 c72:	17 82       	std	Z+7, r1	; 0x07
			errorStatus = E_OK;
			return errorStatus;
 c74:	80 e0       	ldi	r24, 0x00	; 0
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	08 95       	ret
{
	ERROR_STATUS errorStatus = E_NOK;
	uint16_t a_u16_index;
	
	/*-------------[ Search For The Consumer ID In The Request Buffer ]-------------*/
	for(a_u16_index = ZERO; a_u16_index < REQUEST_BUFFER_LEN; a_u16_index++)
 c7a:	2f 5f       	subi	r18, 0xFF	; 255
 c7c:	3f 4f       	sbci	r19, 0xFF	; 255
 c7e:	3e 96       	adiw	r30, 0x0e	; 14
 c80:	25 30       	cpi	r18, 0x05	; 5
 c82:	31 05       	cpc	r19, r1
 c84:	09 f7       	brne	.-62     	; 0xc48 <TMU_Stop+0x16>
			return errorStatus;
		}
	}
	
	/*-------------[ Consumer Not Found In Request Buffer ]-------------*/
	return errorStatus;
 c86:	81 e0       	ldi	r24, 0x01	; 1
 c88:	90 e0       	ldi	r25, 0x00	; 0
}
 c8a:	08 95       	ret

00000c8c <TMU_Dispatcher>:


void TMU_Dispatcher(void)
{
 c8c:	ef 92       	push	r14
 c8e:	ff 92       	push	r15
 c90:	0f 93       	push	r16
 c92:	1f 93       	push	r17
 c94:	cf 93       	push	r28
 c96:	df 93       	push	r29
	uint16_t a_u16_index;
	FunPtr a_ConsumerFunction;
	
	/*-------------[ Every TMU Tick, Go Through The Request Buffer ]-------------*/
	if(g_TMR_Ticks_Changed)
 c98:	80 91 7e 00 	lds	r24, 0x007E
 c9c:	88 23       	and	r24, r24
 c9e:	09 f4       	brne	.+2      	; 0xca2 <TMU_Dispatcher+0x16>
 ca0:	45 c0       	rjmp	.+138    	; 0xd2c <TMU_Dispatcher+0xa0>
 ca2:	c1 e8       	ldi	r28, 0x81	; 129
 ca4:	d0 e0       	ldi	r29, 0x00	; 0
 ca6:	08 e8       	ldi	r16, 0x88	; 136
 ca8:	10 e0       	ldi	r17, 0x00	; 0
 caa:	0f 2e       	mov	r0, r31
 cac:	f7 ec       	ldi	r31, 0xC7	; 199
 cae:	ef 2e       	mov	r14, r31
 cb0:	f0 e0       	ldi	r31, 0x00	; 0
 cb2:	ff 2e       	mov	r15, r31
 cb4:	f0 2d       	mov	r31, r0
	{
		for(a_u16_index = ZERO; a_u16_index < REQUEST_BUFFER_LEN; a_u16_index++)
		{
			g_RequestBuffer[a_u16_index].Count += g_TMU_TickTime;
 cb6:	40 91 7c 00 	lds	r20, 0x007C
 cba:	50 91 7d 00 	lds	r21, 0x007D
 cbe:	88 85       	ldd	r24, Y+8	; 0x08
 cc0:	99 85       	ldd	r25, Y+9	; 0x09
 cc2:	aa 85       	ldd	r26, Y+10	; 0x0a
 cc4:	bb 85       	ldd	r27, Y+11	; 0x0b
 cc6:	84 0f       	add	r24, r20
 cc8:	95 1f       	adc	r25, r21
 cca:	a1 1d       	adc	r26, r1
 ccc:	b1 1d       	adc	r27, r1
 cce:	88 87       	std	Y+8, r24	; 0x08
 cd0:	99 87       	std	Y+9, r25	; 0x09
 cd2:	aa 87       	std	Y+10, r26	; 0x0a
 cd4:	bb 87       	std	Y+11, r27	; 0x0b
			
			/*-------------[ IF Consumer's Due Time Is Met!  ]-------------*/
			if(g_RequestBuffer[a_u16_index].Count >= g_RequestBuffer[a_u16_index].Time)
 cd6:	4b 81       	ldd	r20, Y+3	; 0x03
 cd8:	5c 81       	ldd	r21, Y+4	; 0x04
 cda:	6d 81       	ldd	r22, Y+5	; 0x05
 cdc:	7e 81       	ldd	r23, Y+6	; 0x06
 cde:	84 17       	cp	r24, r20
 ce0:	95 07       	cpc	r25, r21
 ce2:	a6 07       	cpc	r26, r22
 ce4:	b7 07       	cpc	r27, r23
 ce6:	d0 f0       	brcs	.+52     	; 0xd1c <TMU_Dispatcher+0x90>
			{
				a_ConsumerFunction = g_RequestBuffer[a_u16_index].Consumer_Ptr;
 ce8:	48 81       	ld	r20, Y
 cea:	59 81       	ldd	r21, Y+1	; 0x01
 cec:	f8 01       	movw	r30, r16
 cee:	d8 01       	movw	r26, r16
 cf0:	15 97       	sbiw	r26, 0x05	; 5
				
				/* IF The Consumer Function IS Periodic */
				if(g_RequestBuffer[a_u16_index].Periodicity == PERIODIC && g_RequestBuffer[a_u16_index].State == ACTIVE)
 cf2:	8c 91       	ld	r24, X
 cf4:	81 30       	cpi	r24, 0x01	; 1
 cf6:	51 f4       	brne	.+20     	; 0xd0c <TMU_Dispatcher+0x80>
 cf8:	80 81       	ld	r24, Z
 cfa:	81 30       	cpi	r24, 0x01	; 1
 cfc:	79 f4       	brne	.+30     	; 0xd1c <TMU_Dispatcher+0x90>
				{
					g_RequestBuffer[a_u16_index].Count = ZERO;
 cfe:	18 86       	std	Y+8, r1	; 0x08
 d00:	19 86       	std	Y+9, r1	; 0x09
 d02:	1a 86       	std	Y+10, r1	; 0x0a
 d04:	1b 86       	std	Y+11, r1	; 0x0b
					a_ConsumerFunction();
 d06:	fa 01       	movw	r30, r20
 d08:	09 95       	icall
 d0a:	08 c0       	rjmp	.+16     	; 0xd1c <TMU_Dispatcher+0x90>
				}
				
				/* Else IF The Consumer Function IS OneShot (Non-Periodic) */
				else if (g_RequestBuffer[a_u16_index].Periodicity == ONESHOT && g_RequestBuffer[a_u16_index].State == ACTIVE)
 d0c:	81 11       	cpse	r24, r1
 d0e:	06 c0       	rjmp	.+12     	; 0xd1c <TMU_Dispatcher+0x90>
 d10:	80 81       	ld	r24, Z
 d12:	81 30       	cpi	r24, 0x01	; 1
 d14:	19 f4       	brne	.+6      	; 0xd1c <TMU_Dispatcher+0x90>
				{
					g_RequestBuffer[a_u16_index].State = INACTIVE;
 d16:	10 82       	st	Z, r1
					a_ConsumerFunction();
 d18:	fa 01       	movw	r30, r20
 d1a:	09 95       	icall
 d1c:	2e 96       	adiw	r28, 0x0e	; 14
 d1e:	02 5f       	subi	r16, 0xF2	; 242
 d20:	1f 4f       	sbci	r17, 0xFF	; 255
	FunPtr a_ConsumerFunction;
	
	/*-------------[ Every TMU Tick, Go Through The Request Buffer ]-------------*/
	if(g_TMR_Ticks_Changed)
	{
		for(a_u16_index = ZERO; a_u16_index < REQUEST_BUFFER_LEN; a_u16_index++)
 d22:	ce 15       	cp	r28, r14
 d24:	df 05       	cpc	r29, r15
 d26:	39 f6       	brne	.-114    	; 0xcb6 <TMU_Dispatcher+0x2a>
					g_RequestBuffer[a_u16_index].State = INACTIVE;
					a_ConsumerFunction();
				}
			}
		}
		g_TMR_Ticks_Changed = FALSE;
 d28:	10 92 7e 00 	sts	0x007E, r1
	}
}
 d2c:	df 91       	pop	r29
 d2e:	cf 91       	pop	r28
 d30:	1f 91       	pop	r17
 d32:	0f 91       	pop	r16
 d34:	ff 90       	pop	r15
 d36:	ef 90       	pop	r14
 d38:	08 95       	ret

00000d3a <__tablejump2__>:
 d3a:	ee 0f       	add	r30, r30
 d3c:	ff 1f       	adc	r31, r31
 d3e:	05 90       	lpm	r0, Z+
 d40:	f4 91       	lpm	r31, Z
 d42:	e0 2d       	mov	r30, r0
 d44:	09 94       	ijmp

00000d46 <_exit>:
 d46:	f8 94       	cli

00000d48 <__stop_program>:
 d48:	ff cf       	rjmp	.-2      	; 0xd48 <__stop_program>
