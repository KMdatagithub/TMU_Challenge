
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000630  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000037  00800060  00800060  000006a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a5  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000617  00000000  00000000  00001a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000548  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000564  00000000  00000000  0000259c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075e  00000000  00000000  00002b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001220  00000000  00000000  0000325e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000447e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_4>
  14:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_7>
  20:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_8>
  24:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_9>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_10>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 39       	cpi	r26, 0x97	; 151
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 16 03 	jmp	0x62c	; 0x62c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "util/registers.h"



int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	uint8_t* rxBuffer;
	/*-------------[ BCM Initialization ]-------------*/
	BCM_cfg_s BCM1;
	BCM1.BCM_CH_ID = 1;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	8a 83       	std	Y+2, r24	; 0x02
	BCM1.Mode = BCM_Rx_Mode;
  a2:	89 83       	std	Y+1, r24	; 0x01
	BCM1.Protocol = UART_Protocol;
  a4:	1b 82       	std	Y+3, r1	; 0x03
	BCM_Init(&BCM1);
  a6:	ce 01       	movw	r24, r28
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	0e 94 63 02 	call	0x4c6	; 0x4c6 <BCM_Init>
    rxBuffer = BCM_Setup_RxBuffer(&BCM1, 1);
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	ce 01       	movw	r24, r28
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	0e 94 c5 02 	call	0x58a	; 0x58a <BCM_Setup_RxBuffer>
  ba:	8c 01       	movw	r16, r24
	
	//UART_Write_String((uint8_t*)"OMG Plzzz Report My Noob Team! \r\n");
	
	while (1) 
    {
		softwareDelayMs(5000);
  bc:	68 e8       	ldi	r22, 0x88	; 136
  be:	73 e1       	ldi	r23, 0x13	; 19
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <softwareDelayMs>
		TCNT0 = rxBuffer[0];
  c8:	f8 01       	movw	r30, r16
  ca:	90 81       	ld	r25, Z
  cc:	92 bf       	out	0x32, r25	; 50
    }
  ce:	f6 cf       	rjmp	.-20     	; 0xbc <main+0x2a>

000000d0 <__vector_11>:
			case COUNTER_DOWN_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_FALLING;
				errorStatus = E_OK;
				break;
			default :
				Timer0_Prescaler = TIMER0_NO_CLOCK;
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
				errorStatus = E_NOK;
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
static ERROR_STATUS Timer1_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR1 = Timer1_CMP_Mask;
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
		TCNT1 = 0x00;
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
		OCR1A = 0x00;
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
		TIMSK &= Timer1_Int_CLR_Mask;
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
  f2:	e0 91 6a 00 	lds	r30, 0x006A
  f6:	f0 91 6b 00 	lds	r31, 0x006B
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer1_Polling_Int_Mask;
  fa:	30 97       	sbiw	r30, 0x00	; 0
  fc:	09 f0       	breq	.+2      	; 0x100 <__vector_11+0x30>
  fe:	09 95       	icall
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer1_OCA_Int_Mask;
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	bf 91       	pop	r27
				SREG  |= 0x80;
 106:	af 91       	pop	r26
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
				Ptr_Timer1_CM = Timer_cfg->Timer_Cbk_ptr;
 10c:	7f 91       	pop	r23
 10e:	6f 91       	pop	r22
 110:	5f 91       	pop	r21
 112:	4f 91       	pop	r20
 114:	3f 91       	pop	r19
 116:	2f 91       	pop	r18
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_10>:
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
				{
					case TIMER_NO_CLOCK :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
 144:	e0 91 68 00 	lds	r30, 0x0068
						errorStatus = E_OK;
 148:	f0 91 69 00 	lds	r31, 0x0069
						break;
					case TIMER_PRESCALER_8 :
						Timer1_Prescaler = TIMER1_PRESCALER_8;
 14c:	30 97       	sbiw	r30, 0x00	; 0
 14e:	09 f0       	breq	.+2      	; 0x152 <__vector_10+0x30>
 150:	09 95       	icall
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
						errorStatus = E_OK;
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
						break;
					case TIMER_PRESCALER_32 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
						errorStatus = E_NOK;
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
						break;
					case TIMER_PRESCALER_64 :
						Timer1_Prescaler = TIMER1_PRESCALER_64;
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <__vector_5>:
						errorStatus = E_OK;
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
						break;
					case TIMER_PRESCALER_128 :
						Timer1_Prescaler = TIMER1_PRESCALER_128;
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
						errorStatus = E_OK;
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
						break;
					case TIMER_PRESCALER_256 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
						errorStatus = E_NOK;
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
						break;
					case TIMER_PRESCALER_1024 :
						Timer1_Prescaler = TIMER1_PRESCALER_1024;
 194:	ff 93       	push	r31
 196:	e0 91 62 00 	lds	r30, 0x0062
 19a:	f0 91 63 00 	lds	r31, 0x0063
 19e:	30 97       	sbiw	r30, 0x00	; 0
						errorStatus = E_OK;
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <__vector_5+0x30>
 1a2:	09 95       	icall
						break;
					default :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
						errorStatus = E_NOK;
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_RISING;
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
				errorStatus = E_OK;
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
				break;
			case COUNTER_DOWN_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_FALLING;
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_4>:
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
				errorStatus = E_OK;
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
				break;
			default :
				Timer1_Prescaler = TIMER1_NO_CLOCK;
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
				errorStatus = E_NOK;
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
static ERROR_STATUS Timer2_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR2 = Timer2_CMP_Mask;
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
		TCNT2 = Timer2_TCNT_INIT_Mask;
 1e0:	af 93       	push	r26
		TIMSK &= Timer1_Int_CLR_Mask;
 1e2:	bf 93       	push	r27
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 1e8:	e0 91 60 00 	lds	r30, 0x0060
 1ec:	f0 91 61 00 	lds	r31, 0x0061
 1f0:	30 97       	sbiw	r30, 0x00	; 0
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <__vector_4+0x30>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer2_Polling_Int_Mask;
 1f4:	09 95       	icall
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer2_Interrupt_CMP_Int_Mask;
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
				SREG  |= 0x80;
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
				Ptr_Timer2_CM = Timer_cfg->Timer_Cbk_ptr;
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <__vector_9>:
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	2f 93       	push	r18
 224:	3f 93       	push	r19
 226:	4f 93       	push	r20
 228:	5f 93       	push	r21
 22a:	6f 93       	push	r22
 22c:	7f 93       	push	r23
				{
					case TIMER_NO_CLOCK :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
						errorStatus = E_OK;
 232:	af 93       	push	r26
 234:	bf 93       	push	r27
						break;
					case TIMER_PRESCALER_8 :
						Timer2_Prescaler = TIMER2_PRESCALER_8;
 236:	ef 93       	push	r30
 238:	ff 93       	push	r31
 23a:	e0 91 66 00 	lds	r30, 0x0066
						errorStatus = E_OK;
 23e:	f0 91 67 00 	lds	r31, 0x0067
						break;
					case TIMER_PRESCALER_32 :
						Timer2_Prescaler = TIMER2_PRESCALER_32;
 242:	30 97       	sbiw	r30, 0x00	; 0
 244:	09 f0       	breq	.+2      	; 0x248 <__vector_9+0x30>
						errorStatus = E_OK;
 246:	09 95       	icall
 248:	ff 91       	pop	r31
						break;
					case TIMER_PRESCALER_64 :
						Timer2_Prescaler = TIMER2_PRESCALER_64;
 24a:	ef 91       	pop	r30
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
						errorStatus = E_OK;
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
						break;
					case TIMER_PRESCALER_128 :
						Timer2_Prescaler = TIMER2_PRESCALER_128;
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
						errorStatus = E_OK;
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
						break;
					case TIMER_PRESCALER_256 :
						Timer2_Prescaler = TIMER2_PRESCALER_256;
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
						errorStatus = E_OK;
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
						break;
						case TIMER_PRESCALER_1024 :
						Timer2_Prescaler = TIMER2_PRESCALER_1024;
 268:	18 95       	reti

0000026a <__vector_7>:
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
						errorStatus = E_OK;
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
						break;
					default :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
 272:	11 24       	eor	r1, r1
 274:	2f 93       	push	r18
						errorStatus = E_NOK;
 276:	3f 93       	push	r19
 278:	4f 93       	push	r20
						break;
				}
				break;
			default :
				Timer2_Prescaler = TIMER2_NO_CLOCK;
 27a:	5f 93       	push	r21
 27c:	6f 93       	push	r22
				errorStatus = E_NOK;
 27e:	7f 93       	push	r23
 280:	8f 93       	push	r24
				break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 282:	9f 93       	push	r25
 284:	af 93       	push	r26
				break;
			case TIMER_CH2 :
				errorStatus = Timer2_Init(Timer_cfg);
				break;
			default :
				errorStatus = E_NOK;
 286:	bf 93       	push	r27
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 288:	ef 93       	push	r30
		Ptr_Timer1_OV();
	}
}

ISR(TIMER1_COMPA_vect)
{
 28a:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 28c:	e0 91 64 00 	lds	r30, 0x0064
 290:	f0 91 65 00 	lds	r31, 0x0065
 294:	30 97       	sbiw	r30, 0x00	; 0
 296:	09 f0       	breq	.+2      	; 0x29a <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
 298:	09 95       	icall
	}	
}
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 2de:	e0 91 64 00 	lds	r30, 0x0064
 2e2:	f0 91 65 00 	lds	r31, 0x0065
 2e6:	30 97       	sbiw	r30, 0x00	; 0
 2e8:	09 f0       	breq	.+2      	; 0x2ec <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 2ea:	09 95       	icall
	}
}
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	7f 91       	pop	r23
 2fa:	6f 91       	pop	r22
 2fc:	5f 91       	pop	r21
 2fe:	4f 91       	pop	r20
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <UART_Init>:
FunPtr Ptr_UART_TX = NULL;
FunPtr Ptr_UART_RX = NULL;


void UART_Init(UART_cfg* uart_cfg)
{
 30e:	cf 92       	push	r12
 310:	df 92       	push	r13
 312:	ef 92       	push	r14
 314:	ff 92       	push	r15
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	ec 01       	movw	r28, r24
	uint8_t uart_control = 0x80;
	// Set The UART Baud Rate
	UBRRL = ((F_cpu/(16*uart_cfg->baudrate)) - 1);
 31c:	8f 81       	ldd	r24, Y+7	; 0x07
 31e:	98 85       	ldd	r25, Y+8	; 0x08
 320:	a9 85       	ldd	r26, Y+9	; 0x09
 322:	ba 85       	ldd	r27, Y+10	; 0x0a
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	aa 1f       	adc	r26, r26
 32a:	bb 1f       	adc	r27, r27
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	aa 1f       	adc	r26, r26
 332:	bb 1f       	adc	r27, r27
 334:	9c 01       	movw	r18, r24
 336:	ad 01       	movw	r20, r26
 338:	22 0f       	add	r18, r18
 33a:	33 1f       	adc	r19, r19
 33c:	44 1f       	adc	r20, r20
 33e:	55 1f       	adc	r21, r21
 340:	22 0f       	add	r18, r18
 342:	33 1f       	adc	r19, r19
 344:	44 1f       	adc	r20, r20
 346:	55 1f       	adc	r21, r21
 348:	0f 2e       	mov	r0, r31
 34a:	c1 2c       	mov	r12, r1
 34c:	f4 e2       	ldi	r31, 0x24	; 36
 34e:	df 2e       	mov	r13, r31
 350:	f4 ef       	ldi	r31, 0xF4	; 244
 352:	ef 2e       	mov	r14, r31
 354:	f1 2c       	mov	r15, r1
 356:	f0 2d       	mov	r31, r0
 358:	c7 01       	movw	r24, r14
 35a:	b6 01       	movw	r22, r12
 35c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__udivmodsi4>
 360:	21 50       	subi	r18, 0x01	; 1
 362:	29 b9       	out	0x09, r18	; 9
	UBRRH = ((F_cpu/(16*uart_cfg->baudrate)) - 1)>>8;
 364:	8f 81       	ldd	r24, Y+7	; 0x07
 366:	98 85       	ldd	r25, Y+8	; 0x08
 368:	a9 85       	ldd	r26, Y+9	; 0x09
 36a:	ba 85       	ldd	r27, Y+10	; 0x0a
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	aa 1f       	adc	r26, r26
 372:	bb 1f       	adc	r27, r27
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	aa 1f       	adc	r26, r26
 37a:	bb 1f       	adc	r27, r27
 37c:	9c 01       	movw	r18, r24
 37e:	ad 01       	movw	r20, r26
 380:	22 0f       	add	r18, r18
 382:	33 1f       	adc	r19, r19
 384:	44 1f       	adc	r20, r20
 386:	55 1f       	adc	r21, r21
 388:	22 0f       	add	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	44 1f       	adc	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	c7 01       	movw	r24, r14
 392:	b6 01       	movw	r22, r12
 394:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__udivmodsi4>
 398:	da 01       	movw	r26, r20
 39a:	c9 01       	movw	r24, r18
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	a1 09       	sbc	r26, r1
 3a0:	b1 09       	sbc	r27, r1
 3a2:	89 2f       	mov	r24, r25
 3a4:	9a 2f       	mov	r25, r26
 3a6:	ab 2f       	mov	r26, r27
 3a8:	bb 27       	eor	r27, r27
 3aa:	80 bd       	out	0x20, r24	; 32
	// Set The UART Mode OF Operation
	UCSRB |= (uart_cfg->mode | uart_cfg->uartInterrupts);
 3ac:	9a b1       	in	r25, 0x0a	; 10
 3ae:	88 81       	ld	r24, Y
 3b0:	89 2b       	or	r24, r25
 3b2:	9e 81       	ldd	r25, Y+6	; 0x06
 3b4:	89 2b       	or	r24, r25
 3b6:	8a b9       	out	0x0a, r24	; 10
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
	UCSRC |= uart_control;
 3b8:	20 b5       	in	r18, 0x20	; 32
	// Set The UART Data Sampling Edge
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
 3bc:	9d 81       	ldd	r25, Y+5	; 0x05
 3be:	89 2b       	or	r24, r25
 3c0:	80 68       	ori	r24, 0x80	; 128
 3c2:	99 81       	ldd	r25, Y+1	; 0x01
 3c4:	89 2b       	or	r24, r25
 3c6:	9a 81       	ldd	r25, Y+2	; 0x02
 3c8:	89 2b       	or	r24, r25
 3ca:	9c 81       	ldd	r25, Y+4	; 0x04
 3cc:	89 2b       	or	r24, r25
	UCSRC |= uart_control;
 3ce:	82 2b       	or	r24, r18
 3d0:	80 bd       	out	0x20, r24	; 32
	SREG  |= (0x80);
 3d2:	8f b7       	in	r24, 0x3f	; 63
 3d4:	80 68       	ori	r24, 0x80	; 128
 3d6:	8f bf       	out	0x3f, r24	; 63
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	ff 90       	pop	r15
 3de:	ef 90       	pop	r14
 3e0:	df 90       	pop	r13
 3e2:	cf 90       	pop	r12
 3e4:	08 95       	ret

000003e6 <UART_SetTX>:
/*-----------[ Timers Set CallBack Functions ]-----------*/
/*=======================================================*/

void UART_SetTX(FunPtr Ptr_ISR)
{
	Ptr_UART_TX = Ptr_ISR;
 3e6:	90 93 6f 00 	sts	0x006F, r25
 3ea:	80 93 6e 00 	sts	0x006E, r24
 3ee:	08 95       	ret

000003f0 <UART_SetRX>:
}

void UART_SetRX(FunPtr Ptr_ISR)
{
	Ptr_UART_RX = Ptr_ISR;
 3f0:	90 93 6d 00 	sts	0x006D, r25
 3f4:	80 93 6c 00 	sts	0x006C, r24
 3f8:	08 95       	ret

000003fa <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	2f 93       	push	r18
 406:	3f 93       	push	r19
 408:	4f 93       	push	r20
 40a:	5f 93       	push	r21
 40c:	6f 93       	push	r22
 40e:	7f 93       	push	r23
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
 416:	bf 93       	push	r27
 418:	ef 93       	push	r30
 41a:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
 41c:	e0 91 6c 00 	lds	r30, 0x006C
 420:	f0 91 6d 00 	lds	r31, 0x006D
 424:	30 97       	sbiw	r30, 0x00	; 0
 426:	09 f0       	breq	.+2      	; 0x42a <__vector_13+0x30>
	{
		Ptr_UART_RX();
 428:	09 95       	icall
	}
}
 42a:	ff 91       	pop	r31
 42c:	ef 91       	pop	r30
 42e:	bf 91       	pop	r27
 430:	af 91       	pop	r26
 432:	9f 91       	pop	r25
 434:	8f 91       	pop	r24
 436:	7f 91       	pop	r23
 438:	6f 91       	pop	r22
 43a:	5f 91       	pop	r21
 43c:	4f 91       	pop	r20
 43e:	3f 91       	pop	r19
 440:	2f 91       	pop	r18
 442:	0f 90       	pop	r0
 444:	0f be       	out	0x3f, r0	; 63
 446:	0f 90       	pop	r0
 448:	1f 90       	pop	r1
 44a:	18 95       	reti

0000044c <__vector_15>:

ISR(USART_TXC_vect)
{
 44c:	1f 92       	push	r1
 44e:	0f 92       	push	r0
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	2f 93       	push	r18
 458:	3f 93       	push	r19
 45a:	4f 93       	push	r20
 45c:	5f 93       	push	r21
 45e:	6f 93       	push	r22
 460:	7f 93       	push	r23
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
 466:	af 93       	push	r26
 468:	bf 93       	push	r27
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
 46e:	e0 91 6e 00 	lds	r30, 0x006E
 472:	f0 91 6f 00 	lds	r31, 0x006F
 476:	30 97       	sbiw	r30, 0x00	; 0
 478:	09 f0       	breq	.+2      	; 0x47c <__vector_15+0x30>
	{
		Ptr_UART_TX();
 47a:	09 95       	icall
	}
 47c:	ff 91       	pop	r31
 47e:	ef 91       	pop	r30
 480:	bf 91       	pop	r27
 482:	af 91       	pop	r26
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	7f 91       	pop	r23
 48a:	6f 91       	pop	r22
 48c:	5f 91       	pop	r21
 48e:	4f 91       	pop	r20
 490:	3f 91       	pop	r19
 492:	2f 91       	pop	r18
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <BCM_Tx_ISR_cbf>:
/*------------[ BCM CallBacks]------------*/
/* BCM Transmit ISR Call-Back Function */
static void BCM_Tx_ISR_cbf(void)
{
	/* LOL */
	TCNT2 = 0x05;
 49e:	85 e0       	ldi	r24, 0x05	; 5
 4a0:	84 bd       	out	0x24, r24	; 36
 4a2:	08 95       	ret

000004a4 <BCM_Rx_ISR_cbf>:
}
/* BCM Receive ISR Call-Back Function */
static void BCM_Rx_ISR_cbf(void)
{
	/* LOL */
	g_BCM_EXcfg.Lock_State = Buffer_Locked;
 4a4:	e9 e8       	ldi	r30, 0x89	; 137
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	83 83       	std	Z+3, r24	; 0x03
	g_BCM_EXcfg.FSM_State = ReceivingByte_State;
 4ac:	84 e0       	ldi	r24, 0x04	; 4
 4ae:	84 83       	std	Z+4, r24	; 0x04
	g_RX_Buffer[g_BCM_EXcfg.Count] = UDR;
 4b0:	82 85       	ldd	r24, Z+10	; 0x0a
 4b2:	93 85       	ldd	r25, Z+11	; 0x0b
 4b4:	2c b1       	in	r18, 0x0c	; 12
 4b6:	dc 01       	movw	r26, r24
 4b8:	a0 59       	subi	r26, 0x90	; 144
 4ba:	bf 4f       	sbci	r27, 0xFF	; 255
 4bc:	2c 93       	st	X, r18
	g_BCM_EXcfg.Count++;
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	93 87       	std	Z+11, r25	; 0x0b
 4c2:	82 87       	std	Z+10, r24	; 0x0a
 4c4:	08 95       	ret

000004c6 <BCM_Init>:
}
/*------------------------------------*/

/* BCM Initialization Routine */
ERROR_STATUS BCM_Init(BCM_cfg_s* a_BCM)
{
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	cd b7       	in	r28, 0x3d	; 61
 4cc:	de b7       	in	r29, 0x3e	; 62
 4ce:	2b 97       	sbiw	r28, 0x0b	; 11
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	f8 94       	cli
 4d4:	de bf       	out	0x3e, r29	; 62
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	cd bf       	out	0x3d, r28	; 61
 4da:	dc 01       	movw	r26, r24
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	UART_cfg a_BCM_UART;
	/* spi config as well... */
	
	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_BCM != NULL)
 4dc:	89 2b       	or	r24, r25
 4de:	09 f4       	brne	.+2      	; 0x4e2 <BCM_Init+0x1c>
 4e0:	48 c0       	rjmp	.+144    	; 0x572 <BCM_Init+0xac>
	{
		/*--------[ Add The BCM CFG To The Working List ]--------*/
		g_BCM_EXcfg.BCM_CH_ID = a_BCM->BCM_CH_ID;
 4e2:	11 96       	adiw	r26, 0x01	; 1
 4e4:	8c 91       	ld	r24, X
 4e6:	11 97       	sbiw	r26, 0x01	; 1
 4e8:	e9 e8       	ldi	r30, 0x89	; 137
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	81 83       	std	Z+1, r24	; 0x01
		g_BCM_EXcfg.Mode      = a_BCM->Mode;
 4ee:	9c 91       	ld	r25, X
 4f0:	90 83       	st	Z, r25
		g_BCM_EXcfg.Protocol  = a_BCM->Protocol;
 4f2:	12 96       	adiw	r26, 0x02	; 2
 4f4:	8c 91       	ld	r24, X
 4f6:	82 83       	std	Z+2, r24	; 0x02
		g_BCM_EXcfg.FSM_State = IDLE_State;
 4f8:	21 e0       	ldi	r18, 0x01	; 1
 4fa:	24 83       	std	Z+4, r18	; 0x04
		g_BCM_EXcfg.Count     = ZERO;
 4fc:	13 86       	std	Z+11, r1	; 0x0b
 4fe:	12 86       	std	Z+10, r1	; 0x0a
		g_BCM_EXcfg.CheckSum  = ZERO;
 500:	15 82       	std	Z+5, r1	; 0x05
		
		/*--------[ Check The BCM HW Communication Protocol ]--------*/
		switch(g_BCM_EXcfg.Protocol)
 502:	88 23       	and	r24, r24
 504:	21 f0       	breq	.+8      	; 0x50e <BCM_Init+0x48>
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	b1 f5       	brne	.+108    	; 0x576 <BCM_Init+0xb0>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 50a:	8c e3       	ldi	r24, 0x3C	; 60
 50c:	35 c0       	rjmp	.+106    	; 0x578 <BCM_Init+0xb2>
		/*--------[ Check The BCM HW Communication Protocol ]--------*/
		switch(g_BCM_EXcfg.Protocol)
		{
			case UART_Protocol:
			{
				a_BCM_UART.baudrate   = BCM_UART_BaudRate;
 50e:	40 e8       	ldi	r20, 0x80	; 128
 510:	55 e2       	ldi	r21, 0x25	; 37
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	48 87       	std	Y+8, r20	; 0x08
 518:	59 87       	std	Y+9, r21	; 0x09
 51a:	6a 87       	std	Y+10, r22	; 0x0a
 51c:	7b 87       	std	Y+11, r23	; 0x0b
				a_BCM_UART.dataBits   = UART_Bits_8;
 51e:	86 e0       	ldi	r24, 0x06	; 6
 520:	8a 83       	std	Y+2, r24	; 0x02
				a_BCM_UART.stopBits   = StopBits_1;
 522:	1d 82       	std	Y+5, r1	; 0x05
				a_BCM_UART.parity     = No_Parity;
 524:	1b 82       	std	Y+3, r1	; 0x03
				a_BCM_UART.sampleEdge = RisingEdg;
 526:	1e 82       	std	Y+6, r1	; 0x06
				a_BCM_UART.uartSync   = UART_Async;
 528:	1c 82       	std	Y+4, r1	; 0x04
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
 52a:	99 23       	and	r25, r25
 52c:	19 f0       	breq	.+6      	; 0x534 <BCM_Init+0x6e>
 52e:	91 30       	cpi	r25, 0x01	; 1
 530:	71 f0       	breq	.+28     	; 0x54e <BCM_Init+0x88>
 532:	19 c0       	rjmp	.+50     	; 0x566 <BCM_Init+0xa0>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_UART.mode = UART_TX;
 534:	88 e0       	ldi	r24, 0x08	; 8
 536:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnTx;
 538:	80 e4       	ldi	r24, 0x40	; 64
 53a:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						g_BCM_EXcfg.BCM_ISR_cbf = BCM_Tx_ISR_cbf;
 53c:	8f e4       	ldi	r24, 0x4F	; 79
 53e:	92 e0       	ldi	r25, 0x02	; 2
 540:	90 93 96 00 	sts	0x0096, r25
 544:	80 93 95 00 	sts	0x0095, r24
						UART_SetTX(BCM_Tx_ISR_cbf);
 548:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <UART_SetTX>
						break;
 54c:	0c c0       	rjmp	.+24     	; 0x566 <BCM_Init+0xa0>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_UART.mode = UART_RX;
 54e:	80 e1       	ldi	r24, 0x10	; 16
 550:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnRx;
 552:	80 e8       	ldi	r24, 0x80	; 128
 554:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						g_BCM_EXcfg.BCM_ISR_cbf = BCM_Rx_ISR_cbf;
 556:	82 e5       	ldi	r24, 0x52	; 82
 558:	92 e0       	ldi	r25, 0x02	; 2
 55a:	90 93 96 00 	sts	0x0096, r25
 55e:	80 93 95 00 	sts	0x0095, r24
						UART_SetRX(BCM_Rx_ISR_cbf);
 562:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <UART_SetRX>
					}
					default:
						break;
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
 566:	ce 01       	movw	r24, r28
 568:	01 96       	adiw	r24, 0x01	; 1
 56a:	0e 94 87 01 	call	0x30e	; 0x30e <UART_Init>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 56e:	8c e3       	ldi	r24, 0x3C	; 60
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
				
				errorStatus = BCM_ERROR + E_OK;
				break;
 570:	03 c0       	rjmp	.+6      	; 0x578 <BCM_Init+0xb2>
	}
	/*-------------[ In Case Of BCM's Null Pointer ]-------------*/
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
 572:	8d e3       	ldi	r24, 0x3D	; 61
 574:	01 c0       	rjmp	.+2      	; 0x578 <BCM_Init+0xb2>
				errorStatus = BCM_ERROR + E_OK;
				break;	
			}
			default:
				errorStatus = BCM_ERROR + INVALID_IN;
				return errorStatus;
 576:	80 e4       	ldi	r24, 0x40	; 64
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
}
 578:	2b 96       	adiw	r28, 0x0b	; 11
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	f8 94       	cli
 57e:	de bf       	out	0x3e, r29	; 62
 580:	0f be       	out	0x3f, r0	; 63
 582:	cd bf       	out	0x3d, r28	; 61
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <BCM_Setup_RxBuffer>:
	/* Needs So Much Improvements & Error Checking & More... */
	
	//ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	
	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_BCM != NULL)
 58a:	89 2b       	or	r24, r25
 58c:	39 f0       	breq	.+14     	; 0x59c <BCM_Setup_RxBuffer+0x12>
	{
		if(a_Buffer_Len <= Rx_Buffer_Size)
 58e:	6a 31       	cpi	r22, 0x1A	; 26
 590:	71 05       	cpc	r23, r1
 592:	20 f4       	brcc	.+8      	; 0x59c <BCM_Setup_RxBuffer+0x12>
		{
			g_BCM_EXcfg.Buf_Len = a_Buffer_Len;
 594:	70 93 92 00 	sts	0x0092, r23
 598:	60 93 91 00 	sts	0x0091, r22
		//return errorStatus;
	}
	//return errorStatus;
	
	return g_RX_Buffer;
}
 59c:	80 e7       	ldi	r24, 0x70	; 112
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	08 95       	ret

000005a2 <softwareDelayMs>:
 */ 
#include "softwareDelay.h"
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	8b 01       	movw	r16, r22
 5a8:	9c 01       	movw	r18, r24
  uint32_t ticks = 2290, i, j;
  for(j=0; j<u32_delay_in_ms; j++)
 5aa:	67 2b       	or	r22, r23
 5ac:	68 2b       	or	r22, r24
 5ae:	69 2b       	or	r22, r25
 5b0:	81 f4       	brne	.+32     	; 0x5d2 <softwareDelayMs+0x30>
 5b2:	17 c0       	rjmp	.+46     	; 0x5e2 <softwareDelayMs+0x40>
 5b4:	01 96       	adiw	r24, 0x01	; 1
  {
    for(i=0; i<ticks; i++)
 5b6:	82 3f       	cpi	r24, 0xF2	; 242
 5b8:	a8 e0       	ldi	r26, 0x08	; 8
 5ba:	9a 07       	cpc	r25, r26
 5bc:	d9 f7       	brne	.-10     	; 0x5b4 <softwareDelayMs+0x12>
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
  uint32_t ticks = 2290, i, j;
  for(j=0; j<u32_delay_in_ms; j++)
 5be:	4f 5f       	subi	r20, 0xFF	; 255
 5c0:	5f 4f       	sbci	r21, 0xFF	; 255
 5c2:	6f 4f       	sbci	r22, 0xFF	; 255
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	40 17       	cp	r20, r16
 5c8:	51 07       	cpc	r21, r17
 5ca:	62 07       	cpc	r22, r18
 5cc:	73 07       	cpc	r23, r19
 5ce:	31 f4       	brne	.+12     	; 0x5dc <softwareDelayMs+0x3a>
 5d0:	08 c0       	rjmp	.+16     	; 0x5e2 <softwareDelayMs+0x40>
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	50 e0       	ldi	r21, 0x00	; 0
 5d6:	ba 01       	movw	r22, r20
 */ 
#include "softwareDelay.h"
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	e0 e0       	ldi	r30, 0x00	; 0
 5dc:	8f 2f       	mov	r24, r31
 5de:	9e 2f       	mov	r25, r30
 5e0:	e9 cf       	rjmp	.-46     	; 0x5b4 <softwareDelayMs+0x12>
  for(j=0; j<u32_delay_in_ms; j++)
  {
    for(i=0; i<ticks; i++)
    { }
  }
}
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	08 95       	ret

000005e8 <__udivmodsi4>:
 5e8:	a1 e2       	ldi	r26, 0x21	; 33
 5ea:	1a 2e       	mov	r1, r26
 5ec:	aa 1b       	sub	r26, r26
 5ee:	bb 1b       	sub	r27, r27
 5f0:	fd 01       	movw	r30, r26
 5f2:	0d c0       	rjmp	.+26     	; 0x60e <__udivmodsi4_ep>

000005f4 <__udivmodsi4_loop>:
 5f4:	aa 1f       	adc	r26, r26
 5f6:	bb 1f       	adc	r27, r27
 5f8:	ee 1f       	adc	r30, r30
 5fa:	ff 1f       	adc	r31, r31
 5fc:	a2 17       	cp	r26, r18
 5fe:	b3 07       	cpc	r27, r19
 600:	e4 07       	cpc	r30, r20
 602:	f5 07       	cpc	r31, r21
 604:	20 f0       	brcs	.+8      	; 0x60e <__udivmodsi4_ep>
 606:	a2 1b       	sub	r26, r18
 608:	b3 0b       	sbc	r27, r19
 60a:	e4 0b       	sbc	r30, r20
 60c:	f5 0b       	sbc	r31, r21

0000060e <__udivmodsi4_ep>:
 60e:	66 1f       	adc	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	88 1f       	adc	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	1a 94       	dec	r1
 618:	69 f7       	brne	.-38     	; 0x5f4 <__udivmodsi4_loop>
 61a:	60 95       	com	r22
 61c:	70 95       	com	r23
 61e:	80 95       	com	r24
 620:	90 95       	com	r25
 622:	9b 01       	movw	r18, r22
 624:	ac 01       	movw	r20, r24
 626:	bd 01       	movw	r22, r26
 628:	cf 01       	movw	r24, r30
 62a:	08 95       	ret

0000062c <_exit>:
 62c:	f8 94       	cli

0000062e <__stop_program>:
 62e:	ff cf       	rjmp	.-2      	; 0x62e <__stop_program>
