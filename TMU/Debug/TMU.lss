
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  00001d84  00001e18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000192  008001ca  008001ca  00001f82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f60  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c09  00000000  00000000  00005208  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ccc  00000000  00000000  00005e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d8  00000000  00000000  00006ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b9b  00000000  00000000  000073b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002872  00000000  00000000  00007f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000a7c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__vector_4>
      14:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__vector_5>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <__vector_7>
      20:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <__vector_8>
      24:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__vector_9>
      28:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__vector_10>
      2c:	0c 94 08 0b 	jmp	0x1610	; 0x1610 <__vector_11>
      30:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__vector_12>
      34:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__vector_13>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__vector_15>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	1b 05       	cpc	r17, r11
      56:	8e 05       	cpc	r24, r14
      58:	ec 05       	cpc	r30, r12
      5a:	4a 06       	cpc	r4, r26
      5c:	a8 06       	cpc	r10, r24
      5e:	06 07       	cpc	r16, r22
      60:	64 07       	cpc	r22, r20
      62:	91 09       	sbc	r25, r1
      64:	b8 09       	sbc	r27, r8
      66:	96 09       	sbc	r25, r6
      68:	9c 09       	sbc	r25, r12
      6a:	a1 09       	sbc	r26, r1
      6c:	a7 09       	sbc	r26, r7
      6e:	ad 09       	sbc	r26, r13
      70:	b2 09       	sbc	r27, r2
      72:	02 0a       	sbc	r0, r18
      74:	3b 0a       	sbc	r3, r27
      76:	09 0a       	sbc	r0, r25
      78:	12 0a       	sbc	r1, r18
      7a:	19 0a       	sbc	r1, r25
      7c:	22 0a       	sbc	r2, r18
      7e:	2b 0a       	sbc	r2, r27
      80:	32 0a       	sbc	r3, r18
      82:	84 0a       	sbc	r8, r20
      84:	ad 0a       	sbc	r10, r29
      86:	89 0a       	sbc	r8, r25
      88:	8f 0a       	sbc	r8, r31
      8a:	95 0a       	sbc	r9, r21
      8c:	9b 0a       	sbc	r9, r27
      8e:	a1 0a       	sbc	r10, r17
      90:	a7 0a       	sbc	r10, r23

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf e5       	ldi	r28, 0x5F	; 95
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	11 e0       	ldi	r17, 0x01	; 1
      a0:	a0 e6       	ldi	r26, 0x60	; 96
      a2:	b0 e0       	ldi	r27, 0x00	; 0
      a4:	e4 e8       	ldi	r30, 0x84	; 132
      a6:	fd e1       	ldi	r31, 0x1D	; 29
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x10>
      aa:	05 90       	lpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	aa 3c       	cpi	r26, 0xCA	; 202
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0xc>

000000b4 <__do_clear_bss>:
      b4:	23 e0       	ldi	r18, 0x03	; 3
      b6:	aa ec       	ldi	r26, 0xCA	; 202
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	ac 35       	cpi	r26, 0x5C	; 92
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 08 08 	call	0x1010	; 0x1010 <main>
      c8:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <Keypad_Init>:

static DIO_Cfg_s Ex_Keypad_COL[COLS];
static DIO_Cfg_s Ex_Keypad_ROW[ROWS];

ERROR_STATUS Keypad_Init(void)
{
      d0:	1f 93       	push	r17
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	62 97       	sbiw	r28, 0x12	; 18
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	DIO_Cfg_s Keypad_COL[COLS], Keypad_ROW[ROWS];
	
	Keypad_COL[0].GPIO = KEYPAD_GPIO;
      e6:	12 e0       	ldi	r17, 0x02	; 2
      e8:	19 83       	std	Y+1, r17	; 0x01
	Keypad_COL[0].dir = OUTPUT;
      ea:	8f ef       	ldi	r24, 0xFF	; 255
      ec:	8b 83       	std	Y+3, r24	; 0x03
	Keypad_COL[0].pins = COL1;
      ee:	90 e2       	ldi	r25, 0x20	; 32
      f0:	9a 83       	std	Y+2, r25	; 0x02
	Ex_Keypad_COL[0] = Keypad_COL[0];
      f2:	e4 ed       	ldi	r30, 0xD4	; 212
      f4:	f1 e0       	ldi	r31, 0x01	; 1
      f6:	29 81       	ldd	r18, Y+1	; 0x01
      f8:	3a 81       	ldd	r19, Y+2	; 0x02
      fa:	4b 81       	ldd	r20, Y+3	; 0x03
      fc:	20 83       	st	Z, r18
      fe:	31 83       	std	Z+1, r19	; 0x01
     100:	42 83       	std	Z+2, r20	; 0x02
	Keypad_COL[1].GPIO = KEYPAD_GPIO;
     102:	1c 83       	std	Y+4, r17	; 0x04
	Keypad_COL[1].dir = OUTPUT;
     104:	8e 83       	std	Y+6, r24	; 0x06
	Keypad_COL[1].pins = COL2;
     106:	90 e4       	ldi	r25, 0x40	; 64
     108:	9d 83       	std	Y+5, r25	; 0x05
	Ex_Keypad_COL[1] = Keypad_COL[1];
     10a:	2c 81       	ldd	r18, Y+4	; 0x04
     10c:	3d 81       	ldd	r19, Y+5	; 0x05
     10e:	4e 81       	ldd	r20, Y+6	; 0x06
     110:	23 83       	std	Z+3, r18	; 0x03
     112:	34 83       	std	Z+4, r19	; 0x04
     114:	45 83       	std	Z+5, r20	; 0x05
	Keypad_COL[2].GPIO = KEYPAD_GPIO;
     116:	1f 83       	std	Y+7, r17	; 0x07
	Keypad_COL[2].dir = OUTPUT;
     118:	89 87       	std	Y+9, r24	; 0x09
	Keypad_COL[2].pins = COL3;
     11a:	80 e8       	ldi	r24, 0x80	; 128
     11c:	88 87       	std	Y+8, r24	; 0x08
	Ex_Keypad_COL[2] = Keypad_COL[2];
     11e:	8f 81       	ldd	r24, Y+7	; 0x07
     120:	98 85       	ldd	r25, Y+8	; 0x08
     122:	a9 85       	ldd	r26, Y+9	; 0x09
     124:	86 83       	std	Z+6, r24	; 0x06
     126:	97 83       	std	Z+7, r25	; 0x07
     128:	a0 87       	std	Z+8, r26	; 0x08
	DIO_init(&Keypad_COL[0]);
     12a:	ce 01       	movw	r24, r28
     12c:	01 96       	adiw	r24, 0x01	; 1
     12e:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_init>
	DIO_init(&Keypad_COL[1]);
     132:	ce 01       	movw	r24, r28
     134:	04 96       	adiw	r24, 0x04	; 4
     136:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_init>
	DIO_init(&Keypad_COL[2]);
     13a:	ce 01       	movw	r24, r28
     13c:	07 96       	adiw	r24, 0x07	; 7
     13e:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_init>
	
	Keypad_ROW[0].GPIO = KEYPAD_GPIO;
     142:	1a 87       	std	Y+10, r17	; 0x0a
	Keypad_ROW[0].dir = INPUT;
     144:	1c 86       	std	Y+12, r1	; 0x0c
	Keypad_ROW[0].pins = ROW1;
     146:	84 e0       	ldi	r24, 0x04	; 4
     148:	8b 87       	std	Y+11, r24	; 0x0b
	Ex_Keypad_ROW[0] = Keypad_ROW[0];
     14a:	eb ec       	ldi	r30, 0xCB	; 203
     14c:	f1 e0       	ldi	r31, 0x01	; 1
     14e:	8a 85       	ldd	r24, Y+10	; 0x0a
     150:	9b 85       	ldd	r25, Y+11	; 0x0b
     152:	ac 85       	ldd	r26, Y+12	; 0x0c
     154:	80 83       	st	Z, r24
     156:	91 83       	std	Z+1, r25	; 0x01
     158:	a2 83       	std	Z+2, r26	; 0x02
	Keypad_ROW[1].GPIO = KEYPAD_GPIO;
     15a:	1d 87       	std	Y+13, r17	; 0x0d
	Keypad_ROW[1].dir = INPUT;
     15c:	1f 86       	std	Y+15, r1	; 0x0f
	Keypad_ROW[1].pins = ROW2;
     15e:	88 e0       	ldi	r24, 0x08	; 8
     160:	8e 87       	std	Y+14, r24	; 0x0e
	Ex_Keypad_ROW[1] = Keypad_ROW[1];
     162:	8d 85       	ldd	r24, Y+13	; 0x0d
     164:	9e 85       	ldd	r25, Y+14	; 0x0e
     166:	af 85       	ldd	r26, Y+15	; 0x0f
     168:	83 83       	std	Z+3, r24	; 0x03
     16a:	94 83       	std	Z+4, r25	; 0x04
     16c:	a5 83       	std	Z+5, r26	; 0x05
	Keypad_ROW[2].GPIO = KEYPAD_GPIO;
     16e:	18 8b       	std	Y+16, r17	; 0x10
	Keypad_ROW[2].dir = INPUT;
     170:	1a 8a       	std	Y+18, r1	; 0x12
	Keypad_ROW[2].pins = ROW3;
     172:	80 e1       	ldi	r24, 0x10	; 16
     174:	89 8b       	std	Y+17, r24	; 0x11
	Ex_Keypad_ROW[2] = Keypad_ROW[2];
     176:	88 89       	ldd	r24, Y+16	; 0x10
     178:	99 89       	ldd	r25, Y+17	; 0x11
     17a:	aa 89       	ldd	r26, Y+18	; 0x12
     17c:	86 83       	std	Z+6, r24	; 0x06
     17e:	97 83       	std	Z+7, r25	; 0x07
     180:	a0 87       	std	Z+8, r26	; 0x08
	DIO_init(&Keypad_ROW[0]);
     182:	ce 01       	movw	r24, r28
     184:	0a 96       	adiw	r24, 0x0a	; 10
     186:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_init>
	DIO_init(&Keypad_ROW[1]);
     18a:	ce 01       	movw	r24, r28
     18c:	0d 96       	adiw	r24, 0x0d	; 13
     18e:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_init>
	DIO_init(&Keypad_ROW[2]);
     192:	ce 01       	movw	r24, r28
     194:	40 96       	adiw	r24, 0x10	; 16
     196:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_init>
	/* Activate The Internal Pull Up Resistors*/
	DIO_Write(Keypad_ROW[0].GPIO, Keypad_ROW[0].pins, HIGH);
     19a:	4f ef       	ldi	r20, 0xFF	; 255
     19c:	6b 85       	ldd	r22, Y+11	; 0x0b
     19e:	8a 85       	ldd	r24, Y+10	; 0x0a
     1a0:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
	DIO_Write(Keypad_ROW[1].GPIO, Keypad_ROW[1].pins, HIGH);
     1a4:	4f ef       	ldi	r20, 0xFF	; 255
     1a6:	6e 85       	ldd	r22, Y+14	; 0x0e
     1a8:	8d 85       	ldd	r24, Y+13	; 0x0d
     1aa:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
	DIO_Write(Keypad_ROW[2].GPIO, Keypad_ROW[2].pins, HIGH);
     1ae:	4f ef       	ldi	r20, 0xFF	; 255
     1b0:	69 89       	ldd	r22, Y+17	; 0x11
     1b2:	88 89       	ldd	r24, Y+16	; 0x10
     1b4:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
	
	return 0;
}
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	62 96       	adiw	r28, 0x12	; 18
     1be:	0f b6       	in	r0, 0x3f	; 63
     1c0:	f8 94       	cli
     1c2:	de bf       	out	0x3e, r29	; 62
     1c4:	0f be       	out	0x3f, r0	; 63
     1c6:	cd bf       	out	0x3d, r28	; 61
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	08 95       	ret

000001d0 <Keypad_Scan>:

ERROR_STATUS Keypad_Scan(uint8_t* a_Keys_Status)
{
     1d0:	ef 92       	push	r14
     1d2:	ff 92       	push	r15
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	00 d0       	rcall	.+0      	; 0x1de <Keypad_Scan+0xe>
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <Keypad_Scan+0x10>
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
     1e4:	e8 2e       	mov	r14, r24
     1e6:	f9 2e       	mov	r15, r25
	static uint8_t index = ZERO;
	static uint8_t States_Buffer[FILTER_ORDER][KEYS_NUM] = {{1}};
	uint8_t a_ret_states[ROWS] = {1};
     1e8:	19 82       	std	Y+1, r1	; 0x01
     1ea:	1a 82       	std	Y+2, r1	; 0x02
     1ec:	1b 82       	std	Y+3, r1	; 0x03
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	89 83       	std	Y+1, r24	; 0x01
	uint8_t a_ret=0, j=0, k=0, sum=0;
     1f2:	1c 82       	std	Y+4, r1	; 0x04
	
	/* Steady State (Output Pattern 0-0-0) */
	DIO_Write(Ex_Keypad_COL[0].GPIO, Ex_Keypad_COL[0].pins, LOW);
     1f4:	04 ed       	ldi	r16, 0xD4	; 212
     1f6:	11 e0       	ldi	r17, 0x01	; 1
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	f8 01       	movw	r30, r16
     1fc:	61 81       	ldd	r22, Z+1	; 0x01
     1fe:	80 81       	ld	r24, Z
     200:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
	DIO_Write(Ex_Keypad_COL[1].GPIO, Ex_Keypad_COL[1].pins, LOW);
     204:	40 e0       	ldi	r20, 0x00	; 0
     206:	f8 01       	movw	r30, r16
     208:	64 81       	ldd	r22, Z+4	; 0x04
     20a:	83 81       	ldd	r24, Z+3	; 0x03
     20c:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
	DIO_Write(Ex_Keypad_COL[2].GPIO, Ex_Keypad_COL[2].pins, LOW);
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	f8 01       	movw	r30, r16
     214:	67 81       	ldd	r22, Z+7	; 0x07
     216:	86 81       	ldd	r24, Z+6	; 0x06
     218:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
	
	/* Read The Rows*/
	DIO_Read(Ex_Keypad_ROW[0].GPIO, Ex_Keypad_ROW[0].pins, &a_ret_states[0]);
     21c:	0b ec       	ldi	r16, 0xCB	; 203
     21e:	11 e0       	ldi	r17, 0x01	; 1
     220:	ae 01       	movw	r20, r28
     222:	4f 5f       	subi	r20, 0xFF	; 255
     224:	5f 4f       	sbci	r21, 0xFF	; 255
     226:	f8 01       	movw	r30, r16
     228:	61 81       	ldd	r22, Z+1	; 0x01
     22a:	80 81       	ld	r24, Z
     22c:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_Read>
	DIO_Read(Ex_Keypad_ROW[1].GPIO, Ex_Keypad_ROW[1].pins, &a_ret_states[1]);
     230:	ae 01       	movw	r20, r28
     232:	4e 5f       	subi	r20, 0xFE	; 254
     234:	5f 4f       	sbci	r21, 0xFF	; 255
     236:	f8 01       	movw	r30, r16
     238:	64 81       	ldd	r22, Z+4	; 0x04
     23a:	83 81       	ldd	r24, Z+3	; 0x03
     23c:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_Read>
	DIO_Read(Ex_Keypad_ROW[2].GPIO, Ex_Keypad_ROW[2].pins, &a_ret_states[2]);
     240:	ae 01       	movw	r20, r28
     242:	4d 5f       	subi	r20, 0xFD	; 253
     244:	5f 4f       	sbci	r21, 0xFF	; 255
     246:	f8 01       	movw	r30, r16
     248:	67 81       	ldd	r22, Z+7	; 0x07
     24a:	86 81       	ldd	r24, Z+6	; 0x06
     24c:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_Read>
	
	/* Check If Any Key Is Pressed */
	if(!a_ret_states[0] | !a_ret_states[1] | !a_ret_states[2])
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	81 11       	cpse	r24, r1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	2a 81       	ldd	r18, Y+2	; 0x02
     25c:	21 11       	cpse	r18, r1
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	89 2b       	or	r24, r25
     262:	39 f4       	brne	.+14     	; 0x272 <Keypad_Scan+0xa2>
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	2b 81       	ldd	r18, Y+3	; 0x03
     268:	21 11       	cpse	r18, r1
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	88 23       	and	r24, r24
     26e:	09 f4       	brne	.+2      	; 0x272 <Keypad_Scan+0xa2>
     270:	d2 c1       	rjmp	.+932    	; 0x616 <Keypad_Scan+0x446>
	{
		/*--[ 1st Row Check ]--*/
		if(!a_ret_states[0])
     272:	99 23       	and	r25, r25
     274:	09 f4       	brne	.+2      	; 0x278 <Keypad_Scan+0xa8>
     276:	86 c0       	rjmp	.+268    	; 0x384 <Keypad_Scan+0x1b4>
		{
			/* (Output Pattern 1-0-0) */
			DIO_Write(Ex_Keypad_COL[0].GPIO, Ex_Keypad_COL[0].pins, LOW);
     278:	04 ed       	ldi	r16, 0xD4	; 212
     27a:	11 e0       	ldi	r17, 0x01	; 1
     27c:	40 e0       	ldi	r20, 0x00	; 0
     27e:	f8 01       	movw	r30, r16
     280:	61 81       	ldd	r22, Z+1	; 0x01
     282:	80 81       	ld	r24, Z
     284:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
			DIO_Write(Ex_Keypad_COL[1].GPIO, Ex_Keypad_COL[1].pins, HIGH);
     288:	4f ef       	ldi	r20, 0xFF	; 255
     28a:	f8 01       	movw	r30, r16
     28c:	64 81       	ldd	r22, Z+4	; 0x04
     28e:	83 81       	ldd	r24, Z+3	; 0x03
     290:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
			DIO_Write(Ex_Keypad_COL[2].GPIO, Ex_Keypad_COL[2].pins, HIGH);
     294:	4f ef       	ldi	r20, 0xFF	; 255
     296:	f8 01       	movw	r30, r16
     298:	67 81       	ldd	r22, Z+7	; 0x07
     29a:	86 81       	ldd	r24, Z+6	; 0x06
     29c:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
			/* Read ROW0 */
			DIO_Read(Ex_Keypad_ROW[0].GPIO, Ex_Keypad_ROW[0].pins, &a_ret);
     2a0:	eb ec       	ldi	r30, 0xCB	; 203
     2a2:	f1 e0       	ldi	r31, 0x01	; 1
     2a4:	ae 01       	movw	r20, r28
     2a6:	4c 5f       	subi	r20, 0xFC	; 252
     2a8:	5f 4f       	sbci	r21, 0xFF	; 255
     2aa:	61 81       	ldd	r22, Z+1	; 0x01
     2ac:	80 81       	ld	r24, Z
     2ae:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_Read>
			if(!a_ret)
     2b2:	8c 81       	ldd	r24, Y+4	; 0x04
     2b4:	81 11       	cpse	r24, r1
     2b6:	11 c0       	rjmp	.+34     	; 0x2da <Keypad_Scan+0x10a>
			{
				States_Buffer[index][0] = 0;
     2b8:	80 91 ca 01 	lds	r24, 0x01CA
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	fc 01       	movw	r30, r24
     2c0:	ee 0f       	add	r30, r30
     2c2:	ff 1f       	adc	r31, r31
     2c4:	ee 0f       	add	r30, r30
     2c6:	ff 1f       	adc	r31, r31
     2c8:	ee 0f       	add	r30, r30
     2ca:	ff 1f       	adc	r31, r31
     2cc:	8e 0f       	add	r24, r30
     2ce:	9f 1f       	adc	r25, r31
     2d0:	fc 01       	movw	r30, r24
     2d2:	e0 5a       	subi	r30, 0xA0	; 160
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	10 82       	st	Z, r1
     2d8:	67 c0       	rjmp	.+206    	; 0x3a8 <Keypad_Scan+0x1d8>
			}
			else
			{
				States_Buffer[index][0] = 1;
     2da:	80 91 ca 01 	lds	r24, 0x01CA
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	fc 01       	movw	r30, r24
     2e2:	ee 0f       	add	r30, r30
     2e4:	ff 1f       	adc	r31, r31
     2e6:	ee 0f       	add	r30, r30
     2e8:	ff 1f       	adc	r31, r31
     2ea:	ee 0f       	add	r30, r30
     2ec:	ff 1f       	adc	r31, r31
     2ee:	8e 0f       	add	r24, r30
     2f0:	9f 1f       	adc	r25, r31
     2f2:	fc 01       	movw	r30, r24
     2f4:	e0 5a       	subi	r30, 0xA0	; 160
     2f6:	ff 4f       	sbci	r31, 0xFF	; 255
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 83       	st	Z, r24
				
				/* (Output Pattern 0-1-0) */
				DIO_Write(Ex_Keypad_COL[0].GPIO, Ex_Keypad_COL[0].pins, HIGH);
     2fc:	04 ed       	ldi	r16, 0xD4	; 212
     2fe:	11 e0       	ldi	r17, 0x01	; 1
     300:	4f ef       	ldi	r20, 0xFF	; 255
     302:	f8 01       	movw	r30, r16
     304:	61 81       	ldd	r22, Z+1	; 0x01
     306:	80 81       	ld	r24, Z
     308:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
				DIO_Write(Ex_Keypad_COL[1].GPIO, Ex_Keypad_COL[1].pins, LOW);
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	f8 01       	movw	r30, r16
     310:	64 81       	ldd	r22, Z+4	; 0x04
     312:	83 81       	ldd	r24, Z+3	; 0x03
     314:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
				DIO_Write(Ex_Keypad_COL[2].GPIO, Ex_Keypad_COL[2].pins, HIGH);
     318:	4f ef       	ldi	r20, 0xFF	; 255
     31a:	f8 01       	movw	r30, r16
     31c:	67 81       	ldd	r22, Z+7	; 0x07
     31e:	86 81       	ldd	r24, Z+6	; 0x06
     320:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
				
				/* Read ROW0 */
				DIO_Read(Ex_Keypad_ROW[0].GPIO, Ex_Keypad_ROW[0].pins, &a_ret);
     324:	eb ec       	ldi	r30, 0xCB	; 203
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	ae 01       	movw	r20, r28
     32a:	4c 5f       	subi	r20, 0xFC	; 252
     32c:	5f 4f       	sbci	r21, 0xFF	; 255
     32e:	61 81       	ldd	r22, Z+1	; 0x01
     330:	80 81       	ld	r24, Z
     332:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_Read>
				if(!a_ret)
     336:	8c 81       	ldd	r24, Y+4	; 0x04
     338:	81 11       	cpse	r24, r1
     33a:	11 c0       	rjmp	.+34     	; 0x35e <Keypad_Scan+0x18e>
				{
					States_Buffer[index][1] = 0;
     33c:	80 91 ca 01 	lds	r24, 0x01CA
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	fc 01       	movw	r30, r24
     344:	ee 0f       	add	r30, r30
     346:	ff 1f       	adc	r31, r31
     348:	ee 0f       	add	r30, r30
     34a:	ff 1f       	adc	r31, r31
     34c:	ee 0f       	add	r30, r30
     34e:	ff 1f       	adc	r31, r31
     350:	8e 0f       	add	r24, r30
     352:	9f 1f       	adc	r25, r31
     354:	fc 01       	movw	r30, r24
     356:	e0 5a       	subi	r30, 0xA0	; 160
     358:	ff 4f       	sbci	r31, 0xFF	; 255
     35a:	11 82       	std	Z+1, r1	; 0x01
     35c:	25 c0       	rjmp	.+74     	; 0x3a8 <Keypad_Scan+0x1d8>
				}
				else
				{
					States_Buffer[index][1] = 1;
     35e:	80 91 ca 01 	lds	r24, 0x01CA
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	fc 01       	movw	r30, r24
     366:	ee 0f       	add	r30, r30
     368:	ff 1f       	adc	r31, r31
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	ee 0f       	add	r30, r30
     370:	ff 1f       	adc	r31, r31
     372:	8e 0f       	add	r24, r30
     374:	9f 1f       	adc	r25, r31
     376:	fc 01       	movw	r30, r24
     378:	e0 5a       	subi	r30, 0xA0	; 160
     37a:	ff 4f       	sbci	r31, 0xFF	; 255
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	81 83       	std	Z+1, r24	; 0x01
					States_Buffer[index][2] = 0;
     380:	12 82       	std	Z+2, r1	; 0x02
     382:	12 c0       	rjmp	.+36     	; 0x3a8 <Keypad_Scan+0x1d8>
				}
			}
		}
		else
		{
			States_Buffer[index][0] = 1;
     384:	80 91 ca 01 	lds	r24, 0x01CA
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	fc 01       	movw	r30, r24
     38c:	ee 0f       	add	r30, r30
     38e:	ff 1f       	adc	r31, r31
     390:	ee 0f       	add	r30, r30
     392:	ff 1f       	adc	r31, r31
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	e8 0f       	add	r30, r24
     39a:	f9 1f       	adc	r31, r25
     39c:	e0 5a       	subi	r30, 0xA0	; 160
     39e:	ff 4f       	sbci	r31, 0xFF	; 255
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	80 83       	st	Z, r24
			States_Buffer[index][1] = 1;
     3a4:	81 83       	std	Z+1, r24	; 0x01
			States_Buffer[index][2] = 1;
     3a6:	82 83       	std	Z+2, r24	; 0x02
		}
		/*--[ 2nd Row Check ]--*/
		if(!a_ret_states[1])
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	81 11       	cpse	r24, r1
     3ac:	86 c0       	rjmp	.+268    	; 0x4ba <Keypad_Scan+0x2ea>
		{
			/* (Output Pattern 1-0-0) */
			DIO_Write(Ex_Keypad_COL[0].GPIO, Ex_Keypad_COL[0].pins, LOW);
     3ae:	04 ed       	ldi	r16, 0xD4	; 212
     3b0:	11 e0       	ldi	r17, 0x01	; 1
     3b2:	40 e0       	ldi	r20, 0x00	; 0
     3b4:	f8 01       	movw	r30, r16
     3b6:	61 81       	ldd	r22, Z+1	; 0x01
     3b8:	80 81       	ld	r24, Z
     3ba:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
			DIO_Write(Ex_Keypad_COL[1].GPIO, Ex_Keypad_COL[1].pins, HIGH);
     3be:	4f ef       	ldi	r20, 0xFF	; 255
     3c0:	f8 01       	movw	r30, r16
     3c2:	64 81       	ldd	r22, Z+4	; 0x04
     3c4:	83 81       	ldd	r24, Z+3	; 0x03
     3c6:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
			DIO_Write(Ex_Keypad_COL[2].GPIO, Ex_Keypad_COL[2].pins, HIGH);
     3ca:	4f ef       	ldi	r20, 0xFF	; 255
     3cc:	f8 01       	movw	r30, r16
     3ce:	67 81       	ldd	r22, Z+7	; 0x07
     3d0:	86 81       	ldd	r24, Z+6	; 0x06
     3d2:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
			/* Read ROW1 */
			DIO_Read(Ex_Keypad_ROW[1].GPIO, Ex_Keypad_ROW[1].pins, &a_ret);
     3d6:	eb ec       	ldi	r30, 0xCB	; 203
     3d8:	f1 e0       	ldi	r31, 0x01	; 1
     3da:	ae 01       	movw	r20, r28
     3dc:	4c 5f       	subi	r20, 0xFC	; 252
     3de:	5f 4f       	sbci	r21, 0xFF	; 255
     3e0:	64 81       	ldd	r22, Z+4	; 0x04
     3e2:	83 81       	ldd	r24, Z+3	; 0x03
     3e4:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_Read>
			if(!a_ret)
     3e8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ea:	81 11       	cpse	r24, r1
     3ec:	11 c0       	rjmp	.+34     	; 0x410 <Keypad_Scan+0x240>
			{
				States_Buffer[index][3] = 0;
     3ee:	80 91 ca 01 	lds	r24, 0x01CA
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	fc 01       	movw	r30, r24
     3f6:	ee 0f       	add	r30, r30
     3f8:	ff 1f       	adc	r31, r31
     3fa:	ee 0f       	add	r30, r30
     3fc:	ff 1f       	adc	r31, r31
     3fe:	ee 0f       	add	r30, r30
     400:	ff 1f       	adc	r31, r31
     402:	8e 0f       	add	r24, r30
     404:	9f 1f       	adc	r25, r31
     406:	fc 01       	movw	r30, r24
     408:	e0 5a       	subi	r30, 0xA0	; 160
     40a:	ff 4f       	sbci	r31, 0xFF	; 255
     40c:	13 82       	std	Z+3, r1	; 0x03
     40e:	67 c0       	rjmp	.+206    	; 0x4de <Keypad_Scan+0x30e>
			}
			else
			{
				States_Buffer[index][3] = 1;
     410:	80 91 ca 01 	lds	r24, 0x01CA
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	fc 01       	movw	r30, r24
     418:	ee 0f       	add	r30, r30
     41a:	ff 1f       	adc	r31, r31
     41c:	ee 0f       	add	r30, r30
     41e:	ff 1f       	adc	r31, r31
     420:	ee 0f       	add	r30, r30
     422:	ff 1f       	adc	r31, r31
     424:	8e 0f       	add	r24, r30
     426:	9f 1f       	adc	r25, r31
     428:	fc 01       	movw	r30, r24
     42a:	e0 5a       	subi	r30, 0xA0	; 160
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	83 83       	std	Z+3, r24	; 0x03
				
				/* (Output Pattern 0-1-0) */
				DIO_Write(Ex_Keypad_COL[0].GPIO, Ex_Keypad_COL[0].pins, HIGH);
     432:	04 ed       	ldi	r16, 0xD4	; 212
     434:	11 e0       	ldi	r17, 0x01	; 1
     436:	4f ef       	ldi	r20, 0xFF	; 255
     438:	f8 01       	movw	r30, r16
     43a:	61 81       	ldd	r22, Z+1	; 0x01
     43c:	80 81       	ld	r24, Z
     43e:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
				DIO_Write(Ex_Keypad_COL[1].GPIO, Ex_Keypad_COL[1].pins, LOW);
     442:	40 e0       	ldi	r20, 0x00	; 0
     444:	f8 01       	movw	r30, r16
     446:	64 81       	ldd	r22, Z+4	; 0x04
     448:	83 81       	ldd	r24, Z+3	; 0x03
     44a:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
				DIO_Write(Ex_Keypad_COL[2].GPIO, Ex_Keypad_COL[2].pins, HIGH);
     44e:	4f ef       	ldi	r20, 0xFF	; 255
     450:	f8 01       	movw	r30, r16
     452:	67 81       	ldd	r22, Z+7	; 0x07
     454:	86 81       	ldd	r24, Z+6	; 0x06
     456:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
				
				/* Read ROW1 */
				DIO_Read(Ex_Keypad_ROW[1].GPIO, Ex_Keypad_ROW[1].pins, &a_ret);
     45a:	eb ec       	ldi	r30, 0xCB	; 203
     45c:	f1 e0       	ldi	r31, 0x01	; 1
     45e:	ae 01       	movw	r20, r28
     460:	4c 5f       	subi	r20, 0xFC	; 252
     462:	5f 4f       	sbci	r21, 0xFF	; 255
     464:	64 81       	ldd	r22, Z+4	; 0x04
     466:	83 81       	ldd	r24, Z+3	; 0x03
     468:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_Read>
				if(!a_ret)
     46c:	8c 81       	ldd	r24, Y+4	; 0x04
     46e:	81 11       	cpse	r24, r1
     470:	11 c0       	rjmp	.+34     	; 0x494 <Keypad_Scan+0x2c4>
				{
					States_Buffer[index][4] = 0;
     472:	80 91 ca 01 	lds	r24, 0x01CA
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	fc 01       	movw	r30, r24
     47a:	ee 0f       	add	r30, r30
     47c:	ff 1f       	adc	r31, r31
     47e:	ee 0f       	add	r30, r30
     480:	ff 1f       	adc	r31, r31
     482:	ee 0f       	add	r30, r30
     484:	ff 1f       	adc	r31, r31
     486:	8e 0f       	add	r24, r30
     488:	9f 1f       	adc	r25, r31
     48a:	fc 01       	movw	r30, r24
     48c:	e0 5a       	subi	r30, 0xA0	; 160
     48e:	ff 4f       	sbci	r31, 0xFF	; 255
     490:	14 82       	std	Z+4, r1	; 0x04
     492:	25 c0       	rjmp	.+74     	; 0x4de <Keypad_Scan+0x30e>
				}
				else
				{
					States_Buffer[index][4] = 1;
     494:	80 91 ca 01 	lds	r24, 0x01CA
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	fc 01       	movw	r30, r24
     49c:	ee 0f       	add	r30, r30
     49e:	ff 1f       	adc	r31, r31
     4a0:	ee 0f       	add	r30, r30
     4a2:	ff 1f       	adc	r31, r31
     4a4:	ee 0f       	add	r30, r30
     4a6:	ff 1f       	adc	r31, r31
     4a8:	8e 0f       	add	r24, r30
     4aa:	9f 1f       	adc	r25, r31
     4ac:	fc 01       	movw	r30, r24
     4ae:	e0 5a       	subi	r30, 0xA0	; 160
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	84 83       	std	Z+4, r24	; 0x04
					States_Buffer[index][5] = 0;
     4b6:	15 82       	std	Z+5, r1	; 0x05
     4b8:	12 c0       	rjmp	.+36     	; 0x4de <Keypad_Scan+0x30e>
				}
			}
		}
		else
		{
			States_Buffer[index][3] = 1;
     4ba:	80 91 ca 01 	lds	r24, 0x01CA
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	fc 01       	movw	r30, r24
     4c2:	ee 0f       	add	r30, r30
     4c4:	ff 1f       	adc	r31, r31
     4c6:	ee 0f       	add	r30, r30
     4c8:	ff 1f       	adc	r31, r31
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	e8 0f       	add	r30, r24
     4d0:	f9 1f       	adc	r31, r25
     4d2:	e0 5a       	subi	r30, 0xA0	; 160
     4d4:	ff 4f       	sbci	r31, 0xFF	; 255
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	83 83       	std	Z+3, r24	; 0x03
			States_Buffer[index][4] = 1;
     4da:	84 83       	std	Z+4, r24	; 0x04
			States_Buffer[index][5] = 1;
     4dc:	85 83       	std	Z+5, r24	; 0x05
		}
		/*--[ 3rd Row Check ]--*/
		if(!a_ret_states[2])
     4de:	8b 81       	ldd	r24, Y+3	; 0x03
     4e0:	81 11       	cpse	r24, r1
     4e2:	86 c0       	rjmp	.+268    	; 0x5f0 <Keypad_Scan+0x420>
		{
			/* (Output Pattern 1-0-0) */
			DIO_Write(Ex_Keypad_COL[0].GPIO, Ex_Keypad_COL[0].pins, LOW);
     4e4:	04 ed       	ldi	r16, 0xD4	; 212
     4e6:	11 e0       	ldi	r17, 0x01	; 1
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	f8 01       	movw	r30, r16
     4ec:	61 81       	ldd	r22, Z+1	; 0x01
     4ee:	80 81       	ld	r24, Z
     4f0:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
			DIO_Write(Ex_Keypad_COL[1].GPIO, Ex_Keypad_COL[1].pins, HIGH);
     4f4:	4f ef       	ldi	r20, 0xFF	; 255
     4f6:	f8 01       	movw	r30, r16
     4f8:	64 81       	ldd	r22, Z+4	; 0x04
     4fa:	83 81       	ldd	r24, Z+3	; 0x03
     4fc:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
			DIO_Write(Ex_Keypad_COL[2].GPIO, Ex_Keypad_COL[2].pins, HIGH);
     500:	4f ef       	ldi	r20, 0xFF	; 255
     502:	f8 01       	movw	r30, r16
     504:	67 81       	ldd	r22, Z+7	; 0x07
     506:	86 81       	ldd	r24, Z+6	; 0x06
     508:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
			/* Read ROW2 */
			DIO_Read(Ex_Keypad_ROW[2].GPIO, Ex_Keypad_ROW[2].pins, &a_ret);
     50c:	eb ec       	ldi	r30, 0xCB	; 203
     50e:	f1 e0       	ldi	r31, 0x01	; 1
     510:	ae 01       	movw	r20, r28
     512:	4c 5f       	subi	r20, 0xFC	; 252
     514:	5f 4f       	sbci	r21, 0xFF	; 255
     516:	67 81       	ldd	r22, Z+7	; 0x07
     518:	86 81       	ldd	r24, Z+6	; 0x06
     51a:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_Read>
			if(!a_ret)
     51e:	8c 81       	ldd	r24, Y+4	; 0x04
     520:	81 11       	cpse	r24, r1
     522:	11 c0       	rjmp	.+34     	; 0x546 <Keypad_Scan+0x376>
			{
				States_Buffer[index][6] = 0;
     524:	80 91 ca 01 	lds	r24, 0x01CA
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	fc 01       	movw	r30, r24
     52c:	ee 0f       	add	r30, r30
     52e:	ff 1f       	adc	r31, r31
     530:	ee 0f       	add	r30, r30
     532:	ff 1f       	adc	r31, r31
     534:	ee 0f       	add	r30, r30
     536:	ff 1f       	adc	r31, r31
     538:	8e 0f       	add	r24, r30
     53a:	9f 1f       	adc	r25, r31
     53c:	fc 01       	movw	r30, r24
     53e:	e0 5a       	subi	r30, 0xA0	; 160
     540:	ff 4f       	sbci	r31, 0xFF	; 255
     542:	16 82       	std	Z+6, r1	; 0x06
     544:	a5 c0       	rjmp	.+330    	; 0x690 <Keypad_Scan+0x4c0>
			}
			else
			{
				States_Buffer[index][6] = 1;
     546:	80 91 ca 01 	lds	r24, 0x01CA
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	fc 01       	movw	r30, r24
     54e:	ee 0f       	add	r30, r30
     550:	ff 1f       	adc	r31, r31
     552:	ee 0f       	add	r30, r30
     554:	ff 1f       	adc	r31, r31
     556:	ee 0f       	add	r30, r30
     558:	ff 1f       	adc	r31, r31
     55a:	8e 0f       	add	r24, r30
     55c:	9f 1f       	adc	r25, r31
     55e:	fc 01       	movw	r30, r24
     560:	e0 5a       	subi	r30, 0xA0	; 160
     562:	ff 4f       	sbci	r31, 0xFF	; 255
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	86 83       	std	Z+6, r24	; 0x06
				
				/* (Output Pattern 0-1-0) */
				DIO_Write(Ex_Keypad_COL[0].GPIO, Ex_Keypad_COL[0].pins, HIGH);
     568:	04 ed       	ldi	r16, 0xD4	; 212
     56a:	11 e0       	ldi	r17, 0x01	; 1
     56c:	4f ef       	ldi	r20, 0xFF	; 255
     56e:	f8 01       	movw	r30, r16
     570:	61 81       	ldd	r22, Z+1	; 0x01
     572:	80 81       	ld	r24, Z
     574:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
				DIO_Write(Ex_Keypad_COL[1].GPIO, Ex_Keypad_COL[1].pins, LOW);
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	f8 01       	movw	r30, r16
     57c:	64 81       	ldd	r22, Z+4	; 0x04
     57e:	83 81       	ldd	r24, Z+3	; 0x03
     580:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
				DIO_Write(Ex_Keypad_COL[2].GPIO, Ex_Keypad_COL[2].pins, HIGH);
     584:	4f ef       	ldi	r20, 0xFF	; 255
     586:	f8 01       	movw	r30, r16
     588:	67 81       	ldd	r22, Z+7	; 0x07
     58a:	86 81       	ldd	r24, Z+6	; 0x06
     58c:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
				
				/* Read ROW2 */
				DIO_Read(Ex_Keypad_ROW[2].GPIO, Ex_Keypad_ROW[2].pins, &a_ret);
     590:	eb ec       	ldi	r30, 0xCB	; 203
     592:	f1 e0       	ldi	r31, 0x01	; 1
     594:	ae 01       	movw	r20, r28
     596:	4c 5f       	subi	r20, 0xFC	; 252
     598:	5f 4f       	sbci	r21, 0xFF	; 255
     59a:	67 81       	ldd	r22, Z+7	; 0x07
     59c:	86 81       	ldd	r24, Z+6	; 0x06
     59e:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_Read>
				if(!a_ret)
     5a2:	8c 81       	ldd	r24, Y+4	; 0x04
     5a4:	81 11       	cpse	r24, r1
     5a6:	11 c0       	rjmp	.+34     	; 0x5ca <Keypad_Scan+0x3fa>
				{
					States_Buffer[index][7] = 0;
     5a8:	80 91 ca 01 	lds	r24, 0x01CA
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	fc 01       	movw	r30, r24
     5b0:	ee 0f       	add	r30, r30
     5b2:	ff 1f       	adc	r31, r31
     5b4:	ee 0f       	add	r30, r30
     5b6:	ff 1f       	adc	r31, r31
     5b8:	ee 0f       	add	r30, r30
     5ba:	ff 1f       	adc	r31, r31
     5bc:	8e 0f       	add	r24, r30
     5be:	9f 1f       	adc	r25, r31
     5c0:	fc 01       	movw	r30, r24
     5c2:	e0 5a       	subi	r30, 0xA0	; 160
     5c4:	ff 4f       	sbci	r31, 0xFF	; 255
     5c6:	17 82       	std	Z+7, r1	; 0x07
     5c8:	63 c0       	rjmp	.+198    	; 0x690 <Keypad_Scan+0x4c0>
				}
				else
				{
					States_Buffer[index][7] = 1;
     5ca:	80 91 ca 01 	lds	r24, 0x01CA
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	fc 01       	movw	r30, r24
     5d2:	ee 0f       	add	r30, r30
     5d4:	ff 1f       	adc	r31, r31
     5d6:	ee 0f       	add	r30, r30
     5d8:	ff 1f       	adc	r31, r31
     5da:	ee 0f       	add	r30, r30
     5dc:	ff 1f       	adc	r31, r31
     5de:	8e 0f       	add	r24, r30
     5e0:	9f 1f       	adc	r25, r31
     5e2:	fc 01       	movw	r30, r24
     5e4:	e0 5a       	subi	r30, 0xA0	; 160
     5e6:	ff 4f       	sbci	r31, 0xFF	; 255
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	87 83       	std	Z+7, r24	; 0x07
					States_Buffer[index][8] = 0;
     5ec:	10 86       	std	Z+8, r1	; 0x08
     5ee:	50 c0       	rjmp	.+160    	; 0x690 <Keypad_Scan+0x4c0>
				}
			}
		}
		else
		{
			States_Buffer[index][6] = 1;
     5f0:	80 91 ca 01 	lds	r24, 0x01CA
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	fc 01       	movw	r30, r24
     5f8:	ee 0f       	add	r30, r30
     5fa:	ff 1f       	adc	r31, r31
     5fc:	ee 0f       	add	r30, r30
     5fe:	ff 1f       	adc	r31, r31
     600:	ee 0f       	add	r30, r30
     602:	ff 1f       	adc	r31, r31
     604:	e8 0f       	add	r30, r24
     606:	f9 1f       	adc	r31, r25
     608:	e0 5a       	subi	r30, 0xA0	; 160
     60a:	ff 4f       	sbci	r31, 0xFF	; 255
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	86 83       	std	Z+6, r24	; 0x06
			States_Buffer[index][7] = 1;
     610:	87 83       	std	Z+7, r24	; 0x07
			States_Buffer[index][8] = 1;
     612:	80 87       	std	Z+8, r24	; 0x08
     614:	3d c0       	rjmp	.+122    	; 0x690 <Keypad_Scan+0x4c0>
     616:	20 91 ca 01 	lds	r18, 0x01CA
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	c9 01       	movw	r24, r18
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	28 0f       	add	r18, r24
     62c:	39 1f       	adc	r19, r25
     62e:	f9 01       	movw	r30, r18
     630:	e0 5a       	subi	r30, 0xA0	; 160
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	27 59       	subi	r18, 0x97	; 151
     636:	3f 4f       	sbci	r19, 0xFF	; 255
	/* Else IF No Key IS Pressed */
	else
	{
		for(k=0; k<KEYS_NUM; k++)
		{
			States_Buffer[index][k] = 1;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	81 93       	st	Z+, r24
		}
	}
	/* Else IF No Key IS Pressed */
	else
	{
		for(k=0; k<KEYS_NUM; k++)
     63c:	e2 17       	cp	r30, r18
     63e:	f3 07       	cpc	r31, r19
     640:	e1 f7       	brne	.-8      	; 0x63a <Keypad_Scan+0x46a>
     642:	26 c0       	rjmp	.+76     	; 0x690 <Keypad_Scan+0x4c0>
	for(k=0; k<KEYS_NUM; k++)
	{
		sum = ZERO;
		for(j=0; j<FILTER_ORDER; j++)
		{
			sum += States_Buffer[j][k];
     644:	90 81       	ld	r25, Z
     646:	89 0f       	add	r24, r25
     648:	39 96       	adiw	r30, 0x09	; 9
	/* Apply The FIR Digital Filter On Key States Array */
	/* Set The Return Key States Array Based On Filter's Output */
	for(k=0; k<KEYS_NUM; k++)
	{
		sum = ZERO;
		for(j=0; j<FILTER_ORDER; j++)
     64a:	e2 17       	cp	r30, r18
     64c:	f3 07       	cpc	r31, r19
     64e:	d1 f7       	brne	.-12     	; 0x644 <Keypad_Scan+0x474>
		{
			sum += States_Buffer[j][k];
		}
		if(sum == 8)
     650:	88 30       	cpi	r24, 0x08	; 8
     652:	11 f4       	brne	.+4      	; 0x658 <Keypad_Scan+0x488>
		{
			a_Keys_Status[k] = KEY_RELEASED;
     654:	1c 92       	st	X, r1
     656:	05 c0       	rjmp	.+10     	; 0x662 <Keypad_Scan+0x492>
		}
		else if(sum == 0)
     658:	81 11       	cpse	r24, r1
     65a:	02 c0       	rjmp	.+4      	; 0x660 <Keypad_Scan+0x490>
		{
			a_Keys_Status[k] = KEY_PRESSED;
     65c:	7c 93       	st	X, r23
     65e:	01 c0       	rjmp	.+2      	; 0x662 <Keypad_Scan+0x492>
		}
		else
		{
			a_Keys_Status[k] = KEY_FLOATING;
     660:	fc 92       	st	X, r15
     662:	11 96       	adiw	r26, 0x01	; 1
     664:	4f 5f       	subi	r20, 0xFF	; 255
     666:	5f 4f       	sbci	r21, 0xFF	; 255
			States_Buffer[index][k] = 1;
		}
	}
	/* Apply The FIR Digital Filter On Key States Array */
	/* Set The Return Key States Array Based On Filter's Output */
	for(k=0; k<KEYS_NUM; k++)
     668:	40 17       	cp	r20, r16
     66a:	51 07       	cpc	r21, r17
     66c:	31 f0       	breq	.+12     	; 0x67a <Keypad_Scan+0x4aa>
     66e:	9a 01       	movw	r18, r20
     670:	28 5b       	subi	r18, 0xB8	; 184
     672:	3f 4f       	sbci	r19, 0xFF	; 255
	
	return 0;
}

ERROR_STATUS Keypad_Scan(uint8_t* a_Keys_Status)
{
     674:	fa 01       	movw	r30, r20
     676:	86 2f       	mov	r24, r22
     678:	e5 cf       	rjmp	.-54     	; 0x644 <Keypad_Scan+0x474>
		{
			a_Keys_Status[k] = KEY_FLOATING;
		}
	}
	/* Increment The Filter Buffer Pointer And Bound-Check It */
	index++;
     67a:	80 91 ca 01 	lds	r24, 0x01CA
     67e:	8f 5f       	subi	r24, 0xFF	; 255
	if(index == FILTER_ORDER)
     680:	88 30       	cpi	r24, 0x08	; 8
     682:	19 f0       	breq	.+6      	; 0x68a <Keypad_Scan+0x4ba>
		{
			a_Keys_Status[k] = KEY_FLOATING;
		}
	}
	/* Increment The Filter Buffer Pointer And Bound-Check It */
	index++;
     684:	80 93 ca 01 	sts	0x01CA, r24
     688:	0f c0       	rjmp	.+30     	; 0x6a8 <Keypad_Scan+0x4d8>
	if(index == FILTER_ORDER)
		index = ZERO;
     68a:	10 92 ca 01 	sts	0x01CA, r1
     68e:	0c c0       	rjmp	.+24     	; 0x6a8 <Keypad_Scan+0x4d8>
     690:	ae 2d       	mov	r26, r14
     692:	bf 2d       	mov	r27, r15
     694:	40 e6       	ldi	r20, 0x60	; 96
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	09 e6       	ldi	r16, 0x69	; 105
     69a:	10 e0       	ldi	r17, 0x00	; 0
	
	return 0;
}

ERROR_STATUS Keypad_Scan(uint8_t* a_Keys_Status)
{
     69c:	60 e0       	ldi	r22, 0x00	; 0
		{
			a_Keys_Status[k] = KEY_PRESSED;
		}
		else
		{
			a_Keys_Status[k] = KEY_FLOATING;
     69e:	68 94       	set
     6a0:	ff 24       	eor	r15, r15
     6a2:	f1 f8       	bld	r15, 1
		{
			a_Keys_Status[k] = KEY_RELEASED;
		}
		else if(sum == 0)
		{
			a_Keys_Status[k] = KEY_PRESSED;
     6a4:	71 e0       	ldi	r23, 0x01	; 1
     6a6:	e3 cf       	rjmp	.-58     	; 0x66e <Keypad_Scan+0x49e>
	index++;
	if(index == FILTER_ORDER)
		index = ZERO;

	return 0;
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	08 95       	ret

000006c2 <LCD_DATA>:
	
	return 0;
}

ERROR_STATUS LCD_DATA(uint8_t a_Data)
{
     6c2:	cf 93       	push	r28
     6c4:	c8 2f       	mov	r28, r24
	if(a_Data & 1)
     6c6:	80 ff       	sbrs	r24, 0
     6c8:	06 c0       	rjmp	.+12     	; 0x6d6 <LCD_DATA+0x14>
		DIO_Write(LCD_GPIO, D4, HIGH);
     6ca:	4f ef       	ldi	r20, 0xFF	; 255
     6cc:	60 e1       	ldi	r22, 0x10	; 16
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
     6d4:	05 c0       	rjmp	.+10     	; 0x6e0 <LCD_DATA+0x1e>
	else
		DIO_Write(LCD_GPIO, D4, LOW);
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	60 e1       	ldi	r22, 0x10	; 16
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
	if(a_Data & 2)
     6e0:	c1 ff       	sbrs	r28, 1
     6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <LCD_DATA+0x2e>
		DIO_Write(LCD_GPIO, D5, HIGH);
     6e4:	4f ef       	ldi	r20, 0xFF	; 255
     6e6:	60 e2       	ldi	r22, 0x20	; 32
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
     6ee:	05 c0       	rjmp	.+10     	; 0x6fa <LCD_DATA+0x38>
	else
		DIO_Write(LCD_GPIO, D5, LOW);
     6f0:	40 e0       	ldi	r20, 0x00	; 0
     6f2:	60 e2       	ldi	r22, 0x20	; 32
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
	if(a_Data & 4)
     6fa:	c2 ff       	sbrs	r28, 2
     6fc:	06 c0       	rjmp	.+12     	; 0x70a <LCD_DATA+0x48>
		DIO_Write(LCD_GPIO, D6, HIGH);
     6fe:	4f ef       	ldi	r20, 0xFF	; 255
     700:	60 e4       	ldi	r22, 0x40	; 64
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
     708:	05 c0       	rjmp	.+10     	; 0x714 <LCD_DATA+0x52>
	else
		DIO_Write(LCD_GPIO, D6, LOW);
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	60 e4       	ldi	r22, 0x40	; 64
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
	if(a_Data & 8)
     714:	c3 ff       	sbrs	r28, 3
     716:	06 c0       	rjmp	.+12     	; 0x724 <LCD_DATA+0x62>
		DIO_Write(LCD_GPIO, D7, HIGH);
     718:	4f ef       	ldi	r20, 0xFF	; 255
     71a:	60 e8       	ldi	r22, 0x80	; 128
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
     722:	05 c0       	rjmp	.+10     	; 0x72e <LCD_DATA+0x6c>
	else
		DIO_Write(LCD_GPIO, D7, LOW);
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	60 e8       	ldi	r22, 0x80	; 128
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
		
	return 0;
}
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <LCD_sendCommand>:

ERROR_STATUS LCD_sendCommand(uint8_t a_CMD)
{
     736:	cf 93       	push	r28
     738:	c8 2f       	mov	r28, r24
	// Select Command Register
	DIO_Write(LCD_GPIO, RS, LOW);
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	62 e0       	ldi	r22, 0x02	; 2
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
	// Move The Command Data To LCD
	LCD_DATA(a_CMD);
     744:	8c 2f       	mov	r24, r28
     746:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_DATA>
	// Send The EN Clock Signal
	DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, HIGH);
     74a:	4f ef       	ldi	r20, 0xFF	; 255
     74c:	68 e0       	ldi	r22, 0x08	; 8
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     754:	80 e5       	ldi	r24, 0x50	; 80
     756:	8a 95       	dec	r24
     758:	f1 f7       	brne	.-4      	; 0x756 <LCD_sendCommand+0x20>
	_delay_us(15);
	DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, LOW);
     75a:	40 e0       	ldi	r20, 0x00	; 0
     75c:	68 e0       	ldi	r22, 0x08	; 8
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
     764:	80 e5       	ldi	r24, 0x50	; 80
     766:	8a 95       	dec	r24
     768:	f1 f7       	brne	.-4      	; 0x766 <LCD_sendCommand+0x30>
	_delay_us(15);
	
	return 0;
}
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <LCD_init>:

# define F_CPU 16000000UL
#include <util/delay.h> // for development only

ERROR_STATUS LCD_init (void)
{
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	00 d0       	rcall	.+0      	; 0x778 <LCD_init+0x6>
     778:	00 d0       	rcall	.+0      	; 0x77a <LCD_init+0x8>
     77a:	00 d0       	rcall	.+0      	; 0x77c <LCD_init+0xa>
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
	/* DIO Pins Initialization */
	DIO_Cfg_s LCD_Pins, LCD_EN;
	LCD_EN.GPIO   = LCD_EN_GPIO;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	8c 83       	std	Y+4, r24	; 0x04
	LCD_EN.pins   = LCD_EN_BIT;
     784:	88 e0       	ldi	r24, 0x08	; 8
     786:	8d 83       	std	Y+5, r24	; 0x05
	LCD_EN.dir    = OUTPUT;
     788:	8f ef       	ldi	r24, 0xFF	; 255
     78a:	8e 83       	std	Y+6, r24	; 0x06
	LCD_Pins.GPIO = LCD_GPIO;
     78c:	19 82       	std	Y+1, r1	; 0x01
	LCD_Pins.dir  = OUTPUT;
     78e:	8b 83       	std	Y+3, r24	; 0x03
	LCD_Pins.pins = (RS | RW | D4 | D5 | D6 | D7);
     790:	86 ef       	ldi	r24, 0xF6	; 246
     792:	8a 83       	std	Y+2, r24	; 0x02
	DIO_init(&LCD_EN);
     794:	ce 01       	movw	r24, r28
     796:	04 96       	adiw	r24, 0x04	; 4
     798:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_init>
	DIO_init(&LCD_Pins);
     79c:	ce 01       	movw	r24, r28
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_init>
	
	/* LCD Initialization Procedure (As Stated In Datasheet) */
	DIO_Write(LCD_GPIO, RS, LOW);
     7a4:	40 e0       	ldi	r20, 0x00	; 0
     7a6:	62 e0       	ldi	r22, 0x02	; 2
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
	DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, LOW);
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	68 e0       	ldi	r22, 0x08	; 8
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
	LCD_DATA(0x00);
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_DATA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7be:	2f ef       	ldi	r18, 0xFF	; 255
     7c0:	88 e5       	ldi	r24, 0x58	; 88
     7c2:	96 e0       	ldi	r25, 0x06	; 6
     7c4:	21 50       	subi	r18, 0x01	; 1
     7c6:	80 40       	sbci	r24, 0x00	; 0
     7c8:	90 40       	sbci	r25, 0x00	; 0
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <LCD_init+0x52>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <LCD_init+0x5c>
     7ce:	00 00       	nop
	_delay_ms(130);
	LCD_sendCommand(0x03);
     7d0:	83 e0       	ldi	r24, 0x03	; 3
     7d2:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
     7d6:	8f e1       	ldi	r24, 0x1F	; 31
     7d8:	9e e4       	ldi	r25, 0x4E	; 78
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	f1 f7       	brne	.-4      	; 0x7da <LCD_init+0x68>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <LCD_init+0x6e>
     7e0:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0x03);
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e8:	87 e5       	ldi	r24, 0x57	; 87
     7ea:	92 e0       	ldi	r25, 0x02	; 2
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <LCD_init+0x7a>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <LCD_init+0x80>
     7f2:	00 00       	nop
	_delay_us(150);
	LCD_sendCommand(0x03);
     7f4:	83 e0       	ldi	r24, 0x03	; 3
     7f6:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
	LCD_sendCommand(0x02);
     7fa:	82 e0       	ldi	r24, 0x02	; 2
     7fc:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
	LCD_sendCommand(0x02);
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
	LCD_sendCommand(0x08);
     806:	88 e0       	ldi	r24, 0x08	; 8
     808:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
	LCD_sendCommand(0x00);
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
	LCD_sendCommand(0x0C);
     812:	8c e0       	ldi	r24, 0x0C	; 12
     814:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
	LCD_sendCommand(0x00);
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
	LCD_sendCommand(0x06);
     81e:	86 e0       	ldi	r24, 0x06	; 6
     820:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
	
	return 0;
}
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	26 96       	adiw	r28, 0x06	; 6
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	08 95       	ret

0000083a <LCD_displayChar>:
	
	return 0;
}

ERROR_STATUS LCD_displayChar(uint8_t a_CH)
{
     83a:	cf 93       	push	r28
     83c:	c8 2f       	mov	r28, r24
	  uint8_t Low4,High4;
	  
	  Low4 = a_CH & 0x0F;
	  High4 = a_CH & 0xF0;
	  
	  DIO_Write(LCD_GPIO, RS, HIGH);
     83e:	4f ef       	ldi	r20, 0xFF	; 255
     840:	62 e0       	ldi	r22, 0x02	; 2
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
	  
	  LCD_DATA(High4>>4);
     848:	8c 2f       	mov	r24, r28
     84a:	82 95       	swap	r24
     84c:	8f 70       	andi	r24, 0x0F	; 15
     84e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_DATA>
	  DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, HIGH);
     852:	4f ef       	ldi	r20, 0xFF	; 255
     854:	68 e0       	ldi	r22, 0x08	; 8
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
     85c:	80 e5       	ldi	r24, 0x50	; 80
     85e:	8a 95       	dec	r24
     860:	f1 f7       	brne	.-4      	; 0x85e <LCD_displayChar+0x24>
	  _delay_us(15);
	  DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, LOW);
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	68 e0       	ldi	r22, 0x08	; 8
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
     86c:	80 e5       	ldi	r24, 0x50	; 80
     86e:	8a 95       	dec	r24
     870:	f1 f7       	brne	.-4      	; 0x86e <__stack+0xf>
	  _delay_us(15);
	  
	  LCD_DATA(Low4);
     872:	8c 2f       	mov	r24, r28
     874:	8f 70       	andi	r24, 0x0F	; 15
     876:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_DATA>
	  DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, HIGH);
     87a:	4f ef       	ldi	r20, 0xFF	; 255
     87c:	68 e0       	ldi	r22, 0x08	; 8
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
     884:	80 e5       	ldi	r24, 0x50	; 80
     886:	8a 95       	dec	r24
     888:	f1 f7       	brne	.-4      	; 0x886 <__stack+0x27>
	  _delay_us(15);
	  DIO_Write(LCD_EN_GPIO, LCD_EN_BIT, LOW);
     88a:	40 e0       	ldi	r20, 0x00	; 0
     88c:	68 e0       	ldi	r22, 0x08	; 8
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
     894:	80 e5       	ldi	r24, 0x50	; 80
     896:	8a 95       	dec	r24
     898:	f1 f7       	brne	.-4      	; 0x896 <__stack+0x37>
	  _delay_us(15);
	  
	  return 0;
}
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <LCD_gotoRowColumn>:

ERROR_STATUS LCD_gotoRowColumn(uint8_t a_ROW, uint8_t a_COL)
{
     8a2:	cf 93       	push	r28
	uint8_t Temp,Low4,High4;
	if(a_ROW == 1)
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	61 f4       	brne	.+24     	; 0x8c0 <LCD_gotoRowColumn+0x1e>
	{
		Temp = 0x80 + a_COL - 1;
     8a8:	cf e7       	ldi	r28, 0x7F	; 127
     8aa:	c6 0f       	add	r28, r22
		High4 = Temp >> 4;
		Low4 = Temp & 0x0F;
		LCD_sendCommand(High4);
     8ac:	8c 2f       	mov	r24, r28
     8ae:	82 95       	swap	r24
     8b0:	8f 70       	andi	r24, 0x0F	; 15
     8b2:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
		LCD_sendCommand(Low4);
     8b6:	8c 2f       	mov	r24, r28
     8b8:	8f 70       	andi	r24, 0x0F	; 15
     8ba:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
     8be:	0d c0       	rjmp	.+26     	; 0x8da <LCD_gotoRowColumn+0x38>
	}
	if(a_ROW == 2)
     8c0:	82 30       	cpi	r24, 0x02	; 2
     8c2:	59 f4       	brne	.+22     	; 0x8da <LCD_gotoRowColumn+0x38>
	{
		Temp = 0xC0 + a_COL - 1;
     8c4:	cf eb       	ldi	r28, 0xBF	; 191
     8c6:	c6 0f       	add	r28, r22
		High4 = Temp >> 4;
		Low4 = Temp & 0x0F;
		LCD_sendCommand(High4);
     8c8:	8c 2f       	mov	r24, r28
     8ca:	82 95       	swap	r24
     8cc:	8f 70       	andi	r24, 0x0F	; 15
     8ce:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
		LCD_sendCommand(Low4);
     8d2:	8c 2f       	mov	r24, r28
     8d4:	8f 70       	andi	r24, 0x0F	; 15
     8d6:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
	}
	
	return 0;
}
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <LCD_displayString>:

ERROR_STATUS LCD_displayString(uint8_t* a_STR)
{
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0; a_STR[i] != '\0'; i++)
     8ea:	80 81       	ld	r24, Z
     8ec:	88 23       	and	r24, r24
     8ee:	59 f0       	breq	.+22     	; 0x906 <LCD_displayString+0x24>
     8f0:	8f 01       	movw	r16, r30
     8f2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_displayChar(a_STR[i]);
     8f4:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_displayChar>
}

ERROR_STATUS LCD_displayString(uint8_t* a_STR)
{
	uint8_t i;
	for(i=0; a_STR[i] != '\0'; i++)
     8f8:	cf 5f       	subi	r28, 0xFF	; 255
     8fa:	f8 01       	movw	r30, r16
     8fc:	ec 0f       	add	r30, r28
     8fe:	f1 1d       	adc	r31, r1
     900:	80 81       	ld	r24, Z
     902:	81 11       	cpse	r24, r1
     904:	f7 cf       	rjmp	.-18     	; 0x8f4 <LCD_displayString+0x12>
	{
		LCD_displayChar(a_STR[i]);
	}
	return 0;
}
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	08 95       	ret

00000912 <LCD_displayStringRowColumn>:

ERROR_STATUS LCD_displayStringRowColumn(uint8_t a_ROW, uint8_t a_COL, uint8_t* a_STR)
{
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	ea 01       	movw	r28, r20
	LCD_gotoRowColumn(a_ROW, a_COL);
     918:	0e 94 51 04 	call	0x8a2	; 0x8a2 <LCD_gotoRowColumn>
	LCD_displayString(a_STR);
     91c:	ce 01       	movw	r24, r28
     91e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LCD_displayString>
	
	return 0;
}
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <LCD_clear>:

ERROR_STATUS LCD_clear(void)
{
	LCD_sendCommand(0x00);
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
	LCD_sendCommand(0x01);
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	0e 94 9b 03 	call	0x736	; 0x736 <LCD_sendCommand>
	
	return 0;
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	08 95       	ret

0000093e <Dummy>:

/*==========================================================================*/
void Game_App(void);
void Dummy(void)
{
	DIO_Toggle(Test_Pin.GPIO, Test_Pin.pins);
     93e:	e7 e5       	ldi	r30, 0x57	; 87
     940:	f3 e0       	ldi	r31, 0x03	; 3
     942:	61 81       	ldd	r22, Z+1	; 0x01
     944:	80 81       	ld	r24, Z
     946:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <DIO_Toggle>
     94a:	08 95       	ret

0000094c <Scan_Keypad>:
{
	DIO_Toggle(g_LED3.GPIO, g_LED3.pins);
}
void Scan_Keypad()
{
	Keypad_Scan(key_states);
     94c:	81 ee       	ldi	r24, 0xE1	; 225
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Keypad_Scan>
     954:	08 95       	ret

00000956 <Update_LEDs>:
}
void Update_LEDs()
{
	if((key_states[0] == KEY_PRESSED) | (key_states[1] == KEY_PRESSED) | (key_states[2] == KEY_PRESSED))
     956:	e1 ee       	ldi	r30, 0xE1	; 225
     958:	f1 e0       	ldi	r31, 0x01	; 1
     95a:	90 81       	ld	r25, Z
     95c:	21 81       	ldd	r18, Z+1	; 0x01
     95e:	42 81       	ldd	r20, Z+2	; 0x02
     960:	31 e0       	ldi	r19, 0x01	; 1
     962:	21 30       	cpi	r18, 0x01	; 1
     964:	09 f0       	breq	.+2      	; 0x968 <Update_LEDs+0x12>
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	91 30       	cpi	r25, 0x01	; 1
     96c:	09 f0       	breq	.+2      	; 0x970 <Update_LEDs+0x1a>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	83 2b       	or	r24, r19
     972:	31 f4       	brne	.+12     	; 0x980 <Update_LEDs+0x2a>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	41 30       	cpi	r20, 0x01	; 1
     978:	09 f0       	breq	.+2      	; 0x97c <Update_LEDs+0x26>
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	88 23       	and	r24, r24
     97e:	e9 f0       	breq	.+58     	; 0x9ba <Update_LEDs+0x64>
	{
		DIO_Write(g_LED0.GPIO, g_LED0.pins, HIGH);
     980:	e6 e4       	ldi	r30, 0x46	; 70
     982:	f3 e0       	ldi	r31, 0x03	; 3
     984:	4f ef       	ldi	r20, 0xFF	; 255
     986:	61 81       	ldd	r22, Z+1	; 0x01
     988:	80 81       	ld	r24, Z
     98a:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
		DIO_Write(g_LED1.GPIO, g_LED1.pins, HIGH);
     98e:	ec e4       	ldi	r30, 0x4C	; 76
     990:	f3 e0       	ldi	r31, 0x03	; 3
     992:	4f ef       	ldi	r20, 0xFF	; 255
     994:	61 81       	ldd	r22, Z+1	; 0x01
     996:	80 81       	ld	r24, Z
     998:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
		DIO_Write(g_LED2.GPIO, g_LED2.pins, HIGH);
     99c:	e9 e4       	ldi	r30, 0x49	; 73
     99e:	f3 e0       	ldi	r31, 0x03	; 3
     9a0:	4f ef       	ldi	r20, 0xFF	; 255
     9a2:	61 81       	ldd	r22, Z+1	; 0x01
     9a4:	80 81       	ld	r24, Z
     9a6:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
		DIO_Write(g_LED3.GPIO, g_LED3.pins, HIGH);
     9aa:	ef e4       	ldi	r30, 0x4F	; 79
     9ac:	f3 e0       	ldi	r31, 0x03	; 3
     9ae:	4f ef       	ldi	r20, 0xFF	; 255
     9b0:	61 81       	ldd	r22, Z+1	; 0x01
     9b2:	80 81       	ld	r24, Z
     9b4:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
     9b8:	08 95       	ret
	}	
	else if((key_states[0] == KEY_RELEASED) | (key_states[1] == KEY_RELEASED) | (key_states[2] == KEY_RELEASED))
     9ba:	31 e0       	ldi	r19, 0x01	; 1
     9bc:	21 11       	cpse	r18, r1
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	91 11       	cpse	r25, r1
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	83 2b       	or	r24, r19
     9c8:	29 f4       	brne	.+10     	; 0x9d4 <Update_LEDs+0x7e>
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	41 11       	cpse	r20, r1
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	88 23       	and	r24, r24
     9d2:	e1 f0       	breq	.+56     	; 0xa0c <Update_LEDs+0xb6>
	{
		DIO_Write(g_LED0.GPIO, g_LED0.pins, LOW);
     9d4:	e6 e4       	ldi	r30, 0x46	; 70
     9d6:	f3 e0       	ldi	r31, 0x03	; 3
     9d8:	40 e0       	ldi	r20, 0x00	; 0
     9da:	61 81       	ldd	r22, Z+1	; 0x01
     9dc:	80 81       	ld	r24, Z
     9de:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
		DIO_Write(g_LED1.GPIO, g_LED1.pins, LOW);
     9e2:	ec e4       	ldi	r30, 0x4C	; 76
     9e4:	f3 e0       	ldi	r31, 0x03	; 3
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	61 81       	ldd	r22, Z+1	; 0x01
     9ea:	80 81       	ld	r24, Z
     9ec:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
		DIO_Write(g_LED2.GPIO, g_LED2.pins, LOW);
     9f0:	e9 e4       	ldi	r30, 0x49	; 73
     9f2:	f3 e0       	ldi	r31, 0x03	; 3
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	61 81       	ldd	r22, Z+1	; 0x01
     9f8:	80 81       	ld	r24, Z
     9fa:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
		DIO_Write(g_LED3.GPIO, g_LED3.pins, LOW);
     9fe:	ef e4       	ldi	r30, 0x4F	; 79
     a00:	f3 e0       	ldi	r31, 0x03	; 3
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	61 81       	ldd	r22, Z+1	; 0x01
     a06:	80 81       	ld	r24, Z
     a08:	0e 94 92 08 	call	0x1124	; 0x1124 <DIO_Write>
     a0c:	08 95       	ret

00000a0e <Game_App>:
}

/*==========================================================================*/

void Game_App(void)
{
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	00 d0       	rcall	.+0      	; 0xa14 <Game_App+0x6>
     a14:	cd b7       	in	r28, 0x3d	; 61
     a16:	de b7       	in	r29, 0x3e	; 62
	static uint8_t Game_FSM = ZERO, Ticks = ZERO, Score = ZERO, Key_Hold = ZERO;
	uint8_t score_ch[2] = {'\0'};
     a18:	1a 82       	std	Y+2, r1	; 0x02
     a1a:	19 82       	std	Y+1, r1	; 0x01
	
	switch(Game_FSM)
     a1c:	e0 91 e0 01 	lds	r30, 0x01E0
     a20:	8e 2f       	mov	r24, r30
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	87 30       	cpi	r24, 0x07	; 7
     a26:	91 05       	cpc	r25, r1
     a28:	08 f0       	brcs	.+2      	; 0xa2c <Game_App+0x1e>
     a2a:	b9 c2       	rjmp	.+1394   	; 0xf9e <Game_App+0x590>
     a2c:	fc 01       	movw	r30, r24
     a2e:	e6 5d       	subi	r30, 0xD6	; 214
     a30:	ff 4f       	sbci	r31, 0xFF	; 255
     a32:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__tablejump2__>
	{
		case GAME_INTRO_STATE:
		{
			if(Ticks == ZERO)
     a36:	80 91 df 01 	lds	r24, 0x01DF
     a3a:	81 11       	cpse	r24, r1
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <Game_App+0x54>
			{
				LCD_displayStringRowColumn(1, 4, (uint8_t*)"Welcome To");
     a3e:	4e ea       	ldi	r20, 0xAE	; 174
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	64 e0       	ldi	r22, 0x04	; 4
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 5, (uint8_t*)"The Game");
     a4a:	49 eb       	ldi	r20, 0xB9	; 185
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	65 e0       	ldi	r22, 0x05	; 5
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				Ticks++;
     a56:	80 91 df 01 	lds	r24, 0x01DF
     a5a:	8f 5f       	subi	r24, 0xFF	; 255
     a5c:	80 93 df 01 	sts	0x01DF, r24
     a60:	9e c2       	rjmp	.+1340   	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks < 50)
     a62:	82 33       	cpi	r24, 0x32	; 50
     a64:	20 f4       	brcc	.+8      	; 0xa6e <Game_App+0x60>
			{
				Ticks++;
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	80 93 df 01 	sts	0x01DF, r24
     a6c:	98 c2       	rjmp	.+1328   	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks == 50)
     a6e:	82 33       	cpi	r24, 0x32	; 50
     a70:	91 f4       	brne	.+36     	; 0xa96 <Game_App+0x88>
			{
				LCD_displayStringRowColumn(1, 3, (uint8_t*)"Press Any Key");
     a72:	42 ec       	ldi	r20, 0xC2	; 194
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	63 e0       	ldi	r22, 0x03	; 3
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 5, (uint8_t*)"To Start");
     a7e:	40 ed       	ldi	r20, 0xD0	; 208
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	65 e0       	ldi	r22, 0x05	; 5
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				Ticks++;
     a8a:	80 91 df 01 	lds	r24, 0x01DF
     a8e:	8f 5f       	subi	r24, 0xFF	; 255
     a90:	80 93 df 01 	sts	0x01DF, r24
     a94:	84 c2       	rjmp	.+1288   	; 0xf9e <Game_App+0x590>
			}
			else
			{
				if(((key_states[0] == KEY_PRESSED) | (key_states[1] == KEY_PRESSED) | (key_states[2] == KEY_PRESSED)) && !Key_Hold)
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	80 91 e2 01 	lds	r24, 0x01E2
     a9c:	81 30       	cpi	r24, 0x01	; 1
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <Game_App+0x94>
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	20 91 e1 01 	lds	r18, 0x01E1
     aa8:	21 30       	cpi	r18, 0x01	; 1
     aaa:	09 f0       	breq	.+2      	; 0xaae <Game_App+0xa0>
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	89 2b       	or	r24, r25
     ab0:	41 f4       	brne	.+16     	; 0xac2 <Game_App+0xb4>
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	90 91 e3 01 	lds	r25, 0x01E3
     ab8:	91 30       	cpi	r25, 0x01	; 1
     aba:	09 f0       	breq	.+2      	; 0xabe <Game_App+0xb0>
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	88 23       	and	r24, r24
     ac0:	a1 f0       	breq	.+40     	; 0xaea <Game_App+0xdc>
     ac2:	80 91 de 01 	lds	r24, 0x01DE
     ac6:	81 11       	cpse	r24, r1
     ac8:	10 c0       	rjmp	.+32     	; 0xaea <Game_App+0xdc>
				{
					LCD_displayStringRowColumn(1, 1, (uint8_t*)"Answer By Hiting");
     aca:	49 ed       	ldi	r20, 0xD9	; 217
     acc:	50 e0       	ldi	r21, 0x00	; 0
     ace:	61 e0       	ldi	r22, 0x01	; 1
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(2, 1, (uint8_t*)"YES / NO / SKIP");
     ad6:	4a ee       	ldi	r20, 0xEA	; 234
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	61 e0       	ldi	r22, 0x01	; 1
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
					Key_Hold = 1;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	80 93 de 01 	sts	0x01DE, r24
     ae8:	05 c0       	rjmp	.+10     	; 0xaf4 <Game_App+0xe6>
				}
				if((Key_Hold == 1) && ((key_states[0] == KEY_RELEASED)&&(key_states[1] == KEY_RELEASED)&&(key_states[2] == KEY_RELEASED)))
     aea:	80 91 de 01 	lds	r24, 0x01DE
     aee:	81 30       	cpi	r24, 0x01	; 1
     af0:	09 f0       	breq	.+2      	; 0xaf4 <Game_App+0xe6>
     af2:	55 c2       	rjmp	.+1194   	; 0xf9e <Game_App+0x590>
     af4:	80 91 e1 01 	lds	r24, 0x01E1
     af8:	81 11       	cpse	r24, r1
     afa:	51 c2       	rjmp	.+1186   	; 0xf9e <Game_App+0x590>
     afc:	80 91 e2 01 	lds	r24, 0x01E2
     b00:	81 11       	cpse	r24, r1
     b02:	4d c2       	rjmp	.+1178   	; 0xf9e <Game_App+0x590>
     b04:	80 91 e3 01 	lds	r24, 0x01E3
     b08:	81 11       	cpse	r24, r1
     b0a:	49 c2       	rjmp	.+1170   	; 0xf9e <Game_App+0x590>
				{
					Key_Hold = ZERO;
     b0c:	10 92 de 01 	sts	0x01DE, r1
					Ticks = ZERO;
     b10:	10 92 df 01 	sts	0x01DF, r1
					Game_FSM = GAME_Q1_STATE;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 93 e0 01 	sts	0x01E0, r24
     b1a:	41 c2       	rjmp	.+1154   	; 0xf9e <Game_App+0x590>
			}
			break;
		}
		case GAME_Q1_STATE:
		{
			if(Ticks == 50)
     b1c:	80 91 df 01 	lds	r24, 0x01DF
     b20:	82 33       	cpi	r24, 0x32	; 50
     b22:	41 f4       	brne	.+16     	; 0xb34 <Game_App+0x126>
			{
				LCD_clear();
     b24:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_clear>
				Ticks++;
     b28:	80 91 df 01 	lds	r24, 0x01DF
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
     b2e:	80 93 df 01 	sts	0x01DF, r24
     b32:	35 c2       	rjmp	.+1130   	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks < 55)
     b34:	87 33       	cpi	r24, 0x37	; 55
     b36:	20 f4       	brcc	.+8      	; 0xb40 <Game_App+0x132>
			{
				Ticks++;
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	80 93 df 01 	sts	0x01DF, r24
     b3e:	2f c2       	rjmp	.+1118   	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks == 55)
     b40:	87 33       	cpi	r24, 0x37	; 55
     b42:	91 f4       	brne	.+36     	; 0xb68 <Game_App+0x15a>
			{
				LCD_displayStringRowColumn(1, 1, (uint8_t*)"Mars Planet Has");
     b44:	4a ef       	ldi	r20, 0xFA	; 250
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 1, (uint8_t*)"3 Moons");
     b50:	4a e0       	ldi	r20, 0x0A	; 10
     b52:	51 e0       	ldi	r21, 0x01	; 1
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				Ticks++;
     b5c:	80 91 df 01 	lds	r24, 0x01DF
     b60:	8f 5f       	subi	r24, 0xFF	; 255
     b62:	80 93 df 01 	sts	0x01DF, r24
     b66:	1b c2       	rjmp	.+1078   	; 0xf9e <Game_App+0x590>
			}
			else
			{
				if(((key_states[0] == KEY_PRESSED) | (key_states[1] == KEY_PRESSED) | (key_states[2] == KEY_PRESSED)) && !Key_Hold)
     b68:	e1 ee       	ldi	r30, 0xE1	; 225
     b6a:	f1 e0       	ldi	r31, 0x01	; 1
     b6c:	20 81       	ld	r18, Z
     b6e:	31 81       	ldd	r19, Z+1	; 0x01
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	31 30       	cpi	r19, 0x01	; 1
     b74:	09 f0       	breq	.+2      	; 0xb78 <Game_App+0x16a>
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	40 91 e3 01 	lds	r20, 0x01E3
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	21 30       	cpi	r18, 0x01	; 1
     b80:	09 f0       	breq	.+2      	; 0xb84 <Game_App+0x176>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	89 2b       	or	r24, r25
     b86:	31 f4       	brne	.+12     	; 0xb94 <Game_App+0x186>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	41 30       	cpi	r20, 0x01	; 1
     b8c:	09 f0       	breq	.+2      	; 0xb90 <Game_App+0x182>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	88 23       	and	r24, r24
     b92:	79 f0       	breq	.+30     	; 0xbb2 <Game_App+0x1a4>
     b94:	80 91 de 01 	lds	r24, 0x01DE
     b98:	81 11       	cpse	r24, r1
     b9a:	0b c0       	rjmp	.+22     	; 0xbb2 <Game_App+0x1a4>
				{
					if(key_states[1] == KEY_PRESSED)
     b9c:	99 23       	and	r25, r25
     b9e:	29 f0       	breq	.+10     	; 0xbaa <Game_App+0x19c>
					{ Score++; }
     ba0:	80 91 dd 01 	lds	r24, 0x01DD
     ba4:	8f 5f       	subi	r24, 0xFF	; 255
     ba6:	80 93 dd 01 	sts	0x01DD, r24
					Key_Hold = 1;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	80 93 de 01 	sts	0x01DE, r24
     bb0:	05 c0       	rjmp	.+10     	; 0xbbc <Game_App+0x1ae>
				}
				if((Key_Hold == 1) && ((key_states[0] == KEY_RELEASED)&&(key_states[1] == KEY_RELEASED)&&(key_states[2] == KEY_RELEASED)))
     bb2:	80 91 de 01 	lds	r24, 0x01DE
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	09 f0       	breq	.+2      	; 0xbbc <Game_App+0x1ae>
     bba:	f1 c1       	rjmp	.+994    	; 0xf9e <Game_App+0x590>
     bbc:	21 11       	cpse	r18, r1
     bbe:	ef c1       	rjmp	.+990    	; 0xf9e <Game_App+0x590>
     bc0:	31 11       	cpse	r19, r1
     bc2:	ed c1       	rjmp	.+986    	; 0xf9e <Game_App+0x590>
     bc4:	41 11       	cpse	r20, r1
     bc6:	eb c1       	rjmp	.+982    	; 0xf9e <Game_App+0x590>
				{
					Key_Hold = ZERO;
     bc8:	10 92 de 01 	sts	0x01DE, r1
					Ticks = ZERO;
     bcc:	10 92 df 01 	sts	0x01DF, r1
					Game_FSM = GAME_Q2_STATE;
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	80 93 e0 01 	sts	0x01E0, r24
     bd6:	e3 c1       	rjmp	.+966    	; 0xf9e <Game_App+0x590>
			}
			break;
		}
		case GAME_Q2_STATE:
		{
			if(Ticks == ZERO)
     bd8:	80 91 df 01 	lds	r24, 0x01DF
     bdc:	81 11       	cpse	r24, r1
     bde:	08 c0       	rjmp	.+16     	; 0xbf0 <Game_App+0x1e2>
			{
				LCD_clear();
     be0:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_clear>
				Ticks++;
     be4:	80 91 df 01 	lds	r24, 0x01DF
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	80 93 df 01 	sts	0x01DF, r24
     bee:	d7 c1       	rjmp	.+942    	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks < 5)
     bf0:	85 30       	cpi	r24, 0x05	; 5
     bf2:	20 f4       	brcc	.+8      	; 0xbfc <Game_App+0x1ee>
			{
				Ticks++;
     bf4:	8f 5f       	subi	r24, 0xFF	; 255
     bf6:	80 93 df 01 	sts	0x01DF, r24
     bfa:	d1 c1       	rjmp	.+930    	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks == 5)
     bfc:	85 30       	cpi	r24, 0x05	; 5
     bfe:	91 f4       	brne	.+36     	; 0xc24 <Game_App+0x216>
			{
				LCD_displayStringRowColumn(1, 1, (uint8_t*)"A Year On Mars");
     c00:	42 e1       	ldi	r20, 0x12	; 18
     c02:	51 e0       	ldi	r21, 0x01	; 1
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 1, (uint8_t*)"Is 687 Days");
     c0c:	41 e2       	ldi	r20, 0x21	; 33
     c0e:	51 e0       	ldi	r21, 0x01	; 1
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				Ticks++;
     c18:	80 91 df 01 	lds	r24, 0x01DF
     c1c:	8f 5f       	subi	r24, 0xFF	; 255
     c1e:	80 93 df 01 	sts	0x01DF, r24
     c22:	bd c1       	rjmp	.+890    	; 0xf9e <Game_App+0x590>
			}
			else
			{
				if(((key_states[0] == KEY_PRESSED) | (key_states[1] == KEY_PRESSED) | (key_states[2] == KEY_PRESSED)) && !Key_Hold)
     c24:	20 91 e1 01 	lds	r18, 0x01E1
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	21 30       	cpi	r18, 0x01	; 1
     c2c:	09 f0       	breq	.+2      	; 0xc30 <Game_App+0x222>
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	e1 ee       	ldi	r30, 0xE1	; 225
     c32:	f1 e0       	ldi	r31, 0x01	; 1
     c34:	31 81       	ldd	r19, Z+1	; 0x01
     c36:	42 81       	ldd	r20, Z+2	; 0x02
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	31 30       	cpi	r19, 0x01	; 1
     c3c:	09 f0       	breq	.+2      	; 0xc40 <Game_App+0x232>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	89 2b       	or	r24, r25
     c42:	31 f4       	brne	.+12     	; 0xc50 <Game_App+0x242>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	41 30       	cpi	r20, 0x01	; 1
     c48:	09 f0       	breq	.+2      	; 0xc4c <Game_App+0x23e>
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	88 23       	and	r24, r24
     c4e:	79 f0       	breq	.+30     	; 0xc6e <Game_App+0x260>
     c50:	80 91 de 01 	lds	r24, 0x01DE
     c54:	81 11       	cpse	r24, r1
     c56:	0b c0       	rjmp	.+22     	; 0xc6e <Game_App+0x260>
				{
					if(key_states[0] == KEY_PRESSED)
     c58:	99 23       	and	r25, r25
     c5a:	29 f0       	breq	.+10     	; 0xc66 <Game_App+0x258>
					{ Score++; }
     c5c:	80 91 dd 01 	lds	r24, 0x01DD
     c60:	8f 5f       	subi	r24, 0xFF	; 255
     c62:	80 93 dd 01 	sts	0x01DD, r24
					Key_Hold = 1;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	80 93 de 01 	sts	0x01DE, r24
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <Game_App+0x26a>
				}
				if((Key_Hold == 1) && ((key_states[0] == KEY_RELEASED)&&(key_states[1] == KEY_RELEASED)&&(key_states[2] == KEY_RELEASED)))
     c6e:	80 91 de 01 	lds	r24, 0x01DE
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	09 f0       	breq	.+2      	; 0xc78 <Game_App+0x26a>
     c76:	93 c1       	rjmp	.+806    	; 0xf9e <Game_App+0x590>
     c78:	21 11       	cpse	r18, r1
     c7a:	91 c1       	rjmp	.+802    	; 0xf9e <Game_App+0x590>
     c7c:	31 11       	cpse	r19, r1
     c7e:	8f c1       	rjmp	.+798    	; 0xf9e <Game_App+0x590>
     c80:	41 11       	cpse	r20, r1
     c82:	8d c1       	rjmp	.+794    	; 0xf9e <Game_App+0x590>
				{
					Key_Hold = ZERO;
     c84:	10 92 de 01 	sts	0x01DE, r1
					Ticks = ZERO;
     c88:	10 92 df 01 	sts	0x01DF, r1
					Game_FSM = GAME_Q3_STATE;
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	80 93 e0 01 	sts	0x01E0, r24
     c92:	85 c1       	rjmp	.+778    	; 0xf9e <Game_App+0x590>
			}
			break;
		}
		case GAME_Q3_STATE:
		{
			if(Ticks == ZERO)
     c94:	80 91 df 01 	lds	r24, 0x01DF
     c98:	81 11       	cpse	r24, r1
     c9a:	08 c0       	rjmp	.+16     	; 0xcac <Game_App+0x29e>
			{
				LCD_clear();
     c9c:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_clear>
				Ticks++;
     ca0:	80 91 df 01 	lds	r24, 0x01DF
     ca4:	8f 5f       	subi	r24, 0xFF	; 255
     ca6:	80 93 df 01 	sts	0x01DF, r24
     caa:	79 c1       	rjmp	.+754    	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks < 5)
     cac:	85 30       	cpi	r24, 0x05	; 5
     cae:	20 f4       	brcc	.+8      	; 0xcb8 <Game_App+0x2aa>
			{
				Ticks++;
     cb0:	8f 5f       	subi	r24, 0xFF	; 255
     cb2:	80 93 df 01 	sts	0x01DF, r24
     cb6:	73 c1       	rjmp	.+742    	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks == 5)
     cb8:	85 30       	cpi	r24, 0x05	; 5
     cba:	91 f4       	brne	.+36     	; 0xce0 <Game_App+0x2d2>
			{
				LCD_displayStringRowColumn(1, 1, (uint8_t*)"60kg On Earth");
     cbc:	4d e2       	ldi	r20, 0x2D	; 45
     cbe:	51 e0       	ldi	r21, 0x01	; 1
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 1, (uint8_t*)"Is 20kg on Moon");
     cc8:	4b e3       	ldi	r20, 0x3B	; 59
     cca:	51 e0       	ldi	r21, 0x01	; 1
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				Ticks++;
     cd4:	80 91 df 01 	lds	r24, 0x01DF
     cd8:	8f 5f       	subi	r24, 0xFF	; 255
     cda:	80 93 df 01 	sts	0x01DF, r24
     cde:	5f c1       	rjmp	.+702    	; 0xf9e <Game_App+0x590>
			}
			else
			{
				if(((key_states[0] == KEY_PRESSED) | (key_states[1] == KEY_PRESSED) | (key_states[2] == KEY_PRESSED)) && !Key_Hold)
     ce0:	e1 ee       	ldi	r30, 0xE1	; 225
     ce2:	f1 e0       	ldi	r31, 0x01	; 1
     ce4:	20 81       	ld	r18, Z
     ce6:	31 81       	ldd	r19, Z+1	; 0x01
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	31 30       	cpi	r19, 0x01	; 1
     cec:	09 f0       	breq	.+2      	; 0xcf0 <Game_App+0x2e2>
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	40 91 e3 01 	lds	r20, 0x01E3
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	21 30       	cpi	r18, 0x01	; 1
     cf8:	09 f0       	breq	.+2      	; 0xcfc <Game_App+0x2ee>
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	89 2b       	or	r24, r25
     cfe:	31 f4       	brne	.+12     	; 0xd0c <Game_App+0x2fe>
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	41 30       	cpi	r20, 0x01	; 1
     d04:	09 f0       	breq	.+2      	; 0xd08 <Game_App+0x2fa>
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	88 23       	and	r24, r24
     d0a:	79 f0       	breq	.+30     	; 0xd2a <Game_App+0x31c>
     d0c:	80 91 de 01 	lds	r24, 0x01DE
     d10:	81 11       	cpse	r24, r1
     d12:	0b c0       	rjmp	.+22     	; 0xd2a <Game_App+0x31c>
				{
					if(key_states[1] == KEY_PRESSED)
     d14:	99 23       	and	r25, r25
     d16:	29 f0       	breq	.+10     	; 0xd22 <Game_App+0x314>
					{ Score++; }
     d18:	80 91 dd 01 	lds	r24, 0x01DD
     d1c:	8f 5f       	subi	r24, 0xFF	; 255
     d1e:	80 93 dd 01 	sts	0x01DD, r24
					Key_Hold = 1;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	80 93 de 01 	sts	0x01DE, r24
     d28:	05 c0       	rjmp	.+10     	; 0xd34 <Game_App+0x326>
				}
				if((Key_Hold == 1) && ((key_states[0] == KEY_RELEASED)&&(key_states[1] == KEY_RELEASED)&&(key_states[2] == KEY_RELEASED)))
     d2a:	80 91 de 01 	lds	r24, 0x01DE
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	09 f0       	breq	.+2      	; 0xd34 <Game_App+0x326>
     d32:	35 c1       	rjmp	.+618    	; 0xf9e <Game_App+0x590>
     d34:	21 11       	cpse	r18, r1
     d36:	33 c1       	rjmp	.+614    	; 0xf9e <Game_App+0x590>
     d38:	31 11       	cpse	r19, r1
     d3a:	31 c1       	rjmp	.+610    	; 0xf9e <Game_App+0x590>
     d3c:	41 11       	cpse	r20, r1
     d3e:	2f c1       	rjmp	.+606    	; 0xf9e <Game_App+0x590>
				{
					Key_Hold = ZERO;
     d40:	10 92 de 01 	sts	0x01DE, r1
					Ticks = ZERO;
     d44:	10 92 df 01 	sts	0x01DF, r1
					Game_FSM = GAME_Q4_STATE;
     d48:	84 e0       	ldi	r24, 0x04	; 4
     d4a:	80 93 e0 01 	sts	0x01E0, r24
     d4e:	27 c1       	rjmp	.+590    	; 0xf9e <Game_App+0x590>
			}
			break;
		}
		case GAME_Q4_STATE:
		{
			if(Ticks == ZERO)
     d50:	80 91 df 01 	lds	r24, 0x01DF
     d54:	81 11       	cpse	r24, r1
     d56:	08 c0       	rjmp	.+16     	; 0xd68 <Game_App+0x35a>
			{
				LCD_clear();
     d58:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_clear>
				Ticks++;
     d5c:	80 91 df 01 	lds	r24, 0x01DF
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	80 93 df 01 	sts	0x01DF, r24
     d66:	1b c1       	rjmp	.+566    	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks < 5)
     d68:	85 30       	cpi	r24, 0x05	; 5
     d6a:	20 f4       	brcc	.+8      	; 0xd74 <Game_App+0x366>
			{
				Ticks++;
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	80 93 df 01 	sts	0x01DF, r24
     d72:	15 c1       	rjmp	.+554    	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks == 5)
     d74:	85 30       	cpi	r24, 0x05	; 5
     d76:	91 f4       	brne	.+36     	; 0xd9c <Game_App+0x38e>
			{
				LCD_displayStringRowColumn(1, 2, (uint8_t*)"1, 2, 4, 7, ??");
     d78:	4b e4       	ldi	r20, 0x4B	; 75
     d7a:	51 e0       	ldi	r21, 0x01	; 1
     d7c:	62 e0       	ldi	r22, 0x02	; 2
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 1, (uint8_t*)"Missing Num: 14");
     d84:	4a e5       	ldi	r20, 0x5A	; 90
     d86:	51 e0       	ldi	r21, 0x01	; 1
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				Ticks++;
     d90:	80 91 df 01 	lds	r24, 0x01DF
     d94:	8f 5f       	subi	r24, 0xFF	; 255
     d96:	80 93 df 01 	sts	0x01DF, r24
     d9a:	01 c1       	rjmp	.+514    	; 0xf9e <Game_App+0x590>
			}
			else
			{
				if(((key_states[0] == KEY_PRESSED) | (key_states[1] == KEY_PRESSED) | (key_states[2] == KEY_PRESSED)) && !Key_Hold)
     d9c:	e1 ee       	ldi	r30, 0xE1	; 225
     d9e:	f1 e0       	ldi	r31, 0x01	; 1
     da0:	20 81       	ld	r18, Z
     da2:	31 81       	ldd	r19, Z+1	; 0x01
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	31 30       	cpi	r19, 0x01	; 1
     da8:	09 f0       	breq	.+2      	; 0xdac <Game_App+0x39e>
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	40 91 e3 01 	lds	r20, 0x01E3
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	21 30       	cpi	r18, 0x01	; 1
     db4:	09 f0       	breq	.+2      	; 0xdb8 <Game_App+0x3aa>
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	89 2b       	or	r24, r25
     dba:	31 f4       	brne	.+12     	; 0xdc8 <Game_App+0x3ba>
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	41 30       	cpi	r20, 0x01	; 1
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <Game_App+0x3b6>
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	88 23       	and	r24, r24
     dc6:	79 f0       	breq	.+30     	; 0xde6 <Game_App+0x3d8>
     dc8:	80 91 de 01 	lds	r24, 0x01DE
     dcc:	81 11       	cpse	r24, r1
     dce:	0b c0       	rjmp	.+22     	; 0xde6 <Game_App+0x3d8>
				{
					if(key_states[1] == KEY_PRESSED)
     dd0:	99 23       	and	r25, r25
     dd2:	29 f0       	breq	.+10     	; 0xdde <Game_App+0x3d0>
					{ Score++; }
     dd4:	80 91 dd 01 	lds	r24, 0x01DD
     dd8:	8f 5f       	subi	r24, 0xFF	; 255
     dda:	80 93 dd 01 	sts	0x01DD, r24
					Key_Hold = 1;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	80 93 de 01 	sts	0x01DE, r24
     de4:	05 c0       	rjmp	.+10     	; 0xdf0 <Game_App+0x3e2>
				}
				if((Key_Hold == 1) && ((key_states[0] == KEY_RELEASED)&&(key_states[1] == KEY_RELEASED)&&(key_states[2] == KEY_RELEASED)))
     de6:	80 91 de 01 	lds	r24, 0x01DE
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	09 f0       	breq	.+2      	; 0xdf0 <Game_App+0x3e2>
     dee:	d7 c0       	rjmp	.+430    	; 0xf9e <Game_App+0x590>
     df0:	21 11       	cpse	r18, r1
     df2:	d5 c0       	rjmp	.+426    	; 0xf9e <Game_App+0x590>
     df4:	31 11       	cpse	r19, r1
     df6:	d3 c0       	rjmp	.+422    	; 0xf9e <Game_App+0x590>
     df8:	41 11       	cpse	r20, r1
     dfa:	d1 c0       	rjmp	.+418    	; 0xf9e <Game_App+0x590>
				{
					Key_Hold = ZERO;
     dfc:	10 92 de 01 	sts	0x01DE, r1
					Ticks = ZERO;
     e00:	10 92 df 01 	sts	0x01DF, r1
					Game_FSM = GAME_Q5_STATE;
     e04:	85 e0       	ldi	r24, 0x05	; 5
     e06:	80 93 e0 01 	sts	0x01E0, r24
     e0a:	c9 c0       	rjmp	.+402    	; 0xf9e <Game_App+0x590>
			}
			break;
		}
		case GAME_Q5_STATE:
		{
			if(Ticks == ZERO)
     e0c:	80 91 df 01 	lds	r24, 0x01DF
     e10:	81 11       	cpse	r24, r1
     e12:	08 c0       	rjmp	.+16     	; 0xe24 <Game_App+0x416>
			{
				LCD_clear();
     e14:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_clear>
				Ticks++;
     e18:	80 91 df 01 	lds	r24, 0x01DF
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	80 93 df 01 	sts	0x01DF, r24
     e22:	bd c0       	rjmp	.+378    	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks < 5)
     e24:	85 30       	cpi	r24, 0x05	; 5
     e26:	20 f4       	brcc	.+8      	; 0xe30 <Game_App+0x422>
			{
				Ticks++;
     e28:	8f 5f       	subi	r24, 0xFF	; 255
     e2a:	80 93 df 01 	sts	0x01DF, r24
     e2e:	b7 c0       	rjmp	.+366    	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks == 5)
     e30:	85 30       	cpi	r24, 0x05	; 5
     e32:	91 f4       	brne	.+36     	; 0xe58 <Game_App+0x44a>
			{
				LCD_displayStringRowColumn(1, 1, (uint8_t*)"Sound Travels In");
     e34:	4a e6       	ldi	r20, 0x6A	; 106
     e36:	51 e0       	ldi	r21, 0x01	; 1
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 1, (uint8_t*)"Air Faster < H2O");
     e40:	4b e7       	ldi	r20, 0x7B	; 123
     e42:	51 e0       	ldi	r21, 0x01	; 1
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				Ticks++;
     e4c:	80 91 df 01 	lds	r24, 0x01DF
     e50:	8f 5f       	subi	r24, 0xFF	; 255
     e52:	80 93 df 01 	sts	0x01DF, r24
     e56:	a3 c0       	rjmp	.+326    	; 0xf9e <Game_App+0x590>
			}
			else
			{
				if(((key_states[0] == KEY_PRESSED) | (key_states[1] == KEY_PRESSED) | (key_states[2] == KEY_PRESSED)) && !Key_Hold)
     e58:	e1 ee       	ldi	r30, 0xE1	; 225
     e5a:	f1 e0       	ldi	r31, 0x01	; 1
     e5c:	20 81       	ld	r18, Z
     e5e:	31 81       	ldd	r19, Z+1	; 0x01
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	31 30       	cpi	r19, 0x01	; 1
     e64:	09 f0       	breq	.+2      	; 0xe68 <Game_App+0x45a>
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	40 91 e3 01 	lds	r20, 0x01E3
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	21 30       	cpi	r18, 0x01	; 1
     e70:	09 f0       	breq	.+2      	; 0xe74 <Game_App+0x466>
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	89 2b       	or	r24, r25
     e76:	31 f4       	brne	.+12     	; 0xe84 <Game_App+0x476>
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	41 30       	cpi	r20, 0x01	; 1
     e7c:	09 f0       	breq	.+2      	; 0xe80 <Game_App+0x472>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	88 23       	and	r24, r24
     e82:	79 f0       	breq	.+30     	; 0xea2 <Game_App+0x494>
     e84:	80 91 de 01 	lds	r24, 0x01DE
     e88:	81 11       	cpse	r24, r1
     e8a:	0b c0       	rjmp	.+22     	; 0xea2 <Game_App+0x494>
				{
					if(key_states[1] == KEY_PRESSED)
     e8c:	99 23       	and	r25, r25
     e8e:	29 f0       	breq	.+10     	; 0xe9a <Game_App+0x48c>
					{ Score++; }
     e90:	80 91 dd 01 	lds	r24, 0x01DD
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	80 93 dd 01 	sts	0x01DD, r24
					Key_Hold = 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	80 93 de 01 	sts	0x01DE, r24
     ea0:	05 c0       	rjmp	.+10     	; 0xeac <Game_App+0x49e>
				}
				if((Key_Hold == 1) && ((key_states[0] == KEY_RELEASED)&&(key_states[1] == KEY_RELEASED)&&(key_states[2] == KEY_RELEASED)))
     ea2:	80 91 de 01 	lds	r24, 0x01DE
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	09 f0       	breq	.+2      	; 0xeac <Game_App+0x49e>
     eaa:	79 c0       	rjmp	.+242    	; 0xf9e <Game_App+0x590>
     eac:	21 11       	cpse	r18, r1
     eae:	77 c0       	rjmp	.+238    	; 0xf9e <Game_App+0x590>
     eb0:	31 11       	cpse	r19, r1
     eb2:	75 c0       	rjmp	.+234    	; 0xf9e <Game_App+0x590>
     eb4:	41 11       	cpse	r20, r1
     eb6:	73 c0       	rjmp	.+230    	; 0xf9e <Game_App+0x590>
				{
					Key_Hold = ZERO;
     eb8:	10 92 de 01 	sts	0x01DE, r1
					Ticks = ZERO;
     ebc:	10 92 df 01 	sts	0x01DF, r1
					Game_FSM = GAME_END_STATE;
     ec0:	86 e0       	ldi	r24, 0x06	; 6
     ec2:	80 93 e0 01 	sts	0x01E0, r24
     ec6:	6b c0       	rjmp	.+214    	; 0xf9e <Game_App+0x590>
			}
			break;
		}
		case GAME_END_STATE:
		{
			if(Ticks == ZERO)
     ec8:	80 91 df 01 	lds	r24, 0x01DF
     ecc:	81 11       	cpse	r24, r1
     ece:	08 c0       	rjmp	.+16     	; 0xee0 <Game_App+0x4d2>
			{
				LCD_clear();
     ed0:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_clear>
				Ticks++;
     ed4:	80 91 df 01 	lds	r24, 0x01DF
     ed8:	8f 5f       	subi	r24, 0xFF	; 255
     eda:	80 93 df 01 	sts	0x01DF, r24
     ede:	5f c0       	rjmp	.+190    	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks < 5)
     ee0:	85 30       	cpi	r24, 0x05	; 5
     ee2:	20 f4       	brcc	.+8      	; 0xeec <Game_App+0x4de>
			{
				Ticks++;
     ee4:	8f 5f       	subi	r24, 0xFF	; 255
     ee6:	80 93 df 01 	sts	0x01DF, r24
     eea:	59 c0       	rjmp	.+178    	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks == 5)
     eec:	85 30       	cpi	r24, 0x05	; 5
     eee:	b9 f4       	brne	.+46     	; 0xf1e <Game_App+0x510>
			{
				score_ch[ZERO] = Score+48;
     ef0:	80 91 dd 01 	lds	r24, 0x01DD
     ef4:	80 5d       	subi	r24, 0xD0	; 208
     ef6:	89 83       	std	Y+1, r24	; 0x01
				LCD_displayStringRowColumn(1, 2, (uint8_t*)"Your Score Is:");
     ef8:	4c e8       	ldi	r20, 0x8C	; 140
     efa:	51 e0       	ldi	r21, 0x01	; 1
     efc:	62 e0       	ldi	r22, 0x02	; 2
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2, 9, (uint8_t*)&score_ch);
     f04:	ae 01       	movw	r20, r28
     f06:	4f 5f       	subi	r20, 0xFF	; 255
     f08:	5f 4f       	sbci	r21, 0xFF	; 255
     f0a:	69 e0       	ldi	r22, 0x09	; 9
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				Ticks++;
     f12:	80 91 df 01 	lds	r24, 0x01DF
     f16:	8f 5f       	subi	r24, 0xFF	; 255
     f18:	80 93 df 01 	sts	0x01DF, r24
     f1c:	40 c0       	rjmp	.+128    	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks < 50)
     f1e:	82 33       	cpi	r24, 0x32	; 50
     f20:	20 f4       	brcc	.+8      	; 0xf2a <Game_App+0x51c>
			{
				Ticks++;
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	80 93 df 01 	sts	0x01DF, r24
     f28:	3a c0       	rjmp	.+116    	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks == 50)
     f2a:	82 33       	cpi	r24, 0x32	; 50
     f2c:	41 f4       	brne	.+16     	; 0xf3e <Game_App+0x530>
			{
				LCD_clear();
     f2e:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_clear>
				Ticks++;
     f32:	80 91 df 01 	lds	r24, 0x01DF
     f36:	8f 5f       	subi	r24, 0xFF	; 255
     f38:	80 93 df 01 	sts	0x01DF, r24
     f3c:	30 c0       	rjmp	.+96     	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks < 55)
     f3e:	87 33       	cpi	r24, 0x37	; 55
     f40:	20 f4       	brcc	.+8      	; 0xf4a <Game_App+0x53c>
			{
				Ticks++;
     f42:	8f 5f       	subi	r24, 0xFF	; 255
     f44:	80 93 df 01 	sts	0x01DF, r24
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks == 55)
     f4a:	87 33       	cpi	r24, 0x37	; 55
     f4c:	19 f5       	brne	.+70     	; 0xf94 <Game_App+0x586>
			{
				if(Score == WIN_SCORE)
     f4e:	80 91 dd 01 	lds	r24, 0x01DD
     f52:	85 30       	cpi	r24, 0x05	; 5
     f54:	69 f4       	brne	.+26     	; 0xf70 <Game_App+0x562>
				{
					LCD_displayStringRowColumn(1, 1, (uint8_t*)"Congratulations!");
     f56:	4b e9       	ldi	r20, 0x9B	; 155
     f58:	51 e0       	ldi	r21, 0x01	; 1
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(2, 5, (uint8_t*)"You Won!");	
     f62:	4c ea       	ldi	r20, 0xAC	; 172
     f64:	51 e0       	ldi	r21, 0x01	; 1
     f66:	65 e0       	ldi	r22, 0x05	; 5
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
     f6e:	0c c0       	rjmp	.+24     	; 0xf88 <Game_App+0x57a>
				}
				else
				{
					LCD_displayStringRowColumn(1, 5, (uint8_t*)"Game Over");
     f70:	45 eb       	ldi	r20, 0xB5	; 181
     f72:	51 e0       	ldi	r21, 0x01	; 1
     f74:	65 e0       	ldi	r22, 0x05	; 5
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(2, 5, (uint8_t*)"You Lose!");
     f7c:	4f eb       	ldi	r20, 0xBF	; 191
     f7e:	51 e0       	ldi	r21, 0x01	; 1
     f80:	65 e0       	ldi	r22, 0x05	; 5
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	0e 94 89 04 	call	0x912	; 0x912 <LCD_displayStringRowColumn>
				}
				Ticks++;
     f88:	80 91 df 01 	lds	r24, 0x01DF
     f8c:	8f 5f       	subi	r24, 0xFF	; 255
     f8e:	80 93 df 01 	sts	0x01DF, r24
     f92:	05 c0       	rjmp	.+10     	; 0xf9e <Game_App+0x590>
			}
			else if(Ticks < 60)
     f94:	8c 33       	cpi	r24, 0x3C	; 60
     f96:	18 f4       	brcc	.+6      	; 0xf9e <Game_App+0x590>
			{
				Ticks++;
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	80 93 df 01 	sts	0x01DF, r24
			break;
		}
		default:
			break;
	}
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	08 95       	ret

00000fa8 <Init_LEDs>:
		DIO_Write(g_LED2.GPIO, g_LED2.pins, LOW);
		DIO_Write(g_LED3.GPIO, g_LED3.pins, LOW);
	}
}
void Init_LEDs(void)
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
	g_LED0.GPIO = GPIOB;
     fac:	e6 e4       	ldi	r30, 0x46	; 70
     fae:	f3 e0       	ldi	r31, 0x03	; 3
     fb0:	c1 e0       	ldi	r28, 0x01	; 1
     fb2:	c0 83       	st	Z, r28
	g_LED0.dir  = OUTPUT;
     fb4:	df ef       	ldi	r29, 0xFF	; 255
     fb6:	d2 83       	std	Z+2, r29	; 0x02
	g_LED0.pins = BIT4;
     fb8:	80 e1       	ldi	r24, 0x10	; 16
     fba:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED0);
     fbc:	cf 01       	movw	r24, r30
     fbe:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_init>
	g_LED1.GPIO = GPIOB;
     fc2:	ec e4       	ldi	r30, 0x4C	; 76
     fc4:	f3 e0       	ldi	r31, 0x03	; 3
     fc6:	c0 83       	st	Z, r28
	g_LED1.dir  = OUTPUT;
     fc8:	d2 83       	std	Z+2, r29	; 0x02
	g_LED1.pins = BIT5;
     fca:	80 e2       	ldi	r24, 0x20	; 32
     fcc:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED1);
     fce:	cf 01       	movw	r24, r30
     fd0:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_init>
	g_LED2.GPIO = GPIOB;
     fd4:	e9 e4       	ldi	r30, 0x49	; 73
     fd6:	f3 e0       	ldi	r31, 0x03	; 3
     fd8:	c0 83       	st	Z, r28
	g_LED2.dir  = OUTPUT;
     fda:	d2 83       	std	Z+2, r29	; 0x02
	g_LED2.pins = BIT6;
     fdc:	80 e4       	ldi	r24, 0x40	; 64
     fde:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED2);
     fe0:	cf 01       	movw	r24, r30
     fe2:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_init>
	g_LED3.GPIO = GPIOB;
     fe6:	ef e4       	ldi	r30, 0x4F	; 79
     fe8:	f3 e0       	ldi	r31, 0x03	; 3
     fea:	c0 83       	st	Z, r28
	g_LED3.dir  = OUTPUT;
     fec:	d2 83       	std	Z+2, r29	; 0x02
	g_LED3.pins = BIT7;
     fee:	80 e8       	ldi	r24, 0x80	; 128
     ff0:	81 83       	std	Z+1, r24	; 0x01
	DIO_init(&g_LED3);
     ff2:	cf 01       	movw	r24, r30
     ff4:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_init>
	Test_Pin.dir = OUTPUT;
     ff8:	e7 e5       	ldi	r30, 0x57	; 87
     ffa:	f3 e0       	ldi	r31, 0x03	; 3
     ffc:	d2 83       	std	Z+2, r29	; 0x02
	Test_Pin.GPIO = GPIOD;
     ffe:	83 e0       	ldi	r24, 0x03	; 3
    1000:	80 83       	st	Z, r24
	Test_Pin.pins = BIT0;
    1002:	c1 83       	std	Z+1, r28	; 0x01
	DIO_init(&Test_Pin);
    1004:	cf 01       	movw	r24, r30
    1006:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_init>
}
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

00001010 <main>:
/*==========================================================================*/

int main(void)
{
	/*-------------[ LEDs Initialization ]-------------*/
	LCD_init();
    1010:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_init>
	Init_LEDs();
    1014:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Init_LEDs>
	Keypad_Init();
    1018:	0e 94 68 00 	call	0xd0	; 0xd0 <Keypad_Init>
	//LCD_displayStringRowColumn(1, 3, (uint8_t*)"OMG GG! IZI");
	
	/*-------------[ TMU Initialization ]-------------*/
	MySOS.Tick_Time = 1;
    101c:	e2 e5       	ldi	r30, 0x52	; 82
    101e:	f3 e0       	ldi	r31, 0x03	; 3
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	80 83       	st	Z, r24
	MySOS.Timer_ID = TIMER_CH0;
    1024:	11 82       	std	Z+1, r1	; 0x01
	SOS_Init(&MySOS);
    1026:	cf 01       	movw	r24, r30
    1028:	0e 94 95 0c 	call	0x192a	; 0x192a <SOS_Init>
	
	/*----------[ Start 3 Different Tasks ]---------*/
	/*---[[ Start_Task(Task_FunPtr, TaskID, Periodicity, Time_IN_ms, Priority, PreHook, PostHook); ]]---*/
	Start_Task(Scan_Keypad, 120, PERIODIC, 5,  2, Dummy, Dummy);
    102c:	0f 2e       	mov	r0, r31
    102e:	ff e9       	ldi	r31, 0x9F	; 159
    1030:	af 2e       	mov	r10, r31
    1032:	f4 e0       	ldi	r31, 0x04	; 4
    1034:	bf 2e       	mov	r11, r31
    1036:	f0 2d       	mov	r31, r0
    1038:	65 01       	movw	r12, r10
    103a:	68 94       	set
    103c:	ee 24       	eor	r14, r14
    103e:	e1 f8       	bld	r14, 1
    1040:	05 e0       	ldi	r16, 0x05	; 5
    1042:	10 e0       	ldi	r17, 0x00	; 0
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	41 e0       	ldi	r20, 0x01	; 1
    104a:	68 e7       	ldi	r22, 0x78	; 120
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	86 ea       	ldi	r24, 0xA6	; 166
    1050:	94 e0       	ldi	r25, 0x04	; 4
    1052:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <Start_Task>
	Start_Task(Update_LEDs, 150, PERIODIC, 10, 5, Dummy, Dummy);
    1056:	0f 2e       	mov	r0, r31
    1058:	f5 e0       	ldi	r31, 0x05	; 5
    105a:	ef 2e       	mov	r14, r31
    105c:	f0 2d       	mov	r31, r0
    105e:	0a e0       	ldi	r16, 0x0A	; 10
    1060:	10 e0       	ldi	r17, 0x00	; 0
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	41 e0       	ldi	r20, 0x01	; 1
    1068:	66 e9       	ldi	r22, 0x96	; 150
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	8b ea       	ldi	r24, 0xAB	; 171
    106e:	94 e0       	ldi	r25, 0x04	; 4
    1070:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <Start_Task>
	Start_Task(Game_App,    110, PERIODIC, 25, 7, Dummy, Dummy);
    1074:	0f 2e       	mov	r0, r31
    1076:	f7 e0       	ldi	r31, 0x07	; 7
    1078:	ef 2e       	mov	r14, r31
    107a:	f0 2d       	mov	r31, r0
    107c:	09 e1       	ldi	r16, 0x19	; 25
    107e:	10 e0       	ldi	r17, 0x00	; 0
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	41 e0       	ldi	r20, 0x01	; 1
    1086:	6e e6       	ldi	r22, 0x6E	; 110
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	87 e0       	ldi	r24, 0x07	; 7
    108c:	95 e0       	ldi	r25, 0x05	; 5
    108e:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <Start_Task>
	
	/*-------------[ SUPER LOOP ]-------------*/
	while (1)
	{
		SOS_Run();
    1092:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <SOS_Run>
	}
    1096:	fd cf       	rjmp	.-6      	; 0x1092 <main+0x82>

00001098 <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
    1098:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
    109a:	89 2b       	or	r24, r25
    109c:	e9 f1       	breq	.+122    	; 0x1118 <DIO_init+0x80>
	{
		switch(DIO_info->GPIO)
    109e:	80 81       	ld	r24, Z
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	99 f0       	breq	.+38     	; 0x10ca <DIO_init+0x32>
    10a4:	28 f0       	brcs	.+10     	; 0x10b0 <DIO_init+0x18>
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	e9 f0       	breq	.+58     	; 0x10e4 <DIO_init+0x4c>
    10aa:	83 30       	cpi	r24, 0x03	; 3
    10ac:	41 f1       	breq	.+80     	; 0x10fe <DIO_init+0x66>
    10ae:	37 c0       	rjmp	.+110    	; 0x111e <DIO_init+0x86>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
    10b0:	81 81       	ldd	r24, Z+1	; 0x01
    10b2:	2a b3       	in	r18, 0x1a	; 26
    10b4:	98 2f       	mov	r25, r24
    10b6:	90 95       	com	r25
    10b8:	29 23       	and	r18, r25
    10ba:	92 81       	ldd	r25, Z+2	; 0x02
    10bc:	98 23       	and	r25, r24
    10be:	82 2f       	mov	r24, r18
    10c0:	89 2b       	or	r24, r25
    10c2:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
			break;
    10c8:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
    10ca:	81 81       	ldd	r24, Z+1	; 0x01
    10cc:	27 b3       	in	r18, 0x17	; 23
    10ce:	98 2f       	mov	r25, r24
    10d0:	90 95       	com	r25
    10d2:	29 23       	and	r18, r25
    10d4:	92 81       	ldd	r25, Z+2	; 0x02
    10d6:	98 23       	and	r25, r24
    10d8:	82 2f       	mov	r24, r18
    10da:	89 2b       	or	r24, r25
    10dc:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
			break;
    10e2:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
    10e4:	81 81       	ldd	r24, Z+1	; 0x01
    10e6:	24 b3       	in	r18, 0x14	; 20
    10e8:	98 2f       	mov	r25, r24
    10ea:	90 95       	com	r25
    10ec:	29 23       	and	r18, r25
    10ee:	92 81       	ldd	r25, Z+2	; 0x02
    10f0:	98 23       	and	r25, r24
    10f2:	82 2f       	mov	r24, r18
    10f4:	89 2b       	or	r24, r25
    10f6:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
			break;
    10fc:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
    10fe:	81 81       	ldd	r24, Z+1	; 0x01
    1100:	21 b3       	in	r18, 0x11	; 17
    1102:	98 2f       	mov	r25, r24
    1104:	90 95       	com	r25
    1106:	29 23       	and	r18, r25
    1108:	92 81       	ldd	r25, Z+2	; 0x02
    110a:	98 23       	and	r25, r24
    110c:	82 2f       	mov	r24, r18
    110e:	89 2b       	or	r24, r25
    1110:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1116:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
    1122:	08 95       	ret

00001124 <DIO_Write>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write(uint8_t GPIO, uint8_t pins, uint8_t value)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	81 f0       	breq	.+32     	; 0x1148 <DIO_Write+0x24>
    1128:	28 f0       	brcs	.+10     	; 0x1134 <DIO_Write+0x10>
    112a:	82 30       	cpi	r24, 0x02	; 2
    112c:	b9 f0       	breq	.+46     	; 0x115c <DIO_Write+0x38>
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	f9 f0       	breq	.+62     	; 0x1170 <DIO_Write+0x4c>
    1132:	28 c0       	rjmp	.+80     	; 0x1184 <DIO_Write+0x60>
	{
		case GPIOA :
		PORTA_DATA = (pins & value) | (~pins & PORTA_DATA);
    1134:	8b b3       	in	r24, 0x1b	; 27
    1136:	96 2f       	mov	r25, r22
    1138:	90 95       	com	r25
    113a:	89 23       	and	r24, r25
    113c:	46 23       	and	r20, r22
    113e:	48 2b       	or	r20, r24
    1140:	4b bb       	out	0x1b, r20	; 27
		errorStatus = E_OK;
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1146:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & value) | (~pins & PORTB_DATA);
    1148:	88 b3       	in	r24, 0x18	; 24
    114a:	96 2f       	mov	r25, r22
    114c:	90 95       	com	r25
    114e:	89 23       	and	r24, r25
    1150:	46 23       	and	r20, r22
    1152:	48 2b       	or	r20, r24
    1154:	48 bb       	out	0x18, r20	; 24
		errorStatus = E_OK;
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
		break;
    115a:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & value) | (~pins & PORTC_DATA);
    115c:	85 b3       	in	r24, 0x15	; 21
    115e:	96 2f       	mov	r25, r22
    1160:	90 95       	com	r25
    1162:	89 23       	and	r24, r25
    1164:	46 23       	and	r20, r22
    1166:	48 2b       	or	r20, r24
    1168:	45 bb       	out	0x15, r20	; 21
		errorStatus = E_OK;
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
		break;
    116e:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & value) | (~pins & PORTD_DATA);
    1170:	82 b3       	in	r24, 0x12	; 18
    1172:	96 2f       	mov	r25, r22
    1174:	90 95       	com	r25
    1176:	89 23       	and	r24, r25
    1178:	46 23       	and	r20, r22
    117a:	48 2b       	or	r20, r24
    117c:	42 bb       	out	0x12, r20	; 18
		errorStatus = E_OK;
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1182:	08 95       	ret
		default :
		errorStatus = E_NOK;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	return errorStatus;
}
    1188:	08 95       	ret

0000118a <DIO_Read>:
*/
ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{

	ERROR_STATUS errorStatus = E_NOK;
	if(data != NULL)
    118a:	41 15       	cp	r20, r1
    118c:	51 05       	cpc	r21, r1
    118e:	21 f1       	breq	.+72     	; 0x11d8 <DIO_Read+0x4e>
	{
		switch(GPIO)
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	69 f0       	breq	.+26     	; 0x11ae <DIO_Read+0x24>
    1194:	28 f0       	brcs	.+10     	; 0x11a0 <DIO_Read+0x16>
    1196:	82 30       	cpi	r24, 0x02	; 2
    1198:	89 f0       	breq	.+34     	; 0x11bc <DIO_Read+0x32>
    119a:	83 30       	cpi	r24, 0x03	; 3
    119c:	b1 f0       	breq	.+44     	; 0x11ca <DIO_Read+0x40>
    119e:	1f c0       	rjmp	.+62     	; 0x11de <DIO_Read+0x54>
		{
			case GPIOA :
			*data = (PORTA_PIN & pins);
    11a0:	89 b3       	in	r24, 0x19	; 25
    11a2:	68 23       	and	r22, r24
    11a4:	fa 01       	movw	r30, r20
    11a6:	60 83       	st	Z, r22
			errorStatus = E_OK;
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e0       	ldi	r25, 0x00	; 0
			break;
    11ac:	08 95       	ret
			case GPIOB :
			*data = (PORTB_PIN & pins);
    11ae:	86 b3       	in	r24, 0x16	; 22
    11b0:	68 23       	and	r22, r24
    11b2:	fa 01       	movw	r30, r20
    11b4:	60 83       	st	Z, r22
			errorStatus = E_OK;
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
			break;
    11ba:	08 95       	ret
			case GPIOC :
			*data = (PORTC_PIN & pins);
    11bc:	83 b3       	in	r24, 0x13	; 19
    11be:	68 23       	and	r22, r24
    11c0:	fa 01       	movw	r30, r20
    11c2:	60 83       	st	Z, r22
			errorStatus = E_OK;
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
			break;
    11c8:	08 95       	ret
			case GPIOD :
			*data = (PORTD_PIN & pins);
    11ca:	80 b3       	in	r24, 0x10	; 16
    11cc:	68 23       	and	r22, r24
    11ce:	fa 01       	movw	r30, r20
    11d0:	60 83       	st	Z, r22
			errorStatus = E_OK;
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
			break;
    11d6:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	08 95       	ret
			case GPIOD :
			*data = (PORTD_PIN & pins);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
    11e2:	08 95       	ret

000011e4 <DIO_Toggle>:
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle(uint8_t GPIO, uint8_t pins)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(GPIO)
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	91 f0       	breq	.+36     	; 0x120c <DIO_Toggle+0x28>
    11e8:	28 f0       	brcs	.+10     	; 0x11f4 <DIO_Toggle+0x10>
    11ea:	82 30       	cpi	r24, 0x02	; 2
    11ec:	d9 f0       	breq	.+54     	; 0x1224 <DIO_Toggle+0x40>
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	29 f1       	breq	.+74     	; 0x123c <DIO_Toggle+0x58>
    11f2:	30 c0       	rjmp	.+96     	; 0x1254 <DIO_Toggle+0x70>
	{
		case GPIOA :
		PORTA_DATA = (pins & (~PORTA_DATA)) | (~pins & PORTA_DATA);
    11f4:	8b b3       	in	r24, 0x1b	; 27
    11f6:	9b b3       	in	r25, 0x1b	; 27
    11f8:	26 2f       	mov	r18, r22
    11fa:	20 95       	com	r18
    11fc:	92 23       	and	r25, r18
    11fe:	80 95       	com	r24
    1200:	68 23       	and	r22, r24
    1202:	69 2b       	or	r22, r25
    1204:	6b bb       	out	0x1b, r22	; 27
		errorStatus = E_OK;
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
		break;
    120a:	08 95       	ret
		case GPIOB :
		PORTB_DATA = (pins & (~PORTB_DATA)) | (~pins & PORTB_DATA);
    120c:	88 b3       	in	r24, 0x18	; 24
    120e:	98 b3       	in	r25, 0x18	; 24
    1210:	26 2f       	mov	r18, r22
    1212:	20 95       	com	r18
    1214:	92 23       	and	r25, r18
    1216:	80 95       	com	r24
    1218:	68 23       	and	r22, r24
    121a:	69 2b       	or	r22, r25
    121c:	68 bb       	out	0x18, r22	; 24
		errorStatus = E_OK;
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1222:	08 95       	ret
		case GPIOC :
		PORTC_DATA = (pins & (~PORTC_DATA)) | (~pins & PORTC_DATA);
    1224:	85 b3       	in	r24, 0x15	; 21
    1226:	95 b3       	in	r25, 0x15	; 21
    1228:	26 2f       	mov	r18, r22
    122a:	20 95       	com	r18
    122c:	92 23       	and	r25, r18
    122e:	80 95       	com	r24
    1230:	68 23       	and	r22, r24
    1232:	69 2b       	or	r22, r25
    1234:	65 bb       	out	0x15, r22	; 21
		errorStatus = E_OK;
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
		break;
    123a:	08 95       	ret
		case GPIOD :
		PORTD_DATA = (pins & (~PORTD_DATA)) | (~pins & PORTD_DATA);
    123c:	82 b3       	in	r24, 0x12	; 18
    123e:	92 b3       	in	r25, 0x12	; 18
    1240:	26 2f       	mov	r18, r22
    1242:	20 95       	com	r18
    1244:	92 23       	and	r25, r18
    1246:	80 95       	com	r24
    1248:	68 23       	and	r22, r24
    124a:	69 2b       	or	r22, r25
    124c:	62 bb       	out	0x12, r22	; 18
		errorStatus = E_OK;
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
		break;
    1252:	08 95       	ret
		default :
		errorStatus = E_NOK;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	return errorStatus;
}
    1258:	08 95       	ret

0000125a <__vector_12>:
{
	PTR_CALL_BACK = isr_ptr;
}

ISR(SPI_STC_vect)
{
    125a:	1f 92       	push	r1
    125c:	0f 92       	push	r0
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	0f 92       	push	r0
    1262:	11 24       	eor	r1, r1
    1264:	2f 93       	push	r18
    1266:	3f 93       	push	r19
    1268:	4f 93       	push	r20
    126a:	5f 93       	push	r21
    126c:	6f 93       	push	r22
    126e:	7f 93       	push	r23
    1270:	8f 93       	push	r24
    1272:	9f 93       	push	r25
    1274:	af 93       	push	r26
    1276:	bf 93       	push	r27
    1278:	ef 93       	push	r30
    127a:	ff 93       	push	r31
	g_u8_RxFlag = TRUE;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 93 a8 00 	sts	0x00A8, r24
	PTR_CALL_BACK();
    1282:	e0 91 5a 03 	lds	r30, 0x035A
    1286:	f0 91 5b 03 	lds	r31, 0x035B
    128a:	09 95       	icall
}
    128c:	ff 91       	pop	r31
    128e:	ef 91       	pop	r30
    1290:	bf 91       	pop	r27
    1292:	af 91       	pop	r26
    1294:	9f 91       	pop	r25
    1296:	8f 91       	pop	r24
    1298:	7f 91       	pop	r23
    129a:	6f 91       	pop	r22
    129c:	5f 91       	pop	r21
    129e:	4f 91       	pop	r20
    12a0:	3f 91       	pop	r19
    12a2:	2f 91       	pop	r18
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <Timer_Init>:
 * Return: The error status of the function.			
 * Description: Initiates the module.
 * 							
 */
ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
    12ae:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
    12b0:	89 2b       	or	r24, r25
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <Timer_Init+0x8>
    12b4:	5c c1       	rjmp	.+696    	; 0x156e <Timer_Init+0x2c0>
	{
		// Check The Timer Channel Number & Init The Corresponding One
		switch(Timer_cfg->Timer_CH_NO)
    12b6:	80 81       	ld	r24, Z
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	09 f4       	brne	.+2      	; 0x12be <Timer_Init+0x10>
    12bc:	6f c0       	rjmp	.+222    	; 0x139c <Timer_Init+0xee>
    12be:	20 f0       	brcs	.+8      	; 0x12c8 <Timer_Init+0x1a>
    12c0:	82 30       	cpi	r24, 0x02	; 2
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <Timer_Init+0x18>
    12c4:	f8 c0       	rjmp	.+496    	; 0x14b6 <Timer_Init+0x208>
    12c6:	56 c1       	rjmp	.+684    	; 0x1574 <Timer_Init+0x2c6>
static ERROR_STATUS Timer0_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR0 =  Timer0_CMP_Mask;
    12c8:	88 e0       	ldi	r24, 0x08	; 8
    12ca:	83 bf       	out	0x33, r24	; 51
		OCR0  =  0x00;
    12cc:	1c be       	out	0x3c, r1	; 60
		TIMSK &= Timer0_Int_CLR_Mask;
    12ce:	89 b7       	in	r24, 0x39	; 57
    12d0:	8c 7f       	andi	r24, 0xFC	; 252
    12d2:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
    12d4:	82 81       	ldd	r24, Z+2	; 0x02
    12d6:	88 23       	and	r24, r24
    12d8:	19 f0       	breq	.+6      	; 0x12e0 <Timer_Init+0x32>
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	21 f0       	breq	.+8      	; 0x12e6 <Timer_Init+0x38>
    12de:	0f c0       	rjmp	.+30     	; 0x12fe <Timer_Init+0x50>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer0_Polling_Int_Mask;
    12e0:	89 b7       	in	r24, 0x39	; 57
    12e2:	89 bf       	out	0x39, r24	; 57
    12e4:	0c c0       	rjmp	.+24     	; 0x12fe <Timer_Init+0x50>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer0_Interrupt_CMP_Int_Mask;
    12e6:	89 b7       	in	r24, 0x39	; 57
    12e8:	82 60       	ori	r24, 0x02	; 2
    12ea:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
    12ec:	8f b7       	in	r24, 0x3f	; 63
    12ee:	80 68       	ori	r24, 0x80	; 128
    12f0:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer0_CM = Timer_cfg->Timer_Cbk_ptr;
    12f2:	84 81       	ldd	r24, Z+4	; 0x04
    12f4:	95 81       	ldd	r25, Z+5	; 0x05
    12f6:	90 93 f3 01 	sts	0x01F3, r25
    12fa:	80 93 f2 01 	sts	0x01F2, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
    12fe:	81 81       	ldd	r24, Z+1	; 0x01
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	d9 f1       	breq	.+118    	; 0x137a <Timer_Init+0xcc>
    1304:	18 f0       	brcs	.+6      	; 0x130c <Timer_Init+0x5e>
    1306:	82 30       	cpi	r24, 0x02	; 2
    1308:	f1 f1       	breq	.+124    	; 0x1386 <Timer_Init+0xd8>
    130a:	43 c0       	rjmp	.+134    	; 0x1392 <Timer_Init+0xe4>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
    130c:	e3 81       	ldd	r30, Z+3	; 0x03
    130e:	8e 2f       	mov	r24, r30
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	88 30       	cpi	r24, 0x08	; 8
    1314:	91 05       	cpc	r25, r1
    1316:	60 f5       	brcc	.+88     	; 0x1370 <Timer_Init+0xc2>
    1318:	fc 01       	movw	r30, r24
    131a:	ef 5c       	subi	r30, 0xCF	; 207
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
    1322:	10 92 f9 01 	sts	0x01F9, r1
						errorStatus = E_OK;
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer0_Prescaler = TIMER0_PRESCALER_8;
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	80 93 f9 01 	sts	0x01F9, r24
						errorStatus = E_OK;
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
    1338:	10 92 f9 01 	sts	0x01F9, r1
						errorStatus = E_NOK;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer0_Prescaler = TIMER0_PRESCALER_64;
    1342:	83 e0       	ldi	r24, 0x03	; 3
    1344:	80 93 f9 01 	sts	0x01F9, r24
						errorStatus = E_OK;
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer0_Prescaler = TIMER0_PRESCALER_128;
    134e:	84 e0       	ldi	r24, 0x04	; 4
    1350:	80 93 f9 01 	sts	0x01F9, r24
						errorStatus = E_OK;
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
    135a:	10 92 f9 01 	sts	0x01F9, r1
						errorStatus = E_NOK;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	08 95       	ret
						break;
					case TIMER_PRESCALER_1024 :
						Timer0_Prescaler = TIMER0_PRESCALER_1024;
    1364:	85 e0       	ldi	r24, 0x05	; 5
    1366:	80 93 f9 01 	sts	0x01F9, r24
						errorStatus = E_OK;
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	08 95       	ret
						break;
					default :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
    1370:	10 92 f9 01 	sts	0x01F9, r1
						errorStatus = E_NOK;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	08 95       	ret
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_RISING;
    137a:	87 e0       	ldi	r24, 0x07	; 7
    137c:	80 93 f9 01 	sts	0x01F9, r24
				errorStatus = E_OK;
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	08 95       	ret
				break;
			case COUNTER_DOWN_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_FALLING;
    1386:	86 e0       	ldi	r24, 0x06	; 6
    1388:	80 93 f9 01 	sts	0x01F9, r24
				errorStatus = E_OK;
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	08 95       	ret
				break;
			default :
				Timer0_Prescaler = TIMER0_NO_CLOCK;
    1392:	10 92 f9 01 	sts	0x01F9, r1
				errorStatus = E_NOK;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	08 95       	ret
static ERROR_STATUS Timer1_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR1 = Timer1_CMP_Mask;
    139c:	88 e0       	ldi	r24, 0x08	; 8
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	9f bd       	out	0x2f, r25	; 47
    13a2:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0x00;
    13a4:	1d bc       	out	0x2d, r1	; 45
    13a6:	1c bc       	out	0x2c, r1	; 44
		OCR1A = 0x00;
    13a8:	1b bc       	out	0x2b, r1	; 43
    13aa:	1a bc       	out	0x2a, r1	; 42
		TIMSK &= Timer1_Int_CLR_Mask;
    13ac:	89 b7       	in	r24, 0x39	; 57
    13ae:	83 7c       	andi	r24, 0xC3	; 195
    13b0:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
    13b2:	82 81       	ldd	r24, Z+2	; 0x02
    13b4:	88 23       	and	r24, r24
    13b6:	19 f0       	breq	.+6      	; 0x13be <Timer_Init+0x110>
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	21 f0       	breq	.+8      	; 0x13c4 <Timer_Init+0x116>
    13bc:	0f c0       	rjmp	.+30     	; 0x13dc <Timer_Init+0x12e>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer1_Polling_Int_Mask;
    13be:	89 b7       	in	r24, 0x39	; 57
    13c0:	89 bf       	out	0x39, r24	; 57
    13c2:	0c c0       	rjmp	.+24     	; 0x13dc <Timer_Init+0x12e>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer1_OCA_Int_Mask;
    13c4:	89 b7       	in	r24, 0x39	; 57
    13c6:	80 61       	ori	r24, 0x10	; 16
    13c8:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
    13ca:	8f b7       	in	r24, 0x3f	; 63
    13cc:	80 68       	ori	r24, 0x80	; 128
    13ce:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer1_CM = Timer_cfg->Timer_Cbk_ptr;
    13d0:	84 81       	ldd	r24, Z+4	; 0x04
    13d2:	95 81       	ldd	r25, Z+5	; 0x05
    13d4:	90 93 ef 01 	sts	0x01EF, r25
    13d8:	80 93 ee 01 	sts	0x01EE, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
    13dc:	81 81       	ldd	r24, Z+1	; 0x01
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <Timer_Init+0x136>
    13e2:	50 c0       	rjmp	.+160    	; 0x1484 <Timer_Init+0x1d6>
    13e4:	20 f0       	brcs	.+8      	; 0x13ee <Timer_Init+0x140>
    13e6:	82 30       	cpi	r24, 0x02	; 2
    13e8:	09 f4       	brne	.+2      	; 0x13ec <Timer_Init+0x13e>
    13ea:	55 c0       	rjmp	.+170    	; 0x1496 <Timer_Init+0x1e8>
    13ec:	5d c0       	rjmp	.+186    	; 0x14a8 <Timer_Init+0x1fa>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
    13ee:	e3 81       	ldd	r30, Z+3	; 0x03
    13f0:	8e 2f       	mov	r24, r30
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	88 30       	cpi	r24, 0x08	; 8
    13f6:	91 05       	cpc	r25, r1
    13f8:	f0 f5       	brcc	.+124    	; 0x1476 <Timer_Init+0x1c8>
    13fa:	fc 01       	movw	r30, r24
    13fc:	e7 5c       	subi	r30, 0xC7	; 199
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
    1404:	10 92 f8 01 	sts	0x01F8, r1
    1408:	10 92 f7 01 	sts	0x01F7, r1
						errorStatus = E_OK;
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer1_Prescaler = TIMER1_PRESCALER_8;
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	90 93 f8 01 	sts	0x01F8, r25
    141a:	80 93 f7 01 	sts	0x01F7, r24
						errorStatus = E_OK;
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
    1424:	10 92 f8 01 	sts	0x01F8, r1
    1428:	10 92 f7 01 	sts	0x01F7, r1
						errorStatus = E_NOK;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer1_Prescaler = TIMER1_PRESCALER_64;
    1432:	83 e0       	ldi	r24, 0x03	; 3
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	90 93 f8 01 	sts	0x01F8, r25
    143a:	80 93 f7 01 	sts	0x01F7, r24
						errorStatus = E_OK;
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer1_Prescaler = TIMER1_PRESCALER_128;
    1444:	84 e0       	ldi	r24, 0x04	; 4
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	90 93 f8 01 	sts	0x01F8, r25
    144c:	80 93 f7 01 	sts	0x01F7, r24
						errorStatus = E_OK;
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
    1456:	10 92 f8 01 	sts	0x01F8, r1
    145a:	10 92 f7 01 	sts	0x01F7, r1
						errorStatus = E_NOK;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	08 95       	ret
						break;
					case TIMER_PRESCALER_1024 :
						Timer1_Prescaler = TIMER1_PRESCALER_1024;
    1464:	85 e0       	ldi	r24, 0x05	; 5
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	90 93 f8 01 	sts	0x01F8, r25
    146c:	80 93 f7 01 	sts	0x01F7, r24
						errorStatus = E_OK;
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	08 95       	ret
						break;
					default :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
    1476:	10 92 f8 01 	sts	0x01F8, r1
    147a:	10 92 f7 01 	sts	0x01F7, r1
						errorStatus = E_NOK;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	08 95       	ret
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_RISING;
    1484:	87 e0       	ldi	r24, 0x07	; 7
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	90 93 f8 01 	sts	0x01F8, r25
    148c:	80 93 f7 01 	sts	0x01F7, r24
				errorStatus = E_OK;
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	08 95       	ret
				break;
			case COUNTER_DOWN_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_FALLING;
    1496:	86 e0       	ldi	r24, 0x06	; 6
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	90 93 f8 01 	sts	0x01F8, r25
    149e:	80 93 f7 01 	sts	0x01F7, r24
				errorStatus = E_OK;
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	08 95       	ret
				break;
			default :
				Timer1_Prescaler = TIMER1_NO_CLOCK;
    14a8:	10 92 f8 01 	sts	0x01F8, r1
    14ac:	10 92 f7 01 	sts	0x01F7, r1
				errorStatus = E_NOK;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	08 95       	ret
static ERROR_STATUS Timer2_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR2 = Timer2_CMP_Mask;
    14b6:	88 e0       	ldi	r24, 0x08	; 8
    14b8:	85 bd       	out	0x25, r24	; 37
		TCNT2 = Timer2_TCNT_INIT_Mask;
    14ba:	14 bc       	out	0x24, r1	; 36
		TIMSK &= Timer1_Int_CLR_Mask;
    14bc:	89 b7       	in	r24, 0x39	; 57
    14be:	83 7c       	andi	r24, 0xC3	; 195
    14c0:	89 bf       	out	0x39, r24	; 57
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
    14c2:	82 81       	ldd	r24, Z+2	; 0x02
    14c4:	88 23       	and	r24, r24
    14c6:	19 f0       	breq	.+6      	; 0x14ce <Timer_Init+0x220>
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <Timer_Init+0x226>
    14cc:	0f c0       	rjmp	.+30     	; 0x14ec <Timer_Init+0x23e>
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer2_Polling_Int_Mask;
    14ce:	89 b7       	in	r24, 0x39	; 57
    14d0:	89 bf       	out	0x39, r24	; 57
    14d2:	0c c0       	rjmp	.+24     	; 0x14ec <Timer_Init+0x23e>
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer2_Interrupt_CMP_Int_Mask;
    14d4:	89 b7       	in	r24, 0x39	; 57
    14d6:	80 68       	ori	r24, 0x80	; 128
    14d8:	89 bf       	out	0x39, r24	; 57
				SREG  |= 0x80;
    14da:	8f b7       	in	r24, 0x3f	; 63
    14dc:	80 68       	ori	r24, 0x80	; 128
    14de:	8f bf       	out	0x3f, r24	; 63
				Ptr_Timer2_CM = Timer_cfg->Timer_Cbk_ptr;
    14e0:	84 81       	ldd	r24, Z+4	; 0x04
    14e2:	95 81       	ldd	r25, Z+5	; 0x05
    14e4:	90 93 eb 01 	sts	0x01EB, r25
    14e8:	80 93 ea 01 	sts	0x01EA, r24
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
    14ec:	81 81       	ldd	r24, Z+1	; 0x01
    14ee:	81 11       	cpse	r24, r1
    14f0:	39 c0       	rjmp	.+114    	; 0x1564 <Timer_Init+0x2b6>
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
    14f2:	e3 81       	ldd	r30, Z+3	; 0x03
    14f4:	8e 2f       	mov	r24, r30
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	88 30       	cpi	r24, 0x08	; 8
    14fa:	91 05       	cpc	r25, r1
    14fc:	70 f5       	brcc	.+92     	; 0x155a <Timer_Init+0x2ac>
    14fe:	fc 01       	movw	r30, r24
    1500:	ef 5b       	subi	r30, 0xBF	; 191
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__tablejump2__>
				{
					case TIMER_NO_CLOCK :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
    1508:	10 92 f6 01 	sts	0x01F6, r1
						errorStatus = E_OK;
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	08 95       	ret
						break;
					case TIMER_PRESCALER_8 :
						Timer2_Prescaler = TIMER2_PRESCALER_8;
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	80 93 f6 01 	sts	0x01F6, r24
						errorStatus = E_OK;
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	08 95       	ret
						break;
					case TIMER_PRESCALER_32 :
						Timer2_Prescaler = TIMER2_PRESCALER_32;
    151e:	83 e0       	ldi	r24, 0x03	; 3
    1520:	80 93 f6 01 	sts	0x01F6, r24
						errorStatus = E_OK;
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	08 95       	ret
						break;
					case TIMER_PRESCALER_64 :
						Timer2_Prescaler = TIMER2_PRESCALER_64;
    152a:	84 e0       	ldi	r24, 0x04	; 4
    152c:	80 93 f6 01 	sts	0x01F6, r24
						errorStatus = E_OK;
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	08 95       	ret
						break;
					case TIMER_PRESCALER_128 :
						Timer2_Prescaler = TIMER2_PRESCALER_128;
    1536:	85 e0       	ldi	r24, 0x05	; 5
    1538:	80 93 f6 01 	sts	0x01F6, r24
						errorStatus = E_OK;
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	08 95       	ret
						break;
					case TIMER_PRESCALER_256 :
						Timer2_Prescaler = TIMER2_PRESCALER_256;
    1542:	86 e0       	ldi	r24, 0x06	; 6
    1544:	80 93 f6 01 	sts	0x01F6, r24
						errorStatus = E_OK;
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	08 95       	ret
						break;
						case TIMER_PRESCALER_1024 :
						Timer2_Prescaler = TIMER2_PRESCALER_1024;
    154e:	87 e0       	ldi	r24, 0x07	; 7
    1550:	80 93 f6 01 	sts	0x01F6, r24
						errorStatus = E_OK;
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	08 95       	ret
						break;
					default :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
    155a:	10 92 f6 01 	sts	0x01F6, r1
						errorStatus = E_NOK;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	08 95       	ret
						break;
				}
				break;
			default :
				Timer2_Prescaler = TIMER2_NO_CLOCK;
    1564:	10 92 f6 01 	sts	0x01F6, r1
				errorStatus = E_NOK;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	08 95       	ret
				break;
		}
	}
	else
	{
		errorStatus = E_NOK;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	08 95       	ret
				break;
			case TIMER_CH2 :
				errorStatus = Timer2_Init(Timer_cfg);
				break;
			default :
				errorStatus = E_NOK;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
    1578:	08 95       	ret

0000157a <Timer_Start>:
 */

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
	ERROR_STATUS errorStatus = E_NOK;
	switch(Timer_CH_NO)
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	91 f0       	breq	.+36     	; 0x15a2 <Timer_Start+0x28>
    157e:	18 f0       	brcs	.+6      	; 0x1586 <Timer_Start+0xc>
    1580:	82 30       	cpi	r24, 0x02	; 2
    1582:	01 f1       	breq	.+64     	; 0x15c4 <Timer_Start+0x4a>
    1584:	2d c0       	rjmp	.+90     	; 0x15e0 <Timer_Start+0x66>
	{
		case TIMER_CH0 :
			if(Timer_Count <= 255)
    1586:	6f 3f       	cpi	r22, 0xFF	; 255
    1588:	71 05       	cpc	r23, r1
    158a:	09 f0       	breq	.+2      	; 0x158e <Timer_Start+0x14>
    158c:	60 f5       	brcc	.+88     	; 0x15e6 <Timer_Start+0x6c>
			{
				TCNT0 = 0x00;
    158e:	12 be       	out	0x32, r1	; 50
				OCR0  = Timer_Count;
    1590:	6c bf       	out	0x3c, r22	; 60
				TCCR0 |= Timer0_Prescaler;
    1592:	93 b7       	in	r25, 0x33	; 51
    1594:	80 91 f9 01 	lds	r24, 0x01F9
    1598:	89 2b       	or	r24, r25
    159a:	83 bf       	out	0x33, r24	; 51
				errorStatus = E_OK;
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	08 95       	ret
			{
				errorStatus = E_NOK;
			}
			break;
		case TIMER_CH1 :
			TCNT1 = 0x0000;
    15a2:	1d bc       	out	0x2d, r1	; 45
    15a4:	1c bc       	out	0x2c, r1	; 44
			OCR1A = Timer_Count;
    15a6:	7b bd       	out	0x2b, r23	; 43
    15a8:	6a bd       	out	0x2a, r22	; 42
			TCCR1 |= Timer1_Prescaler;
    15aa:	2e b5       	in	r18, 0x2e	; 46
    15ac:	3f b5       	in	r19, 0x2f	; 47
    15ae:	80 91 f7 01 	lds	r24, 0x01F7
    15b2:	90 91 f8 01 	lds	r25, 0x01F8
    15b6:	82 2b       	or	r24, r18
    15b8:	93 2b       	or	r25, r19
    15ba:	9f bd       	out	0x2f, r25	; 47
    15bc:	8e bd       	out	0x2e, r24	; 46
			errorStatus = E_OK;
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
			break;
    15c2:	08 95       	ret
		case TIMER_CH2 :
			if(Timer_Count <= 255)
    15c4:	6f 3f       	cpi	r22, 0xFF	; 255
    15c6:	71 05       	cpc	r23, r1
    15c8:	09 f0       	breq	.+2      	; 0x15cc <Timer_Start+0x52>
    15ca:	80 f4       	brcc	.+32     	; 0x15ec <Timer_Start+0x72>
			{
				TCNT2 = 0x00;
    15cc:	14 bc       	out	0x24, r1	; 36
				OCR2  = Timer_Count;
    15ce:	63 bd       	out	0x23, r22	; 35
				TCCR2 |= Timer2_Prescaler;
    15d0:	95 b5       	in	r25, 0x25	; 37
    15d2:	80 91 f6 01 	lds	r24, 0x01F6
    15d6:	89 2b       	or	r24, r25
    15d8:	85 bd       	out	0x25, r24	; 37
				errorStatus = E_OK;
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	08 95       	ret
			{
				errorStatus = E_NOK;
			}
			break;
		default :
			errorStatus = E_NOK;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	08 95       	ret
				TCCR0 |= Timer0_Prescaler;
				errorStatus = E_OK;
			}
			else
			{
				errorStatus = E_NOK;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	08 95       	ret
				TCCR2 |= Timer2_Prescaler;
				errorStatus = E_OK;
			}
			else
			{
				errorStatus = E_NOK;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
		default :
			errorStatus = E_NOK;
			break;
	}
	return errorStatus;
}
    15f0:	08 95       	ret

000015f2 <TIMER0_SetCM>:
	Ptr_Timer0_OV = Ptr_ISR;
}

void TIMER0_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer0_CM = Ptr_ISR;
    15f2:	90 93 f3 01 	sts	0x01F3, r25
    15f6:	80 93 f2 01 	sts	0x01F2, r24
    15fa:	08 95       	ret

000015fc <TIMER2_SetCM>:
	Ptr_Timer2_OV = Ptr_ISR;
}

void TIMER2_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer2_CM = Ptr_ISR;
    15fc:	90 93 eb 01 	sts	0x01EB, r25
    1600:	80 93 ea 01 	sts	0x01EA, r24
    1604:	08 95       	ret

00001606 <TIMER1_SetCM>:
	Ptr_Timer1_OV = Ptr_ISR;
}

void TIMER1_SetCM(FunPtr Ptr_ISR)
{
	Ptr_Timer1_CM = Ptr_ISR;
    1606:	90 93 ef 01 	sts	0x01EF, r25
    160a:	80 93 ee 01 	sts	0x01EE, r24
    160e:	08 95       	ret

00001610 <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
    1610:	1f 92       	push	r1
    1612:	0f 92       	push	r0
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	0f 92       	push	r0
    1618:	11 24       	eor	r1, r1
    161a:	2f 93       	push	r18
    161c:	3f 93       	push	r19
    161e:	4f 93       	push	r20
    1620:	5f 93       	push	r21
    1622:	6f 93       	push	r22
    1624:	7f 93       	push	r23
    1626:	8f 93       	push	r24
    1628:	9f 93       	push	r25
    162a:	af 93       	push	r26
    162c:	bf 93       	push	r27
    162e:	ef 93       	push	r30
    1630:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
    1632:	e0 91 f4 01 	lds	r30, 0x01F4
    1636:	f0 91 f5 01 	lds	r31, 0x01F5
    163a:	30 97       	sbiw	r30, 0x00	; 0
    163c:	09 f0       	breq	.+2      	; 0x1640 <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
    163e:	09 95       	icall
	}
}
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	bf 91       	pop	r27
    1646:	af 91       	pop	r26
    1648:	9f 91       	pop	r25
    164a:	8f 91       	pop	r24
    164c:	7f 91       	pop	r23
    164e:	6f 91       	pop	r22
    1650:	5f 91       	pop	r21
    1652:	4f 91       	pop	r20
    1654:	3f 91       	pop	r19
    1656:	2f 91       	pop	r18
    1658:	0f 90       	pop	r0
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	0f 90       	pop	r0
    165e:	1f 90       	pop	r1
    1660:	18 95       	reti

00001662 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1662:	1f 92       	push	r1
    1664:	0f 92       	push	r0
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	0f 92       	push	r0
    166a:	11 24       	eor	r1, r1
    166c:	2f 93       	push	r18
    166e:	3f 93       	push	r19
    1670:	4f 93       	push	r20
    1672:	5f 93       	push	r21
    1674:	6f 93       	push	r22
    1676:	7f 93       	push	r23
    1678:	8f 93       	push	r24
    167a:	9f 93       	push	r25
    167c:	af 93       	push	r26
    167e:	bf 93       	push	r27
    1680:	ef 93       	push	r30
    1682:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
    1684:	e0 91 f2 01 	lds	r30, 0x01F2
    1688:	f0 91 f3 01 	lds	r31, 0x01F3
    168c:	30 97       	sbiw	r30, 0x00	; 0
    168e:	09 f0       	breq	.+2      	; 0x1692 <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
    1690:	09 95       	icall
	}
}
    1692:	ff 91       	pop	r31
    1694:	ef 91       	pop	r30
    1696:	bf 91       	pop	r27
    1698:	af 91       	pop	r26
    169a:	9f 91       	pop	r25
    169c:	8f 91       	pop	r24
    169e:	7f 91       	pop	r23
    16a0:	6f 91       	pop	r22
    16a2:	5f 91       	pop	r21
    16a4:	4f 91       	pop	r20
    16a6:	3f 91       	pop	r19
    16a8:	2f 91       	pop	r18
    16aa:	0f 90       	pop	r0
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	0f 90       	pop	r0
    16b0:	1f 90       	pop	r1
    16b2:	18 95       	reti

000016b4 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    16b4:	1f 92       	push	r1
    16b6:	0f 92       	push	r0
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	0f 92       	push	r0
    16bc:	11 24       	eor	r1, r1
    16be:	2f 93       	push	r18
    16c0:	3f 93       	push	r19
    16c2:	4f 93       	push	r20
    16c4:	5f 93       	push	r21
    16c6:	6f 93       	push	r22
    16c8:	7f 93       	push	r23
    16ca:	8f 93       	push	r24
    16cc:	9f 93       	push	r25
    16ce:	af 93       	push	r26
    16d0:	bf 93       	push	r27
    16d2:	ef 93       	push	r30
    16d4:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
    16d6:	e0 91 ec 01 	lds	r30, 0x01EC
    16da:	f0 91 ed 01 	lds	r31, 0x01ED
    16de:	30 97       	sbiw	r30, 0x00	; 0
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
    16e2:	09 95       	icall
	}
}
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1706:	1f 92       	push	r1
    1708:	0f 92       	push	r0
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	0f 92       	push	r0
    170e:	11 24       	eor	r1, r1
    1710:	2f 93       	push	r18
    1712:	3f 93       	push	r19
    1714:	4f 93       	push	r20
    1716:	5f 93       	push	r21
    1718:	6f 93       	push	r22
    171a:	7f 93       	push	r23
    171c:	8f 93       	push	r24
    171e:	9f 93       	push	r25
    1720:	af 93       	push	r26
    1722:	bf 93       	push	r27
    1724:	ef 93       	push	r30
    1726:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
    1728:	e0 91 ea 01 	lds	r30, 0x01EA
    172c:	f0 91 eb 01 	lds	r31, 0x01EB
    1730:	30 97       	sbiw	r30, 0x00	; 0
    1732:	09 f0       	breq	.+2      	; 0x1736 <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
    1734:	09 95       	icall
	}
}
    1736:	ff 91       	pop	r31
    1738:	ef 91       	pop	r30
    173a:	bf 91       	pop	r27
    173c:	af 91       	pop	r26
    173e:	9f 91       	pop	r25
    1740:	8f 91       	pop	r24
    1742:	7f 91       	pop	r23
    1744:	6f 91       	pop	r22
    1746:	5f 91       	pop	r21
    1748:	4f 91       	pop	r20
    174a:	3f 91       	pop	r19
    174c:	2f 91       	pop	r18
    174e:	0f 90       	pop	r0
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	0f 90       	pop	r0
    1754:	1f 90       	pop	r1
    1756:	18 95       	reti

00001758 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1758:	1f 92       	push	r1
    175a:	0f 92       	push	r0
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	0f 92       	push	r0
    1760:	11 24       	eor	r1, r1
    1762:	2f 93       	push	r18
    1764:	3f 93       	push	r19
    1766:	4f 93       	push	r20
    1768:	5f 93       	push	r21
    176a:	6f 93       	push	r22
    176c:	7f 93       	push	r23
    176e:	8f 93       	push	r24
    1770:	9f 93       	push	r25
    1772:	af 93       	push	r26
    1774:	bf 93       	push	r27
    1776:	ef 93       	push	r30
    1778:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
    177a:	e0 91 f0 01 	lds	r30, 0x01F0
    177e:	f0 91 f1 01 	lds	r31, 0x01F1
    1782:	30 97       	sbiw	r30, 0x00	; 0
    1784:	09 f0       	breq	.+2      	; 0x1788 <__vector_9+0x30>
	{
		Ptr_Timer1_OV();
    1786:	09 95       	icall
	}
}
    1788:	ff 91       	pop	r31
    178a:	ef 91       	pop	r30
    178c:	bf 91       	pop	r27
    178e:	af 91       	pop	r26
    1790:	9f 91       	pop	r25
    1792:	8f 91       	pop	r24
    1794:	7f 91       	pop	r23
    1796:	6f 91       	pop	r22
    1798:	5f 91       	pop	r21
    179a:	4f 91       	pop	r20
    179c:	3f 91       	pop	r19
    179e:	2f 91       	pop	r18
    17a0:	0f 90       	pop	r0
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	0f 90       	pop	r0
    17a6:	1f 90       	pop	r1
    17a8:	18 95       	reti

000017aa <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    17aa:	1f 92       	push	r1
    17ac:	0f 92       	push	r0
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	0f 92       	push	r0
    17b2:	11 24       	eor	r1, r1
    17b4:	2f 93       	push	r18
    17b6:	3f 93       	push	r19
    17b8:	4f 93       	push	r20
    17ba:	5f 93       	push	r21
    17bc:	6f 93       	push	r22
    17be:	7f 93       	push	r23
    17c0:	8f 93       	push	r24
    17c2:	9f 93       	push	r25
    17c4:	af 93       	push	r26
    17c6:	bf 93       	push	r27
    17c8:	ef 93       	push	r30
    17ca:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
    17cc:	e0 91 ee 01 	lds	r30, 0x01EE
    17d0:	f0 91 ef 01 	lds	r31, 0x01EF
    17d4:	30 97       	sbiw	r30, 0x00	; 0
    17d6:	09 f0       	breq	.+2      	; 0x17da <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
    17d8:	09 95       	icall
	}	
}
    17da:	ff 91       	pop	r31
    17dc:	ef 91       	pop	r30
    17de:	bf 91       	pop	r27
    17e0:	af 91       	pop	r26
    17e2:	9f 91       	pop	r25
    17e4:	8f 91       	pop	r24
    17e6:	7f 91       	pop	r23
    17e8:	6f 91       	pop	r22
    17ea:	5f 91       	pop	r21
    17ec:	4f 91       	pop	r20
    17ee:	3f 91       	pop	r19
    17f0:	2f 91       	pop	r18
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	0f 90       	pop	r0
    17f8:	1f 90       	pop	r1
    17fa:	18 95       	reti

000017fc <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    17fc:	1f 92       	push	r1
    17fe:	0f 92       	push	r0
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	0f 92       	push	r0
    1804:	11 24       	eor	r1, r1
    1806:	2f 93       	push	r18
    1808:	3f 93       	push	r19
    180a:	4f 93       	push	r20
    180c:	5f 93       	push	r21
    180e:	6f 93       	push	r22
    1810:	7f 93       	push	r23
    1812:	8f 93       	push	r24
    1814:	9f 93       	push	r25
    1816:	af 93       	push	r26
    1818:	bf 93       	push	r27
    181a:	ef 93       	push	r30
    181c:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
    181e:	e0 91 ee 01 	lds	r30, 0x01EE
    1822:	f0 91 ef 01 	lds	r31, 0x01EF
    1826:	30 97       	sbiw	r30, 0x00	; 0
    1828:	09 f0       	breq	.+2      	; 0x182c <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
    182a:	09 95       	icall
	}
}
    182c:	ff 91       	pop	r31
    182e:	ef 91       	pop	r30
    1830:	bf 91       	pop	r27
    1832:	af 91       	pop	r26
    1834:	9f 91       	pop	r25
    1836:	8f 91       	pop	r24
    1838:	7f 91       	pop	r23
    183a:	6f 91       	pop	r22
    183c:	5f 91       	pop	r21
    183e:	4f 91       	pop	r20
    1840:	3f 91       	pop	r19
    1842:	2f 91       	pop	r18
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
    184e:	1f 92       	push	r1
    1850:	0f 92       	push	r0
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	0f 92       	push	r0
    1856:	11 24       	eor	r1, r1
    1858:	2f 93       	push	r18
    185a:	3f 93       	push	r19
    185c:	4f 93       	push	r20
    185e:	5f 93       	push	r21
    1860:	6f 93       	push	r22
    1862:	7f 93       	push	r23
    1864:	8f 93       	push	r24
    1866:	9f 93       	push	r25
    1868:	af 93       	push	r26
    186a:	bf 93       	push	r27
    186c:	ef 93       	push	r30
    186e:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
    1870:	e0 91 fa 01 	lds	r30, 0x01FA
    1874:	f0 91 fb 01 	lds	r31, 0x01FB
    1878:	30 97       	sbiw	r30, 0x00	; 0
    187a:	09 f0       	breq	.+2      	; 0x187e <__vector_13+0x30>
	{
		Ptr_UART_RX();
    187c:	09 95       	icall
	}
}
    187e:	ff 91       	pop	r31
    1880:	ef 91       	pop	r30
    1882:	bf 91       	pop	r27
    1884:	af 91       	pop	r26
    1886:	9f 91       	pop	r25
    1888:	8f 91       	pop	r24
    188a:	7f 91       	pop	r23
    188c:	6f 91       	pop	r22
    188e:	5f 91       	pop	r21
    1890:	4f 91       	pop	r20
    1892:	3f 91       	pop	r19
    1894:	2f 91       	pop	r18
    1896:	0f 90       	pop	r0
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	0f 90       	pop	r0
    189c:	1f 90       	pop	r1
    189e:	18 95       	reti

000018a0 <__vector_15>:

ISR(USART_TXC_vect)
{
    18a0:	1f 92       	push	r1
    18a2:	0f 92       	push	r0
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	0f 92       	push	r0
    18a8:	11 24       	eor	r1, r1
    18aa:	2f 93       	push	r18
    18ac:	3f 93       	push	r19
    18ae:	4f 93       	push	r20
    18b0:	5f 93       	push	r21
    18b2:	6f 93       	push	r22
    18b4:	7f 93       	push	r23
    18b6:	8f 93       	push	r24
    18b8:	9f 93       	push	r25
    18ba:	af 93       	push	r26
    18bc:	bf 93       	push	r27
    18be:	ef 93       	push	r30
    18c0:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
    18c2:	e0 91 fc 01 	lds	r30, 0x01FC
    18c6:	f0 91 fd 01 	lds	r31, 0x01FD
    18ca:	30 97       	sbiw	r30, 0x00	; 0
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <__vector_15+0x30>
	{
		Ptr_UART_TX();
    18ce:	09 95       	icall
	}
    18d0:	ff 91       	pop	r31
    18d2:	ef 91       	pop	r30
    18d4:	bf 91       	pop	r27
    18d6:	af 91       	pop	r26
    18d8:	9f 91       	pop	r25
    18da:	8f 91       	pop	r24
    18dc:	7f 91       	pop	r23
    18de:	6f 91       	pop	r22
    18e0:	5f 91       	pop	r21
    18e2:	4f 91       	pop	r20
    18e4:	3f 91       	pop	r19
    18e6:	2f 91       	pop	r18
    18e8:	0f 90       	pop	r0
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	0f 90       	pop	r0
    18ee:	1f 90       	pop	r1
    18f0:	18 95       	reti

000018f2 <SOS_ISR_cbf>:


static void SOS_ISR_cbf(void)
{
	/* Adjust The Tick Time According To The TMU's Time Configuration */
	g_SysTicks++;
    18f2:	80 91 fe 01 	lds	r24, 0x01FE
    18f6:	90 91 ff 01 	lds	r25, 0x01FF
    18fa:	01 96       	adiw	r24, 0x01	; 1
    18fc:	90 93 ff 01 	sts	0x01FF, r25
    1900:	80 93 fe 01 	sts	0x01FE, r24
	
	if(g_SysTicks == g_SOS_TickTime)
    1904:	20 91 fe 01 	lds	r18, 0x01FE
    1908:	30 91 ff 01 	lds	r19, 0x01FF
    190c:	80 91 00 02 	lds	r24, 0x0200
    1910:	90 91 01 02 	lds	r25, 0x0201
    1914:	28 17       	cp	r18, r24
    1916:	39 07       	cpc	r19, r25
    1918:	39 f4       	brne	.+14     	; 0x1928 <SOS_ISR_cbf+0x36>
	{
		g_TMR_Ticks_Changed = TRUE;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	80 93 02 02 	sts	0x0202, r24
		g_SysTicks = FALSE;	
    1920:	10 92 ff 01 	sts	0x01FF, r1
    1924:	10 92 fe 01 	sts	0x01FE, r1
    1928:	08 95       	ret

0000192a <SOS_Init>:
{
	ERROR_STATUS errorStauts = E_OK;
	uint16_t index = 0;
	
	/*-------------[ Check TMU's Pointer Validity ]-------------*/
	if(a_SOS_s != NULL)
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	09 f4       	brne	.+2      	; 0x1930 <SOS_Init+0x6>
    192e:	63 c0       	rjmp	.+198    	; 0x19f6 <SOS_Init+0xcc>
    1930:	fc 01       	movw	r30, r24
	{
		/*-------------[ TMU Initialization ]-------------*/
		g_SOS.Timer_ID  = a_SOS_s->Timer_ID;
    1932:	a9 ea       	ldi	r26, 0xA9	; 169
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	81 81       	ldd	r24, Z+1	; 0x01
    1938:	11 96       	adiw	r26, 0x01	; 1
    193a:	8c 93       	st	X, r24
    193c:	11 97       	sbiw	r26, 0x01	; 1
		g_SOS.Tick_Time = a_SOS_s->Tick_Time;
    193e:	80 81       	ld	r24, Z
    1940:	8c 93       	st	X, r24
		g_SOS.Timer_Cbk_ptr = SOS_ISR_cbf;
    1942:	29 e7       	ldi	r18, 0x79	; 121
    1944:	3c e0       	ldi	r19, 0x0C	; 12
    1946:	14 96       	adiw	r26, 0x04	; 4
    1948:	3c 93       	st	X, r19
    194a:	2e 93       	st	-X, r18
    194c:	13 97       	sbiw	r26, 0x03	; 3
		g_SOS.State    = INACTIVE;
    194e:	12 96       	adiw	r26, 0x02	; 2
    1950:	1c 92       	st	X, r1
		g_SOS_TickTime = g_SOS.Tick_Time;
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	90 93 01 02 	sts	0x0201, r25
    1958:	80 93 00 02 	sts	0x0200, r24
		
		/*-------------[ Timer Initialization ]-------------*/
		g_SOS_TMR.Timer_Mode = TIMER_MODE;
    195c:	a0 e4       	ldi	r26, 0x40	; 64
    195e:	b3 e0       	ldi	r27, 0x03	; 3
    1960:	11 96       	adiw	r26, 0x01	; 1
    1962:	1c 92       	st	X, r1
    1964:	11 97       	sbiw	r26, 0x01	; 1
		g_SOS_TMR.Timer_Prescaler = TIMER_PRESCALER_64;
    1966:	84 e0       	ldi	r24, 0x04	; 4
    1968:	13 96       	adiw	r26, 0x03	; 3
    196a:	8c 93       	st	X, r24
    196c:	13 97       	sbiw	r26, 0x03	; 3
		g_SOS_TMR.Timer_Polling_Or_Interrupt = TIMER_INTERRUPT_MODE;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	12 96       	adiw	r26, 0x02	; 2
    1972:	8c 93       	st	X, r24
    1974:	12 97       	sbiw	r26, 0x02	; 2
		g_SOS_TMR.Timer_Cbk_ptr = g_SOS.Timer_Cbk_ptr;
    1976:	15 96       	adiw	r26, 0x05	; 5
    1978:	3c 93       	st	X, r19
    197a:	2e 93       	st	-X, r18
    197c:	14 97       	sbiw	r26, 0x04	; 4
		
		/* Select The Timer Channel & Set It's CallBack Function */
		switch(a_SOS_s->Timer_ID)
    197e:	81 81       	ldd	r24, Z+1	; 0x01
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	59 f0       	breq	.+22     	; 0x199a <SOS_Init+0x70>
    1984:	18 f0       	brcs	.+6      	; 0x198c <SOS_Init+0x62>
    1986:	82 30       	cpi	r24, 0x02	; 2
    1988:	81 f0       	breq	.+32     	; 0x19aa <SOS_Init+0x80>
    198a:	38 c0       	rjmp	.+112    	; 0x19fc <SOS_Init+0xd2>
		{
			case TIMER_CH0:
				g_SOS_TMR.Timer_CH_NO = TIMER_CH0;
    198c:	10 92 40 03 	sts	0x0340, r1
				TIMER0_SetCM(SOS_ISR_cbf);
    1990:	89 e7       	ldi	r24, 0x79	; 121
    1992:	9c e0       	ldi	r25, 0x0C	; 12
    1994:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <TIMER0_SetCM>
				break;
    1998:	0f c0       	rjmp	.+30     	; 0x19b8 <SOS_Init+0x8e>
			case TIMER_CH1:
				g_SOS_TMR.Timer_CH_NO = TIMER_CH1;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	80 93 40 03 	sts	0x0340, r24
				TIMER1_SetCM(SOS_ISR_cbf);
    19a0:	89 e7       	ldi	r24, 0x79	; 121
    19a2:	9c e0       	ldi	r25, 0x0C	; 12
    19a4:	0e 94 03 0b 	call	0x1606	; 0x1606 <TIMER1_SetCM>
				break;
    19a8:	07 c0       	rjmp	.+14     	; 0x19b8 <SOS_Init+0x8e>
			case TIMER_CH2:
				g_SOS_TMR.Timer_CH_NO = TIMER_CH2;
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	80 93 40 03 	sts	0x0340, r24
				TIMER2_SetCM(SOS_ISR_cbf);
    19b0:	89 e7       	ldi	r24, 0x79	; 121
    19b2:	9c e0       	ldi	r25, 0x0C	; 12
    19b4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <TIMER2_SetCM>
				errorStauts = TMU_ERROR + INVALID_IN;
				return errorStauts;
		}
		
		/* Apply The Settings & Start The TMU Timer Hardware Module */
		Timer_Init(&g_SOS_TMR);
    19b8:	80 e4       	ldi	r24, 0x40	; 64
    19ba:	93 e0       	ldi	r25, 0x03	; 3
    19bc:	0e 94 57 09 	call	0x12ae	; 0x12ae <Timer_Init>
		Timer_Start(g_SOS_TMR.Timer_CH_NO, TMR_Ticks);	
    19c0:	6a ef       	ldi	r22, 0xFA	; 250
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	80 91 40 03 	lds	r24, 0x0340
    19c8:	0e 94 bd 0a 	call	0x157a	; 0x157a <Timer_Start>
    19cc:	af e2       	ldi	r26, 0x2F	; 47
    19ce:	b2 e0       	ldi	r27, 0x02	; 2
    19d0:	e3 e2       	ldi	r30, 0x23	; 35
    19d2:	f2 e0       	ldi	r31, 0x02	; 2
    19d4:	80 e4       	ldi	r24, 0x40	; 64
    19d6:	93 e0       	ldi	r25, 0x03	; 3
		
		/*  Initialize The Request Buffer  */
		for(index = 0; index < REQUEST_BUFFER_LEN; index++)
		{
			g_RequestBuffer[index].State     = INACTIVE;
    19d8:	1c 92       	st	X, r1
			g_RequestBuffer[index].Task_Ptr  = NULL;
    19da:	11 82       	std	Z+1, r1	; 0x01
    19dc:	10 82       	st	Z, r1
			g_RequestBuffer[index].Pre_Hook  = NULL;
    19de:	13 82       	std	Z+3, r1	; 0x03
    19e0:	12 82       	std	Z+2, r1	; 0x02
			g_RequestBuffer[index].Post_Hook = NULL;
    19e2:	15 82       	std	Z+5, r1	; 0x05
    19e4:	14 82       	std	Z+4, r1	; 0x04
    19e6:	53 96       	adiw	r26, 0x13	; 19
    19e8:	73 96       	adiw	r30, 0x13	; 19
		/* Apply The Settings & Start The TMU Timer Hardware Module */
		Timer_Init(&g_SOS_TMR);
		Timer_Start(g_SOS_TMR.Timer_CH_NO, TMR_Ticks);	
		
		/*  Initialize The Request Buffer  */
		for(index = 0; index < REQUEST_BUFFER_LEN; index++)
    19ea:	e8 17       	cp	r30, r24
    19ec:	f9 07       	cpc	r31, r25
    19ee:	a1 f7       	brne	.-24     	; 0x19d8 <SOS_Init+0xae>
	else
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
	}
	return errorStauts;
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	08 95       	ret
	}
	/*-------------[ In Case Of TMU's Null Pointer ]-------------*/
	else
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
    19f6:	89 ec       	ldi	r24, 0xC9	; 201
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	08 95       	ret
				g_SOS_TMR.Timer_CH_NO = TIMER_CH2;
				TIMER2_SetCM(SOS_ISR_cbf);
				break;
			default:
				errorStauts = TMU_ERROR + INVALID_IN;
				return errorStauts;
    19fc:	8c ec       	ldi	r24, 0xCC	; 204
    19fe:	90 e0       	ldi	r25, 0x00	; 0
	{
		errorStauts = TMU_ERROR + NULL_PTR;
		return errorStauts;
	}
	return errorStauts;
}
    1a00:	08 95       	ret

00001a02 <Start_Task>:


ERROR_STATUS Start_Task(FunPtr a_TaskFun, uint16_t a_TaskID, uint8_t a_Periodic_OneShot, uint32_t a_Time, uint8_t a_Priority, FunPtr PreHook, FunPtr PostHook)
{
    1a02:	af 92       	push	r10
    1a04:	bf 92       	push	r11
    1a06:	cf 92       	push	r12
    1a08:	df 92       	push	r13
    1a0a:	ef 92       	push	r14
    1a0c:	0f 93       	push	r16
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	dc 01       	movw	r26, r24
	a_NewTask.Periodicity = a_Periodic_OneShot;
	a_NewTask.Periority = a_Priority;
	a_NewTask.Count = ZERO;
	a_NewTask.State = ACTIVE;
	
	if(g_SOS.State == INACTIVE || g_SOS.State == ACTIVE)
    1a16:	90 91 ab 00 	lds	r25, 0x00AB
    1a1a:	92 30       	cpi	r25, 0x02	; 2
    1a1c:	08 f0       	brcs	.+2      	; 0x1a20 <Start_Task+0x1e>
    1a1e:	88 c0       	rjmp	.+272    	; 0x1b30 <Start_Task+0x12e>
	{
		/*-------------[ Check All CBF Pointers Validity ]-------------*/
		if(a_TaskFun != NULL && PreHook != NULL && PostHook != NULL)
    1a20:	10 97       	sbiw	r26, 0x00	; 0
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <Start_Task+0x24>
    1a24:	88 c0       	rjmp	.+272    	; 0x1b36 <Start_Task+0x134>
    1a26:	c1 14       	cp	r12, r1
    1a28:	d1 04       	cpc	r13, r1
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <Start_Task+0x2c>
    1a2c:	87 c0       	rjmp	.+270    	; 0x1b3c <Start_Task+0x13a>
    1a2e:	a1 14       	cp	r10, r1
    1a30:	b1 04       	cpc	r11, r1
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <Start_Task+0x34>
    1a34:	86 c0       	rjmp	.+268    	; 0x1b42 <Start_Task+0x140>
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
    1a36:	80 91 03 02 	lds	r24, 0x0203
    1a3a:	90 91 04 02 	lds	r25, 0x0204
    1a3e:	0f 97       	sbiw	r24, 0x0f	; 15
    1a40:	41 f0       	breq	.+16     	; 0x1a52 <Start_Task+0x50>
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
    1a42:	80 91 34 02 	lds	r24, 0x0234
    1a46:	90 91 35 02 	lds	r25, 0x0235
    1a4a:	86 17       	cp	r24, r22
    1a4c:	97 07       	cpc	r25, r23
    1a4e:	c9 f5       	brne	.+114    	; 0x1ac2 <Start_Task+0xc0>
    1a50:	7b c0       	rjmp	.+246    	; 0x1b48 <Start_Task+0x146>
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Task & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].State == INACTIVE)
    1a52:	80 91 2f 02 	lds	r24, 0x022F
    1a56:	88 23       	and	r24, r24
    1a58:	41 f0       	breq	.+16     	; 0x1a6a <Start_Task+0x68>
    1a5a:	e2 e4       	ldi	r30, 0x42	; 66
    1a5c:	f2 e0       	ldi	r31, 0x02	; 2
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Task & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
				{
					if(g_RequestBuffer[index].State == INACTIVE)
    1a62:	50 81       	ld	r21, Z
    1a64:	51 11       	cpse	r21, r1
    1a66:	25 c0       	rjmp	.+74     	; 0x1ab2 <Start_Task+0xb0>
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <Start_Task+0x6c>
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
					{
						g_RequestBuffer[index] = a_NewTask;
    1a6e:	53 e1       	ldi	r21, 0x13	; 19
    1a70:	58 9f       	mul	r21, r24
    1a72:	f0 01       	movw	r30, r0
    1a74:	59 9f       	mul	r21, r25
    1a76:	f0 0d       	add	r31, r0
    1a78:	11 24       	eor	r1, r1
    1a7a:	ed 5d       	subi	r30, 0xDD	; 221
    1a7c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a7e:	b1 83       	std	Z+1, r27	; 0x01
    1a80:	a0 83       	st	Z, r26
    1a82:	d3 82       	std	Z+3, r13	; 0x03
    1a84:	c2 82       	std	Z+2, r12	; 0x02
    1a86:	b5 82       	std	Z+5, r11	; 0x05
    1a88:	a4 82       	std	Z+4, r10	; 0x04
    1a8a:	e6 82       	std	Z+6, r14	; 0x06
    1a8c:	47 83       	std	Z+7, r20	; 0x07
    1a8e:	00 87       	std	Z+8, r16	; 0x08
    1a90:	11 87       	std	Z+9, r17	; 0x09
    1a92:	22 87       	std	Z+10, r18	; 0x0a
    1a94:	33 87       	std	Z+11, r19	; 0x0b
    1a96:	21 e0       	ldi	r18, 0x01	; 1
    1a98:	24 87       	std	Z+12, r18	; 0x0c
    1a9a:	15 86       	std	Z+13, r1	; 0x0d
    1a9c:	16 86       	std	Z+14, r1	; 0x0e
    1a9e:	17 86       	std	Z+15, r1	; 0x0f
    1aa0:	10 8a       	std	Z+16, r1	; 0x10
    1aa2:	72 8b       	std	Z+18, r23	; 0x12
    1aa4:	61 8b       	std	Z+17, r22	; 0x11
						break;
					}
				}
				/*  If All Tasks In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
    1aa6:	0f 97       	sbiw	r24, 0x0f	; 15
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <Start_Task+0xaa>
    1aaa:	51 c0       	rjmp	.+162    	; 0x1b4e <Start_Task+0x14c>
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	53 c0       	rjmp	.+166    	; 0x1b58 <Start_Task+0x156>
		{
			/*  In Case OF Full Request Buffer  */
			if(g_ReqBuffer_Index == REQUEST_BUFFER_LEN)
			{
				/*  Search For Inactive Task & Overwrite It */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
    1ab2:	01 96       	adiw	r24, 0x01	; 1
    1ab4:	73 96       	adiw	r30, 0x13	; 19
    1ab6:	8f 30       	cpi	r24, 0x0F	; 15
    1ab8:	91 05       	cpc	r25, r1
    1aba:	99 f6       	brne	.-90     	; 0x1a62 <Start_Task+0x60>
				}
				/*  If All Tasks In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
				{
					a_errorStatus = TMU_ERROR + FULL_BUFFER;
					return a_errorStatus;
    1abc:	8f ec       	ldi	r24, 0xCF	; 207
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	4b c0       	rjmp	.+150    	; 0x1b58 <Start_Task+0x156>
    1ac2:	e7 e4       	ldi	r30, 0x47	; 71
    1ac4:	f2 e0       	ldi	r31, 0x02	; 2
    1ac6:	c1 e5       	ldi	r28, 0x51	; 81
    1ac8:	d3 e0       	ldi	r29, 0x03	; 3
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
    1aca:	80 81       	ld	r24, Z
    1acc:	91 81       	ldd	r25, Z+1	; 0x01
    1ace:	86 17       	cp	r24, r22
    1ad0:	97 07       	cpc	r25, r23
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <Start_Task+0xd4>
    1ad4:	3f c0       	rjmp	.+126    	; 0x1b54 <Start_Task+0x152>
    1ad6:	73 96       	adiw	r30, 0x13	; 19
			}
			/*  If There Still Space In The Request Buffer  */
			else
			{
				/*  Search The Buffer To Report Consumer ID Duplication IF Happened!  */
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
    1ad8:	ec 17       	cp	r30, r28
    1ada:	fd 07       	cpc	r31, r29
    1adc:	b1 f7       	brne	.-20     	; 0x1aca <Start_Task+0xc8>
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
					}
				}
				/* Add The New Consumer To The Request Buffer */
				g_RequestBuffer[g_ReqBuffer_Index++] = a_NewTask;				
    1ade:	80 91 03 02 	lds	r24, 0x0203
    1ae2:	90 91 04 02 	lds	r25, 0x0204
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	31 96       	adiw	r30, 0x01	; 1
    1aea:	f0 93 04 02 	sts	0x0204, r31
    1aee:	e0 93 03 02 	sts	0x0203, r30
    1af2:	53 e1       	ldi	r21, 0x13	; 19
    1af4:	58 9f       	mul	r21, r24
    1af6:	f0 01       	movw	r30, r0
    1af8:	59 9f       	mul	r21, r25
    1afa:	f0 0d       	add	r31, r0
    1afc:	11 24       	eor	r1, r1
    1afe:	ed 5d       	subi	r30, 0xDD	; 221
    1b00:	fd 4f       	sbci	r31, 0xFD	; 253
    1b02:	b1 83       	std	Z+1, r27	; 0x01
    1b04:	a0 83       	st	Z, r26
    1b06:	d3 82       	std	Z+3, r13	; 0x03
    1b08:	c2 82       	std	Z+2, r12	; 0x02
    1b0a:	b5 82       	std	Z+5, r11	; 0x05
    1b0c:	a4 82       	std	Z+4, r10	; 0x04
    1b0e:	e6 82       	std	Z+6, r14	; 0x06
    1b10:	47 83       	std	Z+7, r20	; 0x07
    1b12:	00 87       	std	Z+8, r16	; 0x08
    1b14:	11 87       	std	Z+9, r17	; 0x09
    1b16:	22 87       	std	Z+10, r18	; 0x0a
    1b18:	33 87       	std	Z+11, r19	; 0x0b
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	84 87       	std	Z+12, r24	; 0x0c
    1b1e:	15 86       	std	Z+13, r1	; 0x0d
    1b20:	16 86       	std	Z+14, r1	; 0x0e
    1b22:	17 86       	std	Z+15, r1	; 0x0f
    1b24:	10 8a       	std	Z+16, r1	; 0x10
    1b26:	72 8b       	std	Z+18, r23	; 0x12
    1b28:	61 8b       	std	Z+17, r22	; 0x11
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <Start_Task+0x156>
	}
	/*-------------[ In Case The TMU IS Not Active (Not Initialized Yet) ]-------------*/
	else
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
    1b30:	8a ec       	ldi	r24, 0xCA	; 202
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	11 c0       	rjmp	.+34     	; 0x1b58 <Start_Task+0x156>
		}
		/*-------------[ In Case Of Consumer's Null Pointer CBF ]-------------*/
		else
		{
			a_errorStatus = TMU_ERROR + NULL_PTR;
			return a_errorStatus;
    1b36:	89 ec       	ldi	r24, 0xC9	; 201
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	0e c0       	rjmp	.+28     	; 0x1b58 <Start_Task+0x156>
    1b3c:	89 ec       	ldi	r24, 0xC9	; 201
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0b c0       	rjmp	.+22     	; 0x1b58 <Start_Task+0x156>
    1b42:	89 ec       	ldi	r24, 0xC9	; 201
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	08 c0       	rjmp	.+16     	; 0x1b58 <Start_Task+0x156>
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
					{
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
    1b48:	8e ec       	ldi	r24, 0xCE	; 206
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	05 c0       	rjmp	.+10     	; 0x1b58 <Start_Task+0x156>
				}
				/*  If All Tasks In The Buffer Are Active & No Space If Available */
				if(index == REQUEST_BUFFER_LEN)
				{
					a_errorStatus = TMU_ERROR + FULL_BUFFER;
					return a_errorStatus;
    1b4e:	8f ec       	ldi	r24, 0xCF	; 207
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <Start_Task+0x156>
				for(index = 0; index < REQUEST_BUFFER_LEN; index++)
				{
					if(g_RequestBuffer[index].TaskID == a_TaskID)
					{
						a_errorStatus = TMU_ERROR + MULTI_START;
						return a_errorStatus;
    1b54:	8e ec       	ldi	r24, 0xCE	; 206
    1b56:	90 e0       	ldi	r25, 0x00	; 0
	{
		a_errorStatus = TMU_ERROR + NOT_INIT;
		return a_errorStatus;
	}
	return a_errorStatus;	
}
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	1f 91       	pop	r17
    1b5e:	0f 91       	pop	r16
    1b60:	ef 90       	pop	r14
    1b62:	df 90       	pop	r13
    1b64:	cf 90       	pop	r12
    1b66:	bf 90       	pop	r11
    1b68:	af 90       	pop	r10
    1b6a:	08 95       	ret

00001b6c <SOS_Run>:
	/*-------------[ Consumer Not Found In Request Buffer ]-------------*/
	return errorStatus;
}

void SOS_Run(void)
{
    1b6c:	8f 92       	push	r8
    1b6e:	9f 92       	push	r9
    1b70:	bf 92       	push	r11
    1b72:	cf 92       	push	r12
    1b74:	df 92       	push	r13
    1b76:	ef 92       	push	r14
    1b78:	ff 92       	push	r15
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
	sint16_t a_s16_index = ZERO, a_temp = ZERO;
	uint8_t a_u8_ReadyIndex = ZERO, a_counter = ZERO;
	
	/*-------------[ Every TMU Tick, Go Through The Request Buffer ]-------------*/
	if(g_TMR_Ticks_Changed)
    1b82:	80 91 02 02 	lds	r24, 0x0202
    1b86:	88 23       	and	r24, r24
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <SOS_Run+0x20>
    1b8a:	e8 c0       	rjmp	.+464    	; 0x1d5c <SOS_Run+0x1f0>
    1b8c:	0f 2e       	mov	r0, r31
    1b8e:	f5 e0       	ldi	r31, 0x05	; 5
    1b90:	8f 2e       	mov	r8, r31
    1b92:	f2 e0       	ldi	r31, 0x02	; 2
    1b94:	9f 2e       	mov	r9, r31
    1b96:	f0 2d       	mov	r31, r0
    1b98:	23 e2       	ldi	r18, 0x23	; 35
    1b9a:	32 e0       	ldi	r19, 0x02	; 2
    1b9c:	f4 01       	movw	r30, r8
	{
		/* Initialize The Ready Tasks Buffer */
		for(a_s16_index = ZERO; a_s16_index < REQUEST_BUFFER_LEN; a_s16_index++)
		{
			g_ReadyTasks[a_s16_index] = -1;
    1b9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ba0:	9f ef       	ldi	r25, 0xFF	; 255
    1ba2:	81 93       	st	Z+, r24
    1ba4:	91 93       	st	Z+, r25
	
	/*-------------[ Every TMU Tick, Go Through The Request Buffer ]-------------*/
	if(g_TMR_Ticks_Changed)
	{
		/* Initialize The Ready Tasks Buffer */
		for(a_s16_index = ZERO; a_s16_index < REQUEST_BUFFER_LEN; a_s16_index++)
    1ba6:	e2 17       	cp	r30, r18
    1ba8:	f3 07       	cpc	r31, r19
    1baa:	d9 f7       	brne	.-10     	; 0x1ba2 <SOS_Run+0x36>
    1bac:	ef e2       	ldi	r30, 0x2F	; 47
    1bae:	f2 e0       	ldi	r31, 0x02	; 2
    1bb0:	2a e2       	ldi	r18, 0x2A	; 42
    1bb2:	32 e0       	ldi	r19, 0x02	; 2
    1bb4:	b1 2c       	mov	r11, r1
    1bb6:	40 e0       	ldi	r20, 0x00	; 0
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
		}
		
		/* Go Through The Tasks Request Buffer To Add All Ready Tasks To Be Executed */
		for(a_s16_index = ZERO; a_s16_index < REQUEST_BUFFER_LEN; a_s16_index++)
		{
			g_RequestBuffer[a_s16_index].Count += g_SOS_TickTime;
    1bba:	00 91 00 02 	lds	r16, 0x0200
    1bbe:	10 91 01 02 	lds	r17, 0x0201
    1bc2:	bf 01       	movw	r22, r30
    1bc4:	81 81       	ldd	r24, Z+1	; 0x01
    1bc6:	92 81       	ldd	r25, Z+2	; 0x02
    1bc8:	a3 81       	ldd	r26, Z+3	; 0x03
    1bca:	b4 81       	ldd	r27, Z+4	; 0x04
    1bcc:	80 0f       	add	r24, r16
    1bce:	91 1f       	adc	r25, r17
    1bd0:	a1 1d       	adc	r26, r1
    1bd2:	b1 1d       	adc	r27, r1
    1bd4:	81 83       	std	Z+1, r24	; 0x01
    1bd6:	92 83       	std	Z+2, r25	; 0x02
    1bd8:	a3 83       	std	Z+3, r26	; 0x03
    1bda:	b4 83       	std	Z+4, r27	; 0x04
			
			/*-------------[ IF Consumer's Due Time Is Met!  ]-------------*/
			if(g_RequestBuffer[a_s16_index].Count >= g_RequestBuffer[a_s16_index].Time)
    1bdc:	e9 01       	movw	r28, r18
    1bde:	c9 80       	ldd	r12, Y+1	; 0x01
    1be0:	da 80       	ldd	r13, Y+2	; 0x02
    1be2:	eb 80       	ldd	r14, Y+3	; 0x03
    1be4:	fc 80       	ldd	r15, Y+4	; 0x04
    1be6:	8c 15       	cp	r24, r12
    1be8:	9d 05       	cpc	r25, r13
    1bea:	ae 05       	cpc	r26, r14
    1bec:	bf 05       	cpc	r27, r15
    1bee:	30 f1       	brcs	.+76     	; 0x1c3c <SOS_Run+0xd0>
			{	
				/* IF The Consumer Function IS Periodic */
				if(g_RequestBuffer[a_s16_index].Periodicity == PERIODIC && g_RequestBuffer[a_s16_index].State == ACTIVE)
    1bf0:	88 81       	ld	r24, Y
    1bf2:	81 30       	cpi	r24, 0x01	; 1
    1bf4:	a1 f4       	brne	.+40     	; 0x1c1e <SOS_Run+0xb2>
    1bf6:	80 81       	ld	r24, Z
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	01 f5       	brne	.+64     	; 0x1c3c <SOS_Run+0xd0>
				{
					g_RequestBuffer[a_s16_index].Count = ZERO;
    1bfc:	db 01       	movw	r26, r22
    1bfe:	11 96       	adiw	r26, 0x01	; 1
    1c00:	1d 92       	st	X+, r1
    1c02:	1d 92       	st	X+, r1
    1c04:	1d 92       	st	X+, r1
    1c06:	1c 92       	st	X, r1
    1c08:	14 97       	sbiw	r26, 0x04	; 4
					g_ReadyTasks[a_u8_ReadyIndex++] = a_s16_index;
    1c0a:	ab 2d       	mov	r26, r11
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	aa 0f       	add	r26, r26
    1c10:	bb 1f       	adc	r27, r27
    1c12:	ab 5f       	subi	r26, 0xFB	; 251
    1c14:	bd 4f       	sbci	r27, 0xFD	; 253
    1c16:	4d 93       	st	X+, r20
    1c18:	5c 93       	st	X, r21
    1c1a:	b3 94       	inc	r11
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <SOS_Run+0xd0>
				}
				
				/* Else IF The Consumer Function IS OneShot (Non-Periodic) */
				else if (g_RequestBuffer[a_s16_index].Periodicity == ONESHOT && g_RequestBuffer[a_s16_index].State == ACTIVE)
    1c1e:	81 11       	cpse	r24, r1
    1c20:	0d c0       	rjmp	.+26     	; 0x1c3c <SOS_Run+0xd0>
    1c22:	80 81       	ld	r24, Z
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	51 f4       	brne	.+20     	; 0x1c3c <SOS_Run+0xd0>
				{
					g_RequestBuffer[a_s16_index].State = INACTIVE;
    1c28:	10 82       	st	Z, r1
					g_ReadyTasks[a_u8_ReadyIndex++] = a_s16_index;
    1c2a:	ab 2d       	mov	r26, r11
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	aa 0f       	add	r26, r26
    1c30:	bb 1f       	adc	r27, r27
    1c32:	ab 5f       	subi	r26, 0xFB	; 251
    1c34:	bd 4f       	sbci	r27, 0xFD	; 253
    1c36:	4d 93       	st	X+, r20
    1c38:	5c 93       	st	X, r21
    1c3a:	b3 94       	inc	r11
		{
			g_ReadyTasks[a_s16_index] = -1;
		}
		
		/* Go Through The Tasks Request Buffer To Add All Ready Tasks To Be Executed */
		for(a_s16_index = ZERO; a_s16_index < REQUEST_BUFFER_LEN; a_s16_index++)
    1c3c:	4f 5f       	subi	r20, 0xFF	; 255
    1c3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c40:	73 96       	adiw	r30, 0x13	; 19
    1c42:	2d 5e       	subi	r18, 0xED	; 237
    1c44:	3f 4f       	sbci	r19, 0xFF	; 255
    1c46:	4f 30       	cpi	r20, 0x0F	; 15
    1c48:	51 05       	cpc	r21, r1
    1c4a:	09 f0       	breq	.+2      	; 0x1c4e <SOS_Run+0xe2>
    1c4c:	b6 cf       	rjmp	.-148    	; 0x1bba <SOS_Run+0x4e>
					g_ReadyTasks[a_u8_ReadyIndex++] = a_s16_index;
				}
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
    1c4e:	80 91 05 02 	lds	r24, 0x0205
    1c52:	90 91 06 02 	lds	r25, 0x0206
    1c56:	01 96       	adiw	r24, 0x01	; 1
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <SOS_Run+0xf0>
    1c5a:	7e c0       	rjmp	.+252    	; 0x1d58 <SOS_Run+0x1ec>
    1c5c:	05 e0       	ldi	r16, 0x05	; 5
    1c5e:	12 e0       	ldi	r17, 0x02	; 2
    1c60:	61 e0       	ldi	r22, 0x01	; 1
    1c62:	70 e0       	ldi	r23, 0x00	; 0
		{
			for (a_counter = a_s16_index + 1; g_ReadyTasks[a_counter] != -1; a_counter++)
			{
				if(g_RequestBuffer[g_ReadyTasks[a_s16_index]].Periority > g_RequestBuffer[g_ReadyTasks[a_counter]].Periority)
    1c64:	0f 2e       	mov	r0, r31
    1c66:	f3 e1       	ldi	r31, 0x13	; 19
    1c68:	ef 2e       	mov	r14, r31
    1c6a:	f0 2d       	mov	r31, r0
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
		{
			for (a_counter = a_s16_index + 1; g_ReadyTasks[a_counter] != -1; a_counter++)
    1c6c:	f6 2e       	mov	r15, r22
    1c6e:	cb 01       	movw	r24, r22
    1c70:	e8 01       	movw	r28, r16
    1c72:	2a 81       	ldd	r18, Y+2	; 0x02
    1c74:	3b 81       	ldd	r19, Y+3	; 0x03
    1c76:	2f 3f       	cpi	r18, 0xFF	; 255
    1c78:	ef ef       	ldi	r30, 0xFF	; 255
    1c7a:	3e 07       	cpc	r19, r30
    1c7c:	a1 f1       	breq	.+104    	; 0x1ce6 <SOS_Run+0x17a>
			{
				if(g_RequestBuffer[g_ReadyTasks[a_s16_index]].Periority > g_RequestBuffer[g_ReadyTasks[a_counter]].Periority)
    1c7e:	c8 80       	ld	r12, Y
    1c80:	d9 80       	ldd	r13, Y+1	; 0x01
    1c82:	ec 9c       	mul	r14, r12
    1c84:	d0 01       	movw	r26, r0
    1c86:	ed 9c       	mul	r14, r13
    1c88:	b0 0d       	add	r27, r0
    1c8a:	11 24       	eor	r1, r1
    1c8c:	ad 5d       	subi	r26, 0xDD	; 221
    1c8e:	bd 4f       	sbci	r27, 0xFD	; 253
    1c90:	e2 9e       	mul	r14, r18
    1c92:	f0 01       	movw	r30, r0
    1c94:	e3 9e       	mul	r14, r19
    1c96:	f0 0d       	add	r31, r0
    1c98:	11 24       	eor	r1, r1
    1c9a:	ed 5d       	subi	r30, 0xDD	; 221
    1c9c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c9e:	16 96       	adiw	r26, 0x06	; 6
    1ca0:	ac 91       	ld	r26, X
    1ca2:	e6 81       	ldd	r30, Z+6	; 0x06
    1ca4:	ea 17       	cp	r30, r26
    1ca6:	48 f4       	brcc	.+18     	; 0x1cba <SOS_Run+0x14e>
				{
					a_temp = g_ReadyTasks[a_s16_index];
					g_ReadyTasks[a_s16_index] = g_ReadyTasks[a_counter];
    1ca8:	39 83       	std	Y+1, r19	; 0x01
    1caa:	28 83       	st	Y, r18
					g_ReadyTasks[a_counter] = a_temp;
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	eb 5f       	subi	r30, 0xFB	; 251
    1cb4:	fd 4f       	sbci	r31, 0xFD	; 253
    1cb6:	d1 82       	std	Z+1, r13	; 0x01
    1cb8:	c0 82       	st	Z, r12
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
		{
			for (a_counter = a_s16_index + 1; g_ReadyTasks[a_counter] != -1; a_counter++)
    1cba:	f3 94       	inc	r15
    1cbc:	8f 2d       	mov	r24, r15
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	ee 0f       	add	r30, r30
    1cc4:	ff 1f       	adc	r31, r31
    1cc6:	eb 5f       	subi	r30, 0xFB	; 251
    1cc8:	fd 4f       	sbci	r31, 0xFD	; 253
    1cca:	20 81       	ld	r18, Z
    1ccc:	31 81       	ldd	r19, Z+1	; 0x01
    1cce:	2f 3f       	cpi	r18, 0xFF	; 255
    1cd0:	ff ef       	ldi	r31, 0xFF	; 255
    1cd2:	3f 07       	cpc	r19, r31
    1cd4:	a1 f6       	brne	.-88     	; 0x1c7e <SOS_Run+0x112>
    1cd6:	6f 5f       	subi	r22, 0xFF	; 255
    1cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cda:	0e 5f       	subi	r16, 0xFE	; 254
    1cdc:	1f 4f       	sbci	r17, 0xFF	; 255
					g_ReadyTasks[a_u8_ReadyIndex++] = a_s16_index;
				}
			}
		}
		/* Sort The Ready Tasks Based On Priority */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	19 f6       	brne	.-122    	; 0x1c6c <SOS_Run+0x100>
					g_ReadyTasks[a_counter] = a_temp;
				}					
			}
		}
		/* Execute The Ready Tasks One By One (In Priority Order) */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
    1ce6:	80 91 05 02 	lds	r24, 0x0205
    1cea:	90 91 06 02 	lds	r25, 0x0206
    1cee:	8f 3f       	cpi	r24, 0xFF	; 255
    1cf0:	4f ef       	ldi	r20, 0xFF	; 255
    1cf2:	94 07       	cpc	r25, r20
    1cf4:	89 f1       	breq	.+98     	; 0x1d58 <SOS_Run+0x1ec>
		{
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Pre_Hook();
    1cf6:	13 e1       	ldi	r17, 0x13	; 19
    1cf8:	18 9f       	mul	r17, r24
    1cfa:	f0 01       	movw	r30, r0
    1cfc:	19 9f       	mul	r17, r25
    1cfe:	f0 0d       	add	r31, r0
    1d00:	11 24       	eor	r1, r1
    1d02:	ed 5d       	subi	r30, 0xDD	; 221
    1d04:	fd 4f       	sbci	r31, 0xFD	; 253
    1d06:	02 80       	ldd	r0, Z+2	; 0x02
    1d08:	f3 81       	ldd	r31, Z+3	; 0x03
    1d0a:	e0 2d       	mov	r30, r0
    1d0c:	09 95       	icall
    1d0e:	74 01       	movw	r14, r8
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Task_Ptr();
    1d10:	d4 01       	movw	r26, r8
    1d12:	8d 91       	ld	r24, X+
    1d14:	9d 91       	ld	r25, X+
    1d16:	4d 01       	movw	r8, r26
    1d18:	18 9f       	mul	r17, r24
    1d1a:	f0 01       	movw	r30, r0
    1d1c:	19 9f       	mul	r17, r25
    1d1e:	f0 0d       	add	r31, r0
    1d20:	11 24       	eor	r1, r1
    1d22:	ed 5d       	subi	r30, 0xDD	; 221
    1d24:	fd 4f       	sbci	r31, 0xFD	; 253
    1d26:	01 90       	ld	r0, Z+
    1d28:	f0 81       	ld	r31, Z
    1d2a:	e0 2d       	mov	r30, r0
    1d2c:	09 95       	icall
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Post_Hook();
    1d2e:	e7 01       	movw	r28, r14
    1d30:	88 81       	ld	r24, Y
    1d32:	99 81       	ldd	r25, Y+1	; 0x01
    1d34:	18 9f       	mul	r17, r24
    1d36:	f0 01       	movw	r30, r0
    1d38:	19 9f       	mul	r17, r25
    1d3a:	f0 0d       	add	r31, r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	ed 5d       	subi	r30, 0xDD	; 221
    1d40:	fd 4f       	sbci	r31, 0xFD	; 253
    1d42:	04 80       	ldd	r0, Z+4	; 0x04
    1d44:	f5 81       	ldd	r31, Z+5	; 0x05
    1d46:	e0 2d       	mov	r30, r0
    1d48:	09 95       	icall
					g_ReadyTasks[a_counter] = a_temp;
				}					
			}
		}
		/* Execute The Ready Tasks One By One (In Priority Order) */
		for(a_s16_index = ZERO; g_ReadyTasks[a_s16_index] != -1; a_s16_index++)
    1d4a:	f4 01       	movw	r30, r8
    1d4c:	80 81       	ld	r24, Z
    1d4e:	91 81       	ldd	r25, Z+1	; 0x01
    1d50:	8f 3f       	cpi	r24, 0xFF	; 255
    1d52:	ff ef       	ldi	r31, 0xFF	; 255
    1d54:	9f 07       	cpc	r25, r31
    1d56:	81 f6       	brne	.-96     	; 0x1cf8 <SOS_Run+0x18c>
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Pre_Hook();
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Task_Ptr();
			g_RequestBuffer[g_ReadyTasks[a_s16_index]].Post_Hook();
		}		
		
		g_TMR_Ticks_Changed = FALSE;
    1d58:	10 92 02 02 	sts	0x0202, r1
	}
}
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	ff 90       	pop	r15
    1d66:	ef 90       	pop	r14
    1d68:	df 90       	pop	r13
    1d6a:	cf 90       	pop	r12
    1d6c:	bf 90       	pop	r11
    1d6e:	9f 90       	pop	r9
    1d70:	8f 90       	pop	r8
    1d72:	08 95       	ret

00001d74 <__tablejump2__>:
    1d74:	ee 0f       	add	r30, r30
    1d76:	ff 1f       	adc	r31, r31
    1d78:	05 90       	lpm	r0, Z+
    1d7a:	f4 91       	lpm	r31, Z
    1d7c:	e0 2d       	mov	r30, r0
    1d7e:	09 94       	ijmp

00001d80 <_exit>:
    1d80:	f8 94       	cli

00001d82 <__stop_program>:
    1d82:	ff cf       	rjmp	.-2      	; 0x1d82 <__stop_program>
