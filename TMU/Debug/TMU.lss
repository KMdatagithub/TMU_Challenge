
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000a04  00000a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009a  00800062  00800062  00000a9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000acc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f8c  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b1  00000000  00000000  00002ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007da  00000000  00000000  0000367d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000724  00000000  00000000  00003e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009eb  00000000  00000000  0000457c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bba  00000000  00000000  00004f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00006b21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_4>
  14:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_7>
  20:	0c 94 9c 02 	jmp	0x538	; 0x538 <__vector_8>
  24:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_9>
  28:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_10>
  2c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_11>
  30:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_12>
  34:	0c 94 41 03 	jmp	0x682	; 0x682 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3f       	cpi	r26, 0xFC	; 252
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  8a:	0c 94 00 05 	jmp	0xa00	; 0xa00 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <omgplzzz>:
void txnotify(enum_BcmStatus st){}
	
/* RX Completion Notification Routine */
void omgplzzz(enum_BcmStatus st)
{	
	msg_len = BCM_Get_msgLEN();
  92:	0e 94 db 04 	call	0x9b6	; 0x9b6 <BCM_Get_msgLEN>
  96:	80 93 62 00 	sts	0x0062, r24
	UART_Write(rxBuffer[a_index++]);
  9a:	e0 91 63 00 	lds	r30, 0x0063
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	8e 0f       	add	r24, r30
  a2:	80 93 63 00 	sts	0x0063, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	ea 56       	subi	r30, 0x6A	; 106
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	80 81       	ld	r24, Z
  ae:	0e 94 33 03 	call	0x666	; 0x666 <UART_Write>
  b2:	08 95       	ret

000000b4 <UART_ISR_TXcbf>:
		g_UART_TXindex = ZERO;
	}
}
void UART_ISR_TXcbf(void)
{
	if(a_index < msg_len)
  b4:	90 91 63 00 	lds	r25, 0x0063
  b8:	80 91 62 00 	lds	r24, 0x0062
  bc:	98 17       	cp	r25, r24
  be:	68 f4       	brcc	.+26     	; 0xda <UART_ISR_TXcbf+0x26>
	{	
		UART_Write(rxBuffer[a_index++]);	
  c0:	e0 91 63 00 	lds	r30, 0x0063
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	8e 0f       	add	r24, r30
  c8:	80 93 63 00 	sts	0x0063, r24
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	ea 56       	subi	r30, 0x6A	; 106
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	80 81       	ld	r24, Z
  d4:	0e 94 33 03 	call	0x666	; 0x666 <UART_Write>
  d8:	08 95       	ret
	}
	else if(a_index == msg_len)
  da:	90 91 63 00 	lds	r25, 0x0063
  de:	80 91 62 00 	lds	r24, 0x0062
  e2:	98 13       	cpse	r25, r24
  e4:	09 c0       	rjmp	.+18     	; 0xf8 <UART_ISR_TXcbf+0x44>
	{
		UART_Write('\n');
  e6:	8a e0       	ldi	r24, 0x0A	; 10
  e8:	0e 94 33 03 	call	0x666	; 0x666 <UART_Write>
		a_index++;
  ec:	80 91 63 00 	lds	r24, 0x0063
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	80 93 63 00 	sts	0x0063, r24
  f6:	08 95       	ret
	}
	else
	{
		a_index = ZERO;
  f8:	10 92 63 00 	sts	0x0063, r1
  fc:	08 95       	ret

000000fe <ECU2_Application>:
}

void ECU2_Application(void)
{
	/*-------------[ BCM Initialization ]-------------*/
	BCM1.BCM_CH_ID = 1;
  fe:	e3 e9       	ldi	r30, 0x93	; 147
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	81 83       	std	Z+1, r24	; 0x01
	BCM1.Mode = BCM_Rx_Mode;
 106:	80 83       	st	Z, r24
	BCM1.Protocol = SPI_Protocol;
 108:	82 83       	std	Z+2, r24	; 0x02
	BCM_Init(&BCM1);
 10a:	cf 01       	movw	r24, r30
 10c:	0e 94 48 04 	call	0x890	; 0x890 <BCM_Init>
	BCM_Setup_RxBuffer(&BCM1, 50, rxBuffer, omgplzzz);
 110:	29 e4       	ldi	r18, 0x49	; 73
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	46 e9       	ldi	r20, 0x96	; 150
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	62 e3       	ldi	r22, 0x32	; 50
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	83 e9       	ldi	r24, 0x93	; 147
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 cd 04 	call	0x99a	; 0x99a <BCM_Setup_RxBuffer>
	
	/*-------------[ UART Initialization ]-------------*/
	UART1.baudrate   = 9600;
 124:	e8 e8       	ldi	r30, 0x88	; 136
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	95 e2       	ldi	r25, 0x25	; 37
 12c:	a0 e0       	ldi	r26, 0x00	; 0
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	87 83       	std	Z+7, r24	; 0x07
 132:	90 87       	std	Z+8, r25	; 0x08
 134:	a1 87       	std	Z+9, r26	; 0x09
 136:	b2 87       	std	Z+10, r27	; 0x0a
	UART1.dataBits   = UART_Bits_8;
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	81 83       	std	Z+1, r24	; 0x01
	UART1.stopBits   = StopBits_1;
 13c:	14 82       	std	Z+4, r1	; 0x04
	UART1.parity     = No_Parity;
 13e:	12 82       	std	Z+2, r1	; 0x02
	UART1.sampleEdge = RisingEdg;
 140:	15 82       	std	Z+5, r1	; 0x05
	UART1.uartSync   = UART_Async;
 142:	13 82       	std	Z+3, r1	; 0x03
	UART1.mode       = UART_TX;
 144:	88 e0       	ldi	r24, 0x08	; 8
 146:	80 83       	st	Z, r24
	UART1.uartInterrupts = OnTx;
 148:	80 e4       	ldi	r24, 0x40	; 64
 14a:	86 83       	std	Z+6, r24	; 0x06
	UART_SetTX(UART_ISR_TXcbf);
 14c:	8a e5       	ldi	r24, 0x5A	; 90
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 37 03 	call	0x66e	; 0x66e <UART_SetTX>
	UART_Init(&UART1);
 154:	88 e8       	ldi	r24, 0x88	; 136
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 c5 02 	call	0x58a	; 0x58a <UART_Init>
	
	/*-------------[ SUPER LOOP ]-------------*/
	while (1)
	{
		BCM_Rx_Dispatcher();
 15c:	0e 94 2d 04 	call	0x85a	; 0x85a <BCM_Rx_Dispatcher>
	}
 160:	fd cf       	rjmp	.-6      	; 0x15c <ECU2_Application+0x5e>

00000162 <main>:
}

int main(void)
{
	ECU2_Application();
 162:	0e 94 7f 00 	call	0xfe	; 0xfe <ECU2_Application>

00000166 <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
 166:	fc 01       	movw	r30, r24
	ERROR_STATUS errorStatus = E_NOK;
	if(DIO_info != NULL)
 168:	89 2b       	or	r24, r25
 16a:	c9 f1       	breq	.+114    	; 0x1de <DIO_init+0x78>
	{
		switch(DIO_info->GPIO)
 16c:	80 81       	ld	r24, Z
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	91 f0       	breq	.+36     	; 0x196 <DIO_init+0x30>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_init+0x18>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	d9 f0       	breq	.+54     	; 0x1ae <DIO_init+0x48>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	29 f1       	breq	.+74     	; 0x1c6 <DIO_init+0x60>
 17c:	32 c0       	rjmp	.+100    	; 0x1e2 <DIO_init+0x7c>
		{
			case GPIOA :
			PORTA_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTA_DIR);
 17e:	81 81       	ldd	r24, Z+1	; 0x01
 180:	2a b3       	in	r18, 0x1a	; 26
 182:	98 2f       	mov	r25, r24
 184:	90 95       	com	r25
 186:	29 23       	and	r18, r25
 188:	92 81       	ldd	r25, Z+2	; 0x02
 18a:	98 23       	and	r25, r24
 18c:	82 2f       	mov	r24, r18
 18e:	89 2b       	or	r24, r25
 190:	8a bb       	out	0x1a, r24	; 26
			errorStatus = E_OK;
 192:	80 e0       	ldi	r24, 0x00	; 0
			break;
 194:	08 95       	ret
			case GPIOB :
			PORTB_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTB_DIR);
 196:	81 81       	ldd	r24, Z+1	; 0x01
 198:	27 b3       	in	r18, 0x17	; 23
 19a:	98 2f       	mov	r25, r24
 19c:	90 95       	com	r25
 19e:	29 23       	and	r18, r25
 1a0:	92 81       	ldd	r25, Z+2	; 0x02
 1a2:	98 23       	and	r25, r24
 1a4:	82 2f       	mov	r24, r18
 1a6:	89 2b       	or	r24, r25
 1a8:	87 bb       	out	0x17, r24	; 23
			errorStatus = E_OK;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1ac:	08 95       	ret
			case GPIOC :
			PORTC_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTC_DIR);
 1ae:	81 81       	ldd	r24, Z+1	; 0x01
 1b0:	24 b3       	in	r18, 0x14	; 20
 1b2:	98 2f       	mov	r25, r24
 1b4:	90 95       	com	r25
 1b6:	29 23       	and	r18, r25
 1b8:	92 81       	ldd	r25, Z+2	; 0x02
 1ba:	98 23       	and	r25, r24
 1bc:	82 2f       	mov	r24, r18
 1be:	89 2b       	or	r24, r25
 1c0:	84 bb       	out	0x14, r24	; 20
			errorStatus = E_OK;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1c4:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
 1c6:	81 81       	ldd	r24, Z+1	; 0x01
 1c8:	21 b3       	in	r18, 0x11	; 17
 1ca:	98 2f       	mov	r25, r24
 1cc:	90 95       	com	r25
 1ce:	29 23       	and	r18, r25
 1d0:	92 81       	ldd	r25, Z+2	; 0x02
 1d2:	98 23       	and	r25, r24
 1d4:	82 2f       	mov	r24, r18
 1d6:	89 2b       	or	r24, r25
 1d8:	81 bb       	out	0x11, r24	; 17
			errorStatus = E_OK;
 1da:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1dc:	08 95       	ret
			break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	08 95       	ret
			case GPIOD :
			PORTD_DIR = (DIO_info->dir & DIO_info->pins) | (~(DIO_info->pins) & PORTD_DIR);
			errorStatus = E_OK;
			break;
			default :
			errorStatus = E_NOK;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 1e4:	08 95       	ret

000001e6 <_SPIInitMaster>:
#include "SPI__.h"

 void (*PTR_CALL_BACK)(void);
 volatile uint8_t g_u8_RxFlag = TRUE;

extern void _SPIInitMaster(SPI_cfg_s * a_SPI_cfg){
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <_SPIInitMaster+0x6>
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <_SPIInitMaster+0x8>
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <_SPIInitMaster+0xa>
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	fc 01       	movw	r30, r24
		DIO_Cfg_s SPI_output_pins ;
		
	
	
		/* clear status register */
		SPSR = ZERO ;
 1f6:	1e b8       	out	0x0e, r1	; 14
		
		/* clear control mode */
		
		SPCR = ZERO ;
 1f8:	1d b8       	out	0x0d, r1	; 13
		
		/* master or slave bit 4 */
		SPCR |= Master_SPI ; 
 1fa:	6c 9a       	sbi	0x0d, 4	; 13
		
		/*set clock*/
		 
		SPCR|= a_SPI_cfg-> clockSPI ;
 1fc:	9d b1       	in	r25, 0x0d	; 13
 1fe:	80 81       	ld	r24, Z
 200:	89 2b       	or	r24, r25
 202:	8d b9       	out	0x0d, r24	; 13
		
		/* data order update */
		
		SPCR|= a_SPI_cfg-> dataorder ;
 204:	9d b1       	in	r25, 0x0d	; 13
 206:	82 81       	ldd	r24, Z+2	; 0x02
 208:	89 2b       	or	r24, r25
 20a:	8d b9       	out	0x0d, r24	; 13
		
		/* set phase bit2 and polarity bit3 */
		
		 SPCR |= a_SPI_cfg-> phasePolarityMode;
 20c:	9d b1       	in	r25, 0x0d	; 13
 20e:	81 81       	ldd	r24, Z+1	; 0x01
 210:	89 2b       	or	r24, r25
 212:	8d b9       	out	0x0d, r24	; 13
		
		/* set interrupt  */
		
		SPCR |= INTERRUPT_SPI ;
 214:	6f 9a       	sbi	0x0d, 7	; 13
		
		/*set interrupt call back function */
		
		PTR_CALL_BACK = a_SPI_cfg->ptr_call_back ;
 216:	83 81       	ldd	r24, Z+3	; 0x03
 218:	94 81       	ldd	r25, Z+4	; 0x04
 21a:	90 93 fb 00 	sts	0x00FB, r25
 21e:	80 93 fa 00 	sts	0x00FA, r24
	//SS   bit4 OUTPUT
	//MOSI bit5 OUTPUT
	//MISO bit6 INPUT
	//SCK  bit7 OUTPUT

	SPI_input_pins.GPIO = SPI_PORT ;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	89 83       	std	Y+1, r24	; 0x01
	SPI_input_pins.pins = MISO_PIN ;
 226:	90 e4       	ldi	r25, 0x40	; 64
 228:	9a 83       	std	Y+2, r25	; 0x02
	SPI_input_pins.dir = INPUT ;
 22a:	1b 82       	std	Y+3, r1	; 0x03
	
	SPI_output_pins.GPIO = SPI_PORT ;
 22c:	8c 83       	std	Y+4, r24	; 0x04
	SPI_output_pins.pins =  SCK_PIN|MOSI_PIN|SS_PIN ;
 22e:	80 eb       	ldi	r24, 0xB0	; 176
 230:	8d 83       	std	Y+5, r24	; 0x05
	SPI_output_pins.dir = OUTPUT ;
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	8e 83       	std	Y+6, r24	; 0x06
	
	DIO_init(&SPI_output_pins);
 236:	ce 01       	movw	r24, r28
 238:	04 96       	adiw	r24, 0x04	; 4
 23a:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_init>
	DIO_init(&SPI_input_pins);
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_init>
	
		
	/// enable SPI bit 6
	
	sei();
 246:	78 94       	sei
	SPCR |= Enable_SPI ;
 248:	6e 9a       	sbi	0x0d, 6	; 13
	
}
 24a:	26 96       	adiw	r28, 0x06	; 6
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <_SPIInitSlave>:

extern void _SPIInitSlave(SPI_cfg_s * a_SPI_cfg ){
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	00 d0       	rcall	.+0      	; 0x262 <_SPIInitSlave+0x6>
 262:	00 d0       	rcall	.+0      	; 0x264 <_SPIInitSlave+0x8>
 264:	00 d0       	rcall	.+0      	; 0x266 <_SPIInitSlave+0xa>
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	fc 01       	movw	r30, r24
	DIO_Cfg_s SPI_output_pins ;
			
			
	
	//// clear status register
	SPSR = ZERO ;
 26c:	1e b8       	out	0x0e, r1	; 14
	
	/// clear control mode
	
	SPCR = ZERO ;
 26e:	1d b8       	out	0x0d, r1	; 13
	
	
	// master or slave bit 4
	SPCR |= Slave_SPI ;
 270:	8d b1       	in	r24, 0x0d	; 13
 272:	8d b9       	out	0x0d, r24	; 13
	
	/// data order update
	
	SPCR|=a_SPI_cfg-> dataorder ;
 274:	9d b1       	in	r25, 0x0d	; 13
 276:	82 81       	ldd	r24, Z+2	; 0x02
 278:	89 2b       	or	r24, r25
 27a:	8d b9       	out	0x0d, r24	; 13
	
	//set clock
	
	SPCR |= a_SPI_cfg-> clockSPI ;
 27c:	9d b1       	in	r25, 0x0d	; 13
 27e:	80 81       	ld	r24, Z
 280:	89 2b       	or	r24, r25
 282:	8d b9       	out	0x0d, r24	; 13
	
	// set phase and polarity
	SPCR |=a_SPI_cfg -> phasePolarityMode ;
 284:	9d b1       	in	r25, 0x0d	; 13
 286:	81 81       	ldd	r24, Z+1	; 0x01
 288:	89 2b       	or	r24, r25
 28a:	8d b9       	out	0x0d, r24	; 13
	
	/* set interrupt  */
	SPCR |= INTERRUPT_SPI ;
 28c:	6f 9a       	sbi	0x0d, 7	; 13
	
	/*set interrupt call back function */
		
	PTR_CALL_BACK = a_SPI_cfg->ptr_call_back ;
 28e:	83 81       	ldd	r24, Z+3	; 0x03
 290:	94 81       	ldd	r25, Z+4	; 0x04
 292:	90 93 fb 00 	sts	0x00FB, r25
 296:	80 93 fa 00 	sts	0x00FA, r24
	//SS   bit4 INPUT
	//MOSI bit5 INPUT
	//MISO bit6 OUTPUT
	//SCK  bit7 INPUT

	SPI_input_pins.GPIO = SPI_PORT ;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	89 83       	std	Y+1, r24	; 0x01
	SPI_input_pins.pins =  SCK_PIN|MOSI_PIN|SS_PIN ;
 29e:	90 eb       	ldi	r25, 0xB0	; 176
 2a0:	9a 83       	std	Y+2, r25	; 0x02
	SPI_input_pins.dir = INPUT ;
 2a2:	1b 82       	std	Y+3, r1	; 0x03

	SPI_output_pins.GPIO = SPI_PORT ;
 2a4:	8c 83       	std	Y+4, r24	; 0x04
	SPI_output_pins.pins = MISO_PIN ;
 2a6:	80 e4       	ldi	r24, 0x40	; 64
 2a8:	8d 83       	std	Y+5, r24	; 0x05
	SPI_output_pins.dir = OUTPUT ;
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	8e 83       	std	Y+6, r24	; 0x06


	DIO_init(&SPI_output_pins);
 2ae:	ce 01       	movw	r24, r28
 2b0:	04 96       	adiw	r24, 0x04	; 4
 2b2:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_init>
	DIO_init(&SPI_input_pins);
 2b6:	ce 01       	movw	r24, r28
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_init>
	

	/// enable SPI bit 6
	sei();
 2be:	78 94       	sei
	
	SPCR |= Enable_SPI ;
 2c0:	6e 9a       	sbi	0x0d, 6	; 13
	
		
	
}
 2c2:	26 96       	adiw	r28, 0x06	; 6
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	f8 94       	cli
 2c8:	de bf       	out	0x3e, r29	; 62
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	cd bf       	out	0x3d, r28	; 61
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <_SPIRead>:
	}
	return state;
}

extern ERROR_STATUS _SPIRead(uint8_t* data)
{
 2d4:	fc 01       	movw	r30, r24
	uint8_t state = E_NOK;
	if(g_u8_RxFlag == TRUE)
 2d6:	90 91 60 00 	lds	r25, 0x0060
 2da:	91 30       	cpi	r25, 0x01	; 1
 2dc:	31 f4       	brne	.+12     	; 0x2ea <_SPIRead+0x16>
	{
		*data = SPDR;
 2de:	8f b1       	in	r24, 0x0f	; 15
 2e0:	80 83       	st	Z, r24
		g_u8_RxFlag = FALSE;
 2e2:	10 92 60 00 	sts	0x0060, r1
		state = E_OK;
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	08 95       	ret
	return state;
}

extern ERROR_STATUS _SPIRead(uint8_t* data)
{
	uint8_t state = E_NOK;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
		*data = SPDR;
		g_u8_RxFlag = FALSE;
		state = E_OK;
	}
	return state;
}
 2ec:	08 95       	ret

000002ee <SPI_SetCBF>:


void SPI_SetCBF(FunPtr isr_ptr)
{
	PTR_CALL_BACK = isr_ptr;
 2ee:	90 93 fb 00 	sts	0x00FB, r25
 2f2:	80 93 fa 00 	sts	0x00FA, r24
 2f6:	08 95       	ret

000002f8 <__vector_12>:
}

ISR(SPI_STC_vect)
{
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	2f 93       	push	r18
 304:	3f 93       	push	r19
 306:	4f 93       	push	r20
 308:	5f 93       	push	r21
 30a:	6f 93       	push	r22
 30c:	7f 93       	push	r23
 30e:	8f 93       	push	r24
 310:	9f 93       	push	r25
 312:	af 93       	push	r26
 314:	bf 93       	push	r27
 316:	ef 93       	push	r30
 318:	ff 93       	push	r31
	g_u8_RxFlag = TRUE;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	80 93 60 00 	sts	0x0060, r24
	PTR_CALL_BACK();
 320:	e0 91 fa 00 	lds	r30, 0x00FA
 324:	f0 91 fb 00 	lds	r31, 0x00FB
 328:	09 95       	icall
}
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <__vector_11>:
/*===================================================*/
/*---------------[ Timers ISR Handlers ]-------------*/
/*===================================================*/

ISR(TIMER0_OVF_vect)
{
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	2f 93       	push	r18
 358:	3f 93       	push	r19
 35a:	4f 93       	push	r20
 35c:	5f 93       	push	r21
 35e:	6f 93       	push	r22
 360:	7f 93       	push	r23
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	af 93       	push	r26
 368:	bf 93       	push	r27
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	if(Ptr_Timer0_OV != NULL)
 36e:	e0 91 6e 00 	lds	r30, 0x006E
 372:	f0 91 6f 00 	lds	r31, 0x006F
 376:	30 97       	sbiw	r30, 0x00	; 0
 378:	09 f0       	breq	.+2      	; 0x37c <__vector_11+0x30>
	{
		Ptr_Timer0_OV();
 37a:	09 95       	icall
	}
}
 37c:	ff 91       	pop	r31
 37e:	ef 91       	pop	r30
 380:	bf 91       	pop	r27
 382:	af 91       	pop	r26
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	7f 91       	pop	r23
 38a:	6f 91       	pop	r22
 38c:	5f 91       	pop	r21
 38e:	4f 91       	pop	r20
 390:	3f 91       	pop	r19
 392:	2f 91       	pop	r18
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	2f 93       	push	r18
 3aa:	3f 93       	push	r19
 3ac:	4f 93       	push	r20
 3ae:	5f 93       	push	r21
 3b0:	6f 93       	push	r22
 3b2:	7f 93       	push	r23
 3b4:	8f 93       	push	r24
 3b6:	9f 93       	push	r25
 3b8:	af 93       	push	r26
 3ba:	bf 93       	push	r27
 3bc:	ef 93       	push	r30
 3be:	ff 93       	push	r31
	if(Ptr_Timer0_CM != NULL)
 3c0:	e0 91 6c 00 	lds	r30, 0x006C
 3c4:	f0 91 6d 00 	lds	r31, 0x006D
 3c8:	30 97       	sbiw	r30, 0x00	; 0
 3ca:	09 f0       	breq	.+2      	; 0x3ce <__vector_10+0x30>
	{
		Ptr_Timer0_CM();
 3cc:	09 95       	icall
	}
}
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	bf 91       	pop	r27
 3d4:	af 91       	pop	r26
 3d6:	9f 91       	pop	r25
 3d8:	8f 91       	pop	r24
 3da:	7f 91       	pop	r23
 3dc:	6f 91       	pop	r22
 3de:	5f 91       	pop	r21
 3e0:	4f 91       	pop	r20
 3e2:	3f 91       	pop	r19
 3e4:	2f 91       	pop	r18
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
	if (Ptr_Timer2_OV != NULL)
 412:	e0 91 66 00 	lds	r30, 0x0066
 416:	f0 91 67 00 	lds	r31, 0x0067
 41a:	30 97       	sbiw	r30, 0x00	; 0
 41c:	09 f0       	breq	.+2      	; 0x420 <__vector_5+0x30>
	{
		Ptr_Timer2_OV();
 41e:	09 95       	icall
	}
}
 420:	ff 91       	pop	r31
 422:	ef 91       	pop	r30
 424:	bf 91       	pop	r27
 426:	af 91       	pop	r26
 428:	9f 91       	pop	r25
 42a:	8f 91       	pop	r24
 42c:	7f 91       	pop	r23
 42e:	6f 91       	pop	r22
 430:	5f 91       	pop	r21
 432:	4f 91       	pop	r20
 434:	3f 91       	pop	r19
 436:	2f 91       	pop	r18
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	7f 93       	push	r23
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	af 93       	push	r26
 45e:	bf 93       	push	r27
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
	if (Ptr_Timer2_CM != NULL)
 464:	e0 91 64 00 	lds	r30, 0x0064
 468:	f0 91 65 00 	lds	r31, 0x0065
 46c:	30 97       	sbiw	r30, 0x00	; 0
 46e:	09 f0       	breq	.+2      	; 0x472 <__vector_4+0x30>
	{
		Ptr_Timer2_CM();
 470:	09 95       	icall
	}
}
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	bf 91       	pop	r27
 478:	af 91       	pop	r26
 47a:	9f 91       	pop	r25
 47c:	8f 91       	pop	r24
 47e:	7f 91       	pop	r23
 480:	6f 91       	pop	r22
 482:	5f 91       	pop	r21
 484:	4f 91       	pop	r20
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 494:	1f 92       	push	r1
 496:	0f 92       	push	r0
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	0f 92       	push	r0
 49c:	11 24       	eor	r1, r1
 49e:	2f 93       	push	r18
 4a0:	3f 93       	push	r19
 4a2:	4f 93       	push	r20
 4a4:	5f 93       	push	r21
 4a6:	6f 93       	push	r22
 4a8:	7f 93       	push	r23
 4aa:	8f 93       	push	r24
 4ac:	9f 93       	push	r25
 4ae:	af 93       	push	r26
 4b0:	bf 93       	push	r27
 4b2:	ef 93       	push	r30
 4b4:	ff 93       	push	r31
	if (Ptr_Timer1_OV != NULL)
 4b6:	e0 91 6a 00 	lds	r30, 0x006A
 4ba:	f0 91 6b 00 	lds	r31, 0x006B
 4be:	30 97       	sbiw	r30, 0x00	; 0
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__vector_9+0x30>
	{
		Ptr_Timer1_OV();
 4c2:	09 95       	icall
	}
}
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	bf 91       	pop	r27
 4ca:	af 91       	pop	r26
 4cc:	9f 91       	pop	r25
 4ce:	8f 91       	pop	r24
 4d0:	7f 91       	pop	r23
 4d2:	6f 91       	pop	r22
 4d4:	5f 91       	pop	r21
 4d6:	4f 91       	pop	r20
 4d8:	3f 91       	pop	r19
 4da:	2f 91       	pop	r18
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	2f 93       	push	r18
 4f2:	3f 93       	push	r19
 4f4:	4f 93       	push	r20
 4f6:	5f 93       	push	r21
 4f8:	6f 93       	push	r22
 4fa:	7f 93       	push	r23
 4fc:	8f 93       	push	r24
 4fe:	9f 93       	push	r25
 500:	af 93       	push	r26
 502:	bf 93       	push	r27
 504:	ef 93       	push	r30
 506:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 508:	e0 91 68 00 	lds	r30, 0x0068
 50c:	f0 91 69 00 	lds	r31, 0x0069
 510:	30 97       	sbiw	r30, 0x00	; 0
 512:	09 f0       	breq	.+2      	; 0x516 <__vector_7+0x30>
	{
		Ptr_Timer1_CM();
 514:	09 95       	icall
	}	
}
 516:	ff 91       	pop	r31
 518:	ef 91       	pop	r30
 51a:	bf 91       	pop	r27
 51c:	af 91       	pop	r26
 51e:	9f 91       	pop	r25
 520:	8f 91       	pop	r24
 522:	7f 91       	pop	r23
 524:	6f 91       	pop	r22
 526:	5f 91       	pop	r21
 528:	4f 91       	pop	r20
 52a:	3f 91       	pop	r19
 52c:	2f 91       	pop	r18
 52e:	0f 90       	pop	r0
 530:	0f be       	out	0x3f, r0	; 63
 532:	0f 90       	pop	r0
 534:	1f 90       	pop	r1
 536:	18 95       	reti

00000538 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 538:	1f 92       	push	r1
 53a:	0f 92       	push	r0
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	0f 92       	push	r0
 540:	11 24       	eor	r1, r1
 542:	2f 93       	push	r18
 544:	3f 93       	push	r19
 546:	4f 93       	push	r20
 548:	5f 93       	push	r21
 54a:	6f 93       	push	r22
 54c:	7f 93       	push	r23
 54e:	8f 93       	push	r24
 550:	9f 93       	push	r25
 552:	af 93       	push	r26
 554:	bf 93       	push	r27
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 55a:	e0 91 68 00 	lds	r30, 0x0068
 55e:	f0 91 69 00 	lds	r31, 0x0069
 562:	30 97       	sbiw	r30, 0x00	; 0
 564:	09 f0       	breq	.+2      	; 0x568 <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 566:	09 95       	icall
	}
}
 568:	ff 91       	pop	r31
 56a:	ef 91       	pop	r30
 56c:	bf 91       	pop	r27
 56e:	af 91       	pop	r26
 570:	9f 91       	pop	r25
 572:	8f 91       	pop	r24
 574:	7f 91       	pop	r23
 576:	6f 91       	pop	r22
 578:	5f 91       	pop	r21
 57a:	4f 91       	pop	r20
 57c:	3f 91       	pop	r19
 57e:	2f 91       	pop	r18
 580:	0f 90       	pop	r0
 582:	0f be       	out	0x3f, r0	; 63
 584:	0f 90       	pop	r0
 586:	1f 90       	pop	r1
 588:	18 95       	reti

0000058a <UART_Init>:
FunPtr Ptr_UART_TX = NULL;
FunPtr Ptr_UART_RX = NULL;


void UART_Init(UART_cfg* uart_cfg)
{
 58a:	cf 92       	push	r12
 58c:	df 92       	push	r13
 58e:	ef 92       	push	r14
 590:	ff 92       	push	r15
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	ec 01       	movw	r28, r24
	uint8_t uart_control = 0x80;
	// Set The UART Baud Rate
	UBRRL = ((F_cpu/(16*uart_cfg->baudrate)) - 1);
 598:	8f 81       	ldd	r24, Y+7	; 0x07
 59a:	98 85       	ldd	r25, Y+8	; 0x08
 59c:	a9 85       	ldd	r26, Y+9	; 0x09
 59e:	ba 85       	ldd	r27, Y+10	; 0x0a
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	aa 1f       	adc	r26, r26
 5a6:	bb 1f       	adc	r27, r27
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	aa 1f       	adc	r26, r26
 5ae:	bb 1f       	adc	r27, r27
 5b0:	9c 01       	movw	r18, r24
 5b2:	ad 01       	movw	r20, r26
 5b4:	22 0f       	add	r18, r18
 5b6:	33 1f       	adc	r19, r19
 5b8:	44 1f       	adc	r20, r20
 5ba:	55 1f       	adc	r21, r21
 5bc:	22 0f       	add	r18, r18
 5be:	33 1f       	adc	r19, r19
 5c0:	44 1f       	adc	r20, r20
 5c2:	55 1f       	adc	r21, r21
 5c4:	0f 2e       	mov	r0, r31
 5c6:	c1 2c       	mov	r12, r1
 5c8:	f4 e2       	ldi	r31, 0x24	; 36
 5ca:	df 2e       	mov	r13, r31
 5cc:	f4 ef       	ldi	r31, 0xF4	; 244
 5ce:	ef 2e       	mov	r14, r31
 5d0:	f1 2c       	mov	r15, r1
 5d2:	f0 2d       	mov	r31, r0
 5d4:	c7 01       	movw	r24, r14
 5d6:	b6 01       	movw	r22, r12
 5d8:	0e 94 de 04 	call	0x9bc	; 0x9bc <__udivmodsi4>
 5dc:	21 50       	subi	r18, 0x01	; 1
 5de:	29 b9       	out	0x09, r18	; 9
	UBRRH = ((F_cpu/(16*uart_cfg->baudrate)) - 1)>>8;
 5e0:	8f 81       	ldd	r24, Y+7	; 0x07
 5e2:	98 85       	ldd	r25, Y+8	; 0x08
 5e4:	a9 85       	ldd	r26, Y+9	; 0x09
 5e6:	ba 85       	ldd	r27, Y+10	; 0x0a
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	aa 1f       	adc	r26, r26
 5ee:	bb 1f       	adc	r27, r27
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	aa 1f       	adc	r26, r26
 5f6:	bb 1f       	adc	r27, r27
 5f8:	9c 01       	movw	r18, r24
 5fa:	ad 01       	movw	r20, r26
 5fc:	22 0f       	add	r18, r18
 5fe:	33 1f       	adc	r19, r19
 600:	44 1f       	adc	r20, r20
 602:	55 1f       	adc	r21, r21
 604:	22 0f       	add	r18, r18
 606:	33 1f       	adc	r19, r19
 608:	44 1f       	adc	r20, r20
 60a:	55 1f       	adc	r21, r21
 60c:	c7 01       	movw	r24, r14
 60e:	b6 01       	movw	r22, r12
 610:	0e 94 de 04 	call	0x9bc	; 0x9bc <__udivmodsi4>
 614:	da 01       	movw	r26, r20
 616:	c9 01       	movw	r24, r18
 618:	01 97       	sbiw	r24, 0x01	; 1
 61a:	a1 09       	sbc	r26, r1
 61c:	b1 09       	sbc	r27, r1
 61e:	89 2f       	mov	r24, r25
 620:	9a 2f       	mov	r25, r26
 622:	ab 2f       	mov	r26, r27
 624:	bb 27       	eor	r27, r27
 626:	80 bd       	out	0x20, r24	; 32
	// Set The UART Mode OF Operation
	UCSRB |= (uart_cfg->mode | uart_cfg->uartInterrupts);
 628:	9a b1       	in	r25, 0x0a	; 10
 62a:	88 81       	ld	r24, Y
 62c:	89 2b       	or	r24, r25
 62e:	9e 81       	ldd	r25, Y+6	; 0x06
 630:	89 2b       	or	r24, r25
 632:	8a b9       	out	0x0a, r24	; 10
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
	UCSRC |= uart_control;
 634:	20 b5       	in	r18, 0x20	; 32
	// Set The UART Data Sampling Edge
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
 636:	8b 81       	ldd	r24, Y+3	; 0x03
 638:	9d 81       	ldd	r25, Y+5	; 0x05
 63a:	89 2b       	or	r24, r25
 63c:	80 68       	ori	r24, 0x80	; 128
 63e:	99 81       	ldd	r25, Y+1	; 0x01
 640:	89 2b       	or	r24, r25
 642:	9a 81       	ldd	r25, Y+2	; 0x02
 644:	89 2b       	or	r24, r25
 646:	9c 81       	ldd	r25, Y+4	; 0x04
 648:	89 2b       	or	r24, r25
	UCSRC |= uart_control;
 64a:	82 2b       	or	r24, r18
 64c:	80 bd       	out	0x20, r24	; 32
	SREG  |= (0x80);
 64e:	8f b7       	in	r24, 0x3f	; 63
 650:	80 68       	ori	r24, 0x80	; 128
 652:	8f bf       	out	0x3f, r24	; 63
}
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	ff 90       	pop	r15
 65a:	ef 90       	pop	r14
 65c:	df 90       	pop	r13
 65e:	cf 90       	pop	r12
 660:	08 95       	ret

00000662 <UART_Read>:

uint8_t UART_Read(void)
{
	return UDR;
 662:	8c b1       	in	r24, 0x0c	; 12
}
 664:	08 95       	ret

00000666 <UART_Write>:

void UART_Write(uint8_t data)
{
	// Wait For Empty Transmit Buffer
	while(!(UCSRA & (1<<5)));
 666:	5d 9b       	sbis	0x0b, 5	; 11
 668:	fe cf       	rjmp	.-4      	; 0x666 <UART_Write>
	// Write The Data To The Buffer & Send!
	UDR = data;
 66a:	8c b9       	out	0x0c, r24	; 12
 66c:	08 95       	ret

0000066e <UART_SetTX>:
/*-----------[ Timers Set CallBack Functions ]-----------*/
/*=======================================================*/

void UART_SetTX(FunPtr Ptr_ISR)
{
	Ptr_UART_TX = Ptr_ISR;
 66e:	90 93 73 00 	sts	0x0073, r25
 672:	80 93 72 00 	sts	0x0072, r24
 676:	08 95       	ret

00000678 <UART_SetRX>:
}

void UART_SetRX(FunPtr Ptr_ISR)
{
	Ptr_UART_RX = Ptr_ISR;
 678:	90 93 71 00 	sts	0x0071, r25
 67c:	80 93 70 00 	sts	0x0070, r24
 680:	08 95       	ret

00000682 <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
 682:	1f 92       	push	r1
 684:	0f 92       	push	r0
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	0f 92       	push	r0
 68a:	11 24       	eor	r1, r1
 68c:	2f 93       	push	r18
 68e:	3f 93       	push	r19
 690:	4f 93       	push	r20
 692:	5f 93       	push	r21
 694:	6f 93       	push	r22
 696:	7f 93       	push	r23
 698:	8f 93       	push	r24
 69a:	9f 93       	push	r25
 69c:	af 93       	push	r26
 69e:	bf 93       	push	r27
 6a0:	ef 93       	push	r30
 6a2:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
 6a4:	e0 91 70 00 	lds	r30, 0x0070
 6a8:	f0 91 71 00 	lds	r31, 0x0071
 6ac:	30 97       	sbiw	r30, 0x00	; 0
 6ae:	09 f0       	breq	.+2      	; 0x6b2 <__vector_13+0x30>
	{
		Ptr_UART_RX();
 6b0:	09 95       	icall
	}
}
 6b2:	ff 91       	pop	r31
 6b4:	ef 91       	pop	r30
 6b6:	bf 91       	pop	r27
 6b8:	af 91       	pop	r26
 6ba:	9f 91       	pop	r25
 6bc:	8f 91       	pop	r24
 6be:	7f 91       	pop	r23
 6c0:	6f 91       	pop	r22
 6c2:	5f 91       	pop	r21
 6c4:	4f 91       	pop	r20
 6c6:	3f 91       	pop	r19
 6c8:	2f 91       	pop	r18
 6ca:	0f 90       	pop	r0
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	0f 90       	pop	r0
 6d0:	1f 90       	pop	r1
 6d2:	18 95       	reti

000006d4 <__vector_15>:

ISR(USART_TXC_vect)
{
 6d4:	1f 92       	push	r1
 6d6:	0f 92       	push	r0
 6d8:	0f b6       	in	r0, 0x3f	; 63
 6da:	0f 92       	push	r0
 6dc:	11 24       	eor	r1, r1
 6de:	2f 93       	push	r18
 6e0:	3f 93       	push	r19
 6e2:	4f 93       	push	r20
 6e4:	5f 93       	push	r21
 6e6:	6f 93       	push	r22
 6e8:	7f 93       	push	r23
 6ea:	8f 93       	push	r24
 6ec:	9f 93       	push	r25
 6ee:	af 93       	push	r26
 6f0:	bf 93       	push	r27
 6f2:	ef 93       	push	r30
 6f4:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
 6f6:	e0 91 72 00 	lds	r30, 0x0072
 6fa:	f0 91 73 00 	lds	r31, 0x0073
 6fe:	30 97       	sbiw	r30, 0x00	; 0
 700:	09 f0       	breq	.+2      	; 0x704 <__vector_15+0x30>
	{
		Ptr_UART_TX();
 702:	09 95       	icall
	}
 704:	ff 91       	pop	r31
 706:	ef 91       	pop	r30
 708:	bf 91       	pop	r27
 70a:	af 91       	pop	r26
 70c:	9f 91       	pop	r25
 70e:	8f 91       	pop	r24
 710:	7f 91       	pop	r23
 712:	6f 91       	pop	r22
 714:	5f 91       	pop	r21
 716:	4f 91       	pop	r20
 718:	3f 91       	pop	r19
 71a:	2f 91       	pop	r18
 71c:	0f 90       	pop	r0
 71e:	0f be       	out	0x3f, r0	; 63
 720:	0f 90       	pop	r0
 722:	1f 90       	pop	r1
 724:	18 95       	reti

00000726 <BCM_Tx_ISR_cbf>:
/*===================================================================================*/

/*------------[ BCM CallBacks]------------*/
/* BCM Transmit ISR Call-Back Function */
static void BCM_Tx_ISR_cbf(void)
{	if (g_BCM_EXcfg.FSM_State == SendingByte_State)
 726:	80 91 7c 00 	lds	r24, 0x007C
 72a:	82 30       	cpi	r24, 0x02	; 2
 72c:	49 f4       	brne	.+18     	; 0x740 <BCM_Tx_ISR_cbf+0x1a>
	{
		g_BCM_EXcfg.Count++;
 72e:	e8 e7       	ldi	r30, 0x78	; 120
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	84 85       	ldd	r24, Z+12	; 0x0c
 734:	95 85       	ldd	r25, Z+13	; 0x0d
 736:	01 96       	adiw	r24, 0x01	; 1
 738:	95 87       	std	Z+13, r25	; 0x0d
 73a:	84 87       	std	Z+12, r24	; 0x0c
		g_BCM_EXcfg.FSM_State = SendComplete_State;
 73c:	83 e0       	ldi	r24, 0x03	; 3
 73e:	84 83       	std	Z+4, r24	; 0x04
 740:	08 95       	ret

00000742 <BCM_Rx_ISR_cbf>:
	}
}

/* BCM Receive ISR Call-Back Function */
static void BCM_Rx_ISR_cbf(void)
{
 742:	cf 93       	push	r28
 744:	df 93       	push	r29
 746:	1f 92       	push	r1
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
	uint8_t a_RX_Byte;
	switch(g_BCM_EXcfg.Protocol)
 74c:	80 91 7a 00 	lds	r24, 0x007A
 750:	88 23       	and	r24, r24
 752:	19 f0       	breq	.+6      	; 0x75a <BCM_Rx_ISR_cbf+0x18>
 754:	81 30       	cpi	r24, 0x01	; 1
 756:	29 f0       	breq	.+10     	; 0x762 <BCM_Rx_ISR_cbf+0x20>
 758:	08 c0       	rjmp	.+16     	; 0x76a <BCM_Rx_ISR_cbf+0x28>
	{
		case UART_Protocol:
		{
			a_RX_Byte = UART_Read();
 75a:	0e 94 31 03 	call	0x662	; 0x662 <UART_Read>
 75e:	89 83       	std	Y+1, r24	; 0x01
			break;
 760:	04 c0       	rjmp	.+8      	; 0x76a <BCM_Rx_ISR_cbf+0x28>
		}
		case SPI_Protocol:
		{
			_SPIRead(&a_RX_Byte);
 762:	ce 01       	movw	r24, r28
 764:	01 96       	adiw	r24, 0x01	; 1
 766:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_SPIRead>
		default:
			break;
	}
	
	/* Debug Point */
	TCNT2 = a_RX_Byte;
 76a:	89 81       	ldd	r24, Y+1	; 0x01
 76c:	84 bd       	out	0x24, r24	; 36
	/* Debug Point */
	
	/* Read & Check The BCM Received ID */
	if(g_BCM_EXcfg.Count == 0)
 76e:	80 91 84 00 	lds	r24, 0x0084
 772:	90 91 85 00 	lds	r25, 0x0085
 776:	00 97       	sbiw	r24, 0x00	; 0
 778:	b1 f4       	brne	.+44     	; 0x7a6 <BCM_Rx_ISR_cbf+0x64>
	{
		g_Rx_ID = a_RX_Byte;
 77a:	89 81       	ldd	r24, Y+1	; 0x01
 77c:	80 93 77 00 	sts	0x0077, r24
	
		if(g_Rx_ID == BCM_ID)
 780:	90 91 77 00 	lds	r25, 0x0077
 784:	91 34       	cpi	r25, 0x41	; 65
 786:	61 f4       	brne	.+24     	; 0x7a0 <BCM_Rx_ISR_cbf+0x5e>
		{
			/* Debug Point */
			TCNT0 = a_RX_Byte;
 788:	82 bf       	out	0x32, r24	; 50
			/* Debug Point */
			
			g_ID_State = S_OK;
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	80 93 76 00 	sts	0x0076, r24
			g_BCM_EXcfg.Count++;
 790:	e8 e7       	ldi	r30, 0x78	; 120
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	84 85       	ldd	r24, Z+12	; 0x0c
 796:	95 85       	ldd	r25, Z+13	; 0x0d
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	95 87       	std	Z+13, r25	; 0x0d
 79c:	84 87       	std	Z+12, r24	; 0x0c
 79e:	59 c0       	rjmp	.+178    	; 0x852 <BCM_Rx_ISR_cbf+0x110>
		}
		else
		{
			g_ID_State = S_NOK;
 7a0:	10 92 76 00 	sts	0x0076, r1
 7a4:	56 c0       	rjmp	.+172    	; 0x852 <BCM_Rx_ISR_cbf+0x110>
	}
	/*-------------------[ ID IS CHECKED ]------------------*/
	/*------------------------------------------------------*/
	/*-------------------[ Save & CHECK MSG Len ]------------------*/
	/* Read & Check The BCM Received Data Length */
	else if(g_BCM_EXcfg.Count == 1)
 7a6:	81 30       	cpi	r24, 0x01	; 1
 7a8:	91 05       	cpc	r25, r1
 7aa:	41 f5       	brne	.+80     	; 0x7fc <BCM_Rx_ISR_cbf+0xba>
	{
		if(a_RX_Byte > g_BCM_EXcfg.Buf_Len)
 7ac:	89 81       	ldd	r24, Y+1	; 0x01
 7ae:	48 2f       	mov	r20, r24
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	20 91 80 00 	lds	r18, 0x0080
 7b6:	30 91 81 00 	lds	r19, 0x0081
 7ba:	24 17       	cp	r18, r20
 7bc:	35 07       	cpc	r19, r21
 7be:	78 f4       	brcc	.+30     	; 0x7de <BCM_Rx_ISR_cbf+0x9c>
		{
			g_LEN_State = S_NOK;
 7c0:	10 92 75 00 	sts	0x0075, r1
			g_BCM_EXcfg.FSM_State = IDLE_State;
 7c4:	e8 e7       	ldi	r30, 0x78	; 120
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	84 83       	std	Z+4, r24	; 0x04
			g_BCM_EXcfg.Count = ZERO;
 7cc:	15 86       	std	Z+13, r1	; 0x0d
 7ce:	14 86       	std	Z+12, r1	; 0x0c
			g_BCM_EXcfg.BCM_notify_cbf(g_LEN_State);
 7d0:	80 91 75 00 	lds	r24, 0x0075
 7d4:	06 84       	ldd	r0, Z+14	; 0x0e
 7d6:	f7 85       	ldd	r31, Z+15	; 0x0f
 7d8:	e0 2d       	mov	r30, r0
 7da:	09 95       	icall
 7dc:	3a c0       	rjmp	.+116    	; 0x852 <BCM_Rx_ISR_cbf+0x110>
		}
		else
		{
			/* Debug Point */
			TCNT0 = a_RX_Byte;
 7de:	82 bf       	out	0x32, r24	; 50
			/* Debug Point */
			
			g_BCM_EXcfg.MSG_Len = a_RX_Byte;
 7e0:	e8 e7       	ldi	r30, 0x78	; 120
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	89 81       	ldd	r24, Y+1	; 0x01
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	93 87       	std	Z+11, r25	; 0x0b
 7ea:	82 87       	std	Z+10, r24	; 0x0a
			g_BCM_EXcfg.Count++;
 7ec:	84 85       	ldd	r24, Z+12	; 0x0c
 7ee:	95 85       	ldd	r25, Z+13	; 0x0d
 7f0:	01 96       	adiw	r24, 0x01	; 1
 7f2:	95 87       	std	Z+13, r25	; 0x0d
 7f4:	84 87       	std	Z+12, r24	; 0x0c
			g_BCM_EXcfg.FSM_State = ReceivingByte_State;
 7f6:	84 e0       	ldi	r24, 0x04	; 4
 7f8:	84 83       	std	Z+4, r24	; 0x04
 7fa:	2b c0       	rjmp	.+86     	; 0x852 <BCM_Rx_ISR_cbf+0x110>
		}
	}
	else if(g_BCM_EXcfg.Count-2 < g_BCM_EXcfg.MSG_Len)
 7fc:	9c 01       	movw	r18, r24
 7fe:	22 50       	subi	r18, 0x02	; 2
 800:	31 09       	sbc	r19, r1
 802:	40 91 82 00 	lds	r20, 0x0082
 806:	50 91 83 00 	lds	r21, 0x0083
 80a:	24 17       	cp	r18, r20
 80c:	35 07       	cpc	r19, r21
 80e:	a8 f4       	brcc	.+42     	; 0x83a <BCM_Rx_ISR_cbf+0xf8>
	{
		g_BCM_EXcfg.Buffer[g_BCM_EXcfg.Count-2] = a_RX_Byte;
 810:	89 81       	ldd	r24, Y+1	; 0x01
 812:	e8 e7       	ldi	r30, 0x78	; 120
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	46 81       	ldd	r20, Z+6	; 0x06
 818:	57 81       	ldd	r21, Z+7	; 0x07
 81a:	da 01       	movw	r26, r20
 81c:	a2 0f       	add	r26, r18
 81e:	b3 1f       	adc	r27, r19
 820:	8c 93       	st	X, r24
		g_CS_Calculated += a_RX_Byte;
 822:	90 91 74 00 	lds	r25, 0x0074
 826:	89 81       	ldd	r24, Y+1	; 0x01
 828:	89 0f       	add	r24, r25
 82a:	80 93 74 00 	sts	0x0074, r24
		g_BCM_EXcfg.Count++;
 82e:	84 85       	ldd	r24, Z+12	; 0x0c
 830:	95 85       	ldd	r25, Z+13	; 0x0d
 832:	01 96       	adiw	r24, 0x01	; 1
 834:	95 87       	std	Z+13, r25	; 0x0d
 836:	84 87       	std	Z+12, r24	; 0x0c
 838:	0c c0       	rjmp	.+24     	; 0x852 <BCM_Rx_ISR_cbf+0x110>
	}
	else if(g_BCM_EXcfg.Count-2 == g_BCM_EXcfg.MSG_Len)
 83a:	24 17       	cp	r18, r20
 83c:	35 07       	cpc	r19, r21
 83e:	49 f4       	brne	.+18     	; 0x852 <BCM_Rx_ISR_cbf+0x110>
	{
		g_BCM_EXcfg.CheckSum = a_RX_Byte;
 840:	e8 e7       	ldi	r30, 0x78	; 120
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	29 81       	ldd	r18, Y+1	; 0x01
 846:	25 83       	std	Z+5, r18	; 0x05
		g_BCM_EXcfg.Count++;
 848:	01 96       	adiw	r24, 0x01	; 1
 84a:	95 87       	std	Z+13, r25	; 0x0d
 84c:	84 87       	std	Z+12, r24	; 0x0c
		g_BCM_EXcfg.FSM_State = ReceiveComplete_State;
 84e:	85 e0       	ldi	r24, 0x05	; 5
 850:	84 83       	std	Z+4, r24	; 0x04
	}
	else
	{	}
}
 852:	0f 90       	pop	r0
 854:	df 91       	pop	r29
 856:	cf 91       	pop	r28
 858:	08 95       	ret

0000085a <BCM_Rx_Dispatcher>:
/*---------[ BCM Dispatchers]---------*/

/* RX Dispatcher */
void BCM_Rx_Dispatcher(void)
{
	if(g_BCM_EXcfg.FSM_State == ReceiveComplete_State)
 85a:	80 91 7c 00 	lds	r24, 0x007C
 85e:	85 30       	cpi	r24, 0x05	; 5
 860:	b1 f4       	brne	.+44     	; 0x88e <__stack+0x2f>
	{	
		if(g_BCM_EXcfg.CheckSum == g_CS_Calculated)
 862:	80 91 74 00 	lds	r24, 0x0074
 866:	90 91 7d 00 	lds	r25, 0x007D
 86a:	98 13       	cpse	r25, r24
 86c:	10 c0       	rjmp	.+32     	; 0x88e <__stack+0x2f>
		{
			/* Debug Point */
			TCNT0 = 0xBB;
 86e:	8b eb       	ldi	r24, 0xBB	; 187
 870:	82 bf       	out	0x32, r24	; 50
			/* Debug Point */
				
			g_BCM_EXcfg.Count = ZERO;
 872:	e8 e7       	ldi	r30, 0x78	; 120
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	15 86       	std	Z+13, r1	; 0x0d
 878:	14 86       	std	Z+12, r1	; 0x0c
			g_CS_Calculated = ZERO;
 87a:	10 92 74 00 	sts	0x0074, r1
			g_BCM_EXcfg.CheckSum = ZERO;
 87e:	15 82       	std	Z+5, r1	; 0x05
			g_BCM_EXcfg.FSM_State = IDLE_State;
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	84 83       	std	Z+4, r24	; 0x04
			g_BCM_EXcfg.BCM_notify_cbf(E_OK);
 884:	06 84       	ldd	r0, Z+14	; 0x0e
 886:	f7 85       	ldd	r31, Z+15	; 0x0f
 888:	e0 2d       	mov	r30, r0
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	09 95       	icall
 88e:	08 95       	ret

00000890 <BCM_Init>:
}
/*------------------------------------*/

/* BCM Initialization Routine */
ERROR_STATUS BCM_Init(BCM_cfg_s* a_BCM)
{
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	cd b7       	in	r28, 0x3d	; 61
 896:	de b7       	in	r29, 0x3e	; 62
 898:	60 97       	sbiw	r28, 0x10	; 16
 89a:	0f b6       	in	r0, 0x3f	; 63
 89c:	f8 94       	cli
 89e:	de bf       	out	0x3e, r29	; 62
 8a0:	0f be       	out	0x3f, r0	; 63
 8a2:	cd bf       	out	0x3d, r28	; 61
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	UART_cfg  a_BCM_UART;
	SPI_cfg_s a_BCM_SPI; 
	
	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_BCM != NULL)
 8a4:	00 97       	sbiw	r24, 0x00	; 0
 8a6:	09 f4       	brne	.+2      	; 0x8aa <BCM_Init+0x1a>
 8a8:	6a c0       	rjmp	.+212    	; 0x97e <BCM_Init+0xee>
 8aa:	dc 01       	movw	r26, r24
	{
		/*--------[ Add The BCM CFG To The Working List ]--------*/
		g_BCM_EXcfg.BCM_CH_ID = a_BCM->BCM_CH_ID;
 8ac:	11 96       	adiw	r26, 0x01	; 1
 8ae:	8c 91       	ld	r24, X
 8b0:	11 97       	sbiw	r26, 0x01	; 1
 8b2:	e8 e7       	ldi	r30, 0x78	; 120
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	81 83       	std	Z+1, r24	; 0x01
		g_BCM_EXcfg.Mode      = a_BCM->Mode;
 8b8:	9c 91       	ld	r25, X
 8ba:	90 83       	st	Z, r25
		g_BCM_EXcfg.Protocol  = a_BCM->Protocol;
 8bc:	12 96       	adiw	r26, 0x02	; 2
 8be:	8c 91       	ld	r24, X
 8c0:	82 83       	std	Z+2, r24	; 0x02
		g_BCM_EXcfg.FSM_State = IDLE_State;
 8c2:	21 e0       	ldi	r18, 0x01	; 1
 8c4:	24 83       	std	Z+4, r18	; 0x04
		g_BCM_EXcfg.Count     = ZERO;
 8c6:	15 86       	std	Z+13, r1	; 0x0d
 8c8:	14 86       	std	Z+12, r1	; 0x0c
		g_BCM_EXcfg.CheckSum  = ZERO;
 8ca:	15 82       	std	Z+5, r1	; 0x05
		g_BCM_EXcfg.Buf_Len   = ZERO;
 8cc:	11 86       	std	Z+9, r1	; 0x09
 8ce:	10 86       	std	Z+8, r1	; 0x08
		g_BCM_EXcfg.MSG_Len   = ZERO;
 8d0:	13 86       	std	Z+11, r1	; 0x0b
 8d2:	12 86       	std	Z+10, r1	; 0x0a
		
		/*--------[ Check The BCM HW Communication Protocol ]--------*/
		switch(g_BCM_EXcfg.Protocol)
 8d4:	88 23       	and	r24, r24
 8d6:	19 f0       	breq	.+6      	; 0x8de <BCM_Init+0x4e>
 8d8:	81 30       	cpi	r24, 0x01	; 1
 8da:	59 f1       	breq	.+86     	; 0x932 <BCM_Init+0xa2>
 8dc:	52 c0       	rjmp	.+164    	; 0x982 <BCM_Init+0xf2>
		{
			/*----------------------[ UART CASE START ]---------------------*/
			case UART_Protocol:
			{
				a_BCM_UART.baudrate   = BCM_UART_BaudRate;
 8de:	40 e8       	ldi	r20, 0x80	; 128
 8e0:	55 e2       	ldi	r21, 0x25	; 37
 8e2:	60 e0       	ldi	r22, 0x00	; 0
 8e4:	70 e0       	ldi	r23, 0x00	; 0
 8e6:	48 87       	std	Y+8, r20	; 0x08
 8e8:	59 87       	std	Y+9, r21	; 0x09
 8ea:	6a 87       	std	Y+10, r22	; 0x0a
 8ec:	7b 87       	std	Y+11, r23	; 0x0b
				a_BCM_UART.dataBits   = UART_Bits_8;
 8ee:	86 e0       	ldi	r24, 0x06	; 6
 8f0:	8a 83       	std	Y+2, r24	; 0x02
				a_BCM_UART.stopBits   = StopBits_1;
 8f2:	1d 82       	std	Y+5, r1	; 0x05
				a_BCM_UART.parity     = No_Parity;
 8f4:	1b 82       	std	Y+3, r1	; 0x03
				a_BCM_UART.sampleEdge = RisingEdg;
 8f6:	1e 82       	std	Y+6, r1	; 0x06
				a_BCM_UART.uartSync   = UART_Async;
 8f8:	1c 82       	std	Y+4, r1	; 0x04
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
 8fa:	99 23       	and	r25, r25
 8fc:	19 f0       	breq	.+6      	; 0x904 <BCM_Init+0x74>
 8fe:	91 30       	cpi	r25, 0x01	; 1
 900:	51 f0       	breq	.+20     	; 0x916 <BCM_Init+0x86>
 902:	11 c0       	rjmp	.+34     	; 0x926 <BCM_Init+0x96>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_UART.mode = UART_TX;
 904:	88 e0       	ldi	r24, 0x08	; 8
 906:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnTx;
 908:	80 e4       	ldi	r24, 0x40	; 64
 90a:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						UART_SetTX(BCM_Tx_ISR_cbf);
 90c:	83 e9       	ldi	r24, 0x93	; 147
 90e:	93 e0       	ldi	r25, 0x03	; 3
 910:	0e 94 37 03 	call	0x66e	; 0x66e <UART_SetTX>
						break;
 914:	08 c0       	rjmp	.+16     	; 0x926 <BCM_Init+0x96>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_UART.mode = UART_RX;
 916:	80 e1       	ldi	r24, 0x10	; 16
 918:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnRx;
 91a:	80 e8       	ldi	r24, 0x80	; 128
 91c:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						UART_SetRX(BCM_Rx_ISR_cbf);
 91e:	81 ea       	ldi	r24, 0xA1	; 161
 920:	93 e0       	ldi	r25, 0x03	; 3
 922:	0e 94 3c 03 	call	0x678	; 0x678 <UART_SetRX>
					}
					default:
						break;
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
 926:	ce 01       	movw	r24, r28
 928:	01 96       	adiw	r24, 0x01	; 1
 92a:	0e 94 c5 02 	call	0x58a	; 0x58a <UART_Init>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 92e:	8c e3       	ldi	r24, 0x3C	; 60
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
				
				errorStatus = BCM_ERROR + E_OK;
				break;
 930:	2b c0       	rjmp	.+86     	; 0x988 <BCM_Init+0xf8>
			/*----------------------[ UART CASE END ]---------------------*/
			/*------------------------------------------------------------*/
			/*----------------------[ SPI CASE START ]--------------------*/
			case SPI_Protocol:
			{
				a_BCM_SPI.clockSPI = Fosc128;
 932:	83 e0       	ldi	r24, 0x03	; 3
 934:	8c 87       	std	Y+12, r24	; 0x0c
				a_BCM_SPI.dataorder = MSB;
 936:	1e 86       	std	Y+14, r1	; 0x0e
				a_BCM_SPI.phasePolarityMode = mode3;
 938:	8c e0       	ldi	r24, 0x0C	; 12
 93a:	8d 87       	std	Y+13, r24	; 0x0d
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
 93c:	99 23       	and	r25, r25
 93e:	19 f0       	breq	.+6      	; 0x946 <BCM_Init+0xb6>
 940:	91 30       	cpi	r25, 0x01	; 1
 942:	79 f0       	breq	.+30     	; 0x962 <BCM_Init+0xd2>
 944:	20 c0       	rjmp	.+64     	; 0x986 <BCM_Init+0xf6>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_SPI.ptr_call_back = BCM_Tx_ISR_cbf;
 946:	83 e9       	ldi	r24, 0x93	; 147
 948:	93 e0       	ldi	r25, 0x03	; 3
 94a:	98 8b       	std	Y+16, r25	; 0x10
 94c:	8f 87       	std	Y+15, r24	; 0x0f
						_SPIInitMaster(&a_BCM_SPI);
 94e:	ce 01       	movw	r24, r28
 950:	0c 96       	adiw	r24, 0x0c	; 12
 952:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_SPIInitMaster>
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Tx_ISR_cbf);
 956:	83 e9       	ldi	r24, 0x93	; 147
 958:	93 e0       	ldi	r25, 0x03	; 3
 95a:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_SetCBF>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 95e:	8c e3       	ldi	r24, 0x3C	; 60
					{
						a_BCM_SPI.ptr_call_back = BCM_Tx_ISR_cbf;
						_SPIInitMaster(&a_BCM_SPI);
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Tx_ISR_cbf);
						break;
 960:	13 c0       	rjmp	.+38     	; 0x988 <BCM_Init+0xf8>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_SPI.ptr_call_back = BCM_Rx_ISR_cbf;
 962:	81 ea       	ldi	r24, 0xA1	; 161
 964:	93 e0       	ldi	r25, 0x03	; 3
 966:	98 8b       	std	Y+16, r25	; 0x10
 968:	8f 87       	std	Y+15, r24	; 0x0f
						_SPIInitSlave(&a_BCM_SPI);
 96a:	ce 01       	movw	r24, r28
 96c:	0c 96       	adiw	r24, 0x0c	; 12
 96e:	0e 94 2e 01 	call	0x25c	; 0x25c <_SPIInitSlave>
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Rx_ISR_cbf);
 972:	81 ea       	ldi	r24, 0xA1	; 161
 974:	93 e0       	ldi	r25, 0x03	; 3
 976:	0e 94 77 01 	call	0x2ee	; 0x2ee <SPI_SetCBF>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 97a:	8c e3       	ldi	r24, 0x3C	; 60
					{
						a_BCM_SPI.ptr_call_back = BCM_Rx_ISR_cbf;
						_SPIInitSlave(&a_BCM_SPI);
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						SPI_SetCBF(BCM_Rx_ISR_cbf);
						break;
 97c:	05 c0       	rjmp	.+10     	; 0x988 <BCM_Init+0xf8>
	}
	/*-------------[ In Case Of BCM's Null Pointer ]-------------*/
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
 97e:	8d e3       	ldi	r24, 0x3D	; 61
 980:	03 c0       	rjmp	.+6      	; 0x988 <BCM_Init+0xf8>
				break;
			}
			/*----------------------[ SPI CASE END ]---------------------*/
			default:
				errorStatus = BCM_ERROR + INVALID_IN;
				return errorStatus;
 982:	80 e4       	ldi	r24, 0x40	; 64
 984:	01 c0       	rjmp	.+2      	; 0x988 <BCM_Init+0xf8>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 986:	8c e3       	ldi	r24, 0x3C	; 60
}
 988:	60 96       	adiw	r28, 0x10	; 16
 98a:	0f b6       	in	r0, 0x3f	; 63
 98c:	f8 94       	cli
 98e:	de bf       	out	0x3e, r29	; 62
 990:	0f be       	out	0x3f, r0	; 63
 992:	cd bf       	out	0x3d, r28	; 61
 994:	df 91       	pop	r29
 996:	cf 91       	pop	r28
 998:	08 95       	ret

0000099a <BCM_Setup_RxBuffer>:
	/* Needs So Much Improvements & Error Checking & More... */
	
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	
	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_BCM != NULL)
 99a:	89 2b       	or	r24, r25
 99c:	51 f0       	breq	.+20     	; 0x9b2 <BCM_Setup_RxBuffer+0x18>
	{
		g_BCM_EXcfg.Buf_Len = a_Buffer_Len;
 99e:	e8 e7       	ldi	r30, 0x78	; 120
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	71 87       	std	Z+9, r23	; 0x09
 9a4:	60 87       	std	Z+8, r22	; 0x08
		g_BCM_EXcfg.Buffer = a_buffer;
 9a6:	57 83       	std	Z+7, r21	; 0x07
 9a8:	46 83       	std	Z+6, r20	; 0x06
		g_BCM_EXcfg.FSM_State = IDLE_State;
 9aa:	81 e0       	ldi	r24, 0x01	; 1
 9ac:	84 83       	std	Z+4, r24	; 0x04
		g_BCM_EXcfg.BCM_notify_cbf = a_notify;
 9ae:	37 87       	std	Z+15, r19	; 0x0f
 9b0:	26 87       	std	Z+14, r18	; 0x0e
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
}
 9b2:	8d e3       	ldi	r24, 0x3D	; 61
 9b4:	08 95       	ret

000009b6 <BCM_Get_msgLEN>:


uint8_t BCM_Get_msgLEN(void)
{
	return g_BCM_EXcfg.MSG_Len;
 9b6:	80 91 82 00 	lds	r24, 0x0082
 9ba:	08 95       	ret

000009bc <__udivmodsi4>:
 9bc:	a1 e2       	ldi	r26, 0x21	; 33
 9be:	1a 2e       	mov	r1, r26
 9c0:	aa 1b       	sub	r26, r26
 9c2:	bb 1b       	sub	r27, r27
 9c4:	fd 01       	movw	r30, r26
 9c6:	0d c0       	rjmp	.+26     	; 0x9e2 <__udivmodsi4_ep>

000009c8 <__udivmodsi4_loop>:
 9c8:	aa 1f       	adc	r26, r26
 9ca:	bb 1f       	adc	r27, r27
 9cc:	ee 1f       	adc	r30, r30
 9ce:	ff 1f       	adc	r31, r31
 9d0:	a2 17       	cp	r26, r18
 9d2:	b3 07       	cpc	r27, r19
 9d4:	e4 07       	cpc	r30, r20
 9d6:	f5 07       	cpc	r31, r21
 9d8:	20 f0       	brcs	.+8      	; 0x9e2 <__udivmodsi4_ep>
 9da:	a2 1b       	sub	r26, r18
 9dc:	b3 0b       	sbc	r27, r19
 9de:	e4 0b       	sbc	r30, r20
 9e0:	f5 0b       	sbc	r31, r21

000009e2 <__udivmodsi4_ep>:
 9e2:	66 1f       	adc	r22, r22
 9e4:	77 1f       	adc	r23, r23
 9e6:	88 1f       	adc	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	1a 94       	dec	r1
 9ec:	69 f7       	brne	.-38     	; 0x9c8 <__udivmodsi4_loop>
 9ee:	60 95       	com	r22
 9f0:	70 95       	com	r23
 9f2:	80 95       	com	r24
 9f4:	90 95       	com	r25
 9f6:	9b 01       	movw	r18, r22
 9f8:	ac 01       	movw	r20, r24
 9fa:	bd 01       	movw	r22, r26
 9fc:	cf 01       	movw	r24, r30
 9fe:	08 95       	ret

00000a00 <_exit>:
 a00:	f8 94       	cli

00000a02 <__stop_program>:
 a02:	ff cf       	rjmp	.-2      	; 0xa02 <__stop_program>
