
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000005c0  00000654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800082  00800082  00000676  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001051  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000059c  00000000  00000000  0000189d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c5  00000000  00000000  00001e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  00002300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000705  00000000  00000000  00002834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001191  00000000  00000000  00002f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000040ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_4>
  14:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_7>
  20:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_8>
  24:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_9>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_10>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 04 02 	jmp	0x408	; 0x408 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 39       	cpi	r26, 0x9E	; 158
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:




int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	1f 92       	push	r1
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	/*-------------[ BCM Initialization ]-------------*/
	BCM_cfg_s BCM1;
	BCM1.BCM_CH_ID = 1;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	8a 83       	std	Y+2, r24	; 0x02
	BCM1.Mode = BCM_Tx_Mode;
  a2:	19 82       	std	Y+1, r1	; 0x01
	BCM1.Protocol = UART_Protocol;
  a4:	1b 82       	std	Y+3, r1	; 0x03
	BCM_Init(&BCM1);
  a6:	ce 01       	movw	r24, r28
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <BCM_Init>
    
	UART_Write_String((uint8_t*)"OMG Plzzz Report My Noob Team! \r\n");
  ae:	80 e6       	ldi	r24, 0x60	; 96
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <UART_Write_String>
	
	while (1) 
    {

    }
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x24>

000000b8 <__vector_11>:
						Timer0_Prescaler = TIMER0_PRESCALER_1024;
						errorStatus = E_OK;
						break;
					default :
						Timer0_Prescaler = TIMER0_NO_CLOCK;
						errorStatus = E_NOK;
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_RISING;
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
				errorStatus = E_OK;
  c2:	2f 93       	push	r18
  c4:	3f 93       	push	r19
				break;
			case COUNTER_DOWN_MODE :
				Timer0_Prescaler = TIMER0_COUNTER_FALLING;
  c6:	4f 93       	push	r20
  c8:	5f 93       	push	r21
  ca:	6f 93       	push	r22
				errorStatus = E_OK;
  cc:	7f 93       	push	r23
  ce:	8f 93       	push	r24
				break;
			default :
				Timer0_Prescaler = TIMER0_NO_CLOCK;
  d0:	9f 93       	push	r25
  d2:	af 93       	push	r26
				errorStatus = E_NOK;
  d4:	bf 93       	push	r27
  d6:	ef 93       	push	r30
static ERROR_STATUS Timer1_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR1 = Timer1_CMP_Mask;
  d8:	ff 93       	push	r31
  da:	e0 91 8c 00 	lds	r30, 0x008C
  de:	f0 91 8d 00 	lds	r31, 0x008D
		TCNT1 = 0x00;
  e2:	30 97       	sbiw	r30, 0x00	; 0
		OCR1A = 0x00;
  e4:	09 f0       	breq	.+2      	; 0xe8 <__vector_11+0x30>
  e6:	09 95       	icall
		TIMSK &= Timer1_Int_CLR_Mask;
  e8:	ff 91       	pop	r31
  ea:	ef 91       	pop	r30
  ec:	bf 91       	pop	r27
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
  ee:	af 91       	pop	r26
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	7f 91       	pop	r23
  f6:	6f 91       	pop	r22
  f8:	5f 91       	pop	r21
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer1_Polling_Int_Mask;
  fa:	4f 91       	pop	r20
  fc:	3f 91       	pop	r19
  fe:	2f 91       	pop	r18
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer1_OCA_Int_Mask;
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
				SREG  |= 0x80;
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <__vector_10>:
 10a:	1f 92       	push	r1
				Ptr_Timer1_CM = Timer_cfg->Timer_Cbk_ptr;
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	ef 93       	push	r30
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 12a:	ff 93       	push	r31
 12c:	e0 91 8a 00 	lds	r30, 0x008A
 130:	f0 91 8b 00 	lds	r31, 0x008B
 134:	30 97       	sbiw	r30, 0x00	; 0
 136:	09 f0       	breq	.+2      	; 0x13a <__vector_10+0x30>
 138:	09 95       	icall
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
				{
					case TIMER_NO_CLOCK :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
						errorStatus = E_OK;
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
						break;
					case TIMER_PRESCALER_8 :
						Timer1_Prescaler = TIMER1_PRESCALER_8;
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
						errorStatus = E_OK;
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_5>:
						break;
					case TIMER_PRESCALER_32 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
						errorStatus = E_NOK;
 164:	11 24       	eor	r1, r1
 166:	2f 93       	push	r18
						break;
					case TIMER_PRESCALER_64 :
						Timer1_Prescaler = TIMER1_PRESCALER_64;
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
						errorStatus = E_OK;
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
						break;
					case TIMER_PRESCALER_128 :
						Timer1_Prescaler = TIMER1_PRESCALER_128;
 178:	bf 93       	push	r27
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
 17e:	e0 91 84 00 	lds	r30, 0x0084
 182:	f0 91 85 00 	lds	r31, 0x0085
						errorStatus = E_OK;
 186:	30 97       	sbiw	r30, 0x00	; 0
						break;
					case TIMER_PRESCALER_256 :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 188:	09 f0       	breq	.+2      	; 0x18c <__vector_5+0x30>
 18a:	09 95       	icall
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
						errorStatus = E_NOK;
 190:	bf 91       	pop	r27
 192:	af 91       	pop	r26
						break;
					case TIMER_PRESCALER_1024 :
						Timer1_Prescaler = TIMER1_PRESCALER_1024;
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	7f 91       	pop	r23
 19a:	6f 91       	pop	r22
 19c:	5f 91       	pop	r21
 19e:	4f 91       	pop	r20
						errorStatus = E_OK;
 1a0:	3f 91       	pop	r19
 1a2:	2f 91       	pop	r18
						break;
					default :
						Timer1_Prescaler = TIMER1_NO_CLOCK;
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
						errorStatus = E_NOK;
 1ac:	18 95       	reti

000001ae <__vector_4>:
 1ae:	1f 92       	push	r1
						break;
				}
				break;
			case COUNTER_UP_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_RISING;
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
				errorStatus = E_OK;
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
				break;
			case COUNTER_DOWN_MODE :
				Timer1_Prescaler = TIMER1_COUNTER_FALLING;
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
				errorStatus = E_OK;
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
				break;
			default :
				Timer1_Prescaler = TIMER1_NO_CLOCK;
 1d0:	e0 91 82 00 	lds	r30, 0x0082
 1d4:	f0 91 83 00 	lds	r31, 0x0083
				errorStatus = E_NOK;
 1d8:	30 97       	sbiw	r30, 0x00	; 0
 1da:	09 f0       	breq	.+2      	; 0x1de <__vector_4+0x30>
static ERROR_STATUS Timer2_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS errorStatus = E_NOK;
	if(Timer_cfg != NULL)
	{
		TCCR2 = Timer2_CMP_Mask;
 1dc:	09 95       	icall
 1de:	ff 91       	pop	r31
		TCNT2 = Timer2_TCNT_INIT_Mask;
 1e0:	ef 91       	pop	r30
		TIMSK &= Timer1_Int_CLR_Mask;
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
		{
			case TIMER_POLLING_MODE :
				TIMSK |= Timer2_Polling_Int_Mask;
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
				errorStatus = E_OK;
				break;
			case TIMER_INTERRUPT_MODE :
				TIMSK |= Timer2_Interrupt_CMP_Int_Mask;
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_9>:
				SREG  |= 0x80;
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
				Ptr_Timer2_CM = Timer_cfg->Timer_Cbk_ptr;
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
				break;
			default :
				errorStatus = E_NOK;
				break;
		}
		switch(Timer_cfg->Timer_Mode)
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
		{
			case TIMER_MODE :
				switch(Timer_cfg->Timer_Prescaler)
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
 222:	e0 91 88 00 	lds	r30, 0x0088
 226:	f0 91 89 00 	lds	r31, 0x0089
 22a:	30 97       	sbiw	r30, 0x00	; 0
 22c:	09 f0       	breq	.+2      	; 0x230 <__vector_9+0x30>
				{
					case TIMER_NO_CLOCK :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
 22e:	09 95       	icall
 230:	ff 91       	pop	r31
						errorStatus = E_OK;
 232:	ef 91       	pop	r30
 234:	bf 91       	pop	r27
						break;
					case TIMER_PRESCALER_8 :
						Timer2_Prescaler = TIMER2_PRESCALER_8;
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
						errorStatus = E_OK;
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
						break;
					case TIMER_PRESCALER_32 :
						Timer2_Prescaler = TIMER2_PRESCALER_32;
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
						errorStatus = E_OK;
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
						break;
					case TIMER_PRESCALER_64 :
						Timer2_Prescaler = TIMER2_PRESCALER_64;
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
						errorStatus = E_OK;
 250:	18 95       	reti

00000252 <__vector_7>:
 252:	1f 92       	push	r1
						break;
					case TIMER_PRESCALER_128 :
						Timer2_Prescaler = TIMER2_PRESCALER_128;
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
						errorStatus = E_OK;
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
						break;
					case TIMER_PRESCALER_256 :
						Timer2_Prescaler = TIMER2_PRESCALER_256;
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
						errorStatus = E_OK;
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
						break;
						case TIMER_PRESCALER_1024 :
						Timer2_Prescaler = TIMER2_PRESCALER_1024;
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
						errorStatus = E_OK;
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
						break;
					default :
						Timer2_Prescaler = TIMER2_NO_CLOCK;
 272:	ff 93       	push	r31
 274:	e0 91 86 00 	lds	r30, 0x0086
						errorStatus = E_NOK;
 278:	f0 91 87 00 	lds	r31, 0x0087
						break;
				}
				break;
			default :
				Timer2_Prescaler = TIMER2_NO_CLOCK;
 27c:	30 97       	sbiw	r30, 0x00	; 0
				errorStatus = E_NOK;
 27e:	09 f0       	breq	.+2      	; 0x282 <__vector_7+0x30>
 280:	09 95       	icall
				break;
		}
	}
	else
	{
		errorStatus = E_NOK;
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
				break;
			case TIMER_CH2 :
				errorStatus = Timer2_Init(Timer_cfg);
				break;
			default :
				errorStatus = E_NOK;
 286:	bf 91       	pop	r27
	else
	{
		errorStatus = E_NOK;
	}
	return errorStatus;
}
 288:	af 91       	pop	r26
{
	if (Ptr_Timer1_CM != NULL)
	{
		Ptr_Timer1_CM();
	}	
}
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
	if (Ptr_Timer1_CM != NULL)
 2c6:	e0 91 86 00 	lds	r30, 0x0086
 2ca:	f0 91 87 00 	lds	r31, 0x0087
 2ce:	30 97       	sbiw	r30, 0x00	; 0
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <__vector_8+0x30>
	{
		Ptr_Timer1_CM();
 2d2:	09 95       	icall
	}
}
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	7f 91       	pop	r23
 2e2:	6f 91       	pop	r22
 2e4:	5f 91       	pop	r21
 2e6:	4f 91       	pop	r20
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <UART_Init>:
FunPtr Ptr_UART_TX = NULL;
FunPtr Ptr_UART_RX = NULL;


void UART_Init(UART_cfg* uart_cfg)
{
 2f6:	cf 92       	push	r12
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec 01       	movw	r28, r24
	uint8_t uart_control = 0x80;
	// Set The UART Baud Rate
	UBRRL = ((F_cpu/(16*uart_cfg->baudrate)) - 1);
 304:	8f 81       	ldd	r24, Y+7	; 0x07
 306:	98 85       	ldd	r25, Y+8	; 0x08
 308:	a9 85       	ldd	r26, Y+9	; 0x09
 30a:	ba 85       	ldd	r27, Y+10	; 0x0a
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	aa 1f       	adc	r26, r26
 312:	bb 1f       	adc	r27, r27
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	aa 1f       	adc	r26, r26
 31a:	bb 1f       	adc	r27, r27
 31c:	9c 01       	movw	r18, r24
 31e:	ad 01       	movw	r20, r26
 320:	22 0f       	add	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	44 1f       	adc	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	44 1f       	adc	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	0f 2e       	mov	r0, r31
 332:	c1 2c       	mov	r12, r1
 334:	f4 e2       	ldi	r31, 0x24	; 36
 336:	df 2e       	mov	r13, r31
 338:	f4 ef       	ldi	r31, 0xF4	; 244
 33a:	ef 2e       	mov	r14, r31
 33c:	f1 2c       	mov	r15, r1
 33e:	f0 2d       	mov	r31, r0
 340:	c7 01       	movw	r24, r14
 342:	b6 01       	movw	r22, r12
 344:	0e 94 bc 02 	call	0x578	; 0x578 <__udivmodsi4>
 348:	21 50       	subi	r18, 0x01	; 1
 34a:	29 b9       	out	0x09, r18	; 9
	UBRRH = ((F_cpu/(16*uart_cfg->baudrate)) - 1)>>8;
 34c:	8f 81       	ldd	r24, Y+7	; 0x07
 34e:	98 85       	ldd	r25, Y+8	; 0x08
 350:	a9 85       	ldd	r26, Y+9	; 0x09
 352:	ba 85       	ldd	r27, Y+10	; 0x0a
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	aa 1f       	adc	r26, r26
 35a:	bb 1f       	adc	r27, r27
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	aa 1f       	adc	r26, r26
 362:	bb 1f       	adc	r27, r27
 364:	9c 01       	movw	r18, r24
 366:	ad 01       	movw	r20, r26
 368:	22 0f       	add	r18, r18
 36a:	33 1f       	adc	r19, r19
 36c:	44 1f       	adc	r20, r20
 36e:	55 1f       	adc	r21, r21
 370:	22 0f       	add	r18, r18
 372:	33 1f       	adc	r19, r19
 374:	44 1f       	adc	r20, r20
 376:	55 1f       	adc	r21, r21
 378:	c7 01       	movw	r24, r14
 37a:	b6 01       	movw	r22, r12
 37c:	0e 94 bc 02 	call	0x578	; 0x578 <__udivmodsi4>
 380:	da 01       	movw	r26, r20
 382:	c9 01       	movw	r24, r18
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	a1 09       	sbc	r26, r1
 388:	b1 09       	sbc	r27, r1
 38a:	89 2f       	mov	r24, r25
 38c:	9a 2f       	mov	r25, r26
 38e:	ab 2f       	mov	r26, r27
 390:	bb 27       	eor	r27, r27
 392:	80 bd       	out	0x20, r24	; 32
	// Set The UART Mode OF Operation
	UCSRB |= (uart_cfg->mode | uart_cfg->uartInterrupts);
 394:	9a b1       	in	r25, 0x0a	; 10
 396:	88 81       	ld	r24, Y
 398:	89 2b       	or	r24, r25
 39a:	9e 81       	ldd	r25, Y+6	; 0x06
 39c:	89 2b       	or	r24, r25
 39e:	8a b9       	out	0x0a, r24	; 10
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
	UCSRC |= uart_control;
 3a0:	20 b5       	in	r18, 0x20	; 32
	// Set The UART Data Sampling Edge
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
 3a2:	8b 81       	ldd	r24, Y+3	; 0x03
 3a4:	9d 81       	ldd	r25, Y+5	; 0x05
 3a6:	89 2b       	or	r24, r25
 3a8:	80 68       	ori	r24, 0x80	; 128
 3aa:	99 81       	ldd	r25, Y+1	; 0x01
 3ac:	89 2b       	or	r24, r25
 3ae:	9a 81       	ldd	r25, Y+2	; 0x02
 3b0:	89 2b       	or	r24, r25
 3b2:	9c 81       	ldd	r25, Y+4	; 0x04
 3b4:	89 2b       	or	r24, r25
	UCSRC |= uart_control;
 3b6:	82 2b       	or	r24, r18
 3b8:	80 bd       	out	0x20, r24	; 32
	SREG  |= (0x80);
 3ba:	8f b7       	in	r24, 0x3f	; 63
 3bc:	80 68       	ori	r24, 0x80	; 128
 3be:	8f bf       	out	0x3f, r24	; 63
}
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	ff 90       	pop	r15
 3c6:	ef 90       	pop	r14
 3c8:	df 90       	pop	r13
 3ca:	cf 90       	pop	r12
 3cc:	08 95       	ret

000003ce <UART_Write>:

void UART_Write(uint8_t data)
{
	// Wait For Empty Transmit Budder
	while(!(UCSRA & (1<<5)));
 3ce:	5d 9b       	sbis	0x0b, 5	; 11
 3d0:	fe cf       	rjmp	.-4      	; 0x3ce <UART_Write>
	// Write The Data To The Buffer & Send!
	UDR = data;
 3d2:	8c b9       	out	0x0c, r24	; 12
 3d4:	08 95       	ret

000003d6 <UART_Write_String>:
}

void UART_Write_String(uint8_t* str)
{
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	ec 01       	movw	r28, r24
	uint16_t i=0;
	while(str[i] != '\0')
 3dc:	88 81       	ld	r24, Y
 3de:	88 23       	and	r24, r24
 3e0:	31 f0       	breq	.+12     	; 0x3ee <UART_Write_String+0x18>
 3e2:	21 96       	adiw	r28, 0x01	; 1
		UART_Write(str[i++]);
 3e4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <UART_Write>
}

void UART_Write_String(uint8_t* str)
{
	uint16_t i=0;
	while(str[i] != '\0')
 3e8:	89 91       	ld	r24, Y+
 3ea:	81 11       	cpse	r24, r1
 3ec:	fb cf       	rjmp	.-10     	; 0x3e4 <UART_Write_String+0xe>
		UART_Write(str[i++]);
}
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <UART_SetTX>:
/*-----------[ Timers Set CallBack Functions ]-----------*/
/*=======================================================*/

void UART_SetTX(FunPtr Ptr_ISR)
{
	Ptr_UART_TX = Ptr_ISR;
 3f4:	90 93 91 00 	sts	0x0091, r25
 3f8:	80 93 90 00 	sts	0x0090, r24
 3fc:	08 95       	ret

000003fe <UART_SetRX>:
}

void UART_SetRX(FunPtr Ptr_ISR)
{
	Ptr_UART_RX = Ptr_ISR;
 3fe:	90 93 8f 00 	sts	0x008F, r25
 402:	80 93 8e 00 	sts	0x008E, r24
 406:	08 95       	ret

00000408 <__vector_13>:
/*=================================================*/
/*---------------[ UART ISR Handlers ]-------------*/
/*=================================================*/

ISR(USART_RXC_vect)
{
 408:	1f 92       	push	r1
 40a:	0f 92       	push	r0
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	0f 92       	push	r0
 410:	11 24       	eor	r1, r1
 412:	2f 93       	push	r18
 414:	3f 93       	push	r19
 416:	4f 93       	push	r20
 418:	5f 93       	push	r21
 41a:	6f 93       	push	r22
 41c:	7f 93       	push	r23
 41e:	8f 93       	push	r24
 420:	9f 93       	push	r25
 422:	af 93       	push	r26
 424:	bf 93       	push	r27
 426:	ef 93       	push	r30
 428:	ff 93       	push	r31
	if(Ptr_UART_RX != NULL)
 42a:	e0 91 8e 00 	lds	r30, 0x008E
 42e:	f0 91 8f 00 	lds	r31, 0x008F
 432:	30 97       	sbiw	r30, 0x00	; 0
 434:	09 f0       	breq	.+2      	; 0x438 <__vector_13+0x30>
	{
		Ptr_UART_RX();
 436:	09 95       	icall
	}
}
 438:	ff 91       	pop	r31
 43a:	ef 91       	pop	r30
 43c:	bf 91       	pop	r27
 43e:	af 91       	pop	r26
 440:	9f 91       	pop	r25
 442:	8f 91       	pop	r24
 444:	7f 91       	pop	r23
 446:	6f 91       	pop	r22
 448:	5f 91       	pop	r21
 44a:	4f 91       	pop	r20
 44c:	3f 91       	pop	r19
 44e:	2f 91       	pop	r18
 450:	0f 90       	pop	r0
 452:	0f be       	out	0x3f, r0	; 63
 454:	0f 90       	pop	r0
 456:	1f 90       	pop	r1
 458:	18 95       	reti

0000045a <__vector_15>:

ISR(USART_TXC_vect)
{
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	2f 93       	push	r18
 466:	3f 93       	push	r19
 468:	4f 93       	push	r20
 46a:	5f 93       	push	r21
 46c:	6f 93       	push	r22
 46e:	7f 93       	push	r23
 470:	8f 93       	push	r24
 472:	9f 93       	push	r25
 474:	af 93       	push	r26
 476:	bf 93       	push	r27
 478:	ef 93       	push	r30
 47a:	ff 93       	push	r31
	if(Ptr_UART_TX != NULL)
 47c:	e0 91 90 00 	lds	r30, 0x0090
 480:	f0 91 91 00 	lds	r31, 0x0091
 484:	30 97       	sbiw	r30, 0x00	; 0
 486:	09 f0       	breq	.+2      	; 0x48a <__vector_15+0x30>
	{
		Ptr_UART_TX();
 488:	09 95       	icall
	}
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	bf 91       	pop	r27
 490:	af 91       	pop	r26
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	7f 91       	pop	r23
 498:	6f 91       	pop	r22
 49a:	5f 91       	pop	r21
 49c:	4f 91       	pop	r20
 49e:	3f 91       	pop	r19
 4a0:	2f 91       	pop	r18
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

000004ac <BCM_Tx_ISR_cbf>:
/*------------[ BCM CallBacks]------------*/
/* BCM Transmit ISR Call-Back Function */
static void BCM_Tx_ISR_cbf(void)
{
	/* LOL */
	TCNT2 = 0x05;
 4ac:	85 e0       	ldi	r24, 0x05	; 5
 4ae:	84 bd       	out	0x24, r24	; 36
 4b0:	08 95       	ret

000004b2 <BCM_Rx_ISR_cbf>:
}
/* BCM Receive ISR Call-Back Function */
static void BCM_Rx_ISR_cbf(void)
{
 4b2:	08 95       	ret

000004b4 <BCM_Init>:
}
/*------------------------------------*/

/* BCM Initialization Routine */
ERROR_STATUS BCM_Init(BCM_cfg_s* a_BCM)
{
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	2b 97       	sbiw	r28, 0x0b	; 11
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	dc 01       	movw	r26, r24
	ERROR_STATUS errorStatus = BCM_ERROR + E_NOK;
	UART_cfg a_BCM_UART;
	/* spi config as well... */
	
	/*-------------[ Check BCM's Pointer Validity ]-------------*/
	if(a_BCM != NULL)
 4ca:	89 2b       	or	r24, r25
 4cc:	09 f4       	brne	.+2      	; 0x4d0 <BCM_Init+0x1c>
 4ce:	48 c0       	rjmp	.+144    	; 0x560 <BCM_Init+0xac>
	{
		/*--------[ Add The BCM CFG To The Working List ]--------*/
		g_BCM_EXcfg.BCM_CH_ID = a_BCM->BCM_CH_ID;
 4d0:	11 96       	adiw	r26, 0x01	; 1
 4d2:	8c 91       	ld	r24, X
 4d4:	11 97       	sbiw	r26, 0x01	; 1
 4d6:	e2 e9       	ldi	r30, 0x92	; 146
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	81 83       	std	Z+1, r24	; 0x01
		g_BCM_EXcfg.Mode      = a_BCM->Mode;
 4dc:	9c 91       	ld	r25, X
 4de:	90 83       	st	Z, r25
		g_BCM_EXcfg.Protocol  = a_BCM->Protocol;
 4e0:	12 96       	adiw	r26, 0x02	; 2
 4e2:	8c 91       	ld	r24, X
 4e4:	82 83       	std	Z+2, r24	; 0x02
		g_BCM_EXcfg.FSM_State = IDLE_State;
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	24 83       	std	Z+4, r18	; 0x04
		g_BCM_EXcfg.Count     = ZERO;
 4ea:	11 86       	std	Z+9, r1	; 0x09
 4ec:	10 86       	std	Z+8, r1	; 0x08
		g_BCM_EXcfg.CheckSum  = ZERO;
 4ee:	15 82       	std	Z+5, r1	; 0x05
		
		/*--------[ Check The BCM HW Communication Protocol ]--------*/
		switch(g_BCM_EXcfg.Protocol)
 4f0:	88 23       	and	r24, r24
 4f2:	21 f0       	breq	.+8      	; 0x4fc <BCM_Init+0x48>
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	b1 f5       	brne	.+108    	; 0x564 <BCM_Init+0xb0>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 4f8:	8c e3       	ldi	r24, 0x3C	; 60
 4fa:	35 c0       	rjmp	.+106    	; 0x566 <BCM_Init+0xb2>
		/*--------[ Check The BCM HW Communication Protocol ]--------*/
		switch(g_BCM_EXcfg.Protocol)
		{
			case UART_Protocol:
			{
				a_BCM_UART.baudrate   = BCM_UART_BaudRate;
 4fc:	40 e8       	ldi	r20, 0x80	; 128
 4fe:	55 e2       	ldi	r21, 0x25	; 37
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	48 87       	std	Y+8, r20	; 0x08
 506:	59 87       	std	Y+9, r21	; 0x09
 508:	6a 87       	std	Y+10, r22	; 0x0a
 50a:	7b 87       	std	Y+11, r23	; 0x0b
				a_BCM_UART.dataBits   = UART_Bits_8;
 50c:	86 e0       	ldi	r24, 0x06	; 6
 50e:	8a 83       	std	Y+2, r24	; 0x02
				a_BCM_UART.stopBits   = StopBits_1;
 510:	1d 82       	std	Y+5, r1	; 0x05
				a_BCM_UART.parity     = No_Parity;
 512:	1b 82       	std	Y+3, r1	; 0x03
				a_BCM_UART.sampleEdge = RisingEdg;
 514:	1e 82       	std	Y+6, r1	; 0x06
				a_BCM_UART.uartSync   = UART_Async;
 516:	1c 82       	std	Y+4, r1	; 0x04
				
				/*--------[ Check The BCM Mode OF Operation ]--------*/
				switch(g_BCM_EXcfg.Mode)
 518:	99 23       	and	r25, r25
 51a:	19 f0       	breq	.+6      	; 0x522 <BCM_Init+0x6e>
 51c:	91 30       	cpi	r25, 0x01	; 1
 51e:	71 f0       	breq	.+28     	; 0x53c <BCM_Init+0x88>
 520:	19 c0       	rjmp	.+50     	; 0x554 <BCM_Init+0xa0>
				{
					case BCM_Tx_Mode:
					{
						a_BCM_UART.mode = UART_TX;
 522:	88 e0       	ldi	r24, 0x08	; 8
 524:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnTx;
 526:	80 e4       	ldi	r24, 0x40	; 64
 528:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The TX ISR CallBack Function ]--------*/
						g_BCM_EXcfg.BCM_ISR_cbf = BCM_Tx_ISR_cbf;
 52a:	86 e5       	ldi	r24, 0x56	; 86
 52c:	92 e0       	ldi	r25, 0x02	; 2
 52e:	90 93 9d 00 	sts	0x009D, r25
 532:	80 93 9c 00 	sts	0x009C, r24
						UART_SetTX(BCM_Tx_ISR_cbf);
 536:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <UART_SetTX>
						break;
 53a:	0c c0       	rjmp	.+24     	; 0x554 <BCM_Init+0xa0>
					}
					case BCM_Rx_Mode:
					{
						a_BCM_UART.mode = UART_RX;
 53c:	80 e1       	ldi	r24, 0x10	; 16
 53e:	89 83       	std	Y+1, r24	; 0x01
						a_BCM_UART.uartInterrupts = OnRx;
 540:	80 e8       	ldi	r24, 0x80	; 128
 542:	8f 83       	std	Y+7, r24	; 0x07
						/*--------[ Set The RX ISR CallBack Function ]--------*/
						g_BCM_EXcfg.BCM_ISR_cbf = BCM_Rx_ISR_cbf;
 544:	89 e5       	ldi	r24, 0x59	; 89
 546:	92 e0       	ldi	r25, 0x02	; 2
 548:	90 93 9d 00 	sts	0x009D, r25
 54c:	80 93 9c 00 	sts	0x009C, r24
						UART_SetRX(BCM_Rx_ISR_cbf);
 550:	0e 94 ff 01 	call	0x3fe	; 0x3fe <UART_SetRX>
					}
					default:
						break;
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
 554:	ce 01       	movw	r24, r28
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <UART_Init>
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
 55c:	8c e3       	ldi	r24, 0x3C	; 60
				}
				/*--------[ Initialize The UART Hardware ]--------*/
				UART_Init(&a_BCM_UART);
				
				errorStatus = BCM_ERROR + E_OK;
				break;
 55e:	03 c0       	rjmp	.+6      	; 0x566 <BCM_Init+0xb2>
	}
	/*-------------[ In Case Of BCM's Null Pointer ]-------------*/
	else
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
 560:	8d e3       	ldi	r24, 0x3D	; 61
 562:	01 c0       	rjmp	.+2      	; 0x566 <BCM_Init+0xb2>
				errorStatus = BCM_ERROR + E_OK;
				break;	
			}
			default:
				errorStatus = BCM_ERROR + INVALID_IN;
				return errorStatus;
 564:	80 e4       	ldi	r24, 0x40	; 64
	{
		errorStatus = NULL_PTR + BCM_ERROR;
		return errorStatus;
	}
	return errorStatus;
}
 566:	2b 96       	adiw	r28, 0x0b	; 11
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	f8 94       	cli
 56c:	de bf       	out	0x3e, r29	; 62
 56e:	0f be       	out	0x3f, r0	; 63
 570:	cd bf       	out	0x3d, r28	; 61
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <__udivmodsi4>:
 578:	a1 e2       	ldi	r26, 0x21	; 33
 57a:	1a 2e       	mov	r1, r26
 57c:	aa 1b       	sub	r26, r26
 57e:	bb 1b       	sub	r27, r27
 580:	fd 01       	movw	r30, r26
 582:	0d c0       	rjmp	.+26     	; 0x59e <__udivmodsi4_ep>

00000584 <__udivmodsi4_loop>:
 584:	aa 1f       	adc	r26, r26
 586:	bb 1f       	adc	r27, r27
 588:	ee 1f       	adc	r30, r30
 58a:	ff 1f       	adc	r31, r31
 58c:	a2 17       	cp	r26, r18
 58e:	b3 07       	cpc	r27, r19
 590:	e4 07       	cpc	r30, r20
 592:	f5 07       	cpc	r31, r21
 594:	20 f0       	brcs	.+8      	; 0x59e <__udivmodsi4_ep>
 596:	a2 1b       	sub	r26, r18
 598:	b3 0b       	sbc	r27, r19
 59a:	e4 0b       	sbc	r30, r20
 59c:	f5 0b       	sbc	r31, r21

0000059e <__udivmodsi4_ep>:
 59e:	66 1f       	adc	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	88 1f       	adc	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	1a 94       	dec	r1
 5a8:	69 f7       	brne	.-38     	; 0x584 <__udivmodsi4_loop>
 5aa:	60 95       	com	r22
 5ac:	70 95       	com	r23
 5ae:	80 95       	com	r24
 5b0:	90 95       	com	r25
 5b2:	9b 01       	movw	r18, r22
 5b4:	ac 01       	movw	r20, r24
 5b6:	bd 01       	movw	r22, r26
 5b8:	cf 01       	movw	r24, r30
 5ba:	08 95       	ret

000005bc <_exit>:
 5bc:	f8 94       	cli

000005be <__stop_program>:
 5be:	ff cf       	rjmp	.-2      	; 0x5be <__stop_program>
